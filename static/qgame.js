var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name);
  };
  goog.implicitNamespaces_ = {};
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
if (!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.subs = function(str, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement);
  }
  return str;
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    this.stack = (new Error).stack || "";
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return(value);
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if (arr.reduce) {
    if (opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduce(f, val);
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if (arr.reduceRight) {
    if (opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduceRight(f, val);
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn);
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2156";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__5051__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__5051 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__5051__delegate.call(this, args);
    };
    G__5051.cljs$lang$maxFixedArity = 0;
    G__5051.cljs$lang$applyTo = function(arglist__5052) {
      var args = cljs.core.seq(arglist__5052);
      return G__5051__delegate(args);
    };
    G__5051.cljs$core$IFn$_invoke$arity$variadic = G__5051__delegate;
    return G__5051;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3418__auto__ = ty;
    if (cljs.core.truth_(and__3418__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3418__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4278__auto___5053 = len;
  var i_5054 = 0;
  while (true) {
    if (i_5054 < n__4278__auto___5053) {
      new_arr[i_5054] = arr[i_5054];
      var G__5055 = i_5054 + 1;
      i_5054 = G__5055;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__5056__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__5056 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5056__delegate.call(this, array, i, idxs);
    };
    G__5056.cljs$lang$maxFixedArity = 2;
    G__5056.cljs$lang$applyTo = function(arglist__5057) {
      var array = cljs.core.first(arglist__5057);
      arglist__5057 = cljs.core.next(arglist__5057);
      var i = cljs.core.first(arglist__5057);
      var idxs = cljs.core.rest(arglist__5057);
      return G__5056__delegate(array, i, idxs);
    };
    G__5056.cljs$core$IFn$_invoke$arity$variadic = G__5056__delegate;
    return G__5056;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__5058__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__5058 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__5058__delegate.call(this, array, idx, idx2, idxv);
    };
    G__5058.cljs$lang$maxFixedArity = 3;
    G__5058.cljs$lang$applyTo = function(arglist__5059) {
      var array = cljs.core.first(arglist__5059);
      arglist__5059 = cljs.core.next(arglist__5059);
      var idx = cljs.core.first(arglist__5059);
      arglist__5059 = cljs.core.next(arglist__5059);
      var idx2 = cljs.core.first(arglist__5059);
      var idxv = cljs.core.rest(arglist__5059);
      return G__5058__delegate(array, idx, idx2, idxv);
    };
    G__5058.cljs$core$IFn$_invoke$arity$variadic = G__5058__delegate;
    return G__5058;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj5061 = {};
  return obj5061;
}();
cljs.core.IFn = function() {
  var obj5063 = {};
  return obj5063;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = cljs.core._invoke[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._invoke["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj5065 = {};
  return obj5065;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3418__auto__ = value;
    if (and__3418__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4057__auto__ = value == null ? null : value;
    return function() {
      var or__3430__auto__ = cljs.core._clone[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._clone["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj5067 = {};
  return obj5067;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._count[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._count["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj5069 = {};
  return obj5069;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._empty[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._empty["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj5071 = {};
  return obj5071;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._conj[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._conj["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj5073 = {};
  return obj5073;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3418__auto__ = coll;
      if (and__3418__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4057__auto__ = coll == null ? null : coll;
      return function() {
        var or__3430__auto__ = cljs.core._nth[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._nth["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3418__auto__ = coll;
      if (and__3418__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4057__auto__ = coll == null ? null : coll;
      return function() {
        var or__3430__auto__ = cljs.core._nth[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._nth["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj5075 = {};
  return obj5075;
}();
cljs.core.ISeq = function() {
  var obj5077 = {};
  return obj5077;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._first[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._first["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._rest[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._rest["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj5079 = {};
  return obj5079;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._next[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._next["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj5081 = {};
  return obj5081;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3418__auto__ = o;
      if (and__3418__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4057__auto__ = o == null ? null : o;
      return function() {
        var or__3430__auto__ = cljs.core._lookup[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._lookup["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3418__auto__ = o;
      if (and__3418__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4057__auto__ = o == null ? null : o;
      return function() {
        var or__3430__auto__ = cljs.core._lookup[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._lookup["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj5083 = {};
  return obj5083;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._assoc[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._assoc["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj5085 = {};
  return obj5085;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._dissoc[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._dissoc["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj5087 = {};
  return obj5087;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._key[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._key["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._val[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._val["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj5089 = {};
  return obj5089;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._disjoin[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._disjoin["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj5091 = {};
  return obj5091;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._peek[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._peek["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._pop[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._pop["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj5093 = {};
  return obj5093;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._assoc_n[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj5095 = {};
  return obj5095;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3418__auto__ = o;
    if (and__3418__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4057__auto__ = o == null ? null : o;
    return function() {
      var or__3430__auto__ = cljs.core._deref[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._deref["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj5097 = {};
  return obj5097;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3418__auto__ = o;
    if (and__3418__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4057__auto__ = o == null ? null : o;
    return function() {
      var or__3430__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj5099 = {};
  return obj5099;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3418__auto__ = o;
    if (and__3418__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4057__auto__ = o == null ? null : o;
    return function() {
      var or__3430__auto__ = cljs.core._meta[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._meta["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj5101 = {};
  return obj5101;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3418__auto__ = o;
    if (and__3418__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4057__auto__ = o == null ? null : o;
    return function() {
      var or__3430__auto__ = cljs.core._with_meta[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._with_meta["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj5103 = {};
  return obj5103;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3418__auto__ = coll;
      if (and__3418__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4057__auto__ = coll == null ? null : coll;
      return function() {
        var or__3430__auto__ = cljs.core._reduce[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._reduce["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3418__auto__ = coll;
      if (and__3418__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4057__auto__ = coll == null ? null : coll;
      return function() {
        var or__3430__auto__ = cljs.core._reduce[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = cljs.core._reduce["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj5105 = {};
  return obj5105;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj5107 = {};
  return obj5107;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3418__auto__ = o;
    if (and__3418__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4057__auto__ = o == null ? null : o;
    return function() {
      var or__3430__auto__ = cljs.core._equiv[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._equiv["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj5109 = {};
  return obj5109;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3418__auto__ = o;
    if (and__3418__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4057__auto__ = o == null ? null : o;
    return function() {
      var or__3430__auto__ = cljs.core._hash[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._hash["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj5111 = {};
  return obj5111;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3418__auto__ = o;
    if (and__3418__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4057__auto__ = o == null ? null : o;
    return function() {
      var or__3430__auto__ = cljs.core._seq[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._seq["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj5113 = {};
  return obj5113;
}();
cljs.core.IList = function() {
  var obj5115 = {};
  return obj5115;
}();
cljs.core.IRecord = function() {
  var obj5117 = {};
  return obj5117;
}();
cljs.core.IReversible = function() {
  var obj5119 = {};
  return obj5119;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._rseq[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._rseq["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj5121 = {};
  return obj5121;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._entry_key[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._entry_key["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._comparator[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._comparator["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj5123 = {};
  return obj5123;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3418__auto__ = writer;
    if (and__3418__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4057__auto__ = writer == null ? null : writer;
    return function() {
      var or__3430__auto__ = cljs.core._write[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._write["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3418__auto__ = writer;
    if (and__3418__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4057__auto__ = writer == null ? null : writer;
    return function() {
      var or__3430__auto__ = cljs.core._flush[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._flush["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj5125 = {};
  return obj5125;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3418__auto__ = o;
    if (and__3418__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4057__auto__ = o == null ? null : o;
    return function() {
      var or__3430__auto__ = cljs.core._pr_writer[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj5127 = {};
  return obj5127;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3418__auto__ = d;
    if (and__3418__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4057__auto__ = d == null ? null : d;
    return function() {
      var or__3430__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj5129 = {};
  return obj5129;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3418__auto__ = this$;
    if (and__3418__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4057__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3430__auto__ = cljs.core._notify_watches[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3418__auto__ = this$;
    if (and__3418__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4057__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3430__auto__ = cljs.core._add_watch[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._add_watch["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3418__auto__ = this$;
    if (and__3418__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4057__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3430__auto__ = cljs.core._remove_watch[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj5131 = {};
  return obj5131;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._as_transient[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._as_transient["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj5133 = {};
  return obj5133;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3418__auto__ = tcoll;
    if (and__3418__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4057__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3430__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3418__auto__ = tcoll;
    if (and__3418__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4057__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3430__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj5135 = {};
  return obj5135;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3418__auto__ = tcoll;
    if (and__3418__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4057__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3430__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj5137 = {};
  return obj5137;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3418__auto__ = tcoll;
    if (and__3418__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4057__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3430__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj5139 = {};
  return obj5139;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3418__auto__ = tcoll;
    if (and__3418__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4057__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3430__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3418__auto__ = tcoll;
    if (and__3418__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4057__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3430__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj5141 = {};
  return obj5141;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3418__auto__ = tcoll;
    if (and__3418__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4057__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3430__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj5143 = {};
  return obj5143;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3418__auto__ = x;
    if (and__3418__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4057__auto__ = x == null ? null : x;
    return function() {
      var or__3430__auto__ = cljs.core._compare[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._compare["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj5145 = {};
  return obj5145;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._drop_first[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._drop_first["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj5147 = {};
  return obj5147;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._chunked_first[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj5149 = {};
  return obj5149;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3418__auto__ = coll;
    if (and__3418__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4057__auto__ = coll == null ? null : coll;
    return function() {
      var or__3430__auto__ = cljs.core._chunked_next[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj5151 = {};
  return obj5151;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3418__auto__ = x;
    if (and__3418__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4057__auto__ = x == null ? null : x;
    return function() {
      var or__3430__auto__ = cljs.core._name[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._name["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3418__auto__ = x;
    if (and__3418__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4057__auto__ = x == null ? null : x;
    return function() {
      var or__3430__auto__ = cljs.core._namespace[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._namespace["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3418__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3418__auto__) {
        return b.ns;
      } else {
        return and__3418__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3841__auto__ = self__._hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__5153 = null;
  var G__5153__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__5153__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__5153 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5153__2.call(this, self__, coll);
      case 3:
        return G__5153__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5153;
}();
cljs.core.Symbol.prototype.apply = function(self__, args5152) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args5152)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__5155 = value;
  if (G__5155) {
    var bit__4080__auto__ = G__5155.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4080__auto__ || G__5155.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__5155.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__5155);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__5155);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__5157 = coll;
      if (G__5157) {
        var bit__4073__auto__ = G__5157.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4073__auto__ || G__5157.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__5159 = coll;
      if (G__5159) {
        var bit__4073__auto__ = G__5159.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4073__auto__ || G__5159.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__5161 = coll;
      if (G__5161) {
        var bit__4073__auto__ = G__5161.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4073__auto__ || G__5161.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__5163 = coll;
      if (G__5163) {
        var bit__4073__auto__ = G__5163.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4073__auto__ || G__5163.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__5164__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__5165 = y;
            var G__5166 = cljs.core.first.call(null, more);
            var G__5167 = cljs.core.next.call(null, more);
            x = G__5165;
            y = G__5166;
            more = G__5167;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__5164 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5164__delegate.call(this, x, y, more);
    };
    G__5164.cljs$lang$maxFixedArity = 2;
    G__5164.cljs$lang$applyTo = function(arglist__5168) {
      var x = cljs.core.first(arglist__5168);
      arglist__5168 = cljs.core.next(arglist__5168);
      var y = cljs.core.first(arglist__5168);
      var more = cljs.core.rest(arglist__5168);
      return G__5164__delegate(x, y, more);
    };
    G__5164.cljs$core$IFn$_invoke$arity$variadic = G__5164__delegate;
    return G__5164;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__5169 = nval;
            var G__5170 = n + 1;
            val = G__5169;
            n = G__5170;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__5171 = nval;
          var G__5172 = n + 1;
          val__$1 = G__5171;
          n = G__5172;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__5173 = nval;
          var G__5174 = n + 1;
          val__$1 = G__5173;
          n = G__5174;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__5175 = nval;
            var G__5176 = n + 1;
            val = G__5175;
            n = G__5176;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__5177 = nval;
          var G__5178 = n + 1;
          val__$1 = G__5177;
          n = G__5178;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__5179 = nval;
          var G__5180 = n + 1;
          val__$1 = G__5179;
          n = G__5180;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__5182 = x;
  if (G__5182) {
    var bit__4080__auto__ = G__5182.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4080__auto__ || G__5182.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__5182.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__5182);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__5182);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__5184 = x;
  if (G__5184) {
    var bit__4080__auto__ = G__5184.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4080__auto__ || G__5184.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__5184.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__5184);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__5184);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__5185 = sn;
      s = G__5185;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__5186__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__5187 = conj.call(null, coll, x);
          var G__5188 = cljs.core.first.call(null, xs);
          var G__5189 = cljs.core.next.call(null, xs);
          coll = G__5187;
          x = G__5188;
          xs = G__5189;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__5186 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5186__delegate.call(this, coll, x, xs);
    };
    G__5186.cljs$lang$maxFixedArity = 2;
    G__5186.cljs$lang$applyTo = function(arglist__5190) {
      var coll = cljs.core.first(arglist__5190);
      arglist__5190 = cljs.core.next(arglist__5190);
      var x = cljs.core.first(arglist__5190);
      var xs = cljs.core.rest(arglist__5190);
      return G__5186__delegate(coll, x, xs);
    };
    G__5186.cljs$core$IFn$_invoke$arity$variadic = G__5186__delegate;
    return G__5186;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__5191 = cljs.core.next.call(null, s);
      var G__5192 = acc + 1;
      s = G__5191;
      acc = G__5192;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__5194 = coll;
      if (G__5194) {
        var bit__4073__auto__ = G__5194.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4073__auto__ || G__5194.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__5195 = cljs.core.next.call(null, coll);
              var G__5196 = n - 1;
              coll = G__5195;
              n = G__5196;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__5197 = cljs.core.next.call(null, coll);
              var G__5198 = n - 1;
              var G__5199 = not_found;
              coll = G__5197;
              n = G__5198;
              not_found = G__5199;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (coll == null) {
      return null;
    } else {
      if (function() {
        var G__5204 = coll;
        if (G__5204) {
          var bit__4073__auto__ = G__5204.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4073__auto__ || G__5204.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__5205 = coll;
                  if (G__5205) {
                    var bit__4080__auto__ = G__5205.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4080__auto__ || G__5205.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__5205.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__5205);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__5205);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(coll == null)) {
      if (function() {
        var G__5206 = coll;
        if (G__5206) {
          var bit__4073__auto__ = G__5206.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4073__auto__ || G__5206.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__5207 = coll;
                  if (G__5207) {
                    var bit__4080__auto__ = G__5207.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4080__auto__ || G__5207.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__5207.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__5207);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__5207);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__5210 = o;
        if (G__5210) {
          var bit__4073__auto__ = G__5210.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4073__auto__ || G__5210.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__5211 = o;
        if (G__5211) {
          var bit__4073__auto__ = G__5211.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4073__auto__ || G__5211.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__5212__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__5213 = ret;
          var G__5214 = cljs.core.first.call(null, kvs);
          var G__5215 = cljs.core.second.call(null, kvs);
          var G__5216 = cljs.core.nnext.call(null, kvs);
          coll = G__5213;
          k = G__5214;
          v = G__5215;
          kvs = G__5216;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__5212 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__5212__delegate.call(this, coll, k, v, kvs);
    };
    G__5212.cljs$lang$maxFixedArity = 3;
    G__5212.cljs$lang$applyTo = function(arglist__5217) {
      var coll = cljs.core.first(arglist__5217);
      arglist__5217 = cljs.core.next(arglist__5217);
      var k = cljs.core.first(arglist__5217);
      arglist__5217 = cljs.core.next(arglist__5217);
      var v = cljs.core.first(arglist__5217);
      var kvs = cljs.core.rest(arglist__5217);
      return G__5212__delegate(coll, k, v, kvs);
    };
    G__5212.cljs$core$IFn$_invoke$arity$variadic = G__5212__delegate;
    return G__5212;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__5218__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__5219 = ret;
            var G__5220 = cljs.core.first.call(null, ks);
            var G__5221 = cljs.core.next.call(null, ks);
            coll = G__5219;
            k = G__5220;
            ks = G__5221;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__5218 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5218__delegate.call(this, coll, k, ks);
    };
    G__5218.cljs$lang$maxFixedArity = 2;
    G__5218.cljs$lang$applyTo = function(arglist__5222) {
      var coll = cljs.core.first(arglist__5222);
      arglist__5222 = cljs.core.next(arglist__5222);
      var k = cljs.core.first(arglist__5222);
      var ks = cljs.core.rest(arglist__5222);
      return G__5218__delegate(coll, k, ks);
    };
    G__5218.cljs$core$IFn$_invoke$arity$variadic = G__5218__delegate;
    return G__5218;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3430__auto__ = goog.isFunction(f);
  if (or__3430__auto__) {
    return or__3430__auto__;
  } else {
    var G__5226 = f;
    if (G__5226) {
      var bit__4080__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3430__auto____$1 = bit__4080__auto__;
        if (cljs.core.truth_(or__3430__auto____$1)) {
          return or__3430__auto____$1;
        } else {
          return G__5226.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__5226.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__5226);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__5226);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__5234 = o;
    if (G__5234) {
      var bit__4080__auto__ = G__5234.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4080__auto__ || G__5234.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__5234.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__5234);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__5234);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t5235 !== "undefined") {
      } else {
        cljs.core.t5235 = function(meta, o, with_meta, meta5236) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta5236 = meta5236;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t5235.cljs$lang$type = true;
        cljs.core.t5235.cljs$lang$ctorStr = "cljs.core/t5235";
        cljs.core.t5235.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
          return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/t5235");
        };
        cljs.core.t5235.prototype.call = function() {
          var G__5239__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__5239 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__5239__delegate.call(this, self__, args);
          };
          G__5239.cljs$lang$maxFixedArity = 1;
          G__5239.cljs$lang$applyTo = function(arglist__5240) {
            var self__ = cljs.core.first(arglist__5240);
            var args = cljs.core.rest(arglist__5240);
            return G__5239__delegate(self__, args);
          };
          G__5239.cljs$core$IFn$_invoke$arity$variadic = G__5239__delegate;
          return G__5239;
        }();
        cljs.core.t5235.prototype.apply = function(self__, args5238) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args5238)));
        };
        cljs.core.t5235.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__5241__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__5241 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__5241__delegate.call(this, args);
          };
          G__5241.cljs$lang$maxFixedArity = 0;
          G__5241.cljs$lang$applyTo = function(arglist__5242) {
            var args = cljs.core.seq(arglist__5242);
            return G__5241__delegate(args);
          };
          G__5241.cljs$core$IFn$_invoke$arity$variadic = G__5241__delegate;
          return G__5241;
        }();
        cljs.core.t5235.prototype.cljs$core$Fn$ = true;
        cljs.core.t5235.prototype.cljs$core$IMeta$_meta$arity$1 = function(_5237) {
          var self__ = this;
          var _5237__$1 = this;
          return self__.meta5236;
        };
        cljs.core.t5235.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_5237, meta5236__$1) {
          var self__ = this;
          var _5237__$1 = this;
          return new cljs.core.t5235(self__.meta, self__.o, self__.with_meta, meta5236__$1);
        };
        cljs.core.__GT_t5235 = function __GT_t5235(meta__$1, o__$1, with_meta__$1, meta5236) {
          return new cljs.core.t5235(meta__$1, o__$1, with_meta__$1, meta5236);
        };
      }
      return new cljs.core.t5235(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3418__auto__ = !(o == null);
    if (and__3418__auto__) {
      var G__5246 = o;
      if (G__5246) {
        var bit__4080__auto__ = G__5246.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4080__auto__ || G__5246.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__5246.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__5246);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__5246);
      }
    } else {
      return and__3418__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__5247__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__5248 = ret;
            var G__5249 = cljs.core.first.call(null, ks);
            var G__5250 = cljs.core.next.call(null, ks);
            coll = G__5248;
            k = G__5249;
            ks = G__5250;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__5247 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5247__delegate.call(this, coll, k, ks);
    };
    G__5247.cljs$lang$maxFixedArity = 2;
    G__5247.cljs$lang$applyTo = function(arglist__5251) {
      var coll = cljs.core.first(arglist__5251);
      arglist__5251 = cljs.core.next(arglist__5251);
      var k = cljs.core.first(arglist__5251);
      var ks = cljs.core.rest(arglist__5251);
      return G__5247__delegate(coll, k, ks);
    };
    G__5247.cljs$core$IFn$_invoke$arity$variadic = G__5247__delegate;
    return G__5247;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj5253 = {};
  return obj5253;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj5257 = {};
      return obj5257;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__5259 = o;
    if (G__5259) {
      var bit__4073__auto__ = G__5259.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4073__auto__ || G__5259.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__5261 = x;
    if (G__5261) {
      var bit__4080__auto__ = G__5261.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4080__auto__ || G__5261.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__5261.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__5261);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__5261);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__5263 = x;
    if (G__5263) {
      var bit__4080__auto__ = G__5263.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4080__auto__ || G__5263.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__5263.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__5263);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__5263);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__5265 = x;
  if (G__5265) {
    var bit__4080__auto__ = G__5265.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4080__auto__ || G__5265.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__5265.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__5265);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__5265);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__5267 = x;
  if (G__5267) {
    var bit__4080__auto__ = G__5267.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4080__auto__ || G__5267.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__5267.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__5267);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__5267);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__5269 = x;
  if (G__5269) {
    var bit__4080__auto__ = G__5269.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4080__auto__ || G__5269.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__5269.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__5269);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__5269);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__5271 = x;
  if (G__5271) {
    var bit__4080__auto__ = G__5271.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4080__auto__ || G__5271.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__5271.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__5271);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__5271);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__5273 = x;
    if (G__5273) {
      var bit__4080__auto__ = G__5273.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4080__auto__ || G__5273.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__5273.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__5273);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__5273);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__5275 = x;
  if (G__5275) {
    var bit__4080__auto__ = G__5275.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4080__auto__ || G__5275.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__5275.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__5275);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__5275);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__5277 = x;
  if (G__5277) {
    var bit__4073__auto__ = G__5277.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4073__auto__ || G__5277.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj5281 = {};
    return obj5281;
  };
  var js_obj__1 = function() {
    var G__5282__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__5282 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__5282__delegate.call(this, keyvals);
    };
    G__5282.cljs$lang$maxFixedArity = 0;
    G__5282.cljs$lang$applyTo = function(arglist__5283) {
      var keyvals = cljs.core.seq(arglist__5283);
      return G__5282__delegate(keyvals);
    };
    G__5282.cljs$core$IFn$_invoke$arity$variadic = G__5282__delegate;
    return G__5282;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key);
  });
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__5284 = i__$1 + 1;
      var G__5285 = j__$1 + 1;
      var G__5286 = len__$1 - 1;
      i__$1 = G__5284;
      j__$1 = G__5285;
      len__$1 = G__5286;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__5287 = i__$1 - 1;
      var G__5288 = j__$1 - 1;
      var G__5289 = len__$1 - 1;
      i__$1 = G__5287;
      j__$1 = G__5288;
      len__$1 = G__5289;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj5291 = {};
  return obj5291;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__5293 = s;
    if (G__5293) {
      var bit__4080__auto__ = G__5293.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4080__auto__ || G__5293.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__5293.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__5293);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__5293);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__5295 = s;
  if (G__5295) {
    var bit__4080__auto__ = G__5295.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4080__auto__ || G__5295.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__5295.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__5295);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__5295);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3430__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3430__auto__) {
    return or__3430__auto__;
  } else {
    var G__5299 = f;
    if (G__5299) {
      var bit__4080__auto__ = G__5299.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4080__auto__ || G__5299.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__5299.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__5299);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__5299);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__5300__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__5301 = cljs.core.conj.call(null, s, x__$1);
              var G__5302 = etc;
              s = G__5301;
              xs = G__5302;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__5300 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5300__delegate.call(this, x, y, more);
    };
    G__5300.cljs$lang$maxFixedArity = 2;
    G__5300.cljs$lang$applyTo = function(arglist__5303) {
      var x = cljs.core.first(arglist__5303);
      arglist__5303 = cljs.core.next(arglist__5303);
      var y = cljs.core.first(arglist__5303);
      var more = cljs.core.rest(arglist__5303);
      return G__5300__delegate(x, y, more);
    };
    G__5300.cljs$core$IFn$_invoke$arity$variadic = G__5300__delegate;
    return G__5300;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3430__auto__ = cljs.core.seq.call(null, coll);
    if (or__3430__auto__) {
      return or__3430__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__5305 = x;
            if (G__5305) {
              var bit__4073__auto__ = G__5305.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4073__auto__ || G__5305.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__5306 = xs;
        var G__5307 = ys;
        var G__5308 = len;
        var G__5309 = n + 1;
        xs = G__5306;
        ys = G__5307;
        len = G__5308;
        n = G__5309;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__5310 = nval;
          var G__5311 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__5310;
          coll__$1 = G__5311;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__5314 = coll;
      if (G__5314) {
        var bit__4073__auto__ = G__5314.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4073__auto__ || G__5314.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__5315 = coll;
      if (G__5315) {
        var bit__4073__auto__ = G__5315.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4073__auto__ || G__5315.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__5316__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__5316 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5316__delegate.call(this, x, y, more);
    };
    G__5316.cljs$lang$maxFixedArity = 2;
    G__5316.cljs$lang$applyTo = function(arglist__5317) {
      var x = cljs.core.first(arglist__5317);
      arglist__5317 = cljs.core.next(arglist__5317);
      var y = cljs.core.first(arglist__5317);
      var more = cljs.core.rest(arglist__5317);
      return G__5316__delegate(x, y, more);
    };
    G__5316.cljs$core$IFn$_invoke$arity$variadic = G__5316__delegate;
    return G__5316;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__5318__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__5318 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5318__delegate.call(this, x, y, more);
    };
    G__5318.cljs$lang$maxFixedArity = 2;
    G__5318.cljs$lang$applyTo = function(arglist__5319) {
      var x = cljs.core.first(arglist__5319);
      arglist__5319 = cljs.core.next(arglist__5319);
      var y = cljs.core.first(arglist__5319);
      var more = cljs.core.rest(arglist__5319);
      return G__5318__delegate(x, y, more);
    };
    G__5318.cljs$core$IFn$_invoke$arity$variadic = G__5318__delegate;
    return G__5318;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__5320__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__5320 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5320__delegate.call(this, x, y, more);
    };
    G__5320.cljs$lang$maxFixedArity = 2;
    G__5320.cljs$lang$applyTo = function(arglist__5321) {
      var x = cljs.core.first(arglist__5321);
      arglist__5321 = cljs.core.next(arglist__5321);
      var y = cljs.core.first(arglist__5321);
      var more = cljs.core.rest(arglist__5321);
      return G__5320__delegate(x, y, more);
    };
    G__5320.cljs$core$IFn$_invoke$arity$variadic = G__5320__delegate;
    return G__5320;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__5322__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__5322 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5322__delegate.call(this, x, y, more);
    };
    G__5322.cljs$lang$maxFixedArity = 2;
    G__5322.cljs$lang$applyTo = function(arglist__5323) {
      var x = cljs.core.first(arglist__5323);
      arglist__5323 = cljs.core.next(arglist__5323);
      var y = cljs.core.first(arglist__5323);
      var more = cljs.core.rest(arglist__5323);
      return G__5322__delegate(x, y, more);
    };
    G__5322.cljs$core$IFn$_invoke$arity$variadic = G__5322__delegate;
    return G__5322;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__5324__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__5325 = y;
            var G__5326 = cljs.core.first.call(null, more);
            var G__5327 = cljs.core.next.call(null, more);
            x = G__5325;
            y = G__5326;
            more = G__5327;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__5324 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5324__delegate.call(this, x, y, more);
    };
    G__5324.cljs$lang$maxFixedArity = 2;
    G__5324.cljs$lang$applyTo = function(arglist__5328) {
      var x = cljs.core.first(arglist__5328);
      arglist__5328 = cljs.core.next(arglist__5328);
      var y = cljs.core.first(arglist__5328);
      var more = cljs.core.rest(arglist__5328);
      return G__5324__delegate(x, y, more);
    };
    G__5324.cljs$core$IFn$_invoke$arity$variadic = G__5324__delegate;
    return G__5324;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__5329__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__5330 = y;
            var G__5331 = cljs.core.first.call(null, more);
            var G__5332 = cljs.core.next.call(null, more);
            x = G__5330;
            y = G__5331;
            more = G__5332;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__5329 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5329__delegate.call(this, x, y, more);
    };
    G__5329.cljs$lang$maxFixedArity = 2;
    G__5329.cljs$lang$applyTo = function(arglist__5333) {
      var x = cljs.core.first(arglist__5333);
      arglist__5333 = cljs.core.next(arglist__5333);
      var y = cljs.core.first(arglist__5333);
      var more = cljs.core.rest(arglist__5333);
      return G__5329__delegate(x, y, more);
    };
    G__5329.cljs$core$IFn$_invoke$arity$variadic = G__5329__delegate;
    return G__5329;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__5334__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__5335 = y;
            var G__5336 = cljs.core.first.call(null, more);
            var G__5337 = cljs.core.next.call(null, more);
            x = G__5335;
            y = G__5336;
            more = G__5337;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__5334 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5334__delegate.call(this, x, y, more);
    };
    G__5334.cljs$lang$maxFixedArity = 2;
    G__5334.cljs$lang$applyTo = function(arglist__5338) {
      var x = cljs.core.first(arglist__5338);
      arglist__5338 = cljs.core.next(arglist__5338);
      var y = cljs.core.first(arglist__5338);
      var more = cljs.core.rest(arglist__5338);
      return G__5334__delegate(x, y, more);
    };
    G__5334.cljs$core$IFn$_invoke$arity$variadic = G__5334__delegate;
    return G__5334;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__5339__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__5340 = y;
            var G__5341 = cljs.core.first.call(null, more);
            var G__5342 = cljs.core.next.call(null, more);
            x = G__5340;
            y = G__5341;
            more = G__5342;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__5339 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5339__delegate.call(this, x, y, more);
    };
    G__5339.cljs$lang$maxFixedArity = 2;
    G__5339.cljs$lang$applyTo = function(arglist__5343) {
      var x = cljs.core.first(arglist__5343);
      arglist__5343 = cljs.core.next(arglist__5343);
      var y = cljs.core.first(arglist__5343);
      var more = cljs.core.rest(arglist__5343);
      return G__5339__delegate(x, y, more);
    };
    G__5339.cljs$core$IFn$_invoke$arity$variadic = G__5339__delegate;
    return G__5339;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3737__auto__ = x;
    var y__3738__auto__ = y;
    return x__3737__auto__ > y__3738__auto__ ? x__3737__auto__ : y__3738__auto__;
  };
  var max__3 = function() {
    var G__5344__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3737__auto__ = x;
        var y__3738__auto__ = y;
        return x__3737__auto__ > y__3738__auto__ ? x__3737__auto__ : y__3738__auto__;
      }(), more);
    };
    var G__5344 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5344__delegate.call(this, x, y, more);
    };
    G__5344.cljs$lang$maxFixedArity = 2;
    G__5344.cljs$lang$applyTo = function(arglist__5345) {
      var x = cljs.core.first(arglist__5345);
      arglist__5345 = cljs.core.next(arglist__5345);
      var y = cljs.core.first(arglist__5345);
      var more = cljs.core.rest(arglist__5345);
      return G__5344__delegate(x, y, more);
    };
    G__5344.cljs$core$IFn$_invoke$arity$variadic = G__5344__delegate;
    return G__5344;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3744__auto__ = x;
    var y__3745__auto__ = y;
    return x__3744__auto__ < y__3745__auto__ ? x__3744__auto__ : y__3745__auto__;
  };
  var min__3 = function() {
    var G__5346__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3744__auto__ = x;
        var y__3745__auto__ = y;
        return x__3744__auto__ < y__3745__auto__ ? x__3744__auto__ : y__3745__auto__;
      }(), more);
    };
    var G__5346 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5346__delegate.call(this, x, y, more);
    };
    G__5346.cljs$lang$maxFixedArity = 2;
    G__5346.cljs$lang$applyTo = function(arglist__5347) {
      var x = cljs.core.first(arglist__5347);
      arglist__5347 = cljs.core.next(arglist__5347);
      var y = cljs.core.first(arglist__5347);
      var more = cljs.core.rest(arglist__5347);
      return G__5346__delegate(x, y, more);
    };
    G__5346.cljs$core$IFn$_invoke$arity$variadic = G__5346__delegate;
    return G__5346;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__5348__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__5348 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5348__delegate.call(this, x, y, more);
    };
    G__5348.cljs$lang$maxFixedArity = 2;
    G__5348.cljs$lang$applyTo = function(arglist__5349) {
      var x = cljs.core.first(arglist__5349);
      arglist__5349 = cljs.core.next(arglist__5349);
      var y = cljs.core.first(arglist__5349);
      var more = cljs.core.rest(arglist__5349);
      return G__5348__delegate(x, y, more);
    };
    G__5348.cljs$core$IFn$_invoke$arity$variadic = G__5348__delegate;
    return G__5348;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__5350__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__5350 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5350__delegate.call(this, x, y, more);
    };
    G__5350.cljs$lang$maxFixedArity = 2;
    G__5350.cljs$lang$applyTo = function(arglist__5351) {
      var x = cljs.core.first(arglist__5351);
      arglist__5351 = cljs.core.next(arglist__5351);
      var y = cljs.core.first(arglist__5351);
      var more = cljs.core.rest(arglist__5351);
      return G__5350__delegate(x, y, more);
    };
    G__5350.cljs$core$IFn$_invoke$arity$variadic = G__5350__delegate;
    return G__5350;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__5352__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__5352 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5352__delegate.call(this, x, y, more);
    };
    G__5352.cljs$lang$maxFixedArity = 2;
    G__5352.cljs$lang$applyTo = function(arglist__5353) {
      var x = cljs.core.first(arglist__5353);
      arglist__5353 = cljs.core.next(arglist__5353);
      var y = cljs.core.first(arglist__5353);
      var more = cljs.core.rest(arglist__5353);
      return G__5352__delegate(x, y, more);
    };
    G__5352.cljs$core$IFn$_invoke$arity$variadic = G__5352__delegate;
    return G__5352;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__5354__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__5354 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5354__delegate.call(this, x, y, more);
    };
    G__5354.cljs$lang$maxFixedArity = 2;
    G__5354.cljs$lang$applyTo = function(arglist__5355) {
      var x = cljs.core.first(arglist__5355);
      arglist__5355 = cljs.core.next(arglist__5355);
      var y = cljs.core.first(arglist__5355);
      var more = cljs.core.rest(arglist__5355);
      return G__5354__delegate(x, y, more);
    };
    G__5354.cljs$core$IFn$_invoke$arity$variadic = G__5354__delegate;
    return G__5354;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__5356__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__5356 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5356__delegate.call(this, x, y, more);
    };
    G__5356.cljs$lang$maxFixedArity = 2;
    G__5356.cljs$lang$applyTo = function(arglist__5357) {
      var x = cljs.core.first(arglist__5357);
      arglist__5357 = cljs.core.next(arglist__5357);
      var y = cljs.core.first(arglist__5357);
      var more = cljs.core.rest(arglist__5357);
      return G__5356__delegate(x, y, more);
    };
    G__5356.cljs$core$IFn$_invoke$arity$variadic = G__5356__delegate;
    return G__5356;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__5358__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__5358 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5358__delegate.call(this, x, y, more);
    };
    G__5358.cljs$lang$maxFixedArity = 2;
    G__5358.cljs$lang$applyTo = function(arglist__5359) {
      var x = cljs.core.first(arglist__5359);
      arglist__5359 = cljs.core.next(arglist__5359);
      var y = cljs.core.first(arglist__5359);
      var more = cljs.core.rest(arglist__5359);
      return G__5358__delegate(x, y, more);
    };
    G__5358.cljs$core$IFn$_invoke$arity$variadic = G__5358__delegate;
    return G__5358;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__5360__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__5360 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5360__delegate.call(this, x, y, more);
    };
    G__5360.cljs$lang$maxFixedArity = 2;
    G__5360.cljs$lang$applyTo = function(arglist__5361) {
      var x = cljs.core.first(arglist__5361);
      arglist__5361 = cljs.core.next(arglist__5361);
      var y = cljs.core.first(arglist__5361);
      var more = cljs.core.rest(arglist__5361);
      return G__5360__delegate(x, y, more);
    };
    G__5360.cljs$core$IFn$_invoke$arity$variadic = G__5360__delegate;
    return G__5360;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__5362__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__5363 = y;
            var G__5364 = cljs.core.first.call(null, more);
            var G__5365 = cljs.core.next.call(null, more);
            x = G__5363;
            y = G__5364;
            more = G__5365;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__5362 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5362__delegate.call(this, x, y, more);
    };
    G__5362.cljs$lang$maxFixedArity = 2;
    G__5362.cljs$lang$applyTo = function(arglist__5366) {
      var x = cljs.core.first(arglist__5366);
      arglist__5366 = cljs.core.next(arglist__5366);
      var y = cljs.core.first(arglist__5366);
      var more = cljs.core.rest(arglist__5366);
      return G__5362__delegate(x, y, more);
    };
    G__5362.cljs$core$IFn$_invoke$arity$variadic = G__5362__delegate;
    return G__5362;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__5367 = n__$1 - 1;
      var G__5368 = cljs.core.next.call(null, xs);
      n__$1 = G__5367;
      xs = G__5368;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__5369__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__5370 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__5371 = cljs.core.next.call(null, more);
          sb = G__5370;
          more = G__5371;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__5369 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__5369__delegate.call(this, x, ys);
    };
    G__5369.cljs$lang$maxFixedArity = 1;
    G__5369.cljs$lang$applyTo = function(arglist__5372) {
      var x = cljs.core.first(arglist__5372);
      var ys = cljs.core.rest(arglist__5372);
      return G__5369__delegate(x, ys);
    };
    G__5369.cljs$core$IFn$_invoke$arity$variadic = G__5369__delegate;
    return G__5369;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__5373 = cljs.core.next.call(null, xs);
            var G__5374 = cljs.core.next.call(null, ys);
            xs = G__5373;
            ys = G__5374;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__5375 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__5376 = cljs.core.next.call(null, s);
        res = G__5375;
        s = G__5376;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__5377 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__5378 = cljs.core.next.call(null, s);
      h = G__5377;
      s = G__5378;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__5379 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__5380 = cljs.core.next.call(null, s__$1);
      h = G__5379;
      s__$1 = G__5380;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__5387_5393 = cljs.core.seq.call(null, fn_map);
  var chunk__5388_5394 = null;
  var count__5389_5395 = 0;
  var i__5390_5396 = 0;
  while (true) {
    if (i__5390_5396 < count__5389_5395) {
      var vec__5391_5397 = cljs.core._nth.call(null, chunk__5388_5394, i__5390_5396);
      var key_name_5398 = cljs.core.nth.call(null, vec__5391_5397, 0, null);
      var f_5399 = cljs.core.nth.call(null, vec__5391_5397, 1, null);
      var str_name_5400 = cljs.core.name.call(null, key_name_5398);
      obj[str_name_5400] = f_5399;
      var G__5401 = seq__5387_5393;
      var G__5402 = chunk__5388_5394;
      var G__5403 = count__5389_5395;
      var G__5404 = i__5390_5396 + 1;
      seq__5387_5393 = G__5401;
      chunk__5388_5394 = G__5402;
      count__5389_5395 = G__5403;
      i__5390_5396 = G__5404;
      continue;
    } else {
      var temp__4092__auto___5405 = cljs.core.seq.call(null, seq__5387_5393);
      if (temp__4092__auto___5405) {
        var seq__5387_5406__$1 = temp__4092__auto___5405;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__5387_5406__$1)) {
          var c__4178__auto___5407 = cljs.core.chunk_first.call(null, seq__5387_5406__$1);
          var G__5408 = cljs.core.chunk_rest.call(null, seq__5387_5406__$1);
          var G__5409 = c__4178__auto___5407;
          var G__5410 = cljs.core.count.call(null, c__4178__auto___5407);
          var G__5411 = 0;
          seq__5387_5393 = G__5408;
          chunk__5388_5394 = G__5409;
          count__5389_5395 = G__5410;
          i__5390_5396 = G__5411;
          continue;
        } else {
          var vec__5392_5412 = cljs.core.first.call(null, seq__5387_5406__$1);
          var key_name_5413 = cljs.core.nth.call(null, vec__5392_5412, 0, null);
          var f_5414 = cljs.core.nth.call(null, vec__5392_5412, 1, null);
          var str_name_5415 = cljs.core.name.call(null, key_name_5413);
          obj[str_name_5415] = f_5414;
          var G__5416 = cljs.core.next.call(null, seq__5387_5406__$1);
          var G__5417 = null;
          var G__5418 = 0;
          var G__5419 = 0;
          seq__5387_5393 = G__5416;
          chunk__5388_5394 = G__5417;
          count__5389_5395 = G__5418;
          i__5390_5396 = G__5419;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/List");
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__5421 = coll;
  if (G__5421) {
    var bit__4080__auto__ = G__5421.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4080__auto__ || G__5421.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__5421.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__5421);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__5421);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__5422 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__5422;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__5423 = i - 1;
        var G__5424 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__5423;
        r = G__5424;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__5425) {
    var xs = cljs.core.seq(arglist__5425);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3430__auto__ = coll == null;
    if (or__3430__auto__) {
      return or__3430__auto__;
    } else {
      var G__5429 = coll;
      if (G__5429) {
        var bit__4073__auto__ = G__5429.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4073__auto__ || G__5429.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__5431 = x;
  if (G__5431) {
    var bit__4080__auto__ = G__5431.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4080__auto__ || G__5431.cljs$core$IList$) {
      return true;
    } else {
      if (!G__5431.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__5431);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__5431);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__5433 = null;
  var G__5433__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__5433__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__5433 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5433__2.call(this, self__, coll);
      case 3:
        return G__5433__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5433;
}();
cljs.core.Keyword.prototype.apply = function(self__, args5432) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args5432)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__5435 = x;
    if (G__5435) {
      var bit__4073__auto__ = G__5435.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4073__auto__ || G__5435.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__5436 = ls.sval();
        ls = G__5436;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__5438 = s;
    if (G__5438) {
      var bit__4073__auto__ = G__5438.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4073__auto__ || G__5438.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__5439 = cljs.core.next.call(null, s__$1);
      s__$1 = G__5439;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_5440 = 0;
  var xs_5441 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_5441) {
      ret[i_5440] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_5441));
      var G__5442 = i_5440 + 1;
      var G__5443 = cljs.core.next.call(null, xs_5441);
      i_5440 = G__5442;
      xs_5441 = G__5443;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__5444 = i + 1;
          var G__5445 = cljs.core.next.call(null, s__$1);
          i = G__5444;
          s__$1 = G__5445;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4278__auto___5446 = size;
      var i_5447 = 0;
      while (true) {
        if (i_5447 < n__4278__auto___5446) {
          a[i_5447] = init_val_or_seq;
          var G__5448 = i_5447 + 1;
          i_5447 = G__5448;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__5449 = i + 1;
          var G__5450 = cljs.core.next.call(null, s__$1);
          i = G__5449;
          s__$1 = G__5450;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4278__auto___5451 = size;
      var i_5452 = 0;
      while (true) {
        if (i_5452 < n__4278__auto___5451) {
          a[i_5452] = init_val_or_seq;
          var G__5453 = i_5452 + 1;
          i_5452 = G__5453;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__5454 = i + 1;
          var G__5455 = cljs.core.next.call(null, s__$1);
          i = G__5454;
          s__$1 = G__5455;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4278__auto___5456 = size;
      var i_5457 = 0;
      while (true) {
        if (i_5457 < n__4278__auto___5456) {
          a[i_5457] = init_val_or_seq;
          var G__5458 = i_5457 + 1;
          i_5457 = G__5458;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__5459 = i + 1;
          var G__5460 = cljs.core.next.call(null, s__$1);
          i = G__5459;
          s__$1 = G__5460;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4278__auto___5461 = size;
      var i_5462 = 0;
      while (true) {
        if (i_5462 < n__4278__auto___5461) {
          a[i_5462] = init_val_or_seq;
          var G__5463 = i_5462 + 1;
          i_5462 = G__5463;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__5464 = cljs.core.next.call(null, s__$1);
        var G__5465 = i - 1;
        var G__5466 = sum + 1;
        s__$1 = G__5464;
        i = G__5465;
        sum = G__5466;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__5467__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__5467 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5467__delegate.call(this, x, y, zs);
    };
    G__5467.cljs$lang$maxFixedArity = 2;
    G__5467.cljs$lang$applyTo = function(arglist__5468) {
      var x = cljs.core.first(arglist__5468);
      arglist__5468 = cljs.core.next(arglist__5468);
      var y = cljs.core.first(arglist__5468);
      var zs = cljs.core.rest(arglist__5468);
      return G__5467__delegate(x, y, zs);
    };
    G__5467.cljs$core$IFn$_invoke$arity$variadic = G__5467__delegate;
    return G__5467;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__5469__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__5469 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__5469__delegate.call(this, a, b, c, d, more);
    };
    G__5469.cljs$lang$maxFixedArity = 4;
    G__5469.cljs$lang$applyTo = function(arglist__5470) {
      var a = cljs.core.first(arglist__5470);
      arglist__5470 = cljs.core.next(arglist__5470);
      var b = cljs.core.first(arglist__5470);
      arglist__5470 = cljs.core.next(arglist__5470);
      var c = cljs.core.first(arglist__5470);
      arglist__5470 = cljs.core.next(arglist__5470);
      var d = cljs.core.first(arglist__5470);
      var more = cljs.core.rest(arglist__5470);
      return G__5469__delegate(a, b, c, d, more);
    };
    G__5469.cljs$core$IFn$_invoke$arity$variadic = G__5469__delegate;
    return G__5469;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__5471__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__5472 = ntcoll;
          var G__5473 = cljs.core.first.call(null, vals);
          var G__5474 = cljs.core.next.call(null, vals);
          tcoll = G__5472;
          val = G__5473;
          vals = G__5474;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__5471 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5471__delegate.call(this, tcoll, val, vals);
    };
    G__5471.cljs$lang$maxFixedArity = 2;
    G__5471.cljs$lang$applyTo = function(arglist__5475) {
      var tcoll = cljs.core.first(arglist__5475);
      arglist__5475 = cljs.core.next(arglist__5475);
      var val = cljs.core.first(arglist__5475);
      var vals = cljs.core.rest(arglist__5475);
      return G__5471__delegate(tcoll, val, vals);
    };
    G__5471.cljs$core$IFn$_invoke$arity$variadic = G__5471__delegate;
    return G__5471;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__5476__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__5477 = ntcoll;
          var G__5478 = cljs.core.first.call(null, kvs);
          var G__5479 = cljs.core.second.call(null, kvs);
          var G__5480 = cljs.core.nnext.call(null, kvs);
          tcoll = G__5477;
          key = G__5478;
          val = G__5479;
          kvs = G__5480;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__5476 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__5476__delegate.call(this, tcoll, key, val, kvs);
    };
    G__5476.cljs$lang$maxFixedArity = 3;
    G__5476.cljs$lang$applyTo = function(arglist__5481) {
      var tcoll = cljs.core.first(arglist__5481);
      arglist__5481 = cljs.core.next(arglist__5481);
      var key = cljs.core.first(arglist__5481);
      arglist__5481 = cljs.core.next(arglist__5481);
      var val = cljs.core.first(arglist__5481);
      var kvs = cljs.core.rest(arglist__5481);
      return G__5476__delegate(tcoll, key, val, kvs);
    };
    G__5476.cljs$core$IFn$_invoke$arity$variadic = G__5476__delegate;
    return G__5476;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__5482__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__5483 = ntcoll;
          var G__5484 = cljs.core.first.call(null, ks);
          var G__5485 = cljs.core.next.call(null, ks);
          tcoll = G__5483;
          key = G__5484;
          ks = G__5485;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__5482 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5482__delegate.call(this, tcoll, key, ks);
    };
    G__5482.cljs$lang$maxFixedArity = 2;
    G__5482.cljs$lang$applyTo = function(arglist__5486) {
      var tcoll = cljs.core.first(arglist__5486);
      arglist__5486 = cljs.core.next(arglist__5486);
      var key = cljs.core.first(arglist__5486);
      var ks = cljs.core.rest(arglist__5486);
      return G__5482__delegate(tcoll, key, ks);
    };
    G__5482.cljs$core$IFn$_invoke$arity$variadic = G__5482__delegate;
    return G__5482;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__5487__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__5488 = ntcoll;
          var G__5489 = cljs.core.first.call(null, vals);
          var G__5490 = cljs.core.next.call(null, vals);
          tcoll = G__5488;
          val = G__5489;
          vals = G__5490;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__5487 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5487__delegate.call(this, tcoll, val, vals);
    };
    G__5487.cljs$lang$maxFixedArity = 2;
    G__5487.cljs$lang$applyTo = function(arglist__5491) {
      var tcoll = cljs.core.first(arglist__5491);
      arglist__5491 = cljs.core.next(arglist__5491);
      var val = cljs.core.first(arglist__5491);
      var vals = cljs.core.rest(arglist__5491);
      return G__5487__delegate(tcoll, val, vals);
    };
    G__5487.cljs$core$IFn$_invoke$arity$variadic = G__5487__delegate;
    return G__5487;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a);
      } else {
        return f.call(null, a);
      }
    } else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b);
        } else {
          return f.call(null, a, b);
        }
      } else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c);
          } else {
            return f.call(null, a, b, c);
          }
        } else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d);
            } else {
              return f.call(null, a, b, c, d);
            }
          } else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e);
              } else {
                return f.call(null, a, b, c, d, e);
              }
            } else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1);
                } else {
                  return f__$1.call(null, a, b, c, d, e, f__$1);
                }
              } else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g);
                  } else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g);
                  }
                } else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h);
                    } else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h);
                    }
                  } else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i);
                      } else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i);
                      }
                    } else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j);
                        } else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j);
                        }
                      } else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k);
                          } else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k);
                          }
                        } else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            } else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            }
                          } else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              } else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              }
                            } else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                } else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                }
                              } else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  } else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  }
                                } else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    } else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    }
                                  } else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      } else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      }
                                    } else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        } else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        }
                                      } else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          } else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          }
                                        } else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            } else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__5492__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__5492 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__5492__delegate.call(this, f, a, b, c, d, args);
    };
    G__5492.cljs$lang$maxFixedArity = 5;
    G__5492.cljs$lang$applyTo = function(arglist__5493) {
      var f = cljs.core.first(arglist__5493);
      arglist__5493 = cljs.core.next(arglist__5493);
      var a = cljs.core.first(arglist__5493);
      arglist__5493 = cljs.core.next(arglist__5493);
      var b = cljs.core.first(arglist__5493);
      arglist__5493 = cljs.core.next(arglist__5493);
      var c = cljs.core.first(arglist__5493);
      arglist__5493 = cljs.core.next(arglist__5493);
      var d = cljs.core.first(arglist__5493);
      var args = cljs.core.rest(arglist__5493);
      return G__5492__delegate(f, a, b, c, d, args);
    };
    G__5492.cljs$core$IFn$_invoke$arity$variadic = G__5492__delegate;
    return G__5492;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__5494__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__5494 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__5494__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__5494.cljs$lang$maxFixedArity = 6;
    G__5494.cljs$lang$applyTo = function(arglist__5495) {
      var obj = cljs.core.first(arglist__5495);
      arglist__5495 = cljs.core.next(arglist__5495);
      var f = cljs.core.first(arglist__5495);
      arglist__5495 = cljs.core.next(arglist__5495);
      var a = cljs.core.first(arglist__5495);
      arglist__5495 = cljs.core.next(arglist__5495);
      var b = cljs.core.first(arglist__5495);
      arglist__5495 = cljs.core.next(arglist__5495);
      var c = cljs.core.first(arglist__5495);
      arglist__5495 = cljs.core.next(arglist__5495);
      var d = cljs.core.first(arglist__5495);
      var args = cljs.core.rest(arglist__5495);
      return G__5494__delegate(obj, f, a, b, c, d, args);
    };
    G__5494.cljs$core$IFn$_invoke$arity$variadic = G__5494__delegate;
    return G__5494;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__5496__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__5496 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5496__delegate.call(this, x, y, more);
    };
    G__5496.cljs$lang$maxFixedArity = 2;
    G__5496.cljs$lang$applyTo = function(arglist__5497) {
      var x = cljs.core.first(arglist__5497);
      arglist__5497 = cljs.core.next(arglist__5497);
      var y = cljs.core.first(arglist__5497);
      var more = cljs.core.rest(arglist__5497);
      return G__5496__delegate(x, y, more);
    };
    G__5496.cljs$core$IFn$_invoke$arity$variadic = G__5496__delegate;
    return G__5496;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__5498 = pred;
        var G__5499 = cljs.core.next.call(null, coll);
        pred = G__5498;
        coll = G__5499;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3430__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3430__auto__)) {
        return or__3430__auto__;
      } else {
        var G__5500 = pred;
        var G__5501 = cljs.core.next.call(null, coll);
        pred = G__5500;
        coll = G__5501;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__5502 = null;
    var G__5502__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__5502__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__5502__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__5502__3 = function() {
      var G__5503__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__5503 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__5503__delegate.call(this, x, y, zs);
      };
      G__5503.cljs$lang$maxFixedArity = 2;
      G__5503.cljs$lang$applyTo = function(arglist__5504) {
        var x = cljs.core.first(arglist__5504);
        arglist__5504 = cljs.core.next(arglist__5504);
        var y = cljs.core.first(arglist__5504);
        var zs = cljs.core.rest(arglist__5504);
        return G__5503__delegate(x, y, zs);
      };
      G__5503.cljs$core$IFn$_invoke$arity$variadic = G__5503__delegate;
      return G__5503;
    }();
    G__5502 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__5502__0.call(this);
        case 1:
          return G__5502__1.call(this, x);
        case 2:
          return G__5502__2.call(this, x, y);
        default:
          return G__5502__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__5502.cljs$lang$maxFixedArity = 2;
    G__5502.cljs$lang$applyTo = G__5502__3.cljs$lang$applyTo;
    return G__5502;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__5505__delegate = function(args) {
      return x;
    };
    var G__5505 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__5505__delegate.call(this, args);
    };
    G__5505.cljs$lang$maxFixedArity = 0;
    G__5505.cljs$lang$applyTo = function(arglist__5506) {
      var args = cljs.core.seq(arglist__5506);
      return G__5505__delegate(args);
    };
    G__5505.cljs$core$IFn$_invoke$arity$variadic = G__5505__delegate;
    return G__5505;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__5507 = null;
      var G__5507__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__5507__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__5507__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__5507__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__5507__4 = function() {
        var G__5508__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__5508 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__5508__delegate.call(this, x, y, z, args);
        };
        G__5508.cljs$lang$maxFixedArity = 3;
        G__5508.cljs$lang$applyTo = function(arglist__5509) {
          var x = cljs.core.first(arglist__5509);
          arglist__5509 = cljs.core.next(arglist__5509);
          var y = cljs.core.first(arglist__5509);
          arglist__5509 = cljs.core.next(arglist__5509);
          var z = cljs.core.first(arglist__5509);
          var args = cljs.core.rest(arglist__5509);
          return G__5508__delegate(x, y, z, args);
        };
        G__5508.cljs$core$IFn$_invoke$arity$variadic = G__5508__delegate;
        return G__5508;
      }();
      G__5507 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__5507__0.call(this);
          case 1:
            return G__5507__1.call(this, x);
          case 2:
            return G__5507__2.call(this, x, y);
          case 3:
            return G__5507__3.call(this, x, y, z);
          default:
            return G__5507__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__5507.cljs$lang$maxFixedArity = 3;
      G__5507.cljs$lang$applyTo = G__5507__4.cljs$lang$applyTo;
      return G__5507;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__5510 = null;
      var G__5510__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__5510__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__5510__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__5510__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__5510__4 = function() {
        var G__5511__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__5511 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__5511__delegate.call(this, x, y, z, args);
        };
        G__5511.cljs$lang$maxFixedArity = 3;
        G__5511.cljs$lang$applyTo = function(arglist__5512) {
          var x = cljs.core.first(arglist__5512);
          arglist__5512 = cljs.core.next(arglist__5512);
          var y = cljs.core.first(arglist__5512);
          arglist__5512 = cljs.core.next(arglist__5512);
          var z = cljs.core.first(arglist__5512);
          var args = cljs.core.rest(arglist__5512);
          return G__5511__delegate(x, y, z, args);
        };
        G__5511.cljs$core$IFn$_invoke$arity$variadic = G__5511__delegate;
        return G__5511;
      }();
      G__5510 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__5510__0.call(this);
          case 1:
            return G__5510__1.call(this, x);
          case 2:
            return G__5510__2.call(this, x, y);
          case 3:
            return G__5510__3.call(this, x, y, z);
          default:
            return G__5510__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__5510.cljs$lang$maxFixedArity = 3;
      G__5510.cljs$lang$applyTo = G__5510__4.cljs$lang$applyTo;
      return G__5510;
    }();
  };
  var comp__4 = function() {
    var G__5513__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__5514__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while (true) {
            if (fs__$2) {
              var G__5515 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__5516 = cljs.core.next.call(null, fs__$2);
              ret = G__5515;
              fs__$2 = G__5516;
              continue;
            } else {
              return ret;
            }
            break;
          }
        };
        var G__5514 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__5514__delegate.call(this, args);
        };
        G__5514.cljs$lang$maxFixedArity = 0;
        G__5514.cljs$lang$applyTo = function(arglist__5517) {
          var args = cljs.core.seq(arglist__5517);
          return G__5514__delegate(args);
        };
        G__5514.cljs$core$IFn$_invoke$arity$variadic = G__5514__delegate;
        return G__5514;
      }();
    };
    var G__5513 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__5513__delegate.call(this, f1, f2, f3, fs);
    };
    G__5513.cljs$lang$maxFixedArity = 3;
    G__5513.cljs$lang$applyTo = function(arglist__5518) {
      var f1 = cljs.core.first(arglist__5518);
      arglist__5518 = cljs.core.next(arglist__5518);
      var f2 = cljs.core.first(arglist__5518);
      arglist__5518 = cljs.core.next(arglist__5518);
      var f3 = cljs.core.first(arglist__5518);
      var fs = cljs.core.rest(arglist__5518);
      return G__5513__delegate(f1, f2, f3, fs);
    };
    G__5513.cljs$core$IFn$_invoke$arity$variadic = G__5513__delegate;
    return G__5513;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__5519__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__5519 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__5519__delegate.call(this, args);
      };
      G__5519.cljs$lang$maxFixedArity = 0;
      G__5519.cljs$lang$applyTo = function(arglist__5520) {
        var args = cljs.core.seq(arglist__5520);
        return G__5519__delegate(args);
      };
      G__5519.cljs$core$IFn$_invoke$arity$variadic = G__5519__delegate;
      return G__5519;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__5521__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__5521 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__5521__delegate.call(this, args);
      };
      G__5521.cljs$lang$maxFixedArity = 0;
      G__5521.cljs$lang$applyTo = function(arglist__5522) {
        var args = cljs.core.seq(arglist__5522);
        return G__5521__delegate(args);
      };
      G__5521.cljs$core$IFn$_invoke$arity$variadic = G__5521__delegate;
      return G__5521;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__5523__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__5523 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__5523__delegate.call(this, args);
      };
      G__5523.cljs$lang$maxFixedArity = 0;
      G__5523.cljs$lang$applyTo = function(arglist__5524) {
        var args = cljs.core.seq(arglist__5524);
        return G__5523__delegate(args);
      };
      G__5523.cljs$core$IFn$_invoke$arity$variadic = G__5523__delegate;
      return G__5523;
    }();
  };
  var partial__5 = function() {
    var G__5525__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__5526__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__5526 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__5526__delegate.call(this, args);
        };
        G__5526.cljs$lang$maxFixedArity = 0;
        G__5526.cljs$lang$applyTo = function(arglist__5527) {
          var args = cljs.core.seq(arglist__5527);
          return G__5526__delegate(args);
        };
        G__5526.cljs$core$IFn$_invoke$arity$variadic = G__5526__delegate;
        return G__5526;
      }();
    };
    var G__5525 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__5525__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__5525.cljs$lang$maxFixedArity = 4;
    G__5525.cljs$lang$applyTo = function(arglist__5528) {
      var f = cljs.core.first(arglist__5528);
      arglist__5528 = cljs.core.next(arglist__5528);
      var arg1 = cljs.core.first(arglist__5528);
      arglist__5528 = cljs.core.next(arglist__5528);
      var arg2 = cljs.core.first(arglist__5528);
      arglist__5528 = cljs.core.next(arglist__5528);
      var arg3 = cljs.core.first(arglist__5528);
      var more = cljs.core.rest(arglist__5528);
      return G__5525__delegate(f, arg1, arg2, arg3, more);
    };
    G__5525.cljs$core$IFn$_invoke$arity$variadic = G__5525__delegate;
    return G__5525;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__5529 = null;
      var G__5529__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__5529__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__5529__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__5529__4 = function() {
        var G__5530__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__5530 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__5530__delegate.call(this, a, b, c, ds);
        };
        G__5530.cljs$lang$maxFixedArity = 3;
        G__5530.cljs$lang$applyTo = function(arglist__5531) {
          var a = cljs.core.first(arglist__5531);
          arglist__5531 = cljs.core.next(arglist__5531);
          var b = cljs.core.first(arglist__5531);
          arglist__5531 = cljs.core.next(arglist__5531);
          var c = cljs.core.first(arglist__5531);
          var ds = cljs.core.rest(arglist__5531);
          return G__5530__delegate(a, b, c, ds);
        };
        G__5530.cljs$core$IFn$_invoke$arity$variadic = G__5530__delegate;
        return G__5530;
      }();
      G__5529 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__5529__1.call(this, a);
          case 2:
            return G__5529__2.call(this, a, b);
          case 3:
            return G__5529__3.call(this, a, b, c);
          default:
            return G__5529__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__5529.cljs$lang$maxFixedArity = 3;
      G__5529.cljs$lang$applyTo = G__5529__4.cljs$lang$applyTo;
      return G__5529;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__5532 = null;
      var G__5532__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__5532__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__5532__4 = function() {
        var G__5533__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__5533 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__5533__delegate.call(this, a, b, c, ds);
        };
        G__5533.cljs$lang$maxFixedArity = 3;
        G__5533.cljs$lang$applyTo = function(arglist__5534) {
          var a = cljs.core.first(arglist__5534);
          arglist__5534 = cljs.core.next(arglist__5534);
          var b = cljs.core.first(arglist__5534);
          arglist__5534 = cljs.core.next(arglist__5534);
          var c = cljs.core.first(arglist__5534);
          var ds = cljs.core.rest(arglist__5534);
          return G__5533__delegate(a, b, c, ds);
        };
        G__5533.cljs$core$IFn$_invoke$arity$variadic = G__5533__delegate;
        return G__5533;
      }();
      G__5532 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__5532__2.call(this, a, b);
          case 3:
            return G__5532__3.call(this, a, b, c);
          default:
            return G__5532__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__5532.cljs$lang$maxFixedArity = 3;
      G__5532.cljs$lang$applyTo = G__5532__4.cljs$lang$applyTo;
      return G__5532;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__5535 = null;
      var G__5535__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__5535__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__5535__4 = function() {
        var G__5536__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__5536 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__5536__delegate.call(this, a, b, c, ds);
        };
        G__5536.cljs$lang$maxFixedArity = 3;
        G__5536.cljs$lang$applyTo = function(arglist__5537) {
          var a = cljs.core.first(arglist__5537);
          arglist__5537 = cljs.core.next(arglist__5537);
          var b = cljs.core.first(arglist__5537);
          arglist__5537 = cljs.core.next(arglist__5537);
          var c = cljs.core.first(arglist__5537);
          var ds = cljs.core.rest(arglist__5537);
          return G__5536__delegate(a, b, c, ds);
        };
        G__5536.cljs$core$IFn$_invoke$arity$variadic = G__5536__delegate;
        return G__5536;
      }();
      G__5535 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__5535__2.call(this, a, b);
          case 3:
            return G__5535__3.call(this, a, b, c);
          default:
            return G__5535__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__5535.cljs$lang$maxFixedArity = 3;
      G__5535.cljs$lang$applyTo = G__5535__4.cljs$lang$applyTo;
      return G__5535;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4278__auto___5538 = size;
          var i_5539 = 0;
          while (true) {
            if (i_5539 < n__4278__auto___5538) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_5539, cljs.core._nth.call(null, c, i_5539)));
              var G__5540 = i_5539 + 1;
              i_5539 = G__5540;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4278__auto___5541 = size;
        var i_5542 = 0;
        while (true) {
          if (i_5542 < n__4278__auto___5541) {
            var x_5543 = f.call(null, cljs.core._nth.call(null, c, i_5542));
            if (x_5543 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_5543);
            }
            var G__5544 = i_5542 + 1;
            i_5542 = G__5544;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4278__auto___5545 = size;
          var i_5546 = 0;
          while (true) {
            if (i_5546 < n__4278__auto___5545) {
              var x_5547 = f.call(null, idx + i_5546, cljs.core._nth.call(null, c, i_5546));
              if (x_5547 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_5547);
              }
              var G__5548 = i_5546 + 1;
              i_5546 = G__5548;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3418__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3418__auto__)) {
            return p.call(null, y);
          } else {
            return and__3418__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3418__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3418__auto__)) {
            var and__3418__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3418__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3418__auto____$1;
            }
          } else {
            return and__3418__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__5555__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__5555 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__5555__delegate.call(this, x, y, z, args);
        };
        G__5555.cljs$lang$maxFixedArity = 3;
        G__5555.cljs$lang$applyTo = function(arglist__5556) {
          var x = cljs.core.first(arglist__5556);
          arglist__5556 = cljs.core.next(arglist__5556);
          var y = cljs.core.first(arglist__5556);
          arglist__5556 = cljs.core.next(arglist__5556);
          var z = cljs.core.first(arglist__5556);
          var args = cljs.core.rest(arglist__5556);
          return G__5555__delegate(x, y, z, args);
        };
        G__5555.cljs$core$IFn$_invoke$arity$variadic = G__5555__delegate;
        return G__5555;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3418__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3418__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3418__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3418__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3418__auto__)) {
            var and__3418__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3418__auto____$1)) {
              var and__3418__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3418__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3418__auto____$2;
              }
            } else {
              return and__3418__auto____$1;
            }
          } else {
            return and__3418__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3418__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3418__auto__)) {
            var and__3418__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3418__auto____$1)) {
              var and__3418__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3418__auto____$2)) {
                var and__3418__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3418__auto____$3)) {
                  var and__3418__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3418__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3418__auto____$4;
                  }
                } else {
                  return and__3418__auto____$3;
                }
              } else {
                return and__3418__auto____$2;
              }
            } else {
              return and__3418__auto____$1;
            }
          } else {
            return and__3418__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__5557__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__5549_SHARP_) {
            var and__3418__auto__ = p1.call(null, p1__5549_SHARP_);
            if (cljs.core.truth_(and__3418__auto__)) {
              return p2.call(null, p1__5549_SHARP_);
            } else {
              return and__3418__auto__;
            }
          }, args));
        };
        var G__5557 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__5557__delegate.call(this, x, y, z, args);
        };
        G__5557.cljs$lang$maxFixedArity = 3;
        G__5557.cljs$lang$applyTo = function(arglist__5558) {
          var x = cljs.core.first(arglist__5558);
          arglist__5558 = cljs.core.next(arglist__5558);
          var y = cljs.core.first(arglist__5558);
          arglist__5558 = cljs.core.next(arglist__5558);
          var z = cljs.core.first(arglist__5558);
          var args = cljs.core.rest(arglist__5558);
          return G__5557__delegate(x, y, z, args);
        };
        G__5557.cljs$core$IFn$_invoke$arity$variadic = G__5557__delegate;
        return G__5557;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3418__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3418__auto__)) {
            var and__3418__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3418__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3418__auto____$1;
            }
          } else {
            return and__3418__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3418__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3418__auto__)) {
            var and__3418__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3418__auto____$1)) {
              var and__3418__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3418__auto____$2)) {
                var and__3418__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3418__auto____$3)) {
                  var and__3418__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3418__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3418__auto____$4;
                  }
                } else {
                  return and__3418__auto____$3;
                }
              } else {
                return and__3418__auto____$2;
              }
            } else {
              return and__3418__auto____$1;
            }
          } else {
            return and__3418__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3418__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3418__auto__)) {
            var and__3418__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3418__auto____$1)) {
              var and__3418__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3418__auto____$2)) {
                var and__3418__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3418__auto____$3)) {
                  var and__3418__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3418__auto____$4)) {
                    var and__3418__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3418__auto____$5)) {
                      var and__3418__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3418__auto____$6)) {
                        var and__3418__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3418__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3418__auto____$7;
                        }
                      } else {
                        return and__3418__auto____$6;
                      }
                    } else {
                      return and__3418__auto____$5;
                    }
                  } else {
                    return and__3418__auto____$4;
                  }
                } else {
                  return and__3418__auto____$3;
                }
              } else {
                return and__3418__auto____$2;
              }
            } else {
              return and__3418__auto____$1;
            }
          } else {
            return and__3418__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__5559__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__5550_SHARP_) {
            var and__3418__auto__ = p1.call(null, p1__5550_SHARP_);
            if (cljs.core.truth_(and__3418__auto__)) {
              var and__3418__auto____$1 = p2.call(null, p1__5550_SHARP_);
              if (cljs.core.truth_(and__3418__auto____$1)) {
                return p3.call(null, p1__5550_SHARP_);
              } else {
                return and__3418__auto____$1;
              }
            } else {
              return and__3418__auto__;
            }
          }, args));
        };
        var G__5559 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__5559__delegate.call(this, x, y, z, args);
        };
        G__5559.cljs$lang$maxFixedArity = 3;
        G__5559.cljs$lang$applyTo = function(arglist__5560) {
          var x = cljs.core.first(arglist__5560);
          arglist__5560 = cljs.core.next(arglist__5560);
          var y = cljs.core.first(arglist__5560);
          arglist__5560 = cljs.core.next(arglist__5560);
          var z = cljs.core.first(arglist__5560);
          var args = cljs.core.rest(arglist__5560);
          return G__5559__delegate(x, y, z, args);
        };
        G__5559.cljs$core$IFn$_invoke$arity$variadic = G__5559__delegate;
        return G__5559;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__5561__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true;
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__5551_SHARP_) {
            return p1__5551_SHARP_.call(null, x);
          }, ps__$1);
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__5552_SHARP_) {
            var and__3418__auto__ = p1__5552_SHARP_.call(null, x);
            if (cljs.core.truth_(and__3418__auto__)) {
              return p1__5552_SHARP_.call(null, y);
            } else {
              return and__3418__auto__;
            }
          }, ps__$1);
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__5553_SHARP_) {
            var and__3418__auto__ = p1__5553_SHARP_.call(null, x);
            if (cljs.core.truth_(and__3418__auto__)) {
              var and__3418__auto____$1 = p1__5553_SHARP_.call(null, y);
              if (cljs.core.truth_(and__3418__auto____$1)) {
                return p1__5553_SHARP_.call(null, z);
              } else {
                return and__3418__auto____$1;
              }
            } else {
              return and__3418__auto__;
            }
          }, ps__$1);
        };
        var epn__4 = function() {
          var G__5562__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__5554_SHARP_) {
              return cljs.core.every_QMARK_.call(null, p1__5554_SHARP_, args);
            }, ps__$1));
          };
          var G__5562 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__5562__delegate.call(this, x, y, z, args);
          };
          G__5562.cljs$lang$maxFixedArity = 3;
          G__5562.cljs$lang$applyTo = function(arglist__5563) {
            var x = cljs.core.first(arglist__5563);
            arglist__5563 = cljs.core.next(arglist__5563);
            var y = cljs.core.first(arglist__5563);
            arglist__5563 = cljs.core.next(arglist__5563);
            var z = cljs.core.first(arglist__5563);
            var args = cljs.core.rest(arglist__5563);
            return G__5562__delegate(x, y, z, args);
          };
          G__5562.cljs$core$IFn$_invoke$arity$variadic = G__5562__delegate;
          return G__5562;
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn;
      }();
    };
    var G__5561 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__5561__delegate.call(this, p1, p2, p3, ps);
    };
    G__5561.cljs$lang$maxFixedArity = 3;
    G__5561.cljs$lang$applyTo = function(arglist__5564) {
      var p1 = cljs.core.first(arglist__5564);
      arglist__5564 = cljs.core.next(arglist__5564);
      var p2 = cljs.core.first(arglist__5564);
      arglist__5564 = cljs.core.next(arglist__5564);
      var p3 = cljs.core.first(arglist__5564);
      var ps = cljs.core.rest(arglist__5564);
      return G__5561__delegate(p1, p2, p3, ps);
    };
    G__5561.cljs$core$IFn$_invoke$arity$variadic = G__5561__delegate;
    return G__5561;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3430__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3430__auto__)) {
          return or__3430__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3430__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3430__auto__)) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3430__auto____$1)) {
            return or__3430__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__5571__delegate = function(x, y, z, args) {
          var or__3430__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3430__auto__)) {
            return or__3430__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__5571 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__5571__delegate.call(this, x, y, z, args);
        };
        G__5571.cljs$lang$maxFixedArity = 3;
        G__5571.cljs$lang$applyTo = function(arglist__5572) {
          var x = cljs.core.first(arglist__5572);
          arglist__5572 = cljs.core.next(arglist__5572);
          var y = cljs.core.first(arglist__5572);
          arglist__5572 = cljs.core.next(arglist__5572);
          var z = cljs.core.first(arglist__5572);
          var args = cljs.core.rest(arglist__5572);
          return G__5571__delegate(x, y, z, args);
        };
        G__5571.cljs$core$IFn$_invoke$arity$variadic = G__5571__delegate;
        return G__5571;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3430__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3430__auto__)) {
          return or__3430__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3430__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3430__auto__)) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3430__auto____$1)) {
            return or__3430__auto____$1;
          } else {
            var or__3430__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3430__auto____$2)) {
              return or__3430__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3430__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3430__auto__)) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3430__auto____$1)) {
            return or__3430__auto____$1;
          } else {
            var or__3430__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3430__auto____$2)) {
              return or__3430__auto____$2;
            } else {
              var or__3430__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3430__auto____$3)) {
                return or__3430__auto____$3;
              } else {
                var or__3430__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3430__auto____$4)) {
                  return or__3430__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__5573__delegate = function(x, y, z, args) {
          var or__3430__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3430__auto__)) {
            return or__3430__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__5565_SHARP_) {
              var or__3430__auto____$1 = p1.call(null, p1__5565_SHARP_);
              if (cljs.core.truth_(or__3430__auto____$1)) {
                return or__3430__auto____$1;
              } else {
                return p2.call(null, p1__5565_SHARP_);
              }
            }, args);
          }
        };
        var G__5573 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__5573__delegate.call(this, x, y, z, args);
        };
        G__5573.cljs$lang$maxFixedArity = 3;
        G__5573.cljs$lang$applyTo = function(arglist__5574) {
          var x = cljs.core.first(arglist__5574);
          arglist__5574 = cljs.core.next(arglist__5574);
          var y = cljs.core.first(arglist__5574);
          arglist__5574 = cljs.core.next(arglist__5574);
          var z = cljs.core.first(arglist__5574);
          var args = cljs.core.rest(arglist__5574);
          return G__5573__delegate(x, y, z, args);
        };
        G__5573.cljs$core$IFn$_invoke$arity$variadic = G__5573__delegate;
        return G__5573;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3430__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3430__auto__)) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3430__auto____$1)) {
            return or__3430__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3430__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3430__auto__)) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3430__auto____$1)) {
            return or__3430__auto____$1;
          } else {
            var or__3430__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3430__auto____$2)) {
              return or__3430__auto____$2;
            } else {
              var or__3430__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3430__auto____$3)) {
                return or__3430__auto____$3;
              } else {
                var or__3430__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3430__auto____$4)) {
                  return or__3430__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3430__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3430__auto__)) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3430__auto____$1)) {
            return or__3430__auto____$1;
          } else {
            var or__3430__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3430__auto____$2)) {
              return or__3430__auto____$2;
            } else {
              var or__3430__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3430__auto____$3)) {
                return or__3430__auto____$3;
              } else {
                var or__3430__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3430__auto____$4)) {
                  return or__3430__auto____$4;
                } else {
                  var or__3430__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3430__auto____$5)) {
                    return or__3430__auto____$5;
                  } else {
                    var or__3430__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3430__auto____$6)) {
                      return or__3430__auto____$6;
                    } else {
                      var or__3430__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3430__auto____$7)) {
                        return or__3430__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__5575__delegate = function(x, y, z, args) {
          var or__3430__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3430__auto__)) {
            return or__3430__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__5566_SHARP_) {
              var or__3430__auto____$1 = p1.call(null, p1__5566_SHARP_);
              if (cljs.core.truth_(or__3430__auto____$1)) {
                return or__3430__auto____$1;
              } else {
                var or__3430__auto____$2 = p2.call(null, p1__5566_SHARP_);
                if (cljs.core.truth_(or__3430__auto____$2)) {
                  return or__3430__auto____$2;
                } else {
                  return p3.call(null, p1__5566_SHARP_);
                }
              }
            }, args);
          }
        };
        var G__5575 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__5575__delegate.call(this, x, y, z, args);
        };
        G__5575.cljs$lang$maxFixedArity = 3;
        G__5575.cljs$lang$applyTo = function(arglist__5576) {
          var x = cljs.core.first(arglist__5576);
          arglist__5576 = cljs.core.next(arglist__5576);
          var y = cljs.core.first(arglist__5576);
          arglist__5576 = cljs.core.next(arglist__5576);
          var z = cljs.core.first(arglist__5576);
          var args = cljs.core.rest(arglist__5576);
          return G__5575__delegate(x, y, z, args);
        };
        G__5575.cljs$core$IFn$_invoke$arity$variadic = G__5575__delegate;
        return G__5575;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__5577__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null;
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__5567_SHARP_) {
            return p1__5567_SHARP_.call(null, x);
          }, ps__$1);
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__5568_SHARP_) {
            var or__3430__auto__ = p1__5568_SHARP_.call(null, x);
            if (cljs.core.truth_(or__3430__auto__)) {
              return or__3430__auto__;
            } else {
              return p1__5568_SHARP_.call(null, y);
            }
          }, ps__$1);
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__5569_SHARP_) {
            var or__3430__auto__ = p1__5569_SHARP_.call(null, x);
            if (cljs.core.truth_(or__3430__auto__)) {
              return or__3430__auto__;
            } else {
              var or__3430__auto____$1 = p1__5569_SHARP_.call(null, y);
              if (cljs.core.truth_(or__3430__auto____$1)) {
                return or__3430__auto____$1;
              } else {
                return p1__5569_SHARP_.call(null, z);
              }
            }
          }, ps__$1);
        };
        var spn__4 = function() {
          var G__5578__delegate = function(x, y, z, args) {
            var or__3430__auto__ = spn.call(null, x, y, z);
            if (cljs.core.truth_(or__3430__auto__)) {
              return or__3430__auto__;
            } else {
              return cljs.core.some.call(null, function(p1__5570_SHARP_) {
                return cljs.core.some.call(null, p1__5570_SHARP_, args);
              }, ps__$1);
            }
          };
          var G__5578 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__5578__delegate.call(this, x, y, z, args);
          };
          G__5578.cljs$lang$maxFixedArity = 3;
          G__5578.cljs$lang$applyTo = function(arglist__5579) {
            var x = cljs.core.first(arglist__5579);
            arglist__5579 = cljs.core.next(arglist__5579);
            var y = cljs.core.first(arglist__5579);
            arglist__5579 = cljs.core.next(arglist__5579);
            var z = cljs.core.first(arglist__5579);
            var args = cljs.core.rest(arglist__5579);
            return G__5578__delegate(x, y, z, args);
          };
          G__5578.cljs$core$IFn$_invoke$arity$variadic = G__5578__delegate;
          return G__5578;
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn;
      }();
    };
    var G__5577 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__5577__delegate.call(this, p1, p2, p3, ps);
    };
    G__5577.cljs$lang$maxFixedArity = 3;
    G__5577.cljs$lang$applyTo = function(arglist__5580) {
      var p1 = cljs.core.first(arglist__5580);
      arglist__5580 = cljs.core.next(arglist__5580);
      var p2 = cljs.core.first(arglist__5580);
      arglist__5580 = cljs.core.next(arglist__5580);
      var p3 = cljs.core.first(arglist__5580);
      var ps = cljs.core.rest(arglist__5580);
      return G__5577__delegate(p1, p2, p3, ps);
    };
    G__5577.cljs$core$IFn$_invoke$arity$variadic = G__5577__delegate;
    return G__5577;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4278__auto___5582 = size;
          var i_5583 = 0;
          while (true) {
            if (i_5583 < n__4278__auto___5582) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_5583)));
              var G__5584 = i_5583 + 1;
              i_5583 = G__5584;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__5585__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(p1__5581_SHARP_) {
        return cljs.core.apply.call(null, f, p1__5581_SHARP_);
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__5585 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__5585__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__5585.cljs$lang$maxFixedArity = 4;
    G__5585.cljs$lang$applyTo = function(arglist__5586) {
      var f = cljs.core.first(arglist__5586);
      arglist__5586 = cljs.core.next(arglist__5586);
      var c1 = cljs.core.first(arglist__5586);
      arglist__5586 = cljs.core.next(arglist__5586);
      var c2 = cljs.core.first(arglist__5586);
      arglist__5586 = cljs.core.next(arglist__5586);
      var c3 = cljs.core.first(arglist__5586);
      var colls = cljs.core.rest(arglist__5586);
      return G__5585__delegate(f, c1, c2, c3, colls);
    };
    G__5585.cljs$core$IFn$_invoke$arity$variadic = G__5585__delegate;
    return G__5585;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__5587 = n__$1 - 1;
        var G__5588 = cljs.core.rest.call(null, s);
        n__$1 = G__5587;
        coll__$1 = G__5588;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll);
  }, null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__5589 = cljs.core.next.call(null, s);
      var G__5590 = cljs.core.next.call(null, lead);
      s = G__5589;
      lead = G__5590;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__3418__auto__ = s;
        if (and__3418__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__3418__auto__;
        }
      }())) {
        var G__5591 = pred__$1;
        var G__5592 = cljs.core.rest.call(null, s);
        pred__$1 = G__5591;
        coll__$1 = G__5592;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll);
  }, null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__5593__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__5593 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5593__delegate.call(this, c1, c2, colls);
    };
    G__5593.cljs$lang$maxFixedArity = 2;
    G__5593.cljs$lang$applyTo = function(arglist__5594) {
      var c1 = cljs.core.first(arglist__5594);
      arglist__5594 = cljs.core.next(arglist__5594);
      var c2 = cljs.core.first(arglist__5594);
      var colls = cljs.core.rest(arglist__5594);
      return G__5593__delegate(c1, c2, colls);
    };
    G__5593.cljs$core$IFn$_invoke$arity$variadic = G__5593__delegate;
    return G__5593;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__5595__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__5595 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__5595__delegate.call(this, f, coll, colls);
    };
    G__5595.cljs$lang$maxFixedArity = 2;
    G__5595.cljs$lang$applyTo = function(arglist__5596) {
      var f = cljs.core.first(arglist__5596);
      arglist__5596 = cljs.core.next(arglist__5596);
      var coll = cljs.core.first(arglist__5596);
      var colls = cljs.core.rest(arglist__5596);
      return G__5595__delegate(f, coll, colls);
    };
    G__5595.cljs$core$IFn$_invoke$arity$variadic = G__5595__delegate;
    return G__5595;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4278__auto___5597 = size;
        var i_5598 = 0;
        while (true) {
          if (i_5598 < n__4278__auto___5597) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_5598)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_5598));
            } else {
            }
            var G__5599 = i_5598 + 1;
            i_5598 = G__5599;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__5600_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__5600_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__5602 = to;
      if (G__5602) {
        var bit__4073__auto__ = G__5602.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4073__auto__ || G__5602.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__5603__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__5603 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__5603__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__5603.cljs$lang$maxFixedArity = 4;
    G__5603.cljs$lang$applyTo = function(arglist__5604) {
      var f = cljs.core.first(arglist__5604);
      arglist__5604 = cljs.core.next(arglist__5604);
      var c1 = cljs.core.first(arglist__5604);
      arglist__5604 = cljs.core.next(arglist__5604);
      var c2 = cljs.core.first(arglist__5604);
      arglist__5604 = cljs.core.next(arglist__5604);
      var c3 = cljs.core.first(arglist__5604);
      var colls = cljs.core.rest(arglist__5604);
      return G__5603__delegate(f, c1, c2, c3, colls);
    };
    G__5603.cljs$core$IFn$_invoke$arity$variadic = G__5603__delegate;
    return G__5603;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__5606 = m__$1;
          if (G__5606) {
            var bit__4080__auto__ = G__5606.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4080__auto__ || G__5606.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__5606.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__5606);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__5606);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__5607 = sentinel;
            var G__5608 = m__$2;
            var G__5609 = cljs.core.next.call(null, ks__$1);
            sentinel = G__5607;
            m__$1 = G__5608;
            ks__$1 = G__5609;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__5610, v) {
  var vec__5612 = p__5610;
  var k = cljs.core.nth.call(null, vec__5612, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__5612, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__5613, f) {
    var vec__5623 = p__5613;
    var k = cljs.core.nth.call(null, vec__5623, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__5623, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__5614, f, a) {
    var vec__5624 = p__5614;
    var k = cljs.core.nth.call(null, vec__5624, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__5624, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__5615, f, a, b) {
    var vec__5625 = p__5615;
    var k = cljs.core.nth.call(null, vec__5625, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__5625, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__5616, f, a, b, c) {
    var vec__5626 = p__5616;
    var k = cljs.core.nth.call(null, vec__5626, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__5626, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__5628__delegate = function(m, p__5617, f, a, b, c, args) {
      var vec__5627 = p__5617;
      var k = cljs.core.nth.call(null, vec__5627, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__5627, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__5628 = function(m, p__5617, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__5628__delegate.call(this, m, p__5617, f, a, b, c, args);
    };
    G__5628.cljs$lang$maxFixedArity = 6;
    G__5628.cljs$lang$applyTo = function(arglist__5629) {
      var m = cljs.core.first(arglist__5629);
      arglist__5629 = cljs.core.next(arglist__5629);
      var p__5617 = cljs.core.first(arglist__5629);
      arglist__5629 = cljs.core.next(arglist__5629);
      var f = cljs.core.first(arglist__5629);
      arglist__5629 = cljs.core.next(arglist__5629);
      var a = cljs.core.first(arglist__5629);
      arglist__5629 = cljs.core.next(arglist__5629);
      var b = cljs.core.first(arglist__5629);
      arglist__5629 = cljs.core.next(arglist__5629);
      var c = cljs.core.first(arglist__5629);
      var args = cljs.core.rest(arglist__5629);
      return G__5628__delegate(m, p__5617, f, a, b, c, args);
    };
    G__5628.cljs$core$IFn$_invoke$arity$variadic = G__5628__delegate;
    return G__5628;
  }();
  update_in = function(m, p__5617, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__5617, f);
      case 4:
        return update_in__4.call(this, m, p__5617, f, a);
      case 5:
        return update_in__5.call(this, m, p__5617, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__5617, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__5617, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4000__auto__, writer__4001__auto__, opts__4002__auto__) {
  return cljs.core._write.call(null, writer__4001__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__5630 = ll - 5;
      var G__5631 = r;
      ll = G__5630;
      ret = G__5631;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    if (i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail;
    } else {
      var node = pv.root;
      var level = pv.shift;
      while (true) {
        if (level > 0) {
          var G__5632 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__5633 = level - 5;
          node = G__5632;
          level = G__5633;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= k && k < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= k) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[k & 31] = v;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, k, v), self__.tail, null);
    }
  } else {
    if (k === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, v);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(k), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__5635 = null;
  var G__5635__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__5635__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__5635 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5635__2.call(this, self__, k);
      case 3:
        return G__5635__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5635;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args5634) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args5634)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__5636 = j + 1;
              var G__5637 = init__$2;
              j = G__5636;
              init__$1 = G__5637;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__5638 = i + step_init[0];
        i = G__5638;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4278__auto___5639 = len;
    var i_5640 = 0;
    while (true) {
      if (i_5640 < n__4278__auto___5639) {
        new_tail[i_5640] = self__.tail[i_5640];
        var G__5641 = i_5640 + 1;
        i_5640 = G__5641;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__5642 = i + 1;
        var G__5643 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__5642;
        out = G__5643;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__5644) {
    var args = cljs.core.seq(arglist__5644);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return null;
  } else {
    return s;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return cljs.core.List.EMPTY;
  } else {
    return s;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32400159;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + key;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3737__auto__ = self__.end;
    var y__3738__auto__ = v_pos + 1;
    return x__3737__auto__ > y__3738__auto__ ? x__3737__auto__ : y__3738__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__5646 = null;
  var G__5646__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__5646__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__5646 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5646__2.call(this, self__, k);
      case 3:
        return G__5646__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5646;
}();
cljs.core.Subvec.prototype.apply = function(self__, args5645) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args5645)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if (i === self__.end) {
      return null;
    } else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1);
      }, null, null));
    }
  };
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__5647 = meta;
      var G__5648 = v.v;
      var G__5649 = v.start + start;
      var G__5650 = v.start + end;
      var G__5651 = __hash;
      meta = G__5647;
      v = G__5648;
      start = G__5649;
      end = G__5650;
      __hash = G__5651;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj5655 = {};
    return obj5655;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if (0 <= i && i < tv.cnt) {
    if (i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail;
    } else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while (true) {
        if (level > 0) {
          var G__5656 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__5657 = level - 5;
          node = G__5656;
          level = G__5657;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__5659 = null;
  var G__5659__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__5659__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__5659 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5659__2.call(this, self__, k);
      case 3:
        return G__5659__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5659;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args5658) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args5658)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if (level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1;
          } else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1;
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3430__auto__ = self__.rear;
      if (cljs.core.truth_(or__3430__auto__)) {
        return or__3430__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3430__auto__ = self__.front;
    if (cljs.core.truth_(or__3430__auto__)) {
      return or__3430__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__5660 = i + incr;
        i = G__5660;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__5661 = i + 1;
      var G__5662 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__5661;
      out = G__5662;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj5666 = {};
    return obj5666;
  }();
  var l = ks.length;
  var i_5667 = 0;
  while (true) {
    if (i_5667 < l) {
      var k_5668 = ks[i_5667];
      new_obj[k_5668] = obj[k_5668];
      var G__5669 = i_5667 + 1;
      i_5667 = G__5669;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__5672 = null;
  var G__5672__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__5672__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__5672 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5672__2.call(this, self__, k);
      case 3:
        return G__5672__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5672;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args5671) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args5671)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__5673 = cljs.core.rest.call(null, keys__$1);
        var G__5674 = init__$2;
        keys__$1 = G__5673;
        init__$1 = G__5674;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__5670_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__5670_SHARP_, self__.strobj[p1__5670_SHARP_]], null);
    }, self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj5676 = {};
  return obj5676;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__5677 = i + 2;
          i = G__5677;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__5678 = i + 2;
          i = G__5678;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__5679 = i + 2;
          i = G__5679;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__5680 = i + 2;
          i = G__5680;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__5681 = i + 2;
          i = G__5681;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_5682 = 0;
  while (true) {
    if (i_5682 < l) {
      narr[i_5682] = arr[i_5682];
      var G__5683 = i_5682 + 1;
      i_5682 = G__5683;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj5686 = {};
    return obj5686;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__5687 = cljs.core.aclone.call(null, self__.arr);
          G__5687[idx + 1] = v;
          return G__5687;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__5688 = null;
  var G__5688__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__5688__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__5688 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5688__2.call(this, self__, k);
      case 3:
        return G__5688__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5688;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args5684) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args5684)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__5689 = i + 2;
        var G__5690 = init__$2;
        i = G__5689;
        init__$1 = G__5690;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__5691 = s + 2;
            var G__5692 = d;
            s = G__5691;
            d = G__5692;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__5693 = s + 2;
              var G__5694 = d + 2;
              s = G__5693;
              d = G__5694;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__5695 = i + 2;
        var G__5696 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__5695;
        ret = G__5696;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__5697_5699 = self__.arr;
      G__5697_5699.pop();
      G__5697_5699.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__5698 = o;
      if (G__5698) {
        var bit__4080__auto__ = G__5698.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4080__auto__ || G__5698.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__5698.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__5698);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__5698);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__5700 = cljs.core.next.call(null, es);
          var G__5701 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__5700;
          tcoll__$2 = G__5701;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__5702 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__5703 = i + 2;
      out = G__5702;
      i = G__5703;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4000__auto__, writer__4001__auto__, opts__4002__auto__) {
  return cljs.core._write.call(null, writer__4001__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__5706 = cljs.core.aclone.call(null, arr);
    G__5706[i] = a;
    return G__5706;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__5707 = cljs.core.aclone.call(null, arr);
    G__5707[i] = a;
    G__5707[j] = b;
    return G__5707;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__5708 = i + 2;
        var G__5709 = init__$2;
        i = G__5708;
        init__$1 = G__5709;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_5710 = 0;
        var j_5711 = 0;
        while (true) {
          if (i_5710 < 32) {
            if ((self__.bitmap >>> i_5710 & 1) === 0) {
              var G__5712 = i_5710 + 1;
              var G__5713 = j_5711;
              i_5710 = G__5712;
              j_5711 = G__5713;
              continue;
            } else {
              nodes[i_5710] = !(self__.arr[j_5711] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_5711]), self__.arr[j_5711], self__.arr[j_5711 + 1], added_leaf_QMARK_) : self__.arr[j_5711 + 1];
              var G__5714 = i_5710 + 1;
              var G__5715 = j_5711 + 2;
              i_5710 = G__5714;
              j_5711 = G__5715;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_5716 = 0;
      var j_5717 = 0;
      while (true) {
        if (i_5716 < 32) {
          if ((self__.bitmap >>> i_5716 & 1) === 0) {
            var G__5718 = i_5716 + 1;
            var G__5719 = j_5717;
            i_5716 = G__5718;
            j_5717 = G__5719;
            continue;
          } else {
            nodes[i_5716] = !(self__.arr[j_5717] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_5717]), self__.arr[j_5717], self__.arr[j_5717 + 1], added_leaf_QMARK_) : self__.arr[j_5717 + 1];
            var G__5720 = i_5716 + 1;
            var G__5721 = j_5717 + 2;
            i_5716 = G__5720;
            j_5717 = G__5721;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__5722 = i + 1;
        var G__5723 = j + 2;
        var G__5724 = bitmap | 1 << i;
        i = G__5722;
        j = G__5723;
        bitmap = G__5724;
        continue;
      } else {
        var G__5725 = i + 1;
        var G__5726 = j;
        var G__5727 = bitmap;
        i = G__5725;
        j = G__5726;
        bitmap = G__5727;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__5728 = i + 1;
          var G__5729 = init__$2;
          i = G__5728;
          init__$1 = G__5729;
          continue;
        }
      } else {
        var G__5730 = i + 1;
        var G__5731 = init__$1;
        i = G__5730;
        init__$1 = G__5731;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__5732 = i + 2;
        i = G__5732;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4090__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__5733 = j + 2;
                j = G__5733;
                continue;
              }
            } else {
              var G__5734 = j + 2;
              j = G__5734;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4090__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__5735 = j + 1;
              j = G__5735;
              continue;
            }
          } else {
            var G__5736 = j + 1;
            j = G__5736;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj5739 = {};
    return obj5739;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__5740 = null;
  var G__5740__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__5740__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__5740 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5740__2.call(this, self__, k);
      case 3:
        return G__5740__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5740;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args5737) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args5737)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__5741 = i + 1;
      var G__5742 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__5741;
      out = G__5742;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__5743 = o;
      if (G__5743) {
        var bit__4080__auto__ = G__5743.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4080__auto__ || G__5743.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__5743.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__5743);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__5743);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__5744 = cljs.core.next.call(null, es);
          var G__5745 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__5744;
          tcoll__$1 = G__5745;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__5746 = ascending_QMARK_ ? t.left : t.right;
      var G__5747 = cljs.core.conj.call(null, stack__$1, t);
      t = G__5746;
      stack__$1 = G__5747;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__5749 = null;
  var G__5749__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__5749__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__5749 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5749__2.call(this, self__, k);
      case 3:
        return G__5749__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5749;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args5748) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args5748)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.call = function() {
  var G__5751 = null;
  var G__5751__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__5751__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__5751 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5751__2.call(this, self__, k);
      case 3:
        return G__5751__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5751;
}();
cljs.core.RedNode.prototype.apply = function(self__, args5750) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args5750)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__5753 = null;
  var G__5753__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__5753__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__5753 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5753__2.call(this, self__, k);
      case 3:
        return G__5753__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5753;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args5752) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args5752)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__5754 = t.left;
          t = G__5754;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__5755 = t.right;
            t = G__5755;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__5756 = cljs.core.conj.call(null, stack, t);
              var G__5757 = t.left;
              stack = G__5756;
              t = G__5757;
              continue;
            } else {
              var G__5758 = stack;
              var G__5759 = t.right;
              stack = G__5758;
              t = G__5759;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__5760 = cljs.core.conj.call(null, stack, t);
                var G__5761 = t.right;
                stack = G__5760;
                t = G__5761;
                continue;
              } else {
                var G__5762 = stack;
                var G__5763 = t.left;
                stack = G__5762;
                t = G__5763;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__5764 = cljs.core.nnext.call(null, in$);
        var G__5765 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__5764;
        out = G__5765;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__5766) {
    var keyvals = cljs.core.seq(arglist__5766);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__5767) {
    var keyvals = cljs.core.seq(arglist__5767);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj5771 = {};
      return obj5771;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__5772 = cljs.core.nnext.call(null, kvs);
        kvs = G__5772;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__5773) {
    var keyvals = cljs.core.seq(arglist__5773);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__5774 = cljs.core.nnext.call(null, in$);
        var G__5775 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__5774;
        out = G__5775;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__5776) {
    var keyvals = cljs.core.seq(arglist__5776);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__5777 = cljs.core.nnext.call(null, in$);
        var G__5778 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__5777;
        out = G__5778;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__5779) {
    var comparator = cljs.core.first(arglist__5779);
    var keyvals = cljs.core.rest(arglist__5779);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__5780 = self__.mseq;
    if (G__5780) {
      var bit__4080__auto__ = G__5780.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4080__auto__ || G__5780.cljs$core$INext$) {
        return true;
      } else {
        if (!G__5780.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__5780);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__5780);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__5781 = self__.mseq;
    if (G__5781) {
      var bit__4080__auto__ = G__5781.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4080__auto__ || G__5781.cljs$core$INext$) {
        return true;
      } else {
        if (!G__5781.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__5781);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__5781);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__5782 = self__.mseq;
    if (G__5782) {
      var bit__4080__auto__ = G__5782.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4080__auto__ || G__5782.cljs$core$INext$) {
        return true;
      } else {
        if (!G__5782.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__5782);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__5782);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__5783 = self__.mseq;
    if (G__5783) {
      var bit__4080__auto__ = G__5783.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4080__auto__ || G__5783.cljs$core$INext$) {
        return true;
      } else {
        if (!G__5783.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__5783);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__5783);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__5784_SHARP_, p2__5785_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3430__auto__ = p1__5784_SHARP_;
          if (cljs.core.truth_(or__3430__auto__)) {
            return or__3430__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__5785_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__5786) {
    var maps = cljs.core.seq(arglist__5786);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3430__auto__ = m1;
            if (cljs.core.truth_(or__3430__auto__)) {
              return or__3430__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__5787) {
    var f = cljs.core.first(arglist__5787);
    var maps = cljs.core.rest(arglist__5787);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__5788 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__5789 = cljs.core.next.call(null, keys);
      ret = G__5788;
      keys = G__5789;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__5792 = null;
  var G__5792__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__5792__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__5792 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5792__2.call(this, self__, k);
      case 3:
        return G__5792__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5792;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args5791) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args5791)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__5790_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__5790_SHARP_);
  }, other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__5793 = i + 1;
        var G__5794 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__5793;
        out = G__5794;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__5795 = i + 1;
        var G__5796 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__5795;
        out = G__5796;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__5798 = null;
  var G__5798__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__5798__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__5798 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5798__2.call(this, self__, k);
      case 3:
        return G__5798__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5798;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args5797) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args5797)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__5801 = null;
  var G__5801__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__5801__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__5801 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__5801__2.call(this, self__, k);
      case 3:
        return G__5801__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__5801;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args5800) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args5800)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__5799_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__5799_SHARP_);
  }, other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4272__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4272__auto__.length) {
        var G__5802 = i + 1;
        var G__5803 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__5802;
        res = G__5803;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__5804 = cljs.core._next.call(null, in$__$1);
            var G__5805 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__5804;
            out = G__5805;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__5806__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__5806 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__5806__delegate.call(this, keys);
    };
    G__5806.cljs$lang$maxFixedArity = 0;
    G__5806.cljs$lang$applyTo = function(arglist__5807) {
      var keys = cljs.core.seq(arglist__5807);
      return G__5806__delegate(keys);
    };
    G__5806.cljs$core$IFn$_invoke$arity$variadic = G__5806__delegate;
    return G__5806;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__5808) {
    var keys = cljs.core.seq(arglist__5808);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__5809) {
    var comparator = cljs.core.first(arglist__5809);
    var keys = cljs.core.rest(arglist__5809);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
      } else {
        return v;
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__5810_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__5810_SHARP_);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__5810_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__5817, seen__$1) {
        while (true) {
          var vec__5818 = p__5817;
          var f = cljs.core.nth.call(null, vec__5818, 0, null);
          var xs__$1 = vec__5818;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__5819 = cljs.core.rest.call(null, s);
              var G__5820 = seen__$1;
              p__5817 = G__5819;
              seen__$1 = G__5820;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__5821 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__5822 = cljs.core.next.call(null, s__$1);
      ret = G__5821;
      s__$1 = G__5822;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__5824 = x;
    if (G__5824) {
      var bit__4073__auto__ = G__5824.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4073__auto__ || G__5824.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__5825 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__5826 = cljs.core.next.call(null, ks);
      var G__5827 = cljs.core.next.call(null, vs);
      map = G__5825;
      ks = G__5826;
      vs = G__5827;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__5830__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__5828_SHARP_, p2__5829_SHARP_) {
        return max_key.call(null, k, p1__5828_SHARP_, p2__5829_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__5830 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__5830__delegate.call(this, k, x, y, more);
    };
    G__5830.cljs$lang$maxFixedArity = 3;
    G__5830.cljs$lang$applyTo = function(arglist__5831) {
      var k = cljs.core.first(arglist__5831);
      arglist__5831 = cljs.core.next(arglist__5831);
      var x = cljs.core.first(arglist__5831);
      arglist__5831 = cljs.core.next(arglist__5831);
      var y = cljs.core.first(arglist__5831);
      var more = cljs.core.rest(arglist__5831);
      return G__5830__delegate(k, x, y, more);
    };
    G__5830.cljs$core$IFn$_invoke$arity$variadic = G__5830__delegate;
    return G__5830;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__5834__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__5832_SHARP_, p2__5833_SHARP_) {
        return min_key.call(null, k, p1__5832_SHARP_, p2__5833_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__5834 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__5834__delegate.call(this, k, x, y, more);
    };
    G__5834.cljs$lang$maxFixedArity = 3;
    G__5834.cljs$lang$applyTo = function(arglist__5835) {
      var k = cljs.core.first(arglist__5835);
      arglist__5835 = cljs.core.next(arglist__5835);
      var x = cljs.core.first(arglist__5835);
      arglist__5835 = cljs.core.next(arglist__5835);
      var y = cljs.core.first(arglist__5835);
      var more = cljs.core.rest(arglist__5835);
      return G__5834__delegate(k, x, y, more);
    };
    G__5834.cljs$core$IFn$_invoke$arity$variadic = G__5834__delegate;
    return G__5834;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__5838 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__5838, 0, null);
        var s = vec__5838;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__5839 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__5839, 0, null);
      var s = vec__5839;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__5842 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__5842, 0, null);
        var s = vec__5842;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__5843 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__5843, 0, null);
      var s = vec__5843;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3841__auto__ = self__.__hash;
  if (!(h__3841__auto__ == null)) {
    return h__3841__auto__;
  } else {
    var h__3841__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__3841__auto____$1;
    return h__3841__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__5844_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__5844_SHARP_));
        };
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__5855 = null;
      var G__5855__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__5855__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__5855__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__5855__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__5855__4 = function() {
        var G__5856__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__5856 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__5856__delegate.call(this, x, y, z, args);
        };
        G__5856.cljs$lang$maxFixedArity = 3;
        G__5856.cljs$lang$applyTo = function(arglist__5857) {
          var x = cljs.core.first(arglist__5857);
          arglist__5857 = cljs.core.next(arglist__5857);
          var y = cljs.core.first(arglist__5857);
          arglist__5857 = cljs.core.next(arglist__5857);
          var z = cljs.core.first(arglist__5857);
          var args = cljs.core.rest(arglist__5857);
          return G__5856__delegate(x, y, z, args);
        };
        G__5856.cljs$core$IFn$_invoke$arity$variadic = G__5856__delegate;
        return G__5856;
      }();
      G__5855 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__5855__0.call(this);
          case 1:
            return G__5855__1.call(this, x);
          case 2:
            return G__5855__2.call(this, x, y);
          case 3:
            return G__5855__3.call(this, x, y, z);
          default:
            return G__5855__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__5855.cljs$lang$maxFixedArity = 3;
      G__5855.cljs$lang$applyTo = G__5855__4.cljs$lang$applyTo;
      return G__5855;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__5858 = null;
      var G__5858__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__5858__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__5858__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__5858__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__5858__4 = function() {
        var G__5859__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__5859 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__5859__delegate.call(this, x, y, z, args);
        };
        G__5859.cljs$lang$maxFixedArity = 3;
        G__5859.cljs$lang$applyTo = function(arglist__5860) {
          var x = cljs.core.first(arglist__5860);
          arglist__5860 = cljs.core.next(arglist__5860);
          var y = cljs.core.first(arglist__5860);
          arglist__5860 = cljs.core.next(arglist__5860);
          var z = cljs.core.first(arglist__5860);
          var args = cljs.core.rest(arglist__5860);
          return G__5859__delegate(x, y, z, args);
        };
        G__5859.cljs$core$IFn$_invoke$arity$variadic = G__5859__delegate;
        return G__5859;
      }();
      G__5858 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__5858__0.call(this);
          case 1:
            return G__5858__1.call(this, x);
          case 2:
            return G__5858__2.call(this, x, y);
          case 3:
            return G__5858__3.call(this, x, y, z);
          default:
            return G__5858__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__5858.cljs$lang$maxFixedArity = 3;
      G__5858.cljs$lang$applyTo = G__5858__4.cljs$lang$applyTo;
      return G__5858;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__5861 = null;
      var G__5861__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__5861__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__5861__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__5861__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__5861__4 = function() {
        var G__5862__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__5862 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__5862__delegate.call(this, x, y, z, args);
        };
        G__5862.cljs$lang$maxFixedArity = 3;
        G__5862.cljs$lang$applyTo = function(arglist__5863) {
          var x = cljs.core.first(arglist__5863);
          arglist__5863 = cljs.core.next(arglist__5863);
          var y = cljs.core.first(arglist__5863);
          arglist__5863 = cljs.core.next(arglist__5863);
          var z = cljs.core.first(arglist__5863);
          var args = cljs.core.rest(arglist__5863);
          return G__5862__delegate(x, y, z, args);
        };
        G__5862.cljs$core$IFn$_invoke$arity$variadic = G__5862__delegate;
        return G__5862;
      }();
      G__5861 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__5861__0.call(this);
          case 1:
            return G__5861__1.call(this, x);
          case 2:
            return G__5861__2.call(this, x, y);
          case 3:
            return G__5861__3.call(this, x, y, z);
          default:
            return G__5861__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__5861.cljs$lang$maxFixedArity = 3;
      G__5861.cljs$lang$applyTo = G__5861__4.cljs$lang$applyTo;
      return G__5861;
    }();
  };
  var juxt__4 = function() {
    var G__5864__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__5865 = null;
        var G__5865__0 = function() {
          return cljs.core.reduce.call(null, function(p1__5845_SHARP_, p2__5846_SHARP_) {
            return cljs.core.conj.call(null, p1__5845_SHARP_, p2__5846_SHARP_.call(null));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__5865__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__5847_SHARP_, p2__5848_SHARP_) {
            return cljs.core.conj.call(null, p1__5847_SHARP_, p2__5848_SHARP_.call(null, x));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__5865__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__5849_SHARP_, p2__5850_SHARP_) {
            return cljs.core.conj.call(null, p1__5849_SHARP_, p2__5850_SHARP_.call(null, x, y));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__5865__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__5851_SHARP_, p2__5852_SHARP_) {
            return cljs.core.conj.call(null, p1__5851_SHARP_, p2__5852_SHARP_.call(null, x, y, z));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__5865__4 = function() {
          var G__5866__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__5853_SHARP_, p2__5854_SHARP_) {
              return cljs.core.conj.call(null, p1__5853_SHARP_, cljs.core.apply.call(null, p2__5854_SHARP_, x, y, z, args));
            }, cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__5866 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__5866__delegate.call(this, x, y, z, args);
          };
          G__5866.cljs$lang$maxFixedArity = 3;
          G__5866.cljs$lang$applyTo = function(arglist__5867) {
            var x = cljs.core.first(arglist__5867);
            arglist__5867 = cljs.core.next(arglist__5867);
            var y = cljs.core.first(arglist__5867);
            arglist__5867 = cljs.core.next(arglist__5867);
            var z = cljs.core.first(arglist__5867);
            var args = cljs.core.rest(arglist__5867);
            return G__5866__delegate(x, y, z, args);
          };
          G__5866.cljs$core$IFn$_invoke$arity$variadic = G__5866__delegate;
          return G__5866;
        }();
        G__5865 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__5865__0.call(this);
            case 1:
              return G__5865__1.call(this, x);
            case 2:
              return G__5865__2.call(this, x, y);
            case 3:
              return G__5865__3.call(this, x, y, z);
            default:
              return G__5865__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__5865.cljs$lang$maxFixedArity = 3;
        G__5865.cljs$lang$applyTo = G__5865__4.cljs$lang$applyTo;
        return G__5865;
      }();
    };
    var G__5864 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__5864__delegate.call(this, f, g, h, fs);
    };
    G__5864.cljs$lang$maxFixedArity = 3;
    G__5864.cljs$lang$applyTo = function(arglist__5868) {
      var f = cljs.core.first(arglist__5868);
      arglist__5868 = cljs.core.next(arglist__5868);
      var g = cljs.core.first(arglist__5868);
      arglist__5868 = cljs.core.next(arglist__5868);
      var h = cljs.core.first(arglist__5868);
      var fs = cljs.core.rest(arglist__5868);
      return G__5864__delegate(f, g, h, fs);
    };
    G__5864.cljs$core$IFn$_invoke$arity$variadic = G__5864__delegate;
    return G__5864;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__5869 = cljs.core.next.call(null, coll);
        coll = G__5869;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__5870 = n - 1;
        var G__5871 = cljs.core.next.call(null, coll);
        n = G__5870;
        coll = G__5871;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
    }, null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__5873 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__5873, 0, null);
  var flags = cljs.core.nth.call(null, vec__5873, 1, null);
  var pattern = cljs.core.nth.call(null, vec__5873, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_5875 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_5876__$1 = cljs.core.next.call(null, coll);
      var n_5877 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
      while (true) {
        if (coll_5876__$1 && (n_5877 == null || !(n_5877 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_5876__$1), writer, opts);
          var G__5878 = cljs.core.next.call(null, coll_5876__$1);
          var G__5879 = n_5877 - 1;
          coll_5876__$1 = G__5878;
          n_5877 = G__5879;
          continue;
        } else {
        }
        break;
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
        cljs.core._write.call(null, writer, sep);
        print_one.call(null, "...", writer, opts);
      } else {
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_5875;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__5884 = cljs.core.seq.call(null, ss);
    var chunk__5885 = null;
    var count__5886 = 0;
    var i__5887 = 0;
    while (true) {
      if (i__5887 < count__5886) {
        var s = cljs.core._nth.call(null, chunk__5885, i__5887);
        cljs.core._write.call(null, writer, s);
        var G__5888 = seq__5884;
        var G__5889 = chunk__5885;
        var G__5890 = count__5886;
        var G__5891 = i__5887 + 1;
        seq__5884 = G__5888;
        chunk__5885 = G__5889;
        count__5886 = G__5890;
        i__5887 = G__5891;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__5884);
        if (temp__4092__auto__) {
          var seq__5884__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__5884__$1)) {
            var c__4178__auto__ = cljs.core.chunk_first.call(null, seq__5884__$1);
            var G__5892 = cljs.core.chunk_rest.call(null, seq__5884__$1);
            var G__5893 = c__4178__auto__;
            var G__5894 = cljs.core.count.call(null, c__4178__auto__);
            var G__5895 = 0;
            seq__5884 = G__5892;
            chunk__5885 = G__5893;
            count__5886 = G__5894;
            i__5887 = G__5895;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__5884__$1);
            cljs.core._write.call(null, writer, s);
            var G__5896 = cljs.core.next.call(null, seq__5884__$1);
            var G__5897 = null;
            var G__5898 = 0;
            var G__5899 = 0;
            seq__5884 = G__5896;
            chunk__5885 = G__5897;
            count__5886 = G__5898;
            i__5887 = G__5899;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__5900) {
    var writer = cljs.core.first(arglist__5900);
    var ss = cljs.core.rest(arglist__5900);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj5902 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj5902;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__3418__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__3418__auto__)) {
            var and__3418__auto____$1 = function() {
              var G__5908 = obj;
              if (G__5908) {
                var bit__4080__auto__ = G__5908.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__4080__auto__ || G__5908.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__5908.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__5908);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__5908);
              }
            }();
            if (and__3418__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__3418__auto____$1;
            }
          } else {
            return and__3418__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__5909 = obj;
              if (G__5909) {
                var bit__4073__auto__ = G__5909.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__4073__auto__ || G__5909.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = [cljs.core.str(n)].join("");
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__5911 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                                ns = G__5911;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__5910 = obj;
                              if (G__5910) {
                                var bit__4080__auto__ = G__5910.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__4080__auto__ || G__5910.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__5910.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__5910);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__5910);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__5916 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__5917 = null;
  var count__5918 = 0;
  var i__5919 = 0;
  while (true) {
    if (i__5919 < count__5918) {
      var obj = cljs.core._nth.call(null, chunk__5917, i__5919);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__5920 = seq__5916;
      var G__5921 = chunk__5917;
      var G__5922 = count__5918;
      var G__5923 = i__5919 + 1;
      seq__5916 = G__5920;
      chunk__5917 = G__5921;
      count__5918 = G__5922;
      i__5919 = G__5923;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__5916);
      if (temp__4092__auto__) {
        var seq__5916__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__5916__$1)) {
          var c__4178__auto__ = cljs.core.chunk_first.call(null, seq__5916__$1);
          var G__5924 = cljs.core.chunk_rest.call(null, seq__5916__$1);
          var G__5925 = c__4178__auto__;
          var G__5926 = cljs.core.count.call(null, c__4178__auto__);
          var G__5927 = 0;
          seq__5916 = G__5924;
          chunk__5917 = G__5925;
          count__5918 = G__5926;
          i__5919 = G__5927;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__5916__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__5928 = cljs.core.next.call(null, seq__5916__$1);
          var G__5929 = null;
          var G__5930 = 0;
          var G__5931 = 0;
          seq__5916 = G__5928;
          chunk__5917 = G__5929;
          count__5918 = G__5930;
          i__5919 = G__5931;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__5932) {
    var objs = cljs.core.seq(arglist__5932);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__5933) {
    var objs = cljs.core.seq(arglist__5933);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__5934) {
    var objs = cljs.core.seq(arglist__5934);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__5935) {
    var objs = cljs.core.seq(arglist__5935);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__5936) {
    var objs = cljs.core.seq(arglist__5936);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__5937) {
    var objs = cljs.core.seq(arglist__5937);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__5938) {
    var objs = cljs.core.seq(arglist__5938);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__5939) {
    var objs = cljs.core.seq(arglist__5939);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 2;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__5940 = cljs.core.seq.call(null, self__.watches);
  var chunk__5941 = null;
  var count__5942 = 0;
  var i__5943 = 0;
  while (true) {
    if (i__5943 < count__5942) {
      var vec__5944 = cljs.core._nth.call(null, chunk__5941, i__5943);
      var key = cljs.core.nth.call(null, vec__5944, 0, null);
      var f = cljs.core.nth.call(null, vec__5944, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__5946 = seq__5940;
      var G__5947 = chunk__5941;
      var G__5948 = count__5942;
      var G__5949 = i__5943 + 1;
      seq__5940 = G__5946;
      chunk__5941 = G__5947;
      count__5942 = G__5948;
      i__5943 = G__5949;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__5940);
      if (temp__4092__auto__) {
        var seq__5940__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__5940__$1)) {
          var c__4178__auto__ = cljs.core.chunk_first.call(null, seq__5940__$1);
          var G__5950 = cljs.core.chunk_rest.call(null, seq__5940__$1);
          var G__5951 = c__4178__auto__;
          var G__5952 = cljs.core.count.call(null, c__4178__auto__);
          var G__5953 = 0;
          seq__5940 = G__5950;
          chunk__5941 = G__5951;
          count__5942 = G__5952;
          i__5943 = G__5953;
          continue;
        } else {
          var vec__5945 = cljs.core.first.call(null, seq__5940__$1);
          var key = cljs.core.nth.call(null, vec__5945, 0, null);
          var f = cljs.core.nth.call(null, vec__5945, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__5954 = cljs.core.next.call(null, seq__5940__$1);
          var G__5955 = null;
          var G__5956 = 0;
          var G__5957 = 0;
          seq__5940 = G__5954;
          chunk__5941 = G__5955;
          count__5942 = G__5956;
          i__5943 = G__5957;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__5961__delegate = function(x, p__5958) {
      var map__5960 = p__5958;
      var map__5960__$1 = cljs.core.seq_QMARK_.call(null, map__5960) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5960) : map__5960;
      var validator = cljs.core.get.call(null, map__5960__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__5960__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__5961 = function(x, var_args) {
      var p__5958 = null;
      if (arguments.length > 1) {
        p__5958 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__5961__delegate.call(this, x, p__5958);
    };
    G__5961.cljs$lang$maxFixedArity = 1;
    G__5961.cljs$lang$applyTo = function(arglist__5962) {
      var x = cljs.core.first(arglist__5962);
      var p__5958 = cljs.core.rest(arglist__5962);
      return G__5961__delegate(x, p__5958);
    };
    G__5961.cljs$core$IFn$_invoke$arity$variadic = G__5961__delegate;
    return G__5961;
  }();
  atom = function(x, var_args) {
    var p__5958 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  var validate_5963 = a.validator;
  if (validate_5963 == null) {
  } else {
    if (cljs.core.truth_(validate_5963.call(null, new_value))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
    }
  }
  var old_value_5964 = a.state;
  a.state = new_value;
  if (a.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a, old_value_5964, new_value);
  }
  return new_value;
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
  };
  var swap_BANG___3 = function(a, f, x) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
  };
  var swap_BANG___4 = function(a, f, x, y) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
  };
  var swap_BANG___5 = function(a, f, x, y, z) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y, z));
  };
  var swap_BANG___6 = function() {
    var G__5965__delegate = function(a, f, x, y, z, more) {
      return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, z, more));
    };
    var G__5965 = function(a, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 5) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__5965__delegate.call(this, a, f, x, y, z, more);
    };
    G__5965.cljs$lang$maxFixedArity = 5;
    G__5965.cljs$lang$applyTo = function(arglist__5966) {
      var a = cljs.core.first(arglist__5966);
      arglist__5966 = cljs.core.next(arglist__5966);
      var f = cljs.core.first(arglist__5966);
      arglist__5966 = cljs.core.next(arglist__5966);
      var x = cljs.core.first(arglist__5966);
      arglist__5966 = cljs.core.next(arglist__5966);
      var y = cljs.core.first(arglist__5966);
      arglist__5966 = cljs.core.next(arglist__5966);
      var z = cljs.core.first(arglist__5966);
      var more = cljs.core.rest(arglist__5966);
      return G__5965__delegate(a, f, x, y, z, more);
    };
    G__5965.cljs$core$IFn$_invoke$arity$variadic = G__5965__delegate;
    return G__5965;
  }();
  swap_BANG_ = function(a, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      case 5:
        return swap_BANG___5.call(this, a, f, x, y, z);
      default:
        return swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, z, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 5;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___6.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$5 = swap_BANG___5;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__5967) {
    var iref = cljs.core.first(arglist__5967);
    arglist__5967 = cljs.core.next(arglist__5967);
    var f = cljs.core.first(arglist__5967);
    var args = cljs.core.rest(arglist__5967);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__5968) {
    var map__5969 = p__5968;
    var map__5969__$1 = cljs.core.seq_QMARK_.call(null, map__5969) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5969) : map__5969;
    var curr_state = map__5969__$1;
    var done = cljs.core.get.call(null, map__5969__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if (cljs.core.truth_(done)) {
      return curr_state;
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
    }
  }));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj5971 = {};
  return obj5971;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3418__auto__ = x;
    if (and__3418__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4057__auto__ = x == null ? null : x;
    return function() {
      var or__3430__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3418__auto__ = x;
    if (and__3418__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4057__auto__ = x == null ? null : x;
    return function() {
      var or__3430__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__5973 = k;
    if (G__5973) {
      var bit__4080__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3430__auto__ = bit__4080__auto__;
        if (cljs.core.truth_(or__3430__auto__)) {
          return or__3430__auto__;
        } else {
          return G__5973.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__5973.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__5973);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__5973);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__5987 = x;
      if (G__5987) {
        var bit__4080__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3430__auto__ = bit__4080__auto__;
          if (cljs.core.truth_(or__3430__auto__)) {
            return or__3430__auto__;
          } else {
            return G__5987.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__5987.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__5987);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__5987);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj5989 = {};
              return obj5989;
            }();
            var seq__5990_6000 = cljs.core.seq.call(null, x);
            var chunk__5991_6001 = null;
            var count__5992_6002 = 0;
            var i__5993_6003 = 0;
            while (true) {
              if (i__5993_6003 < count__5992_6002) {
                var vec__5994_6004 = cljs.core._nth.call(null, chunk__5991_6001, i__5993_6003);
                var k_6005 = cljs.core.nth.call(null, vec__5994_6004, 0, null);
                var v_6006 = cljs.core.nth.call(null, vec__5994_6004, 1, null);
                m[cljs.core.key__GT_js.call(null, k_6005)] = clj__GT_js.call(null, v_6006);
                var G__6007 = seq__5990_6000;
                var G__6008 = chunk__5991_6001;
                var G__6009 = count__5992_6002;
                var G__6010 = i__5993_6003 + 1;
                seq__5990_6000 = G__6007;
                chunk__5991_6001 = G__6008;
                count__5992_6002 = G__6009;
                i__5993_6003 = G__6010;
                continue;
              } else {
                var temp__4092__auto___6011 = cljs.core.seq.call(null, seq__5990_6000);
                if (temp__4092__auto___6011) {
                  var seq__5990_6012__$1 = temp__4092__auto___6011;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__5990_6012__$1)) {
                    var c__4178__auto___6013 = cljs.core.chunk_first.call(null, seq__5990_6012__$1);
                    var G__6014 = cljs.core.chunk_rest.call(null, seq__5990_6012__$1);
                    var G__6015 = c__4178__auto___6013;
                    var G__6016 = cljs.core.count.call(null, c__4178__auto___6013);
                    var G__6017 = 0;
                    seq__5990_6000 = G__6014;
                    chunk__5991_6001 = G__6015;
                    count__5992_6002 = G__6016;
                    i__5993_6003 = G__6017;
                    continue;
                  } else {
                    var vec__5995_6018 = cljs.core.first.call(null, seq__5990_6012__$1);
                    var k_6019 = cljs.core.nth.call(null, vec__5995_6018, 0, null);
                    var v_6020 = cljs.core.nth.call(null, vec__5995_6018, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_6019)] = clj__GT_js.call(null, v_6020);
                    var G__6021 = cljs.core.next.call(null, seq__5990_6012__$1);
                    var G__6022 = null;
                    var G__6023 = 0;
                    var G__6024 = 0;
                    seq__5990_6000 = G__6021;
                    chunk__5991_6001 = G__6022;
                    count__5992_6002 = G__6023;
                    i__5993_6003 = G__6024;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__5996_6025 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__5997_6026 = null;
              var count__5998_6027 = 0;
              var i__5999_6028 = 0;
              while (true) {
                if (i__5999_6028 < count__5998_6027) {
                  var x_6029__$1 = cljs.core._nth.call(null, chunk__5997_6026, i__5999_6028);
                  arr.push(x_6029__$1);
                  var G__6030 = seq__5996_6025;
                  var G__6031 = chunk__5997_6026;
                  var G__6032 = count__5998_6027;
                  var G__6033 = i__5999_6028 + 1;
                  seq__5996_6025 = G__6030;
                  chunk__5997_6026 = G__6031;
                  count__5998_6027 = G__6032;
                  i__5999_6028 = G__6033;
                  continue;
                } else {
                  var temp__4092__auto___6034 = cljs.core.seq.call(null, seq__5996_6025);
                  if (temp__4092__auto___6034) {
                    var seq__5996_6035__$1 = temp__4092__auto___6034;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__5996_6035__$1)) {
                      var c__4178__auto___6036 = cljs.core.chunk_first.call(null, seq__5996_6035__$1);
                      var G__6037 = cljs.core.chunk_rest.call(null, seq__5996_6035__$1);
                      var G__6038 = c__4178__auto___6036;
                      var G__6039 = cljs.core.count.call(null, c__4178__auto___6036);
                      var G__6040 = 0;
                      seq__5996_6025 = G__6037;
                      chunk__5997_6026 = G__6038;
                      count__5998_6027 = G__6039;
                      i__5999_6028 = G__6040;
                      continue;
                    } else {
                      var x_6041__$1 = cljs.core.first.call(null, seq__5996_6035__$1);
                      arr.push(x_6041__$1);
                      var G__6042 = cljs.core.next.call(null, seq__5996_6035__$1);
                      var G__6043 = null;
                      var G__6044 = 0;
                      var G__6045 = 0;
                      seq__5996_6025 = G__6042;
                      chunk__5997_6026 = G__6043;
                      count__5998_6027 = G__6044;
                      i__5999_6028 = G__6045;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj6047 = {};
  return obj6047;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3418__auto__ = x;
    if (and__3418__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4057__auto__ = x == null ? null : x;
    return function() {
      var or__3430__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__6068__delegate = function(x, opts) {
      if (function() {
        var G__6058 = x;
        if (G__6058) {
          var bit__4080__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3430__auto__ = bit__4080__auto__;
            if (cljs.core.truth_(or__3430__auto__)) {
              return or__3430__auto__;
            } else {
              return G__6058.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__6058.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__6058);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__6058);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__6059 = opts;
          var map__6059__$1 = cljs.core.seq_QMARK_.call(null, map__6059) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6059) : map__6059;
          var keywordize_keys = cljs.core.get.call(null, map__6059__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__6059, map__6059__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4147__auto__ = function(map__6059, map__6059__$1, keywordize_keys, keyfn) {
                          return function iter__6064(s__6065) {
                            return new cljs.core.LazySeq(null, function(map__6059, map__6059__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__6065__$1 = s__6065;
                                while (true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__6065__$1);
                                  if (temp__4092__auto__) {
                                    var s__6065__$2 = temp__4092__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__6065__$2)) {
                                      var c__4145__auto__ = cljs.core.chunk_first.call(null, s__6065__$2);
                                      var size__4146__auto__ = cljs.core.count.call(null, c__4145__auto__);
                                      var b__6067 = cljs.core.chunk_buffer.call(null, size__4146__auto__);
                                      if (function() {
                                        var i__6066 = 0;
                                        while (true) {
                                          if (i__6066 < size__4146__auto__) {
                                            var k = cljs.core._nth.call(null, c__4145__auto__, i__6066);
                                            cljs.core.chunk_append.call(null, b__6067, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__6069 = i__6066 + 1;
                                            i__6066 = G__6069;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__6067), iter__6064.call(null, cljs.core.chunk_rest.call(null, s__6065__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__6067), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__6065__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__6064.call(null, cljs.core.rest.call(null, s__6065__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__6059, map__6059__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__6059, map__6059__$1, keywordize_keys, keyfn);
                        return iter__4147__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__6059, map__6059__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__6068 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__6068__delegate.call(this, x, opts);
    };
    G__6068.cljs$lang$maxFixedArity = 1;
    G__6068.cljs$lang$applyTo = function(arglist__6070) {
      var x = cljs.core.first(arglist__6070);
      var opts = cljs.core.rest(arglist__6070);
      return G__6068__delegate(x, opts);
    };
    G__6068.cljs$core$IFn$_invoke$arity$variadic = G__6068__delegate;
    return G__6068;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__6071__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v;
      } else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret;
      }
    };
    var G__6071 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__6071__delegate.call(this, args);
    };
    G__6071.cljs$lang$maxFixedArity = 0;
    G__6071.cljs$lang$applyTo = function(arglist__6072) {
      var args = cljs.core.seq(arglist__6072);
      return G__6071__delegate(args);
    };
    G__6071.cljs$core$IFn$_invoke$arity$variadic = G__6071__delegate;
    return G__6071;
  }();
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__6073 = ret;
        f = G__6073;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__6074__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__6074 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__6074__delegate.call(this, f, args);
    };
    G__6074.cljs$lang$maxFixedArity = 1;
    G__6074.cljs$lang$applyTo = function(arglist__6075) {
      var f = cljs.core.first(arglist__6075);
      var args = cljs.core.rest(arglist__6075);
      return G__6074__delegate(f, args);
    };
    G__6074.cljs$core$IFn$_invoke$arity$variadic = G__6074__delegate;
    return G__6074;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__6076) {
    var f = cljs.core.first(arglist__6076);
    var args = cljs.core.rest(arglist__6076);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3430__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3430__auto__) {
      return or__3430__auto__;
    } else {
      var or__3430__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3430__auto____$1) {
        return or__3430__auto____$1;
      } else {
        var and__3418__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3418__auto__) {
          var and__3418__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3418__auto____$1) {
            var and__3418__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3418__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__6077 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__6078 = i + 1;
                  ret = G__6077;
                  i = G__6078;
                  continue;
                }
                break;
              }
            } else {
              return and__3418__auto____$2;
            }
          } else {
            return and__3418__auto____$1;
          }
        } else {
          return and__3418__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3430__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3430__auto__)) {
      return or__3430__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__6079_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__6079_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__6079_SHARP_), cljs.core.second.call(null, p1__6079_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__6080_SHARP_, p2__6081_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__6080_SHARP_, p2__6081_SHARP_);
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3430__auto__ = cljs.core.truth_(function() {
    var and__3418__auto__ = xprefs;
    if (cljs.core.truth_(and__3418__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3418__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3430__auto__)) {
    return or__3430__auto__;
  } else {
    var or__3430__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__6082 = cljs.core.rest.call(null, ps);
          ps = G__6082;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3430__auto____$1)) {
      return or__3430__auto____$1;
    } else {
      var or__3430__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__6083 = cljs.core.rest.call(null, ps);
            ps = G__6083;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3430__auto____$2)) {
        return or__3430__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3430__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3430__auto__)) {
    return or__3430__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__6086) {
    var vec__6087 = p__6086;
    var k = cljs.core.nth.call(null, vec__6087, 0, null);
    var _ = cljs.core.nth.call(null, vec__6087, 1, null);
    var e = vec__6087;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3430__auto__ = be == null;
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj6089 = {};
  return obj6089;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3418__auto__ = mf;
    if (and__3418__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4057__auto__ = mf == null ? null : mf;
    return function() {
      var or__3430__auto__ = cljs.core._reset[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._reset["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3418__auto__ = mf;
    if (and__3418__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4057__auto__ = mf == null ? null : mf;
    return function() {
      var or__3430__auto__ = cljs.core._add_method[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._add_method["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3418__auto__ = mf;
    if (and__3418__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4057__auto__ = mf == null ? null : mf;
    return function() {
      var or__3430__auto__ = cljs.core._remove_method[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._remove_method["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3418__auto__ = mf;
    if (and__3418__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4057__auto__ = mf == null ? null : mf;
    return function() {
      var or__3430__auto__ = cljs.core._prefer_method[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3418__auto__ = mf;
    if (and__3418__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4057__auto__ = mf == null ? null : mf;
    return function() {
      var or__3430__auto__ = cljs.core._get_method[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._get_method["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3418__auto__ = mf;
    if (and__3418__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4057__auto__ = mf == null ? null : mf;
    return function() {
      var or__3430__auto__ = cljs.core._methods[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._methods["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3418__auto__ = mf;
    if (and__3418__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4057__auto__ = mf == null ? null : mf;
    return function() {
      var or__3430__auto__ = cljs.core._prefers[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._prefers["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if (function() {
    var and__3418__auto__ = mf;
    if (and__3418__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args);
  } else {
    var x__4057__auto__ = mf == null ? null : mf;
    return function() {
      var or__3430__auto__ = cljs.core._dispatch[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.core._dispatch["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args);
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args);
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null;
  });
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn;
  } else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__6090__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args);
  };
  var G__6090 = function(_, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__6090__delegate.call(this, _, args);
  };
  G__6090.cljs$lang$maxFixedArity = 1;
  G__6090.cljs$lang$applyTo = function(arglist__6091) {
    var _ = cljs.core.first(arglist__6091);
    var args = cljs.core.rest(arglist__6091);
    return G__6090__delegate(_, args);
  };
  G__6090.cljs$core$IFn$_invoke$arity$variadic = G__6090__delegate;
  return G__6090;
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4000__auto__, writer__4001__auto__, opts__4002__auto__) {
  return cljs.core._write.call(null, writer__4001__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("qgame.interpreter.warning");
goog.require("cljs.core");
qgame.interpreter.warning.warnings = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
cljs.core.add_watch.call(null, qgame.interpreter.warning.warnings, new cljs.core.Keyword(null, "alert", "alert", 1106803918), function(_k, _r, old_vec, new_vec) {
  var messages = cljs.core.subvec.call(null, new_vec, cljs.core.count.call(null, old_vec));
  return cljs.core.map.call(null, alert, messages);
});
qgame.interpreter.warning.problem_to_message = function() {
  var method_table__4288__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__4289__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__4290__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__4291__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__4292__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("problem-to-message", function() {
    var G__5047__delegate = function(k, args) {
      return k;
    };
    var G__5047 = function(k, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__5047__delegate.call(this, k, args);
    };
    G__5047.cljs$lang$maxFixedArity = 1;
    G__5047.cljs$lang$applyTo = function(arglist__5048) {
      var k = cljs.core.first(arglist__5048);
      var args = cljs.core.rest(arglist__5048);
      return G__5047__delegate(k, args);
    };
    G__5047.cljs$core$IFn$_invoke$arity$variadic = G__5047__delegate;
    return G__5047;
  }(), new cljs.core.Keyword(null, "default", "default", 2558708147), hierarchy__4292__auto__, method_table__4288__auto__, prefer_table__4289__auto__, method_cache__4290__auto__, cached_hierarchy__4291__auto__);
}();
cljs.core._add_method.call(null, qgame.interpreter.warning.problem_to_message, new cljs.core.Keyword(null, "extra-end", "extra-end", 759430416), function(_) {
  return "Extra '(end)' encountered";
});
cljs.core._add_method.call(null, qgame.interpreter.warning.problem_to_message, new cljs.core.Keyword(null, "lingering-status", "lingering-status", 1716493074), function(_, log) {
  var G__5049 = qgame.interpreter.warning.s;
  if (cljs.core._EQ_.call(null, "else_clause", G__5049)) {
    return "Some '(measure)' missing an '(end)'";
  } else {
    if (cljs.core._EQ_.call(null, "then_clause", G__5049)) {
      return "Some '(measure)' missing two '(end)'s";
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return[cljs.core.str("Lingering status: "), cljs.core.str(qgame.interpreter.warning.s)].join("");
      } else {
        return null;
      }
    }
  }
});
qgame.interpreter.warning.warn_BANG_ = function() {
  var warn_BANG___delegate = function(task_key, problem_key, args) {
    var message = [cljs.core.str("Warning while "), cljs.core.str(cljs.core.name.call(null, task_key)), cljs.core.str(": "), cljs.core.str(cljs.core.apply.call(null, qgame.interpreter.warning.problem_to_message, problem_key, args))].join("");
    return cljs.core.swap_BANG_.call(null, qgame.interpreter.warning.warnings, cljs.core.conj, message);
  };
  var warn_BANG_ = function(task_key, problem_key, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return warn_BANG___delegate.call(this, task_key, problem_key, args);
  };
  warn_BANG_.cljs$lang$maxFixedArity = 2;
  warn_BANG_.cljs$lang$applyTo = function(arglist__5050) {
    var task_key = cljs.core.first(arglist__5050);
    arglist__5050 = cljs.core.next(arglist__5050);
    var problem_key = cljs.core.first(arglist__5050);
    var args = cljs.core.rest(arglist__5050);
    return warn_BANG___delegate(task_key, problem_key, args);
  };
  warn_BANG_.cljs$core$IFn$_invoke$arity$variadic = warn_BANG___delegate;
  return warn_BANG_;
}();
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose;
goog.disposable.IDisposable.prototype.isDisposed;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    this.creationStack = (new Error).stack;
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.Disposable.MONITORING_MODE = 0;
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.bind(callback, opt_scope));
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.debug.errorHandlerWeakDep");
goog.debug.errorHandlerWeakDep = {protectEntryPoint:function(fn, opt_tracers) {
  return fn;
}};
goog.provide("goog.userAgent");
goog.require("goog.string");
goog.userAgent.ASSUME_IE = false;
goog.userAgent.ASSUME_GECKO = false;
goog.userAgent.ASSUME_WEBKIT = false;
goog.userAgent.ASSUME_MOBILE_WEBKIT = false;
goog.userAgent.ASSUME_OPERA = false;
goog.userAgent.ASSUME_ANY_VERSION = false;
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || (goog.userAgent.ASSUME_GECKO || (goog.userAgent.ASSUME_MOBILE_WEBKIT || (goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA)));
goog.userAgent.getUserAgentString = function() {
  return goog.global["navigator"] ? goog.global["navigator"].userAgent : null;
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"];
};
goog.userAgent.init_ = function() {
  goog.userAgent.detectedOpera_ = false;
  goog.userAgent.detectedIe_ = false;
  goog.userAgent.detectedWebkit_ = false;
  goog.userAgent.detectedMobile_ = false;
  goog.userAgent.detectedGecko_ = false;
  var ua;
  if (!goog.userAgent.BROWSER_KNOWN_ && (ua = goog.userAgent.getUserAgentString())) {
    var navigator = goog.userAgent.getNavigator();
    goog.userAgent.detectedOpera_ = ua.indexOf("Opera") == 0;
    goog.userAgent.detectedIe_ = !goog.userAgent.detectedOpera_ && ua.indexOf("MSIE") != -1;
    goog.userAgent.detectedWebkit_ = !goog.userAgent.detectedOpera_ && ua.indexOf("WebKit") != -1;
    goog.userAgent.detectedMobile_ = goog.userAgent.detectedWebkit_ && ua.indexOf("Mobile") != -1;
    goog.userAgent.detectedGecko_ = !goog.userAgent.detectedOpera_ && (!goog.userAgent.detectedWebkit_ && navigator.product == "Gecko");
  }
};
if (!goog.userAgent.BROWSER_KNOWN_) {
  goog.userAgent.init_();
}
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.userAgent.detectedOpera_;
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.userAgent.detectedIe_;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.userAgent.detectedGecko_;
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.userAgent.detectedWebkit_;
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.detectedMobile_;
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.userAgent.ASSUME_MAC = false;
goog.userAgent.ASSUME_WINDOWS = false;
goog.userAgent.ASSUME_LINUX = false;
goog.userAgent.ASSUME_X11 = false;
goog.userAgent.ASSUME_ANDROID = false;
goog.userAgent.ASSUME_IPHONE = false;
goog.userAgent.ASSUME_IPAD = false;
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || (goog.userAgent.ASSUME_WINDOWS || (goog.userAgent.ASSUME_LINUX || (goog.userAgent.ASSUME_X11 || (goog.userAgent.ASSUME_ANDROID || (goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD)))));
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && ua.indexOf("Android") >= 0;
  goog.userAgent.detectedIPhone_ = !!ua && ua.indexOf("iPhone") >= 0;
  goog.userAgent.detectedIPad_ = !!ua && ua.indexOf("iPad") >= 0;
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    version = typeof operaVersion == "function" ? operaVersion() : operaVersion;
  } else {
    if (goog.userAgent.GECKO) {
      re = /rv\:([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.IE) {
        re = /MSIE\s+([^\);]+)(\)|;)/;
      } else {
        if (goog.userAgent.WEBKIT) {
          re = /WebKit\/(\S+)/;
        }
      }
    }
    if (re) {
      var arr = re.exec(goog.userAgent.getUserAgentString());
      version = arr ? arr[1] : "";
    }
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionCache_ = {};
goog.userAgent.isVersion = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || (goog.userAgent.isVersionCache_[version] || (goog.userAgent.isVersionCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0));
};
goog.userAgent.isDocumentMode = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersion("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersion("1.9b") || (goog.userAgent.IE && goog.userAgent.isVersion("8") || (goog.userAgent.OPERA && 
goog.userAgent.isVersion("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersion("528"))), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersion("8") || goog.userAgent.IE && !goog.userAgent.isVersion("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || (!!(goog.global["document"] && (document.documentElement && "ontouchstart" in document.documentElement)) || !!(goog.global["navigator"] && goog.global["navigator"]["msMaxTouchPoints"]))};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type;
  this.target = opt_target;
  this.currentTarget = this.target;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.propagationStopped_ = false;
goog.events.Event.prototype.defaultPrevented = false;
goog.events.Event.prototype.returnValue_ = true;
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.EventType = {CLICK:"click", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", 
DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONTEXTMENU:"contextmenu", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", 
POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", TRANSITIONEND:goog.userAgent.WEBKIT ? "webkitTransitionEnd" : goog.userAgent.OPERA ? "oTransitionEnd" : "transitionend", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", 
MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROVER:"MSPointerOver", MSPOINTEROUT:"MSPointerOut", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.target = null;
goog.events.BrowserEvent.prototype.currentTarget;
goog.events.BrowserEvent.prototype.relatedTarget = null;
goog.events.BrowserEvent.prototype.offsetX = 0;
goog.events.BrowserEvent.prototype.offsetY = 0;
goog.events.BrowserEvent.prototype.clientX = 0;
goog.events.BrowserEvent.prototype.clientY = 0;
goog.events.BrowserEvent.prototype.screenX = 0;
goog.events.BrowserEvent.prototype.screenY = 0;
goog.events.BrowserEvent.prototype.button = 0;
goog.events.BrowserEvent.prototype.keyCode = 0;
goog.events.BrowserEvent.prototype.charCode = 0;
goog.events.BrowserEvent.prototype.ctrlKey = false;
goog.events.BrowserEvent.prototype.altKey = false;
goog.events.BrowserEvent.prototype.shiftKey = false;
goog.events.BrowserEvent.prototype.metaKey = false;
goog.events.BrowserEvent.prototype.state;
goog.events.BrowserEvent.prototype.platformModifierKey = false;
goog.events.BrowserEvent.prototype.event_ = null;
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  goog.events.Event.call(this, type);
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
  delete this.propagationStopped_;
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && (goog.userAgent.MAC && this.ctrlKey));
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.EventWrapper");
goog.events.EventWrapper = function() {
};
goog.events.EventWrapper.prototype.listen = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.events.EventWrapper.prototype.unlisten = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventLike");
goog.events.Listenable = function() {
};
goog.events.Listenable.USE_LISTENABLE_INTERFACE = false;
goog.events.Listenable.IMPLEMENTED_BY_PROP_ = "__closure_listenable";
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP_] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP_]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function() {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
};
goog.events.Listener.ENABLE_MONITORING = false;
goog.events.Listener.prototype.isFunctionListener_;
goog.events.Listener.prototype.listener;
goog.events.Listener.prototype.proxy;
goog.events.Listener.prototype.src;
goog.events.Listener.prototype.type;
goog.events.Listener.prototype.capture;
goog.events.Listener.prototype.handler;
goog.events.Listener.prototype.key = 0;
goog.events.Listener.prototype.removed = false;
goog.events.Listener.prototype.callOnce = false;
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.init = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.isFunction(listener)) {
    this.isFunctionListener_ = true;
  } else {
    if (listener && (listener.handleEvent && goog.isFunction(listener.handleEvent))) {
      this.isFunctionListener_ = false;
    } else {
      throw Error("Invalid listener argument");
    }
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.callOnce = false;
  this.key = goog.events.ListenableKey.reserveKey();
  this.removed = false;
};
goog.events.Listener.prototype.handleEvent = function(eventObject) {
  if (this.isFunctionListener_) {
    return this.listener.call(this.handler || this.src, eventObject);
  }
  return this.listener.handleEvent.call(this.listener, eventObject);
};
goog.provide("goog.events");
goog.provide("goog.events.Key");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.debug.errorHandlerWeakDep");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventWrapper");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.require("goog.userAgent");
goog.events.Key;
goog.events.ListenableType;
goog.events.listeners_ = {};
goog.events.listenerTree_ = {};
goog.events.sources_ = {};
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.keySeparator_ = "_";
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  var listenableKey;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listen((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  } else {
    listenableKey = goog.events.listen_((src), type, listener, false, opt_capt, opt_handler);
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key;
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    map[type] = {count_:0, remaining_:0};
  }
  map = map[type];
  if (!(capture in map)) {
    map[capture] = {count_:0, remaining_:0};
    map.count_++;
  }
  map = map[capture];
  var srcUid = goog.getUid(src);
  var listenerArray, listenerObj;
  map.remaining_++;
  if (!map[srcUid]) {
    listenerArray = map[srcUid] = [];
    map.count_++;
  } else {
    listenerArray = map[srcUid];
    for (var i = 0;i < listenerArray.length;i++) {
      listenerObj = listenerArray[i];
      if (listenerObj.listener == listener && listenerObj.handler == opt_handler) {
        if (listenerObj.removed) {
          break;
        }
        if (!callOnce) {
          listenerArray[i].callOnce = false;
        }
        return listenerArray[i];
      }
    }
  }
  var proxy = goog.events.getProxy();
  listenerObj = new goog.events.Listener;
  listenerObj.init(listener, proxy, src, type, capture, opt_handler);
  listenerObj.callOnce = callOnce;
  proxy.src = src;
  proxy.listener = listenerObj;
  listenerArray.push(listenerObj);
  if (!goog.events.sources_[srcUid]) {
    goog.events.sources_[srcUid] = [];
  }
  goog.events.sources_[srcUid].push(listenerObj);
  if (src.addEventListener) {
    if (src == goog.global || !src.customEvent_) {
      src.addEventListener(type, proxy, capture);
    }
  } else {
    src.attachEvent(goog.events.getOnString_(type), proxy);
  }
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  var listenableKey;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listenOnce((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  } else {
    listenableKey = goog.events.listen_((src), type, listener, true, opt_capt, opt_handler);
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key;
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  }
  var capture = !!opt_capt;
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if (!listenerArray) {
    return false;
  }
  for (var i = 0;i < listenerArray.length;i++) {
    if (listenerArray[i].listener == listener && (listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler)) {
      return goog.events.unlistenByKey(listenerArray[i].key);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  var listener = goog.events.listeners_[key];
  if (!listener) {
    return false;
  }
  if (listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  var capture = listener.capture;
  if (src.removeEventListener) {
    if (src == goog.global || !src.customEvent_) {
      src.removeEventListener(type, proxy, capture);
    }
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  var srcUid = goog.getUid(src);
  if (goog.events.sources_[srcUid]) {
    var sourcesArray = goog.events.sources_[srcUid];
    goog.array.remove(sourcesArray, listener);
    if (sourcesArray.length == 0) {
      delete goog.events.sources_[srcUid];
    }
  }
  listener.removed = true;
  var listenerArray = goog.events.listenerTree_[type][capture][srcUid];
  if (listenerArray) {
    listenerArray.needsCleanup_ = true;
    goog.events.cleanUp_(type, capture, srcUid, listenerArray);
  }
  delete goog.events.listeners_[key];
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.cleanUp = function(listenableKey) {
  delete goog.events.listeners_[listenableKey.key];
};
goog.events.cleanUp_ = function(type, capture, srcUid, listenerArray) {
  if (!listenerArray.locked_) {
    if (listenerArray.needsCleanup_) {
      for (var oldIndex = 0, newIndex = 0;oldIndex < listenerArray.length;oldIndex++) {
        if (listenerArray[oldIndex].removed) {
          var proxy = listenerArray[oldIndex].proxy;
          proxy.src = null;
          continue;
        }
        if (oldIndex != newIndex) {
          listenerArray[newIndex] = listenerArray[oldIndex];
        }
        newIndex++;
      }
      listenerArray.length = newIndex;
      listenerArray.needsCleanup_ = false;
      if (newIndex == 0) {
        delete goog.events.listenerTree_[type][capture][srcUid];
        goog.events.listenerTree_[type][capture].count_--;
        if (goog.events.listenerTree_[type][capture].count_ == 0) {
          delete goog.events.listenerTree_[type][capture];
          goog.events.listenerTree_[type].count_--;
        }
        if (goog.events.listenerTree_[type].count_ == 0) {
          delete goog.events.listenerTree_[type];
        }
      }
    }
  }
};
goog.events.removeAll = function(opt_obj, opt_type) {
  var count = 0;
  var noObj = opt_obj == null;
  var noType = opt_type == null;
  if (!noObj) {
    if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && (opt_obj && goog.events.Listenable.isImplementedBy(opt_obj))) {
      return opt_obj.removeAllListeners(opt_type);
    }
    var srcUid = goog.getUid((opt_obj));
    if (goog.events.sources_[srcUid]) {
      var sourcesArray = goog.events.sources_[srcUid];
      for (var i = sourcesArray.length - 1;i >= 0;i--) {
        var listener = sourcesArray[i];
        if (noType || opt_type == listener.type) {
          goog.events.unlistenByKey(listener.key);
          count++;
        }
      }
    }
  } else {
    goog.object.forEach(goog.events.listeners_, function(listener, key) {
      goog.events.unlistenByKey(key);
      count++;
    });
  }
  return count;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    return goog.events.getListeners_(obj, type, capture) || [];
  }
};
goog.events.getListeners_ = function(obj, type, capture) {
  var map = goog.events.listenerTree_;
  if (type in map) {
    map = map[type];
    if (capture in map) {
      map = map[capture];
      var objUid = goog.getUid(obj);
      if (map[objUid]) {
        return map[objUid];
      }
    }
  }
  return null;
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  var capture = !!opt_capt;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener((type), goog.events.wrapListener_(listener), capture, opt_handler);
  }
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;i++) {
      if (!listenerArray[i].removed && (listenerArray[i].listener == listener && (listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler))) {
        return listenerArray[i];
      }
    }
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var objUid = goog.getUid(obj);
  var listeners = goog.events.sources_[objUid];
  if (listeners) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    if (hasType && hasCapture) {
      var map = goog.events.listenerTree_[opt_type];
      return!!map && (!!map[opt_capture] && objUid in map[opt_capture]);
    } else {
      if (!(hasType || hasCapture)) {
        return true;
      } else {
        return goog.array.some(listeners, function(listener) {
          return hasType && listener.type == opt_type || hasCapture && listener.capture == opt_capture;
        });
      }
    }
  }
  return false;
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  var map = goog.events.listenerTree_;
  if (type in map) {
    map = map[type];
    if (capture in map) {
      return goog.events.fireListeners_(map[capture], obj, type, capture, eventObject);
    }
  }
  return true;
};
goog.events.fireListeners_ = function(map, obj, type, capture, eventObject) {
  var retval = 1;
  var objUid = goog.getUid(obj);
  if (map[objUid]) {
    var remaining = --map.remaining_;
    var listenerArray = map[objUid];
    if (!listenerArray.locked_) {
      listenerArray.locked_ = 1;
    } else {
      listenerArray.locked_++;
    }
    try {
      var length = listenerArray.length;
      for (var i = 0;i < length;i++) {
        var listener = listenerArray[i];
        if (listener && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    } finally {
      map.remaining_ = Math.max(remaining, map.remaining_);
      listenerArray.locked_--;
      goog.events.cleanUp_(type, capture, objUid, listenerArray);
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener.key);
  }
  return listener.handleEvent(eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.object.getCount(goog.events.listeners_);
};
goog.events.dispatchEvent = function(src, e) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    return src.dispatchEvent(e);
  }
  var type = e.type || e;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    return true;
  }
  if (goog.isString(e)) {
    e = new goog.events.Event(e, src);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event((type), src);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || src;
    }
  }
  var rv = 1, ancestors;
  map = map[type];
  var hasCapture = true in map;
  var targetsMap;
  if (hasCapture) {
    ancestors = [];
    for (var parent = src;parent;parent = parent.getParentEventTarget()) {
      ancestors.push(parent);
    }
    targetsMap = map[true];
    targetsMap.remaining_ = targetsMap.count_;
    for (var i = ancestors.length - 1;!e.propagationStopped_ && (i >= 0 && targetsMap.remaining_);i--) {
      e.currentTarget = ancestors[i];
      rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, true, e) && e.returnValue_ != false;
    }
  }
  var hasBubble = false in map;
  if (hasBubble) {
    targetsMap = map[false];
    targetsMap.remaining_ = targetsMap.count_;
    if (hasCapture) {
      for (var i = 0;!e.propagationStopped_ && (i < ancestors.length && targetsMap.remaining_);i++) {
        e.currentTarget = ancestors[i];
        rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, false, e) && e.returnValue_ != false;
      }
    } else {
      for (var current = src;!e.propagationStopped_ && (current && targetsMap.remaining_);current = current.getParentEventTarget()) {
        e.currentTarget = current;
        rv &= goog.events.fireListeners_(targetsMap, current, e.type, false, e) && e.returnValue_ != false;
      }
    }
  }
  return Boolean(rv);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  var type = listener.type;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    return true;
  }
  map = map[type];
  var retval, targetsMap;
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var hasCapture = true in map;
    var hasBubble = false in map;
    if (hasCapture) {
      if (goog.events.isMarkedIeEvent_(ieEvent)) {
        return true;
      }
      goog.events.markIeEvent_(ieEvent);
    }
    var evt = new goog.events.BrowserEvent;
    evt.init(ieEvent, (this));
    retval = true;
    try {
      if (hasCapture) {
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        targetsMap = map[true];
        targetsMap.remaining_ = targetsMap.count_;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && (i >= 0 && targetsMap.remaining_);i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, true, evt);
        }
        if (hasBubble) {
          targetsMap = map[false];
          targetsMap.remaining_ = targetsMap.count_;
          for (var i = 0;!evt.propagationStopped_ && (i < ancestors.length && targetsMap.remaining_);i++) {
            evt.currentTarget = ancestors[i];
            retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, false, evt);
          }
        }
      } else {
        retval = goog.events.fireListener(listener, evt);
      }
    } finally {
      if (ancestors) {
        ancestors.length = 0;
      }
    }
    return retval;
  }
  var be = new goog.events.BrowserEvent(opt_evt, (this));
  retval = goog.events.fireListener(listener, be);
  return retval;
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener_ = function(listener) {
  if (goog.isFunction(listener)) {
    return listener;
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_] || (listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
    return listener.handleEvent(e);
  });
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.eventTargetListeners_ = {};
    this.reallyDisposed_ = false;
    this.actualEventTarget_ = this;
  }
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.Listenable.addImplementation(goog.events.EventTarget);
}
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.customEvent_ = true;
goog.events.EventTarget.prototype.parentEventTarget_ = null;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    if (this.reallyDisposed_) {
      return true;
    }
    var ancestorsTree, ancestor = this.getParentEventTarget();
    if (ancestor) {
      ancestorsTree = [];
      var ancestorCount = 1;
      for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
        ancestorsTree.push(ancestor);
        goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
      }
    }
    return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
  } else {
    return goog.events.dispatchEvent(this, e);
  }
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.removeAllListeners();
    this.reallyDisposed_ = true;
  } else {
    goog.events.removeAll(this);
  }
  this.parentEventTarget_ = null;
};
if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, false, opt_useCapture, opt_listenerScope);
  };
  goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, true, opt_useCapture, opt_listenerScope);
  };
  goog.events.EventTarget.prototype.listenInternal_ = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not listen on disposed object.");
    var listenerArray = this.eventTargetListeners_[type] || (this.eventTargetListeners_[type] = []);
    var listenerObj;
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
      listenerObj = listenerArray[index];
      if (!callOnce) {
        listenerObj.callOnce = false;
      }
      return listenerObj;
    }
    listenerObj = new goog.events.Listener;
    listenerObj.init(listener, null, this, type, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
    return listenerObj;
  };
  goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
    if (!(type in this.eventTargetListeners_)) {
      return false;
    }
    var listenerArray = this.eventTargetListeners_[type];
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
      var listenerObj = listenerArray[index];
      goog.events.cleanUp(listenerObj);
      listenerObj.removed = true;
      return goog.array.removeAt(listenerArray, index);
    }
    return false;
  };
  goog.events.EventTarget.prototype.unlistenByKey = function(key) {
    var type = key.type;
    if (!(type in this.eventTargetListeners_)) {
      return false;
    }
    var removed = goog.array.remove(this.eventTargetListeners_[type], key);
    if (removed) {
      goog.events.cleanUp(key);
      key.removed = true;
    }
    return removed;
  };
  goog.events.EventTarget.prototype.removeAllListeners = function(opt_type, opt_capture) {
    var count = 0;
    for (var type in this.eventTargetListeners_) {
      if (!opt_type || type == opt_type) {
        var listenerArray = this.eventTargetListeners_[type];
        for (var i = 0;i < listenerArray.length;i++) {
          ++count;
          goog.events.cleanUp(listenerArray[i]);
          listenerArray[i].removed = true;
        }
        listenerArray.length = 0;
      }
    }
    return count;
  };
  goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not fire listeners after dispose() completed.");
    if (!(type in this.eventTargetListeners_)) {
      return true;
    }
    var rv = true;
    var listenerArray = goog.array.clone(this.eventTargetListeners_[type]);
    for (var i = 0;i < listenerArray.length;++i) {
      var listener = listenerArray[i];
      if (listener && (!listener.removed && listener.capture == capture)) {
        if (listener.callOnce) {
          this.unlistenByKey(listener);
        }
        rv = listener.handleEvent(eventObject) !== false && rv;
      }
    }
    return rv && eventObject.returnValue_ != false;
  };
  goog.events.EventTarget.prototype.getListeners = function(type, capture) {
    var listenerArray = this.eventTargetListeners_[type];
    var rv = [];
    if (listenerArray) {
      for (var i = 0;i < listenerArray.length;++i) {
        var listenerObj = listenerArray[i];
        if (listenerObj.capture == capture) {
          rv.push(listenerObj);
        }
      }
    }
    return rv;
  };
  goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
    var listenerArray = this.eventTargetListeners_[type];
    var i = -1;
    if (listenerArray) {
      i = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
    }
    return i > -1 ? listenerArray[i] : null;
  };
  goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    return goog.object.some(this.eventTargetListeners_, function(listenersArray, type) {
      for (var i = 0;i < listenersArray.length;++i) {
        if ((!hasType || listenersArray[i].type == opt_type) && (!hasCapture || listenersArray[i].capture == opt_capture)) {
          return true;
        }
      }
      return false;
    });
  };
  goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
    this.actualEventTarget_ = target;
  };
  goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
    var type = e.type || (e);
    if (goog.isString(e)) {
      e = new goog.events.Event(e, target);
    } else {
      if (!(e instanceof goog.events.Event)) {
        var oldEvent = e;
        e = new goog.events.Event(type, target);
        goog.object.extend(e, oldEvent);
      } else {
        e.target = e.target || target;
      }
    }
    var rv = true, currentTarget;
    if (opt_ancestorsTree) {
      for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, true, e) && rv;
      }
    }
    if (!e.propagationStopped_) {
      currentTarget = e.currentTarget = target;
      rv = currentTarget.fireListeners(type, true, e) && rv;
      if (!e.propagationStopped_) {
        rv = currentTarget.fireListeners(type, false, e) && rv;
      }
    }
    if (opt_ancestorsTree) {
      for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, false, e) && rv;
      }
    }
    return rv;
  };
  goog.events.EventTarget.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.listener == listener && (listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope)) {
        return i;
      }
    }
    return-1;
  };
}
;goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = 0.8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.iter");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      return f.call(opt_obj, val, undefined, iterator);
    }
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var args = arguments;
  var length = args.length;
  var i = 0;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    try {
      if (i >= length) {
        throw goog.iter.StopIteration;
      }
      var current = goog.iter.toIterator(args[i]);
      return current.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration || i >= length) {
        throw ex;
      } else {
        i++;
        return this.next();
      }
    }
  };
  return newIter;
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  iterable1 = goog.iter.toIterator(iterable1);
  iterable2 = goog.iter.toIterator(iterable2);
  var b1, b2;
  try {
    while (true) {
      b1 = b2 = false;
      var val1 = iterable1.next();
      b1 = true;
      var val2 = iterable2.next();
      b2 = true;
      if (val1 != val2) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    } else {
      if (b1 && !b2) {
        return false;
      }
      if (!b2) {
        try {
          val2 = iterable2.next();
          return false;
        } catch (ex1) {
          if (ex1 !== goog.iter.StopIteration) {
            throw ex1;
          }
          return true;
        }
      }
    }
  }
  return false;
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.require("goog.structs");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.count_ = 0;
goog.structs.Map.prototype.version_ = 0;
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersion("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line);
    }
    logFunc({message:message, fileName:url, line:line});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var previous = new goog.structs.Set;
  var str = [];
  var helper = function(obj, space) {
    var nestspace = space + "  ";
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (previous.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  previous.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "");
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || (err.line || "Not available");
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || (err.filename || (err.sourceURL || (goog.global["$googDebugFname"] || href)));
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || (!err.lineNumber || (!err.fileName || !err.stack))) {
    return{"message":err.message, "name":err.name, "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error = typeof err == "string" ? Error(err) : err;
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(arguments.callee.caller);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getStacktrace = function(opt_fn) {
  return goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS = true;
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.debug.LogBuffer.CAPACITY = 0;
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Logger = function(name) {
  this.name_ = name;
};
goog.debug.Logger.prototype.parent_ = null;
goog.debug.Logger.prototype.level_ = null;
goog.debug.Logger.prototype.children_ = null;
goog.debug.Logger.prototype.handlers_ = null;
goog.debug.Logger.ENABLE_HIERARCHY = true;
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    if (!this.handlers_) {
      this.handlers_ = [];
    }
    this.handlers_.push(handler);
  } else {
    goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootHandlers_.push(handler);
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
  return!!handlers && goog.array.remove(handlers, handler);
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    this.level_ = level;
  } else {
    goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootLevel_ = level;
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (this.isLoggable(level)) {
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, arguments.callee.caller));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger("");
    goog.debug.LogManager.loggers_[""] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.json");
goog.provide("goog.json.Serializer");
goog.json.isValid_ = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = function(s) {
  var o = String(s);
  if (goog.json.isValid_(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serialize_(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serialize_ = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serialize_(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serialize_(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XmlHttpFactory");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.net.XmlHttp.ASSUME_NATIVE_XHR = false;
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory((factory), (optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && (typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined")) {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && (pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, value) {
  return goog.uri.utils.appendQueryData_([uri, "\x26", key, "\x3d", goog.string.urlEncode(value)]);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || (followingChar == goog.uri.utils.CharCode_.EQUAL || (followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH))) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.Logger");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.events.EventTarget.call(this);
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.debug.Logger.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    goog.events.listen(x, goog.net.EventType.COMPLETE, opt_callback);
  }
  goog.events.listen(x, goog.net.EventType.READY, goog.partial(goog.net.XhrIo.cleanupSend_, x));
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.cleanupSend_ = function(XhrIo) {
  XhrIo.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, XhrIo);
};
goog.net.XhrIo.prototype.active_ = false;
goog.net.XhrIo.prototype.xhr_ = null;
goog.net.XhrIo.prototype.xhrOptions_ = null;
goog.net.XhrIo.prototype.lastUri_ = "";
goog.net.XhrIo.prototype.lastMethod_ = "";
goog.net.XhrIo.prototype.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
goog.net.XhrIo.prototype.lastError_ = "";
goog.net.XhrIo.prototype.errorDispatched_ = false;
goog.net.XhrIo.prototype.inSend_ = false;
goog.net.XhrIo.prototype.inOpen_ = false;
goog.net.XhrIo.prototype.inAbort_ = false;
goog.net.XhrIo.prototype.timeoutInterval_ = 0;
goog.net.XhrIo.prototype.timeoutId_ = null;
goog.net.XhrIo.prototype.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
goog.net.XhrIo.prototype.withCredentials_ = false;
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    this.logger_.fine(this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, url, true);
    this.inOpen_ = false;
  } catch (err) {
    this.logger_.fine(this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (method == "POST" && (!headers.containsKey(goog.net.XhrIo.CONTENT_TYPE_HEADER) && !contentIsFormData)) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  goog.structs.forEach(headers, function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    if (this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null;
    }
    if (this.timeoutInterval_ > 0) {
      this.logger_.fine(this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete"));
      this.timeoutId_ = goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.timeout_, this), this.timeoutInterval_);
    }
    this.logger_.fine(this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    this.logger_.fine(this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      this.logger_.fine(this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    this.logger_.fine(this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.superClass_.disposeInternal.call(this);
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (!this.inOpen_ && (!this.inSend_ && !this.inAbort_)) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && (this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2)) {
      this.logger_.fine(this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.onReadyStateChange_, this), 0);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        this.logger_.fine(this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null;
    }
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      this.logger_.severe("Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    this.logger_.warning("Can not get status: " + e.message);
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    this.logger_.fine("Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    this.logger_.fine("Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    this.logger_.fine("Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    this.logger_.fine("Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    this.logger_.severe("Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    this.logger_.fine("Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("qgame.utils.general");
goog.require("cljs.core");
qgame.utils.general.update_sub = function update_sub(m, f, ks) {
  return cljs.core.reduce_kv.call(null, cljs.core.assoc, m, cljs.core.zipmap.call(null, ks, f.call(null, cljs.core.map.call(null, cljs.core.partial.call(null, cljs.core.get, m), ks))));
};
qgame.utils.general.itermap = function itermap(f, init, coll) {
  var temp__4090__auto__ = cljs.core.seq.call(null, coll);
  if (temp__4090__auto__) {
    var s = temp__4090__auto__;
    return itermap.call(null, f, cljs.core.concat.call(null, init, cljs.core.map.call(null, function(p1__4802_SHARP_) {
      return f.call(null, p1__4802_SHARP_, cljs.core.first.call(null, s));
    }, init)), cljs.core.rest.call(null, s));
  } else {
    return init;
  }
};
qgame.utils.general.bit_size = function bit_size(x) {
  var n = 1;
  while (true) {
    if (x <= 1 << n) {
      return n;
    } else {
      var G__4803 = n + 1;
      n = G__4803;
      continue;
    }
    break;
  }
};
goog.provide("goog.net.xpc");
goog.provide("goog.net.xpc.CfgFields");
goog.provide("goog.net.xpc.ChannelStates");
goog.provide("goog.net.xpc.TransportNames");
goog.provide("goog.net.xpc.TransportTypes");
goog.provide("goog.net.xpc.UriCfgFields");
goog.require("goog.debug.Logger");
goog.net.xpc.TransportTypes = {NATIVE_MESSAGING:1, FRAME_ELEMENT_METHOD:2, IFRAME_RELAY:3, IFRAME_POLLING:4, FLASH:5, NIX:6};
goog.net.xpc.TransportNames = {1:"NativeMessagingTransport", 2:"FrameElementMethodTransport", 3:"IframeRelayTransport", 4:"IframePollingTransport", 5:"FlashTransport", 6:"NixTransport"};
goog.net.xpc.CfgFields = {CHANNEL_NAME:"cn", AUTH_TOKEN:"at", REMOTE_AUTH_TOKEN:"rat", PEER_URI:"pu", IFRAME_ID:"ifrid", TRANSPORT:"tp", LOCAL_RELAY_URI:"lru", PEER_RELAY_URI:"pru", LOCAL_POLL_URI:"lpu", PEER_POLL_URI:"ppu", PEER_HOSTNAME:"ph", ONE_SIDED_HANDSHAKE:"osh", ROLE:"role", NATIVE_TRANSPORT_PROTOCOL_VERSION:"nativeProtocolVersion"};
goog.net.xpc.UriCfgFields = [goog.net.xpc.CfgFields.PEER_URI, goog.net.xpc.CfgFields.LOCAL_RELAY_URI, goog.net.xpc.CfgFields.PEER_RELAY_URI, goog.net.xpc.CfgFields.LOCAL_POLL_URI, goog.net.xpc.CfgFields.PEER_POLL_URI];
goog.net.xpc.ChannelStates = {NOT_CONNECTED:1, CONNECTED:2, CLOSED:3};
goog.net.xpc.TRANSPORT_SERVICE_ = "tp";
goog.net.xpc.SETUP = "SETUP";
goog.net.xpc.SETUP_NTPV2 = "SETUP_NTPV2";
goog.net.xpc.SETUP_ACK_ = "SETUP_ACK";
goog.net.xpc.SETUP_ACK_NTPV2 = "SETUP_ACK_NTPV2";
goog.net.xpc.channels = {};
goog.net.xpc.getRandomString = function(length, opt_characters) {
  var chars = opt_characters || goog.net.xpc.randomStringCharacters_;
  var charsLength = chars.length;
  var s = "";
  while (length-- > 0) {
    s += chars.charAt(Math.floor(Math.random() * charsLength));
  }
  return s;
};
goog.net.xpc.randomStringCharacters_ = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
goog.net.xpc.logger = goog.debug.Logger.getLogger("goog.net.xpc");
/*
 Portions of this code are from MochiKit, received by
 The Closure Authors under the MIT license. All other code is Copyright
 2005-2009 The Closure Authors. All Rights Reserved.
*/
goog.provide("goog.async.Deferred");
goog.provide("goog.async.Deferred.AlreadyCalledError");
goog.provide("goog.async.Deferred.CancelledError");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.Error");
goog.async.Deferred = function(opt_onCancelFunction, opt_defaultScope) {
  this.sequence_ = [];
  this.onCancelFunction_ = opt_onCancelFunction;
  this.defaultScope_ = opt_defaultScope || null;
};
goog.async.Deferred.prototype.fired_ = false;
goog.async.Deferred.prototype.hadError_ = false;
goog.async.Deferred.prototype.result_;
goog.async.Deferred.prototype.blocked_ = false;
goog.async.Deferred.prototype.blocking_ = false;
goog.async.Deferred.prototype.silentlyCancelled_ = false;
goog.async.Deferred.prototype.unhandledExceptionTimeoutId_;
goog.async.Deferred.prototype.parent_;
goog.async.Deferred.prototype.branches_ = 0;
goog.async.Deferred.prototype.cancel = function(opt_deepCancel) {
  if (!this.hasFired()) {
    if (this.parent_) {
      var parent = this.parent_;
      delete this.parent_;
      if (opt_deepCancel) {
        parent.cancel(opt_deepCancel);
      } else {
        parent.branchCancel_();
      }
    }
    if (this.onCancelFunction_) {
      this.onCancelFunction_.call(this.defaultScope_, this);
    } else {
      this.silentlyCancelled_ = true;
    }
    if (!this.hasFired()) {
      this.errback(new goog.async.Deferred.CancelledError(this));
    }
  } else {
    if (this.result_ instanceof goog.async.Deferred) {
      this.result_.cancel();
    }
  }
};
goog.async.Deferred.prototype.branchCancel_ = function() {
  this.branches_--;
  if (this.branches_ <= 0) {
    this.cancel();
  }
};
goog.async.Deferred.prototype.continue_ = function(isSuccess, res) {
  this.blocked_ = false;
  this.updateResult_(isSuccess, res);
};
goog.async.Deferred.prototype.updateResult_ = function(isSuccess, res) {
  this.fired_ = true;
  this.result_ = res;
  this.hadError_ = !isSuccess;
  this.fire_();
};
goog.async.Deferred.prototype.check_ = function() {
  if (this.hasFired()) {
    if (!this.silentlyCancelled_) {
      throw new goog.async.Deferred.AlreadyCalledError(this);
    }
    this.silentlyCancelled_ = false;
  }
};
goog.async.Deferred.prototype.callback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.updateResult_(true, opt_result);
};
goog.async.Deferred.prototype.errback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.updateResult_(false, opt_result);
};
goog.async.Deferred.prototype.assertNotDeferred_ = function(obj) {
  goog.asserts.assert(!(obj instanceof goog.async.Deferred), "An execution sequence may not be initiated with a blocking Deferred.");
};
goog.async.Deferred.prototype.addCallback = function(cb, opt_scope) {
  return this.addCallbacks(cb, null, opt_scope);
};
goog.async.Deferred.prototype.addErrback = function(eb, opt_scope) {
  return this.addCallbacks(null, eb, opt_scope);
};
goog.async.Deferred.prototype.addBoth = function(f, opt_scope) {
  return this.addCallbacks(f, f, opt_scope);
};
goog.async.Deferred.prototype.addCallbacks = function(cb, eb, opt_scope) {
  goog.asserts.assert(!this.blocking_, "Blocking Deferreds can not be re-used");
  this.sequence_.push([cb, eb, opt_scope]);
  if (this.hasFired()) {
    this.fire_();
  }
  return this;
};
goog.async.Deferred.prototype.chainDeferred = function(otherDeferred) {
  this.addCallbacks(otherDeferred.callback, otherDeferred.errback, otherDeferred);
  return this;
};
goog.async.Deferred.prototype.awaitDeferred = function(otherDeferred) {
  return this.addCallback(goog.bind(otherDeferred.branch, otherDeferred));
};
goog.async.Deferred.prototype.branch = function(opt_propagateCancel) {
  var d = new goog.async.Deferred;
  this.chainDeferred(d);
  if (opt_propagateCancel) {
    d.parent_ = this;
    this.branches_++;
  }
  return d;
};
goog.async.Deferred.prototype.hasFired = function() {
  return this.fired_;
};
goog.async.Deferred.prototype.isError = function(res) {
  return res instanceof Error;
};
goog.async.Deferred.prototype.hasErrback_ = function() {
  return goog.array.some(this.sequence_, function(sequenceRow) {
    return goog.isFunction(sequenceRow[1]);
  });
};
goog.async.Deferred.prototype.fire_ = function() {
  if (this.unhandledExceptionTimeoutId_ && (this.hasFired() && this.hasErrback_())) {
    goog.global.clearTimeout(this.unhandledExceptionTimeoutId_);
    delete this.unhandledExceptionTimeoutId_;
  }
  if (this.parent_) {
    this.parent_.branches_--;
    delete this.parent_;
  }
  var res = this.result_;
  var unhandledException = false;
  var isNewlyBlocked = false;
  while (this.sequence_.length && !this.blocked_) {
    var sequenceEntry = this.sequence_.shift();
    var callback = sequenceEntry[0];
    var errback = sequenceEntry[1];
    var scope = sequenceEntry[2];
    var f = this.hadError_ ? errback : callback;
    if (f) {
      try {
        var ret = f.call(scope || this.defaultScope_, res);
        if (goog.isDef(ret)) {
          this.hadError_ = this.hadError_ && (ret == res || this.isError(ret));
          this.result_ = res = ret;
        }
        if (res instanceof goog.async.Deferred) {
          isNewlyBlocked = true;
          this.blocked_ = true;
        }
      } catch (ex) {
        res = ex;
        this.hadError_ = true;
        if (!this.hasErrback_()) {
          unhandledException = true;
        }
      }
    }
  }
  this.result_ = res;
  if (isNewlyBlocked) {
    res.addCallbacks(goog.bind(this.continue_, this, true), goog.bind(this.continue_, this, false));
    res.blocking_ = true;
  }
  if (unhandledException) {
    this.unhandledExceptionTimeoutId_ = goog.global.setTimeout(function() {
      throw res;
    }, 0);
  }
};
goog.async.Deferred.succeed = function(opt_result) {
  var d = new goog.async.Deferred;
  d.callback(opt_result);
  return d;
};
goog.async.Deferred.fail = function(res) {
  var d = new goog.async.Deferred;
  d.errback(res);
  return d;
};
goog.async.Deferred.cancelled = function() {
  var d = new goog.async.Deferred;
  d.cancel();
  return d;
};
goog.async.Deferred.when = function(value, callback, opt_scope) {
  if (value instanceof goog.async.Deferred) {
    return value.branch(true).addCallback(callback, opt_scope);
  } else {
    return goog.async.Deferred.succeed(value).addCallback(callback, opt_scope);
  }
};
goog.async.Deferred.AlreadyCalledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.AlreadyCalledError, goog.debug.Error);
goog.async.Deferred.AlreadyCalledError.prototype.message = "Deferred has already fired";
goog.async.Deferred.AlreadyCalledError.prototype.name = "AlreadyCalledError";
goog.async.Deferred.CancelledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.CancelledError, goog.debug.Error);
goog.async.Deferred.CancelledError.prototype.message = "Deferred was cancelled";
goog.async.Deferred.CancelledError.prototype.name = "CancelledError";
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (opt_key) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  goog.structs.forEach(this.keyMap_, function(value, key, map) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    goog.structs.forEach(this.keyMap_, function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("goog.Delay");
goog.provide("goog.async.Delay");
goog.require("goog.Disposable");
goog.require("goog.Timer");
goog.async.Delay = function(listener, opt_interval, opt_handler) {
  goog.Disposable.call(this);
  this.listener_ = listener;
  this.interval_ = opt_interval || 0;
  this.handler_ = opt_handler;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.Delay, goog.Disposable);
goog.Delay = goog.async.Delay;
goog.async.Delay.prototype.id_ = 0;
goog.async.Delay.prototype.disposeInternal = function() {
  goog.async.Delay.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.listener_;
  delete this.handler_;
};
goog.async.Delay.prototype.start = function(opt_interval) {
  this.stop();
  this.id_ = goog.Timer.callOnce(this.callback_, goog.isDef(opt_interval) ? opt_interval : this.interval_);
};
goog.async.Delay.prototype.stop = function() {
  if (this.isActive()) {
    goog.Timer.clear(this.id_);
  }
  this.id_ = 0;
};
goog.async.Delay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.Delay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.Delay.prototype.isActive = function() {
  return this.id_ != 0;
};
goog.async.Delay.prototype.doAction_ = function() {
  this.id_ = 0;
  if (this.listener_) {
    this.listener_.call(this.handler_);
  }
};
goog.provide("qgame.utils.pprint");
goog.require("cljs.core");
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || (goog.userAgent.IE && goog.userAgent.isDocumentMode(9) || goog.userAgent.GECKO && goog.userAgent.isVersion("1.9.1")), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || (goog.userAgent.OPERA || goog.userAgent.WEBKIT), INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.dom.classes");
goog.require("goog.array");
goog.dom.classes.set = function(element, className) {
  element.className = className;
};
goog.dom.classes.get = function(element) {
  var className = element.className;
  return goog.isString(className) && className.match(/\S+/g) || [];
};
goog.dom.classes.add = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var expectedCount = classes.length + args.length;
  goog.dom.classes.add_(classes, args);
  goog.dom.classes.set(element, classes.join(" "));
  return classes.length == expectedCount;
};
goog.dom.classes.remove = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var newClasses = goog.dom.classes.getDifference_(classes, args);
  goog.dom.classes.set(element, newClasses.join(" "));
  return newClasses.length == classes.length - args.length;
};
goog.dom.classes.add_ = function(classes, args) {
  for (var i = 0;i < args.length;i++) {
    if (!goog.array.contains(classes, args[i])) {
      classes.push(args[i]);
    }
  }
};
goog.dom.classes.getDifference_ = function(arr1, arr2) {
  return goog.array.filter(arr1, function(item) {
    return!goog.array.contains(arr2, item);
  });
};
goog.dom.classes.swap = function(element, fromClass, toClass) {
  var classes = goog.dom.classes.get(element);
  var removed = false;
  for (var i = 0;i < classes.length;i++) {
    if (classes[i] == fromClass) {
      goog.array.splice(classes, i--, 1);
      removed = true;
    }
  }
  if (removed) {
    classes.push(toClass);
    goog.dom.classes.set(element, classes.join(" "));
  }
  return removed;
};
goog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {
  var classes = goog.dom.classes.get(element);
  if (goog.isString(classesToRemove)) {
    goog.array.remove(classes, classesToRemove);
  } else {
    if (goog.isArray(classesToRemove)) {
      classes = goog.dom.classes.getDifference_(classes, classesToRemove);
    }
  }
  if (goog.isString(classesToAdd) && !goog.array.contains(classes, classesToAdd)) {
    classes.push(classesToAdd);
  } else {
    if (goog.isArray(classesToAdd)) {
      goog.dom.classes.add_(classes, classesToAdd);
    }
  }
  goog.dom.classes.set(element, classes.join(" "));
};
goog.dom.classes.has = function(element, className) {
  return goog.array.contains(goog.dom.classes.get(element), className);
};
goog.dom.classes.enable = function(element, className, enabled) {
  if (enabled) {
    goog.dom.classes.add(element, className);
  } else {
    goog.dom.classes.remove(element, className);
  }
};
goog.dom.classes.toggle = function(element, className) {
  var add = !goog.dom.classes.has(element, className);
  goog.dom.classes.enable(element, className, add);
  return add;
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length1;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.standardDeviation = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return Math.sqrt(variance);
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.DomHelper");
goog.provide("goog.dom.NodeType");
goog.require("goog.array");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.TagName");
goog.require("goog.dom.classes");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.ASSUME_QUIRKS_MODE = false;
goog.dom.ASSUME_STANDARDS_MODE = false;
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.isString(element) ? document.getElementById(element) : element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  } else {
    if (parent.getElementsByClassName) {
      return parent.getElementsByClassName(className);
    }
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByClass(className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var vh = goog.dom.getViewportSize_(win).height;
    var body = doc.body;
    var docEl = doc.documentElement;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || (goog.global || window);
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  return!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && (attributes && (attributes.name || attributes.type))) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        goog.dom.classes.add.apply(null, [element].concat(attributes));
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.getCompatMode = function() {
  return goog.dom.isCss1CompatMode() ? "CSS1Compat" : "BackCompat";
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    return element.parentElement;
  }
  var parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentMode(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow_(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(element, text) {
  if ("textContent" in element) {
    element.textContent = text;
  } else {
    if (element.firstChild && element.firstChild.nodeType == goog.dom.NodeType.TEXT) {
      while (element.lastChild != element.firstChild) {
        element.removeChild(element.lastChild);
      }
      element.firstChild.data = text;
    } else {
      goog.dom.removeChildren(element);
      var doc = goog.dom.getOwnerDocument(element);
      element.appendChild(doc.createTextNode(String(text)));
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  if (attrNode && attrNode.specified) {
    var index = element.tabIndex;
    return goog.isNumber(index) && (index >= 0 && index < 32768);
  }
  return false;
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.dom.classes.has(node, opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || (goog.global.document || document);
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  if (goog.isString(element)) {
    return this.document_.getElementById(element);
  } else {
    return element;
  }
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.getCompatMode = function() {
  return this.isCss1CompatMode() ? "CSS1Compat" : "BackCompat";
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.net.xpc.Transport");
goog.require("goog.Disposable");
goog.require("goog.dom");
goog.require("goog.net.xpc");
goog.net.xpc.Transport = function(opt_domHelper) {
  goog.Disposable.call(this);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
};
goog.inherits(goog.net.xpc.Transport, goog.Disposable);
goog.net.xpc.Transport.prototype.transportType = 0;
goog.net.xpc.Transport.prototype.getType = function() {
  return this.transportType;
};
goog.net.xpc.Transport.prototype.getWindow = function() {
  return this.domHelper_.getWindow();
};
goog.net.xpc.Transport.prototype.getName = function() {
  return goog.net.xpc.TransportNames[this.transportType] || "";
};
goog.net.xpc.Transport.prototype.transportServiceHandler = goog.abstractMethod;
goog.net.xpc.Transport.prototype.connect = goog.abstractMethod;
goog.net.xpc.Transport.prototype.send = goog.abstractMethod;
goog.provide("goog.messaging.MessageChannel");
goog.messaging.MessageChannel = function() {
};
goog.messaging.MessageChannel.prototype.connect = function(opt_connectCb) {
};
goog.messaging.MessageChannel.prototype.isConnected = function() {
};
goog.messaging.MessageChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
};
goog.messaging.MessageChannel.prototype.registerDefaultService = function(callback) {
};
goog.messaging.MessageChannel.prototype.send = function(serviceName, payload) {
};
goog.provide("goog.messaging.AbstractChannel");
goog.require("goog.Disposable");
goog.require("goog.debug");
goog.require("goog.debug.Logger");
goog.require("goog.json");
goog.require("goog.messaging.MessageChannel");
goog.messaging.AbstractChannel = function() {
  goog.base(this);
  this.services_ = {};
};
goog.inherits(goog.messaging.AbstractChannel, goog.Disposable);
goog.messaging.AbstractChannel.prototype.defaultService_;
goog.messaging.AbstractChannel.prototype.logger = goog.debug.Logger.getLogger("goog.messaging.AbstractChannel");
goog.messaging.AbstractChannel.prototype.connect = function(opt_connectCb) {
  if (opt_connectCb) {
    opt_connectCb();
  }
};
goog.messaging.AbstractChannel.prototype.isConnected = function() {
  return true;
};
goog.messaging.AbstractChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
  this.services_[serviceName] = {callback:callback, objectPayload:!!opt_objectPayload};
};
goog.messaging.AbstractChannel.prototype.registerDefaultService = function(callback) {
  this.defaultService_ = callback;
};
goog.messaging.AbstractChannel.prototype.send = goog.abstractMethod;
goog.messaging.AbstractChannel.prototype.deliver = function(serviceName, payload) {
  var service = this.getService(serviceName, payload);
  if (!service) {
    return;
  }
  var decodedPayload = this.decodePayload(serviceName, payload, service.objectPayload);
  if (goog.isDefAndNotNull(decodedPayload)) {
    service.callback(decodedPayload);
  }
};
goog.messaging.AbstractChannel.prototype.getService = function(serviceName, payload) {
  var service = this.services_[serviceName];
  if (service) {
    return service;
  } else {
    if (this.defaultService_) {
      var callback = goog.partial(this.defaultService_, serviceName);
      var objectPayload = goog.isObject(payload);
      return{callback:callback, objectPayload:objectPayload};
    }
  }
  this.logger.warning('Unknown service name "' + serviceName + '"');
  return null;
};
goog.messaging.AbstractChannel.prototype.decodePayload = function(serviceName, payload, objectPayload) {
  if (objectPayload && goog.isString(payload)) {
    try {
      return goog.json.parse(payload);
    } catch (err) {
      this.logger.warning("Expected JSON payload for " + serviceName + ', was "' + payload + '"');
      return null;
    }
  } else {
    if (!objectPayload && !goog.isString(payload)) {
      return goog.json.serialize(payload);
    }
  }
  return payload;
};
goog.messaging.AbstractChannel.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  delete this.logger;
  delete this.services_;
  delete this.defaultService_;
};
goog.provide("clojure.browser.event");
goog.require("cljs.core");
goog.require("goog.events.EventType");
goog.require("goog.events.EventType");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventTarget");
goog.require("goog.events");
goog.require("goog.events");
clojure.browser.event.EventType = function() {
  var obj6115 = {};
  return obj6115;
}();
clojure.browser.event.event_types = function event_types(this$) {
  if (function() {
    var and__3418__auto__ = this$;
    if (and__3418__auto__) {
      return this$.clojure$browser$event$EventType$event_types$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return this$.clojure$browser$event$EventType$event_types$arity$1(this$);
  } else {
    var x__4057__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3430__auto__ = clojure.browser.event.event_types[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = clojure.browser.event.event_types["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "EventType.event-types", this$);
        }
      }
    }().call(null, this$);
  }
};
Element.prototype.clojure$browser$event$EventType$ = true;
Element.prototype.clojure$browser$event$EventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__6116) {
    var vec__6117 = p__6116;
    var k = cljs.core.nth.call(null, vec__6117, 0, null);
    var v = cljs.core.nth.call(null, vec__6117, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
  }, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
};
goog.events.EventTarget.prototype.clojure$browser$event$EventType$ = true;
goog.events.EventTarget.prototype.clojure$browser$event$EventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__6118) {
    var vec__6119 = p__6118;
    var k = cljs.core.nth.call(null, vec__6119, 0, null);
    var v = cljs.core.nth.call(null, vec__6119, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
  }, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
};
clojure.browser.event.listen = function() {
  var listen = null;
  var listen__3 = function(src, type, fn) {
    return listen.call(null, src, type, fn, false);
  };
  var listen__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.listen(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  listen = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return listen__3.call(this, src, type, fn);
      case 4:
        return listen__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen.cljs$core$IFn$_invoke$arity$3 = listen__3;
  listen.cljs$core$IFn$_invoke$arity$4 = listen__4;
  return listen;
}();
clojure.browser.event.listen_once = function() {
  var listen_once = null;
  var listen_once__3 = function(src, type, fn) {
    return listen_once.call(null, src, type, fn, false);
  };
  var listen_once__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.listenOnce(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  listen_once = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return listen_once__3.call(this, src, type, fn);
      case 4:
        return listen_once__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen_once.cljs$core$IFn$_invoke$arity$3 = listen_once__3;
  listen_once.cljs$core$IFn$_invoke$arity$4 = listen_once__4;
  return listen_once;
}();
clojure.browser.event.unlisten = function() {
  var unlisten = null;
  var unlisten__3 = function(src, type, fn) {
    return unlisten.call(null, src, type, fn, false);
  };
  var unlisten__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.unlisten(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  unlisten = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return unlisten__3.call(this, src, type, fn);
      case 4:
        return unlisten__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unlisten.cljs$core$IFn$_invoke$arity$3 = unlisten__3;
  unlisten.cljs$core$IFn$_invoke$arity$4 = unlisten__4;
  return unlisten;
}();
clojure.browser.event.unlisten_by_key = function unlisten_by_key(key) {
  return goog.events.unlistenByKey(key);
};
clojure.browser.event.dispatch_event = function dispatch_event(src, event) {
  return goog.events.dispatchEvent(src, event);
};
clojure.browser.event.expose = function expose(e) {
  return goog.events.expose(e);
};
clojure.browser.event.fire_listeners = function fire_listeners(obj, type, capture, event) {
  return null;
};
clojure.browser.event.total_listener_count = function total_listener_count() {
  return goog.events.getTotalListenerCount();
};
clojure.browser.event.get_listener = function get_listener(src, type, listener, opt_capt, opt_handler) {
  return null;
};
clojure.browser.event.all_listeners = function all_listeners(obj, type, capture) {
  return null;
};
clojure.browser.event.unique_event_id = function unique_event_id(event_type) {
  return null;
};
clojure.browser.event.has_listener = function has_listener(obj, opt_type, opt_capture) {
  return null;
};
clojure.browser.event.remove_all = function remove_all(opt_obj, opt_type, opt_capt) {
  return null;
};
goog.provide("goog.net.xpc.CrossPageChannelRole");
goog.net.xpc.CrossPageChannelRole = {OUTER:0, INNER:1};
goog.provide("goog.net.xpc.IframePollingTransport");
goog.provide("goog.net.xpc.IframePollingTransport.Receiver");
goog.provide("goog.net.xpc.IframePollingTransport.Sender");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.userAgent");
goog.net.xpc.IframePollingTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.sendUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_POLL_URI];
  this.rcvUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  this.sendQueue_ = [];
};
goog.inherits(goog.net.xpc.IframePollingTransport, goog.net.xpc.Transport);
goog.net.xpc.IframePollingTransport.prototype.pollsBeforeReconnect_ = 5;
goog.net.xpc.IframePollingTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
goog.net.xpc.IframePollingTransport.prototype.sequence_ = 0;
goog.net.xpc.IframePollingTransport.prototype.waitForAck_ = false;
goog.net.xpc.IframePollingTransport.prototype.initialized_ = false;
goog.net.xpc.IframePollingTransport.prototype.reconnectFrame_ = null;
goog.net.xpc.IframePollingTransport.IFRAME_PREFIX = "googlexpc";
goog.net.xpc.IframePollingTransport.prototype.getMsgFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_msg";
};
goog.net.xpc.IframePollingTransport.prototype.getAckFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_ack";
};
goog.net.xpc.IframePollingTransport.prototype.isChannelAvailable = function() {
  return!this.isDisposed() && this.channel_.isPeerAvailable();
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrames_ = function() {
  try {
    if (this.isChannelAvailable()) {
      return this.channel_.getPeerWindowObject().frames || {};
    }
  } catch (e) {
    goog.net.xpc.logger.fine("error retrieving peer frames");
  }
  return{};
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrame_ = function(frameName) {
  return this.getPeerFrames_()[frameName];
};
goog.net.xpc.IframePollingTransport.prototype.connect = function() {
  if (!this.isChannelAvailable()) {
    return;
  }
  goog.net.xpc.logger.fine("transport connect called");
  if (!this.initialized_) {
    goog.net.xpc.logger.fine("initializing...");
    this.constructSenderFrames_();
    this.initialized_ = true;
  }
  this.checkForeignFramesReady_();
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrames_ = function() {
  var name = this.getMsgFrameName_();
  this.msgIframeElm_ = this.constructSenderFrame_(name);
  this.msgWinObj_ = this.getWindow().frames[name];
  name = this.getAckFrameName_();
  this.ackIframeElm_ = this.constructSenderFrame_(name);
  this.ackWinObj_ = this.getWindow().frames[name];
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrame_ = function(id) {
  goog.net.xpc.logger.finest("constructing sender frame: " + id);
  var ifr = goog.dom.createElement("iframe");
  var s = ifr.style;
  s.position = "absolute";
  s.top = "-10px";
  s.left = "10px";
  s.width = "1px";
  s.height = "1px";
  ifr.id = ifr.name = id;
  ifr.src = this.sendUri_ + "#INITIAL";
  this.getWindow().document.body.appendChild(ifr);
  return ifr;
};
goog.net.xpc.IframePollingTransport.prototype.maybeInnerPeerReconnect_ = function() {
  if (this.reconnectFrame_ || this.pollsBeforeReconnect_-- > 0) {
    return;
  }
  goog.net.xpc.logger.finest("Inner peer reconnect triggered.");
  this.channel_.name = goog.net.xpc.getRandomString(10);
  goog.net.xpc.logger.finest("switching channels: " + this.channel_.name);
  this.deconstructSenderFrames_();
  this.initialized_ = false;
  this.reconnectFrame_ = this.constructSenderFrame_(goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_reconnect_" + this.channel_.name);
};
goog.net.xpc.IframePollingTransport.prototype.outerPeerReconnect_ = function() {
  goog.net.xpc.logger.finest("outerPeerReconnect called");
  var frames = this.getPeerFrames_();
  var length = frames.length;
  for (var i = 0;i < length;i++) {
    var frameName;
    try {
      if (frames[i] && frames[i].name) {
        frameName = frames[i].name;
      }
    } catch (e) {
    }
    if (!frameName) {
      continue;
    }
    var message = frameName.split("_");
    if (message.length == 3 && (message[0] == goog.net.xpc.IframePollingTransport.IFRAME_PREFIX && message[1] == "reconnect")) {
      this.channel_.name = message[2];
      this.deconstructSenderFrames_();
      this.initialized_ = false;
      break;
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.deconstructSenderFrames_ = function() {
  goog.net.xpc.logger.finest("deconstructSenderFrames called");
  if (this.msgIframeElm_) {
    this.msgIframeElm_.parentNode.removeChild(this.msgIframeElm_);
    this.msgIframeElm_ = null;
    this.msgWinObj_ = null;
  }
  if (this.ackIframeElm_) {
    this.ackIframeElm_.parentNode.removeChild(this.ackIframeElm_);
    this.ackIframeElm_ = null;
    this.ackWinObj_ = null;
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkForeignFramesReady_ = function() {
  if (!(this.isRcvFrameReady_(this.getMsgFrameName_()) && this.isRcvFrameReady_(this.getAckFrameName_()))) {
    goog.net.xpc.logger.finest("foreign frames not (yet) present");
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.maybeInnerPeerReconnect_();
    } else {
      if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
        this.outerPeerReconnect_();
      }
    }
    this.getWindow().setTimeout(goog.bind(this.connect, this), 100);
  } else {
    goog.net.xpc.logger.fine("foreign frames present");
    this.msgReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getMsgFrameName_()), goog.bind(this.processIncomingMsg, this));
    this.ackReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getAckFrameName_()), goog.bind(this.processIncomingAck, this));
    this.checkLocalFramesPresent_();
  }
};
goog.net.xpc.IframePollingTransport.prototype.isRcvFrameReady_ = function(frameName) {
  goog.net.xpc.logger.finest("checking for receive frame: " + frameName);
  try {
    var winObj = this.getPeerFrame_(frameName);
    if (!winObj || winObj.location.href.indexOf(this.rcvUri_) != 0) {
      return false;
    }
  } catch (e) {
    return false;
  }
  return true;
};
goog.net.xpc.IframePollingTransport.prototype.checkLocalFramesPresent_ = function() {
  var frames = this.getPeerFrames_();
  if (!(frames[this.getAckFrameName_()] && frames[this.getMsgFrameName_()])) {
    if (!this.checkLocalFramesPresentCb_) {
      this.checkLocalFramesPresentCb_ = goog.bind(this.checkLocalFramesPresent_, this);
    }
    this.getWindow().setTimeout(this.checkLocalFramesPresentCb_, 100);
    goog.net.xpc.logger.fine("local frames not (yet) present");
  } else {
    this.msgSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.msgWinObj_);
    this.ackSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.ackWinObj_);
    goog.net.xpc.logger.fine("local frames ready");
    this.getWindow().setTimeout(goog.bind(function() {
      this.msgSender_.send(goog.net.xpc.SETUP);
      this.sentConnectionSetup_ = true;
      this.waitForAck_ = true;
      goog.net.xpc.logger.fine("SETUP sent");
    }, this), 100);
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkIfConnected_ = function() {
  if (this.sentConnectionSetupAck_ && this.rcvdConnectionSetupAck_) {
    this.channel_.notifyConnected();
    if (this.deliveryQueue_) {
      goog.net.xpc.logger.fine("delivering queued messages " + "(" + this.deliveryQueue_.length + ")");
      for (var i = 0, m;i < this.deliveryQueue_.length;i++) {
        m = this.deliveryQueue_[i];
        this.channel_.xpcDeliver(m.service, m.payload);
      }
      delete this.deliveryQueue_;
    }
  } else {
    goog.net.xpc.logger.finest("checking if connected: " + "ack sent:" + this.sentConnectionSetupAck_ + ", ack rcvd: " + this.rcvdConnectionSetupAck_);
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingMsg = function(raw) {
  goog.net.xpc.logger.finest("msg received: " + raw);
  if (raw == goog.net.xpc.SETUP) {
    if (!this.ackSender_) {
      return;
    }
    this.ackSender_.send(goog.net.xpc.SETUP_ACK_);
    goog.net.xpc.logger.finest("SETUP_ACK sent");
    this.sentConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected() || this.sentConnectionSetupAck_) {
      var pos = raw.indexOf("|");
      var head = raw.substring(0, pos);
      var frame = raw.substring(pos + 1);
      pos = head.indexOf(",");
      if (pos == -1) {
        var seq = head;
        this.ackSender_.send("ACK:" + seq);
        this.deliverPayload_(frame);
      } else {
        var seq = head.substring(0, pos);
        this.ackSender_.send("ACK:" + seq);
        var partInfo = head.substring(pos + 1).split("/");
        var part0 = parseInt(partInfo[0], 10);
        var part1 = parseInt(partInfo[1], 10);
        if (part0 == 1) {
          this.parts_ = [];
        }
        this.parts_.push(frame);
        if (part0 == part1) {
          this.deliverPayload_(this.parts_.join(""));
          delete this.parts_;
        }
      }
    } else {
      goog.net.xpc.logger.warning("received msg, but channel is not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingAck = function(msgStr) {
  goog.net.xpc.logger.finest("ack received: " + msgStr);
  if (msgStr == goog.net.xpc.SETUP_ACK_) {
    this.waitForAck_ = false;
    this.rcvdConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected()) {
      if (!this.waitForAck_) {
        goog.net.xpc.logger.warning("got unexpected ack");
        return;
      }
      var seq = parseInt(msgStr.split(":")[1], 10);
      if (seq == this.sequence_) {
        this.waitForAck_ = false;
        this.sendNextFrame_();
      } else {
        goog.net.xpc.logger.warning("got ack with wrong sequence");
      }
    } else {
      goog.net.xpc.logger.warning("received ack, but channel not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.sendNextFrame_ = function() {
  if (this.waitForAck_ || !this.sendQueue_.length) {
    return;
  }
  var s = this.sendQueue_.shift();
  ++this.sequence_;
  this.msgSender_.send(this.sequence_ + s);
  goog.net.xpc.logger.finest("msg sent: " + this.sequence_ + s);
  this.waitForAck_ = true;
};
goog.net.xpc.IframePollingTransport.prototype.deliverPayload_ = function(s) {
  var pos = s.indexOf(":");
  var service = s.substr(0, pos);
  var payload = s.substring(pos + 1);
  if (!this.channel_.isConnected()) {
    (this.deliveryQueue_ || (this.deliveryQueue_ = [])).push({service:service, payload:payload});
    goog.net.xpc.logger.finest("queued delivery");
  } else {
    this.channel_.xpcDeliver(service, payload);
  }
};
goog.net.xpc.IframePollingTransport.prototype.MAX_FRAME_LENGTH_ = 3800;
goog.net.xpc.IframePollingTransport.prototype.send = function(service, payload) {
  var frame = service + ":" + payload;
  if (!goog.userAgent.IE || payload.length <= this.MAX_FRAME_LENGTH_) {
    this.sendQueue_.push("|" + frame);
  } else {
    var l = payload.length;
    var num = Math.ceil(l / this.MAX_FRAME_LENGTH_);
    var pos = 0;
    var i = 1;
    while (pos < l) {
      this.sendQueue_.push("," + i + "/" + num + "|" + frame.substr(pos, this.MAX_FRAME_LENGTH_));
      i++;
      pos += this.MAX_FRAME_LENGTH_;
    }
  }
  this.sendNextFrame_();
};
goog.net.xpc.IframePollingTransport.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  goog.array.remove(receivers, this.msgReceiver_);
  goog.array.remove(receivers, this.ackReceiver_);
  this.msgReceiver_ = this.ackReceiver_ = null;
  goog.dom.removeNode(this.msgIframeElm_);
  goog.dom.removeNode(this.ackIframeElm_);
  this.msgIframeElm_ = this.ackIframeElm_ = null;
  this.msgWinObj_ = this.ackWinObj_ = null;
};
goog.net.xpc.IframePollingTransport.receivers_ = [];
goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ = 10;
goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_ = 100;
goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ = 1E3;
goog.net.xpc.IframePollingTransport.receive_ = function() {
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  var receiver;
  var rcvd = false;
  try {
    for (var i = 0;receiver = receivers[i];i++) {
      rcvd = rcvd || receiver.receive();
    }
  } catch (e) {
    goog.net.xpc.logger.info("receive_() failed: " + e);
    receiver.transport_.channel_.notifyTransportError();
    if (!receivers.length) {
      return;
    }
  }
  var now = goog.now();
  if (rcvd) {
    goog.net.xpc.IframePollingTransport.lastActivity_ = now;
  }
  var t = now - goog.net.xpc.IframePollingTransport.lastActivity_ < goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ ? goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ : goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_;
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, t);
};
goog.net.xpc.IframePollingTransport.receiveCb_ = goog.bind(goog.net.xpc.IframePollingTransport.receive_, goog.net.xpc.IframePollingTransport);
goog.net.xpc.IframePollingTransport.startRcvTimer_ = function() {
  goog.net.xpc.logger.fine("starting receive-timer");
  goog.net.xpc.IframePollingTransport.lastActivity_ = goog.now();
  if (goog.net.xpc.IframePollingTransport.rcvTimer_) {
    window.clearTimeout(goog.net.xpc.IframePollingTransport.rcvTimer_);
  }
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_);
};
goog.net.xpc.IframePollingTransport.Sender = function(url, windowObj) {
  this.sendUri_ = url;
  this.sendFrame_ = windowObj;
  this.cycle_ = 0;
};
goog.net.xpc.IframePollingTransport.Sender.prototype.send = function(payload) {
  this.cycle_ = ++this.cycle_ % 2;
  var url = this.sendUri_ + "#" + this.cycle_ + encodeURIComponent(payload);
  try {
    if (goog.userAgent.WEBKIT) {
      this.sendFrame_.location.href = url;
    } else {
      this.sendFrame_.location.replace(url);
    }
  } catch (e) {
    goog.net.xpc.logger.severe("sending failed", e);
  }
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver = function(transport, windowObj, callback) {
  this.transport_ = transport;
  this.rcvFrame_ = windowObj;
  this.cb_ = callback;
  this.currentLoc_ = this.rcvFrame_.location.href.split("#")[0] + "#INITIAL";
  goog.net.xpc.IframePollingTransport.receivers_.push(this);
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver.prototype.receive = function() {
  var loc = this.rcvFrame_.location.href;
  if (loc != this.currentLoc_) {
    this.currentLoc_ = loc;
    var payload = loc.split("#")[1];
    if (payload) {
      payload = payload.substr(1);
      this.cb_(decodeURIComponent(payload));
    }
    return true;
  } else {
    return false;
  }
};
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.array");
goog.require("goog.events");
goog.require("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_handler) {
  goog.Disposable.call(this);
  this.handler_ = opt_handler;
  this.keys_ = [];
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (!goog.isArray(type)) {
    goog.events.EventHandler.typeArray_[0] = (type);
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var key = (goog.events.listen(src, type[i], opt_fn || this, opt_capture || false, opt_handler || (this.handler_ || this)));
    this.keys_.push(key);
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce(src, type[i], opt_fn, opt_capture, opt_handler);
    }
  } else {
    var key = (goog.events.listenOnce(src, type, opt_fn || this, opt_capture, opt_handler || (this.handler_ || this)));
    this.keys_.push(key);
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler || (this.handler_ || this), this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  return this.keys_.length;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_handler);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this, opt_capture, opt_handler || (this.handler_ || this));
    if (listener) {
      var key = listener.key;
      goog.events.unlistenByKey(key);
      goog.array.remove(this.keys_, key);
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler || (this.handler_ || this), this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.array.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_.length = 0;
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.net.xpc.FrameElementMethodTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.queue_ = [];
  this.deliverQueuedCb_ = goog.bind(this.deliverQueued_, this);
};
goog.inherits(goog.net.xpc.FrameElementMethodTransport, goog.net.xpc.Transport);
goog.net.xpc.FrameElementMethodTransport.prototype.transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
goog.net.xpc.FrameElementMethodTransport.prototype.recursive_ = false;
goog.net.xpc.FrameElementMethodTransport.prototype.timer_ = 0;
goog.net.xpc.FrameElementMethodTransport.outgoing_ = null;
goog.net.xpc.FrameElementMethodTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.iframeElm_ = this.channel_.getIframeElement();
    this.iframeElm_["XPC_toOuter"] = goog.bind(this.incoming_, this);
  } else {
    this.attemptSetup_();
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.attemptSetup_ = function() {
  var retry = true;
  try {
    if (!this.iframeElm_) {
      this.iframeElm_ = this.getWindow().frameElement;
    }
    if (this.iframeElm_ && this.iframeElm_["XPC_toOuter"]) {
      this.outgoing_ = this.iframeElm_["XPC_toOuter"];
      this.iframeElm_["XPC_toOuter"]["XPC_toInner"] = goog.bind(this.incoming_, this);
      retry = false;
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.net.xpc.logger.severe("exception caught while attempting setup: " + e);
  }
  if (retry) {
    if (!this.attemptSetupCb_) {
      this.attemptSetupCb_ = goog.bind(this.attemptSetup_, this);
    }
    this.getWindow().setTimeout(this.attemptSetupCb_, 100);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.transportServiceHandler = function(payload) {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER && (!this.channel_.isConnected() && payload == goog.net.xpc.SETUP_ACK_)) {
    this.outgoing_ = this.iframeElm_["XPC_toOuter"]["XPC_toInner"];
    this.channel_.notifyConnected();
  } else {
    throw Error("Got unexpected transport message.");
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.incoming_ = function(serviceName, payload) {
  if (!this.recursive_ && this.queue_.length == 0) {
    this.channel_.xpcDeliver(serviceName, payload);
  } else {
    this.queue_.push({serviceName:serviceName, payload:payload});
    if (this.queue_.length == 1) {
      this.timer_ = this.getWindow().setTimeout(this.deliverQueuedCb_, 1);
    }
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.deliverQueued_ = function() {
  while (this.queue_.length) {
    var msg = this.queue_.shift();
    this.channel_.xpcDeliver(msg.serviceName, msg.payload);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.send = function(service, payload) {
  this.recursive_ = true;
  this.outgoing_(service, payload);
  this.recursive_ = false;
};
goog.net.xpc.FrameElementMethodTransport.prototype.disposeInternal = function() {
  goog.net.xpc.FrameElementMethodTransport.superClass_.disposeInternal.call(this);
  this.outgoing_ = null;
  this.iframeElm_ = null;
};
goog.provide("goog.net.xpc.IframeRelayTransport");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.Transport");
goog.require("goog.userAgent");
goog.net.xpc.IframeRelayTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.peerRelayUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_RELAY_URI];
  this.peerIframeId_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.IFRAME_ID];
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.startCleanupTimer_();
  }
};
goog.inherits(goog.net.xpc.IframeRelayTransport, goog.net.xpc.Transport);
if (goog.userAgent.WEBKIT) {
  goog.net.xpc.IframeRelayTransport.iframeRefs_ = [];
  goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_ = 1E3;
  goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_ = 3E3;
  goog.net.xpc.IframeRelayTransport.cleanupTimer_ = 0;
  goog.net.xpc.IframeRelayTransport.startCleanupTimer_ = function() {
    if (!goog.net.xpc.IframeRelayTransport.cleanupTimer_) {
      goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(function() {
        goog.net.xpc.IframeRelayTransport.cleanup_();
      }, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
    }
  };
  goog.net.xpc.IframeRelayTransport.cleanup_ = function(opt_maxAge) {
    var now = goog.now();
    var maxAge = opt_maxAge || goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_;
    while (goog.net.xpc.IframeRelayTransport.iframeRefs_.length && now - goog.net.xpc.IframeRelayTransport.iframeRefs_[0].timestamp >= maxAge) {
      var ifr = goog.net.xpc.IframeRelayTransport.iframeRefs_.shift().iframeElement;
      goog.dom.removeNode(ifr);
      goog.net.xpc.logger.finest("iframe removed");
    }
    goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(goog.net.xpc.IframeRelayTransport.cleanupCb_, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
  };
  goog.net.xpc.IframeRelayTransport.cleanupCb_ = function() {
    goog.net.xpc.IframeRelayTransport.cleanup_();
  };
}
goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_ = 1800;
goog.net.xpc.IframeRelayTransport.FragmentInfo;
goog.net.xpc.IframeRelayTransport.fragmentMap_ = {};
goog.net.xpc.IframeRelayTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
goog.net.xpc.IframeRelayTransport.prototype.connect = function() {
  if (!this.getWindow()["xpcRelay"]) {
    this.getWindow()["xpcRelay"] = goog.net.xpc.IframeRelayTransport.receiveMessage_;
  }
  this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
};
goog.net.xpc.IframeRelayTransport.receiveMessage_ = function(channelName, frame) {
  var pos = frame.indexOf(":");
  var header = frame.substr(0, pos);
  var payload = frame.substr(pos + 1);
  if (!goog.userAgent.IE || (pos = header.indexOf("|")) == -1) {
    var service = header
  } else {
    var service = header.substr(0, pos);
    var fragmentIdStr = header.substr(pos + 1);
    pos = fragmentIdStr.indexOf("+");
    var messageIdStr = fragmentIdStr.substr(0, pos);
    var fragmentNum = parseInt(fragmentIdStr.substr(pos + 1), 10);
    var fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
    if (!fragmentInfo) {
      fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr] = {fragments:[], received:0, expected:0};
    }
    if (goog.string.contains(fragmentIdStr, "++")) {
      fragmentInfo.expected = fragmentNum + 1;
    }
    fragmentInfo.fragments[fragmentNum] = payload;
    fragmentInfo.received++;
    if (fragmentInfo.received != fragmentInfo.expected) {
      return;
    }
    payload = fragmentInfo.fragments.join("");
    delete goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
  }
  goog.net.xpc.channels[channelName].xpcDeliver(service, decodeURIComponent(payload));
};
goog.net.xpc.IframeRelayTransport.prototype.transportServiceHandler = function(payload) {
  if (payload == goog.net.xpc.SETUP) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    this.channel_.notifyConnected();
  } else {
    if (payload == goog.net.xpc.SETUP_ACK_) {
      this.channel_.notifyConnected();
    }
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send = function(service, payload) {
  var encodedPayload = encodeURIComponent(payload);
  var encodedLen = encodedPayload.length;
  var maxSize = goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_;
  if (goog.userAgent.IE && encodedLen > maxSize) {
    var messageIdStr = goog.string.getRandomString();
    for (var startIndex = 0, fragmentNum = 0;startIndex < encodedLen;fragmentNum++) {
      var payloadFragment = encodedPayload.substr(startIndex, maxSize);
      startIndex += maxSize;
      var fragmentIdStr = messageIdStr + (startIndex >= encodedLen ? "++" : "+") + fragmentNum;
      this.send_(service, payloadFragment, fragmentIdStr);
    }
  } else {
    this.send_(service, encodedPayload);
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send_ = function(service, encodedPayload, opt_fragmentIdStr) {
  if (goog.userAgent.IE) {
    var div = this.getWindow().document.createElement("div");
    div.innerHTML = '\x3ciframe onload\x3d"this.xpcOnload()"\x3e\x3c/iframe\x3e';
    var ifr = div.childNodes[0];
    div = null;
    ifr["xpcOnload"] = goog.net.xpc.IframeRelayTransport.iframeLoadHandler_;
  } else {
    var ifr = this.getWindow().document.createElement("iframe");
    if (goog.userAgent.WEBKIT) {
      goog.net.xpc.IframeRelayTransport.iframeRefs_.push({timestamp:goog.now(), iframeElement:ifr});
    } else {
      goog.events.listen(ifr, "load", goog.net.xpc.IframeRelayTransport.iframeLoadHandler_);
    }
  }
  var style = ifr.style;
  style.visibility = "hidden";
  style.width = ifr.style.height = "0px";
  style.position = "absolute";
  var url = this.peerRelayUri_;
  url += "#" + this.channel_.name;
  if (this.peerIframeId_) {
    url += "," + this.peerIframeId_;
  }
  url += "|" + service;
  if (opt_fragmentIdStr) {
    url += "|" + opt_fragmentIdStr;
  }
  url += ":" + encodedPayload;
  ifr.src = url;
  this.getWindow().document.body.appendChild(ifr);
  goog.net.xpc.logger.finest("msg sent: " + url);
};
goog.net.xpc.IframeRelayTransport.iframeLoadHandler_ = function() {
  goog.net.xpc.logger.finest("iframe-load");
  goog.dom.removeNode(this);
  this.xpcOnload = null;
};
goog.net.xpc.IframeRelayTransport.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.cleanup_(0);
  }
};
goog.provide("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.async.Deferred");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.net.xpc.NativeMessagingTransport = function(channel, peerHostname, opt_domHelper, opt_oneSidedHandshake, opt_protocolVersion) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.protocolVersion_ = opt_protocolVersion || 2;
  goog.asserts.assert(this.protocolVersion_ >= 1);
  goog.asserts.assert(this.protocolVersion_ <= 2);
  this.peerHostname_ = peerHostname || "*";
  this.eventHandler_ = new goog.events.EventHandler(this);
  this.maybeAttemptToConnectTimer_ = new goog.Timer(100, this.getWindow());
  this.oneSidedHandshake_ = !!opt_oneSidedHandshake;
  this.setupAckReceived_ = new goog.async.Deferred;
  this.setupAckSent_ = new goog.async.Deferred;
  this.connected_ = new goog.async.Deferred;
  this.endpointId_ = goog.net.xpc.getRandomString(10);
  this.peerEndpointId_ = null;
  if (this.oneSidedHandshake_) {
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.connected_.awaitDeferred(this.setupAckReceived_);
    } else {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  } else {
    this.connected_.awaitDeferred(this.setupAckReceived_);
    if (this.protocolVersion_ == 2) {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  }
  this.connected_.addCallback(this.notifyConnected_, this);
  this.connected_.callback(true);
  this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, goog.Timer.TICK, this.maybeAttemptToConnect_);
  goog.net.xpc.logger.info("NativeMessagingTransport created.  " + "protocolVersion\x3d" + this.protocolVersion_ + ", oneSidedHandshake\x3d" + this.oneSidedHandshake_ + ", role\x3d" + this.channel_.getRole());
};
goog.inherits(goog.net.xpc.NativeMessagingTransport, goog.net.xpc.Transport);
goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ = 200;
goog.net.xpc.NativeMessagingTransport.prototype.peerProtocolVersion_ = null;
goog.net.xpc.NativeMessagingTransport.prototype.initialized_ = false;
goog.net.xpc.NativeMessagingTransport.prototype.transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_ = ",";
goog.net.xpc.NativeMessagingTransport.activeCount_ = {};
goog.net.xpc.NativeMessagingTransport.sendTimerId_ = 0;
goog.net.xpc.NativeMessagingTransport.prototype.couldPeerVersionBe_ = function(version) {
  return this.peerProtocolVersion_ == null || this.peerProtocolVersion_ == version;
};
goog.net.xpc.NativeMessagingTransport.initialize_ = function(listenWindow) {
  var uid = goog.getUid(listenWindow);
  var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
  if (!goog.isNumber(value)) {
    value = 0;
  }
  if (value == 0) {
    goog.events.listen(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
  }
  goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value + 1;
};
goog.net.xpc.NativeMessagingTransport.messageReceived_ = function(msgEvt) {
  var data = msgEvt.getBrowserEvent().data;
  if (!goog.isString(data)) {
    return false;
  }
  var headDelim = data.indexOf("|");
  var serviceDelim = data.indexOf(":");
  if (headDelim == -1 || serviceDelim == -1) {
    return false;
  }
  var channelName = data.substring(0, headDelim);
  var service = data.substring(headDelim + 1, serviceDelim);
  var payload = data.substring(serviceDelim + 1);
  goog.net.xpc.logger.fine("messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
  var channel = goog.net.xpc.channels[channelName];
  if (channel) {
    channel.xpcDeliver(service, payload, msgEvt.getBrowserEvent().origin);
    return true;
  }
  var transportMessageType = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload)[0];
  for (var staleChannelName in goog.net.xpc.channels) {
    var staleChannel = goog.net.xpc.channels[staleChannelName];
    if (staleChannel.getRole() == goog.net.xpc.CrossPageChannelRole.INNER && (!staleChannel.isConnected() && (service == goog.net.xpc.TRANSPORT_SERVICE_ && (transportMessageType == goog.net.xpc.SETUP || transportMessageType == goog.net.xpc.SETUP_NTPV2)))) {
      goog.net.xpc.logger.fine("changing channel name to " + channelName);
      staleChannel.name = channelName;
      delete goog.net.xpc.channels[staleChannelName];
      goog.net.xpc.channels[channelName] = staleChannel;
      staleChannel.xpcDeliver(service, payload);
      return true;
    }
  }
  goog.net.xpc.logger.info('channel name mismatch; message ignored"');
  return false;
};
goog.net.xpc.NativeMessagingTransport.prototype.transportServiceHandler = function(payload) {
  var transportParts = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload);
  var transportMessageType = transportParts[0];
  var peerEndpointId = transportParts[1];
  switch(transportMessageType) {
    case goog.net.xpc.SETUP_ACK_:
      this.setPeerProtocolVersion_(1);
      if (!this.setupAckReceived_.hasFired()) {
        this.setupAckReceived_.callback(true);
      }
      break;
    case goog.net.xpc.SETUP_ACK_NTPV2:
      if (this.protocolVersion_ == 2) {
        this.setPeerProtocolVersion_(2);
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
      }
      break;
    case goog.net.xpc.SETUP:
      this.setPeerProtocolVersion_(1);
      this.sendSetupAckMessage_(1);
      break;
    case goog.net.xpc.SETUP_NTPV2:
      if (this.protocolVersion_ == 2) {
        var prevPeerProtocolVersion = this.peerProtocolVersion_;
        this.setPeerProtocolVersion_(2);
        this.sendSetupAckMessage_(2);
        if ((prevPeerProtocolVersion == 1 || this.peerEndpointId_ != null) && this.peerEndpointId_ != peerEndpointId) {
          goog.net.xpc.logger.info("Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
      }
      break;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupMessage_ = function() {
  goog.asserts.assert(!(this.protocolVersion_ == 1 && this.peerProtocolVersion_ == 2));
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2)) {
    var payload = goog.net.xpc.SETUP_NTPV2;
    payload += goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  }
  if (this.couldPeerVersionBe_(1)) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupAckMessage_ = function(protocolVersion) {
  goog.asserts.assert(this.protocolVersion_ != 1 || protocolVersion != 2, "Shouldn't try to send a v2 setup ack in v1 mode.");
  if (this.protocolVersion_ == 2 && (this.couldPeerVersionBe_(2) && protocolVersion == 2)) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_NTPV2);
  } else {
    if (this.couldPeerVersionBe_(1) && protocolVersion == 1) {
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    } else {
      return;
    }
  }
  if (!this.setupAckSent_.hasFired()) {
    this.setupAckSent_.callback(true);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.setPeerProtocolVersion_ = function(version) {
  if (version > this.peerProtocolVersion_) {
    this.peerProtocolVersion_ = version;
  }
  if (this.peerProtocolVersion_ == 1) {
    if (!this.setupAckSent_.hasFired() && !this.oneSidedHandshake_) {
      this.setupAckSent_.callback(true);
    }
    this.peerEndpointId_ = null;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.connect = function() {
  goog.net.xpc.NativeMessagingTransport.initialize_(this.getWindow());
  this.initialized_ = true;
  this.maybeAttemptToConnect_();
};
goog.net.xpc.NativeMessagingTransport.prototype.maybeAttemptToConnect_ = function() {
  var outerFrame = this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER;
  if (this.oneSidedHandshake_ && outerFrame || (this.channel_.isConnected() || this.isDisposed())) {
    this.maybeAttemptToConnectTimer_.stop();
    return;
  }
  this.maybeAttemptToConnectTimer_.start();
  this.sendSetupMessage_();
};
goog.net.xpc.NativeMessagingTransport.prototype.send = function(service, payload) {
  var win = this.channel_.getPeerWindowObject();
  if (!win) {
    goog.net.xpc.logger.fine("send(): window not ready");
    return;
  }
  this.send = function(service, payload) {
    var transport = this;
    var channelName = this.channel_.name;
    var sendFunctor = function() {
      transport.sendTimerId_ = 0;
      try {
        var obj = win.postMessage ? win : win.document;
        if (!obj.postMessage) {
          goog.net.xpc.logger.warning("Peer window had no postMessage " + "function.");
          return;
        }
        obj.postMessage(channelName + "|" + service + ":" + payload, transport.peerHostname_);
        goog.net.xpc.logger.fine("send(): service\x3d" + service + " payload\x3d" + payload + " to hostname\x3d" + transport.peerHostname_);
      } catch (error) {
        goog.net.xpc.logger.warning("Error performing postMessage, ignoring.", error);
      }
    };
    this.sendTimerId_ = goog.Timer.callOnce(sendFunctor, 0);
  };
  this.send(service, payload);
};
goog.net.xpc.NativeMessagingTransport.prototype.notifyConnected_ = function() {
  var delay = this.protocolVersion_ == 1 || this.peerProtocolVersion_ == 1 ? goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ : undefined;
  this.channel_.notifyConnected(delay);
};
goog.net.xpc.NativeMessagingTransport.prototype.disposeInternal = function() {
  if (this.initialized_) {
    var listenWindow = this.getWindow();
    var uid = goog.getUid(listenWindow);
    var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
    goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value - 1;
    if (value == 1) {
      goog.events.unlisten(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
    }
  }
  if (this.sendTimerId_) {
    goog.Timer.clear(this.sendTimerId_);
    this.sendTimerId_ = 0;
  }
  goog.dispose(this.eventHandler_);
  delete this.eventHandler_;
  goog.dispose(this.maybeAttemptToConnectTimer_);
  delete this.maybeAttemptToConnectTimer_;
  this.setupAckReceived_.cancel();
  delete this.setupAckReceived_;
  this.setupAckSent_.cancel();
  delete this.setupAckSent_;
  this.connected_.cancel();
  delete this.connected_;
  delete this.send;
  goog.base(this, "disposeInternal");
};
goog.net.xpc.NativeMessagingTransport.parseTransportPayload_ = function(payload) {
  var transportParts = (payload.split(goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_));
  transportParts[1] = transportParts[1] || null;
  return transportParts;
};
goog.provide("goog.net.xpc.NixTransport");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.reflect");
goog.net.xpc.NixTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.authToken_ = channel[goog.net.xpc.CfgFields.AUTH_TOKEN] || "";
  this.remoteAuthToken_ = channel[goog.net.xpc.CfgFields.REMOTE_AUTH_TOKEN] || "";
  goog.net.xpc.NixTransport.conductGlobalSetup_(this.getWindow());
  this[goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE] = this.handleMessage_;
  this[goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL] = this.createChannel_;
};
goog.inherits(goog.net.xpc.NixTransport, goog.net.xpc.Transport);
goog.net.xpc.NixTransport.NIX_WRAPPER = "GCXPC____NIXVBS_wrapper";
goog.net.xpc.NixTransport.NIX_GET_WRAPPER = "GCXPC____NIXVBS_get_wrapper";
goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE = "GCXPC____NIXJS_handle_message";
goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL = "GCXPC____NIXJS_create_channel";
goog.net.xpc.NixTransport.NIX_ID_FIELD = "GCXPC____NIXVBS_container";
goog.net.xpc.NixTransport.isNixSupported = function() {
  var isSupported = false;
  try {
    var oldOpener = window.opener;
    window.opener = ({});
    isSupported = goog.reflect.canAccessProperty(window, "opener");
    window.opener = oldOpener;
  } catch (e) {
  }
  return isSupported;
};
goog.net.xpc.NixTransport.conductGlobalSetup_ = function(listenWindow) {
  if (listenWindow["nix_setup_complete"]) {
    return;
  }
  var vbscript = "Class " + goog.net.xpc.NixTransport.NIX_WRAPPER + "\n " + "Private m_Transport\n" + "Private m_Auth\n" + "Public Sub SetTransport(transport)\n" + "If isEmpty(m_Transport) Then\n" + "Set m_Transport \x3d transport\n" + "End If\n" + "End Sub\n" + "Public Sub SetAuth(auth)\n" + "If isEmpty(m_Auth) Then\n" + "m_Auth \x3d auth\n" + "End If\n" + "End Sub\n" + "Public Function GetAuthToken()\n " + "GetAuthToken \x3d m_Auth\n" + "End Function\n" + "Public Sub SendMessage(service, payload)\n " + 
  "Call m_Transport." + goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE + "(service, payload)\n" + "End Sub\n" + "Public Sub CreateChannel(channel)\n " + "Call m_Transport." + goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL + "(channel)\n" + "End Sub\n" + "Public Sub " + goog.net.xpc.NixTransport.NIX_ID_FIELD + "()\n " + "End Sub\n" + "End Class\n " + "Function " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + "(transport, auth)\n" + "Dim wrap\n" + "Set wrap \x3d New " + goog.net.xpc.NixTransport.NIX_WRAPPER + 
  "\n" + "wrap.SetTransport transport\n" + "wrap.SetAuth auth\n" + "Set " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + " \x3d wrap\n" + "End Function";
  try {
    listenWindow.execScript(vbscript, "vbscript");
    listenWindow["nix_setup_complete"] = true;
  } catch (e) {
    goog.net.xpc.logger.severe("exception caught while attempting global setup: " + e);
  }
};
goog.net.xpc.NixTransport.prototype.transportType = goog.net.xpc.TransportTypes.NIX;
goog.net.xpc.NixTransport.prototype.localSetupCompleted_ = false;
goog.net.xpc.NixTransport.prototype.nixChannel_ = null;
goog.net.xpc.NixTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.attemptOuterSetup_();
  } else {
    this.attemptInnerSetup_();
  }
};
goog.net.xpc.NixTransport.prototype.attemptOuterSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  var innerFrame = this.channel_.getIframeElement();
  try {
    var theWindow = this.getWindow();
    var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
    innerFrame.contentWindow.opener = getWrapper(this, this.authToken_);
    this.localSetupCompleted_ = true;
  } catch (e) {
    goog.net.xpc.logger.severe("exception caught while attempting setup: " + e);
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptOuterSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.attemptInnerSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  try {
    var opener = this.getWindow().opener;
    if (opener && goog.net.xpc.NixTransport.NIX_ID_FIELD in opener) {
      this.nixChannel_ = opener;
      var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
      if (remoteAuthToken != this.remoteAuthToken_) {
        goog.net.xpc.logger.severe("Invalid auth token from other party");
        return;
      }
      var theWindow = this.getWindow();
      var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
      this.nixChannel_["CreateChannel"](getWrapper(this, this.authToken_));
      this.localSetupCompleted_ = true;
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.net.xpc.logger.severe("exception caught while attempting setup: " + e);
    return;
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptInnerSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.createChannel_ = function(channel) {
  if (typeof channel != "unknown" || !(goog.net.xpc.NixTransport.NIX_ID_FIELD in channel)) {
    goog.net.xpc.logger.severe("Invalid NIX channel given to createChannel_");
  }
  this.nixChannel_ = channel;
  var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
  if (remoteAuthToken != this.remoteAuthToken_) {
    goog.net.xpc.logger.severe("Invalid auth token from other party");
    return;
  }
  this.channel_.notifyConnected();
};
goog.net.xpc.NixTransport.prototype.handleMessage_ = function(serviceName, payload) {
  var deliveryHandler = function() {
    this.channel_.xpcDeliver(serviceName, payload);
  };
  this.getWindow().setTimeout(goog.bind(deliveryHandler, this), 1);
};
goog.net.xpc.NixTransport.prototype.send = function(service, payload) {
  if (typeof this.nixChannel_ !== "unknown") {
    goog.net.xpc.logger.severe("NIX channel not connected");
  }
  this.nixChannel_["SendMessage"](service, payload);
};
goog.net.xpc.NixTransport.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  this.nixChannel_ = null;
};
goog.provide("goog.net.xpc.CrossPageChannel");
goog.require("goog.Disposable");
goog.require("goog.Uri");
goog.require("goog.async.Deferred");
goog.require("goog.async.Delay");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.json");
goog.require("goog.messaging.AbstractChannel");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.net.xpc.IframePollingTransport");
goog.require("goog.net.xpc.IframeRelayTransport");
goog.require("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.net.xpc.NixTransport");
goog.require("goog.net.xpc.Transport");
goog.require("goog.userAgent");
goog.net.xpc.CrossPageChannel = function(cfg, opt_domHelper) {
  goog.base(this);
  for (var i = 0, uriField;uriField = goog.net.xpc.UriCfgFields[i];i++) {
    if (uriField in cfg && !/^https?:\/\//.test(cfg[uriField])) {
      throw Error("URI " + cfg[uriField] + " is invalid for field " + uriField);
    }
  }
  this.cfg_ = cfg;
  this.name = this.cfg_[goog.net.xpc.CfgFields.CHANNEL_NAME] || goog.net.xpc.getRandomString(10);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
  this.deferredDeliveries_ = [];
  this.peerLoadHandler_ = new goog.events.EventHandler(this);
  cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] || goog.uri.utils.getHost(this.domHelper_.getWindow().location.href) + "/robots.txt";
  cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] || goog.uri.utils.getHost(cfg[goog.net.xpc.CfgFields.PEER_URI] || "") + "/robots.txt";
  goog.net.xpc.channels[this.name] = this;
  goog.events.listen(window, "unload", goog.net.xpc.CrossPageChannel.disposeAll_);
  goog.net.xpc.logger.info("CrossPageChannel created: " + this.name);
};
goog.inherits(goog.net.xpc.CrossPageChannel, goog.messaging.AbstractChannel);
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_ = new RegExp("^%*" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_ = new RegExp("^%+" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.prototype.connectionDelay_ = null;
goog.net.xpc.CrossPageChannel.prototype.peerWindowDeferred_ = null;
goog.net.xpc.CrossPageChannel.prototype.transport_ = null;
goog.net.xpc.CrossPageChannel.prototype.state_ = goog.net.xpc.ChannelStates.NOT_CONNECTED;
goog.net.xpc.CrossPageChannel.prototype.isConnected = function() {
  return this.state_ == goog.net.xpc.ChannelStates.CONNECTED;
};
goog.net.xpc.CrossPageChannel.prototype.peerWindowObject_ = null;
goog.net.xpc.CrossPageChannel.prototype.iframeElement_ = null;
goog.net.xpc.CrossPageChannel.prototype.getConfig = function() {
  return this.cfg_;
};
goog.net.xpc.CrossPageChannel.prototype.getIframeElement = function() {
  return this.iframeElement_;
};
goog.net.xpc.CrossPageChannel.prototype.setPeerWindowObject = function(peerWindowObject) {
  this.peerWindowObject_ = peerWindowObject;
};
goog.net.xpc.CrossPageChannel.prototype.getPeerWindowObject = function() {
  return this.peerWindowObject_;
};
goog.net.xpc.CrossPageChannel.prototype.isPeerAvailable = function() {
  try {
    return!!this.peerWindowObject_ && !Boolean(this.peerWindowObject_.closed);
  } catch (e) {
    return false;
  }
};
goog.net.xpc.CrossPageChannel.prototype.determineTransportType_ = function() {
  var transportType;
  if (goog.isFunction(document.postMessage) || (goog.isFunction(window.postMessage) || goog.userAgent.IE && window.postMessage)) {
    transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
  } else {
    if (goog.userAgent.GECKO) {
      transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
    } else {
      if (goog.userAgent.IE && this.cfg_[goog.net.xpc.CfgFields.PEER_RELAY_URI]) {
        transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
      } else {
        if (goog.userAgent.IE && goog.net.xpc.NixTransport.isNixSupported()) {
          transportType = goog.net.xpc.TransportTypes.NIX;
        } else {
          transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
        }
      }
    }
  }
  return transportType;
};
goog.net.xpc.CrossPageChannel.prototype.createTransport_ = function() {
  if (this.transport_) {
    return;
  }
  if (!this.cfg_[goog.net.xpc.CfgFields.TRANSPORT]) {
    this.cfg_[goog.net.xpc.CfgFields.TRANSPORT] = this.determineTransportType_();
  }
  switch(this.cfg_[goog.net.xpc.CfgFields.TRANSPORT]) {
    case goog.net.xpc.TransportTypes.NATIVE_MESSAGING:
      var protocolVersion = this.cfg_[goog.net.xpc.CfgFields.NATIVE_TRANSPORT_PROTOCOL_VERSION] || 2;
      this.transport_ = new goog.net.xpc.NativeMessagingTransport(this, this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME], this.domHelper_, !!this.cfg_[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE], protocolVersion);
      break;
    case goog.net.xpc.TransportTypes.NIX:
      this.transport_ = new goog.net.xpc.NixTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD:
      this.transport_ = new goog.net.xpc.FrameElementMethodTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_RELAY:
      this.transport_ = new goog.net.xpc.IframeRelayTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_POLLING:
      this.transport_ = new goog.net.xpc.IframePollingTransport(this, this.domHelper_);
      break;
  }
  if (this.transport_) {
    goog.net.xpc.logger.info("Transport created: " + this.transport_.getName());
  } else {
    throw Error("CrossPageChannel: No suitable transport found!");
  }
};
goog.net.xpc.CrossPageChannel.prototype.getTransportType = function() {
  return this.transport_.getType();
};
goog.net.xpc.CrossPageChannel.prototype.getTransportName = function() {
  return this.transport_.getName();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerConfiguration = function() {
  var peerCfg = {};
  peerCfg[goog.net.xpc.CfgFields.CHANNEL_NAME] = this.name;
  peerCfg[goog.net.xpc.CfgFields.TRANSPORT] = this.cfg_[goog.net.xpc.CfgFields.TRANSPORT];
  peerCfg[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE] = this.cfg_[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE];
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_RELAY_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI];
  }
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (role) {
    peerCfg[goog.net.xpc.CfgFields.ROLE] = role == goog.net.xpc.CrossPageChannelRole.INNER ? goog.net.xpc.CrossPageChannelRole.OUTER : goog.net.xpc.CrossPageChannelRole.INNER;
  }
  return peerCfg;
};
goog.net.xpc.CrossPageChannel.prototype.createPeerIframe = function(parentElm, opt_configureIframeCb, opt_addCfgParam) {
  goog.net.xpc.logger.info("createPeerIframe()");
  var iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID];
  if (!iframeId) {
    iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID] = "xpcpeer" + goog.net.xpc.getRandomString(4);
  }
  var iframeElm = goog.dom.getDomHelper(parentElm).createElement("IFRAME");
  iframeElm.id = iframeElm.name = iframeId;
  if (opt_configureIframeCb) {
    opt_configureIframeCb(iframeElm);
  } else {
    iframeElm.style.width = iframeElm.style.height = "100%";
  }
  this.cleanUpIncompleteConnection_();
  this.peerWindowDeferred_ = new goog.async.Deferred(undefined, this);
  var peerUri = this.getPeerUri(opt_addCfgParam);
  this.peerLoadHandler_.listenOnce(iframeElm, "load", this.peerWindowDeferred_.callback, false, this.peerWindowDeferred_);
  if (goog.userAgent.GECKO || goog.userAgent.WEBKIT) {
    window.setTimeout(goog.bind(function() {
      parentElm.appendChild(iframeElm);
      iframeElm.src = peerUri.toString();
      goog.net.xpc.logger.info("peer iframe created (" + iframeId + ")");
    }, this), 1);
  } else {
    iframeElm.src = peerUri.toString();
    parentElm.appendChild(iframeElm);
    goog.net.xpc.logger.info("peer iframe created (" + iframeId + ")");
  }
  return(iframeElm);
};
goog.net.xpc.CrossPageChannel.prototype.cleanUpIncompleteConnection_ = function() {
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.cancel();
    this.peerWindowDeferred_ = null;
  }
  this.deferredDeliveries_.length = 0;
  this.peerLoadHandler_.removeAll();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerUri = function(opt_addCfgParam) {
  var peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI];
  if (goog.isString(peerUri)) {
    peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI] = new goog.Uri(peerUri);
  }
  if (opt_addCfgParam !== false) {
    peerUri.setParameterValue("xpc", goog.json.serialize(this.getPeerConfiguration()));
  }
  return peerUri;
};
goog.net.xpc.CrossPageChannel.prototype.connect = function(opt_connectCb) {
  this.connectCb_ = opt_connectCb || goog.nullFunction;
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.addCallback(this.continueConnection_);
  } else {
    this.continueConnection_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.continueConnection_ = function() {
  goog.net.xpc.logger.info("continueConnection_()");
  this.peerWindowDeferred_ = null;
  if (this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]) {
    this.iframeElement_ = this.domHelper_.getElement(this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]);
  }
  if (this.iframeElement_) {
    var winObj = this.iframeElement_.contentWindow;
    if (!winObj) {
      winObj = window.frames[this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]];
    }
    this.setPeerWindowObject(winObj);
  }
  if (!this.peerWindowObject_) {
    if (window == window.top) {
      throw Error("CrossPageChannel: Can't connect, peer window-object not set.");
    } else {
      this.setPeerWindowObject(window.parent);
    }
  }
  this.createTransport_();
  this.transport_.connect();
  while (this.deferredDeliveries_.length > 0) {
    this.deferredDeliveries_.shift()();
  }
};
goog.net.xpc.CrossPageChannel.prototype.close = function() {
  this.cleanUpIncompleteConnection_();
  this.state_ = goog.net.xpc.ChannelStates.CLOSED;
  goog.dispose(this.transport_);
  this.transport_ = null;
  this.connectCb_ = null;
  goog.dispose(this.connectionDelay_);
  this.connectionDelay_ = null;
  goog.net.xpc.logger.info('Channel "' + this.name + '" closed');
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected = function(opt_delay) {
  if (this.isConnected() || this.connectionDelay_ && this.connectionDelay_.isActive()) {
    return;
  }
  this.state_ = goog.net.xpc.ChannelStates.CONNECTED;
  goog.net.xpc.logger.info('Channel "' + this.name + '" connected');
  goog.dispose(this.connectionDelay_);
  if (opt_delay) {
    this.connectionDelay_ = new goog.async.Delay(this.connectCb_, opt_delay);
    this.connectionDelay_.start();
  } else {
    this.connectionDelay_ = null;
    this.connectCb_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected_ = goog.net.xpc.CrossPageChannel.prototype.notifyConnected;
goog.net.xpc.CrossPageChannel.prototype.notifyTransportError = function() {
  goog.net.xpc.logger.info("Transport Error");
  this.close();
};
goog.net.xpc.CrossPageChannel.prototype.send = function(serviceName, payload) {
  if (!this.isConnected()) {
    goog.net.xpc.logger.severe("Can't send. Channel not connected.");
    return;
  }
  if (!this.isPeerAvailable()) {
    goog.net.xpc.logger.severe("Peer has disappeared.");
    this.close();
    return;
  }
  if (goog.isObject(payload)) {
    payload = goog.json.serialize(payload);
  }
  this.transport_.send(this.escapeServiceName_(serviceName), payload);
};
goog.net.xpc.CrossPageChannel.prototype.xpcDeliver = function(serviceName, payload, opt_origin) {
  if (this.peerWindowDeferred_) {
    this.deferredDeliveries_.push(goog.bind(this.xpcDeliver, this, serviceName, payload, opt_origin));
    return;
  }
  if (!this.isMessageOriginAcceptable_(opt_origin)) {
    goog.net.xpc.logger.warning('Message received from unapproved origin "' + opt_origin + '" - rejected.');
    return;
  }
  if (this.isDisposed()) {
    goog.net.xpc.logger.warning("CrossPageChannel::xpcDeliver(): Disposed.");
  } else {
    if (!serviceName || serviceName == goog.net.xpc.TRANSPORT_SERVICE_) {
      this.transport_.transportServiceHandler(payload);
    } else {
      if (this.isConnected()) {
        this.deliver(this.unescapeServiceName_(serviceName), payload);
      } else {
        goog.net.xpc.logger.info("CrossPageChannel::xpcDeliver(): Not connected.");
      }
    }
  }
};
goog.net.xpc.CrossPageChannel.prototype.escapeServiceName_ = function(name) {
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_.test(name)) {
    name = "%" + name;
  }
  return name.replace(/[%:|]/g, encodeURIComponent);
};
goog.net.xpc.CrossPageChannel.prototype.unescapeServiceName_ = function(name) {
  name = name.replace(/%[0-9a-f]{2}/gi, decodeURIComponent);
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_.test(name)) {
    return name.substring(1);
  } else {
    return name;
  }
};
goog.net.xpc.CrossPageChannel.prototype.getRole = function() {
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (role) {
    return role;
  } else {
    return window.parent == this.peerWindowObject_ ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  }
};
goog.net.xpc.CrossPageChannel.prototype.isMessageOriginAcceptable_ = function(opt_origin) {
  var peerHostname = this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
  return goog.string.isEmptySafe(opt_origin) || (goog.string.isEmptySafe(peerHostname) || opt_origin == this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME]);
};
goog.net.xpc.CrossPageChannel.prototype.disposeInternal = function() {
  this.close();
  this.peerWindowObject_ = null;
  this.iframeElement_ = null;
  delete goog.net.xpc.channels[this.name];
  goog.dispose(this.peerLoadHandler_);
  delete this.peerLoadHandler_;
  goog.base(this, "disposeInternal");
};
goog.net.xpc.CrossPageChannel.disposeAll_ = function() {
  for (var name in goog.net.xpc.channels) {
    goog.dispose(goog.net.xpc.channels[name]);
  }
};
goog.provide("clojure.browser.net");
goog.require("cljs.core");
goog.require("goog.net.XhrIo");
goog.require("goog.net.xpc.CrossPageChannel");
goog.require("clojure.browser.event");
goog.require("goog.json");
goog.require("goog.net.xpc.CfgFields");
goog.require("clojure.browser.event");
goog.require("goog.net.EventType");
goog.require("goog.net.EventType");
goog.require("goog.net.xpc.CrossPageChannel");
goog.require("goog.json");
goog.require("goog.net.XhrIo");
goog.require("goog.net.xpc.CfgFields");
clojure.browser.net._STAR_timeout_STAR_ = 1E4;
clojure.browser.net.event_types = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__6094) {
  var vec__6095 = p__6094;
  var k = cljs.core.nth.call(null, vec__6095, 0, null);
  var v = cljs.core.nth.call(null, vec__6095, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
clojure.browser.net.IConnection = function() {
  var obj6097 = {};
  return obj6097;
}();
clojure.browser.net.connect = function() {
  var connect = null;
  var connect__1 = function(this$) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$1;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$1(this$);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = clojure.browser.net.connect[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var connect__2 = function(this$, opt1) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$2;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$2(this$, opt1);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = clojure.browser.net.connect[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1);
    }
  };
  var connect__3 = function(this$, opt1, opt2) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$3;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$3(this$, opt1, opt2);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = clojure.browser.net.connect[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1, opt2);
    }
  };
  var connect__4 = function(this$, opt1, opt2, opt3) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$4;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$4(this$, opt1, opt2, opt3);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = clojure.browser.net.connect[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1, opt2, opt3);
    }
  };
  connect = function(this$, opt1, opt2, opt3) {
    switch(arguments.length) {
      case 1:
        return connect__1.call(this, this$);
      case 2:
        return connect__2.call(this, this$, opt1);
      case 3:
        return connect__3.call(this, this$, opt1, opt2);
      case 4:
        return connect__4.call(this, this$, opt1, opt2, opt3);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  connect.cljs$core$IFn$_invoke$arity$1 = connect__1;
  connect.cljs$core$IFn$_invoke$arity$2 = connect__2;
  connect.cljs$core$IFn$_invoke$arity$3 = connect__3;
  connect.cljs$core$IFn$_invoke$arity$4 = connect__4;
  return connect;
}();
clojure.browser.net.transmit = function() {
  var transmit = null;
  var transmit__2 = function(this$, opt) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$2;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$2(this$, opt);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt);
    }
  };
  var transmit__3 = function(this$, opt, opt2) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$3;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$3(this$, opt, opt2);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2);
    }
  };
  var transmit__4 = function(this$, opt, opt2, opt3) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$4;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$4(this$, opt, opt2, opt3);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3);
    }
  };
  var transmit__5 = function(this$, opt, opt2, opt3, opt4) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$5;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$5(this$, opt, opt2, opt3, opt4);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3, opt4);
    }
  };
  var transmit__6 = function(this$, opt, opt2, opt3, opt4, opt5) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$6;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$6(this$, opt, opt2, opt3, opt4, opt5);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3, opt4, opt5);
    }
  };
  transmit = function(this$, opt, opt2, opt3, opt4, opt5) {
    switch(arguments.length) {
      case 2:
        return transmit__2.call(this, this$, opt);
      case 3:
        return transmit__3.call(this, this$, opt, opt2);
      case 4:
        return transmit__4.call(this, this$, opt, opt2, opt3);
      case 5:
        return transmit__5.call(this, this$, opt, opt2, opt3, opt4);
      case 6:
        return transmit__6.call(this, this$, opt, opt2, opt3, opt4, opt5);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transmit.cljs$core$IFn$_invoke$arity$2 = transmit__2;
  transmit.cljs$core$IFn$_invoke$arity$3 = transmit__3;
  transmit.cljs$core$IFn$_invoke$arity$4 = transmit__4;
  transmit.cljs$core$IFn$_invoke$arity$5 = transmit__5;
  transmit.cljs$core$IFn$_invoke$arity$6 = transmit__6;
  return transmit;
}();
clojure.browser.net.close = function close(this$) {
  if (function() {
    var and__3418__auto__ = this$;
    if (and__3418__auto__) {
      return this$.clojure$browser$net$IConnection$close$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IConnection$close$arity$1(this$);
  } else {
    var x__4057__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3430__auto__ = clojure.browser.net.close[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = clojure.browser.net.close["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IConnection.close", this$);
        }
      }
    }().call(null, this$);
  }
};
goog.net.XhrIo.prototype.clojure$browser$event$EventType$ = true;
goog.net.XhrIo.prototype.clojure$browser$event$EventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__6098) {
    var vec__6099 = p__6098;
    var k = cljs.core.nth.call(null, vec__6099, 0, null);
    var v = cljs.core.nth.call(null, vec__6099, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
  }, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$ = true;
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, uri) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, "GET", null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, uri, method) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$4 = function(this$, uri, method, content) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$5 = function(this$, uri, method, content, headers) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, headers, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$6 = function(this$, uri, method, content, headers, timeout) {
  var this$__$1 = this;
  this$__$1.setTimeoutInterval(timeout);
  return this$__$1.send(uri, method, content, headers);
};
clojure.browser.net.xpc_config_fields = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__6100) {
  var vec__6101 = p__6100;
  var k = cljs.core.nth.call(null, vec__6101, 0, null);
  var v = cljs.core.nth.call(null, vec__6101, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.js__GT_clj.call(null, goog.net.xpc.CfgFields)));
clojure.browser.net.xhr_connection = function xhr_connection() {
  return new goog.net.XhrIo;
};
clojure.browser.net.ICrossPageChannel = function() {
  var obj6103 = {};
  return obj6103;
}();
clojure.browser.net.register_service = function() {
  var register_service = null;
  var register_service__3 = function(this$, service_name, fn) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3(this$, service_name, fn);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = clojure.browser.net.register_service[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = clojure.browser.net.register_service["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
          }
        }
      }().call(null, this$, service_name, fn);
    }
  };
  var register_service__4 = function(this$, service_name, fn, encode_json_QMARK_) {
    if (function() {
      var and__3418__auto__ = this$;
      if (and__3418__auto__) {
        return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4;
      } else {
        return and__3418__auto__;
      }
    }()) {
      return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4(this$, service_name, fn, encode_json_QMARK_);
    } else {
      var x__4057__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3430__auto__ = clojure.browser.net.register_service[goog.typeOf(x__4057__auto__)];
        if (or__3430__auto__) {
          return or__3430__auto__;
        } else {
          var or__3430__auto____$1 = clojure.browser.net.register_service["_"];
          if (or__3430__auto____$1) {
            return or__3430__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
          }
        }
      }().call(null, this$, service_name, fn, encode_json_QMARK_);
    }
  };
  register_service = function(this$, service_name, fn, encode_json_QMARK_) {
    switch(arguments.length) {
      case 3:
        return register_service__3.call(this, this$, service_name, fn);
      case 4:
        return register_service__4.call(this, this$, service_name, fn, encode_json_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  register_service.cljs$core$IFn$_invoke$arity$3 = register_service__3;
  register_service.cljs$core$IFn$_invoke$arity$4 = register_service__4;
  return register_service;
}();
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$1 = function(this$) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, null);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, on_connect_fn) {
  var this$__$1 = this;
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, on_connect_fn, config_iframe_fn) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, on_connect_fn, config_iframe_fn, document.body);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$4 = function(this$, on_connect_fn, config_iframe_fn, iframe_parent) {
  var this$__$1 = this;
  this$__$1.createPeerIframe(iframe_parent, config_iframe_fn);
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, service_name, payload) {
  var this$__$1 = this;
  return this$__$1.send(cljs.core.name.call(null, service_name), payload);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close(cljs.core.List.EMPTY);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$3 = function(this$, service_name, fn) {
  var this$__$1 = this;
  return clojure.browser.net.register_service.call(null, this$__$1, service_name, fn, false);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$4 = function(this$, service_name, fn, encode_json_QMARK_) {
  var this$__$1 = this;
  return this$__$1.registerService(cljs.core.name.call(null, service_name), fn, encode_json_QMARK_);
};
clojure.browser.net.xpc_connection = function() {
  var xpc_connection = null;
  var xpc_connection__0 = function() {
    var temp__4092__auto__ = (new goog.Uri(window.location.href)).getParameterValue("xpc");
    if (cljs.core.truth_(temp__4092__auto__)) {
      var config = temp__4092__auto__;
      return new goog.net.xpc.CrossPageChannel(goog.json.parse(config));
    } else {
      return null;
    }
  };
  var xpc_connection__1 = function(config) {
    return new goog.net.xpc.CrossPageChannel(cljs.core.reduce.call(null, function(sum, p__6109) {
      var vec__6110 = p__6109;
      var k = cljs.core.nth.call(null, vec__6110, 0, null);
      var v = cljs.core.nth.call(null, vec__6110, 1, null);
      var temp__4090__auto__ = cljs.core.get.call(null, clojure.browser.net.xpc_config_fields, k);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var field = temp__4090__auto__;
        var G__6111 = sum;
        G__6111[field] = v;
        return G__6111;
      } else {
        return sum;
      }
    }, function() {
      var obj6113 = {};
      return obj6113;
    }(), config));
  };
  xpc_connection = function(config) {
    switch(arguments.length) {
      case 0:
        return xpc_connection__0.call(this);
      case 1:
        return xpc_connection__1.call(this, config);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  xpc_connection.cljs$core$IFn$_invoke$arity$0 = xpc_connection__0;
  xpc_connection.cljs$core$IFn$_invoke$arity$1 = xpc_connection__1;
  return xpc_connection;
}();
goog.provide("clojure.browser.repl");
goog.require("cljs.core");
goog.require("clojure.browser.event");
goog.require("clojure.browser.event");
goog.require("clojure.browser.net");
goog.require("clojure.browser.net");
clojure.browser.repl.xpc_connection = cljs.core.atom.call(null, null);
clojure.browser.repl.repl_print = function repl_print(data) {
  var temp__4090__auto__ = cljs.core.deref.call(null, clojure.browser.repl.xpc_connection);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var conn = temp__4090__auto__;
    return clojure.browser.net.transmit.call(null, conn, new cljs.core.Keyword(null, "print", "print", 1120839199), cljs.core.pr_str.call(null, data));
  } else {
    return null;
  }
};
clojure.browser.repl.evaluate_javascript = function evaluate_javascript(conn, block) {
  var result = function() {
    try {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", 4416389988), new cljs.core.Keyword(null, "success", "success", 3441701749), new cljs.core.Keyword(null, "value", "value", 1125876963), [cljs.core.str(eval(block))].join("")], null);
    } catch (e6093) {
      if (e6093 instanceof Error) {
        var e = e6093;
        return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", 4416389988), new cljs.core.Keyword(null, "exception", "exception", 2495529921), new cljs.core.Keyword(null, "value", "value", 1125876963), cljs.core.pr_str.call(null, e), new cljs.core.Keyword(null, "stacktrace", "stacktrace", 3069736751), cljs.core.truth_(e.hasOwnProperty("stack")) ? e.stack : "No stacktrace available."], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw e6093;
        } else {
          return null;
        }
      }
    }
  }();
  return cljs.core.pr_str.call(null, result);
};
clojure.browser.repl.send_result = function send_result(connection, url, data) {
  return clojure.browser.net.transmit.call(null, connection, url, "POST", data, null, 0);
};
clojure.browser.repl.send_print = function() {
  var send_print = null;
  var send_print__2 = function(url, data) {
    return send_print.call(null, url, data, 0);
  };
  var send_print__3 = function(url, data, n) {
    var conn = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, conn, new cljs.core.Keyword(null, "error", "error", 1110689146), function(_) {
      if (n < 10) {
        return send_print.call(null, url, data, n + 1);
      } else {
        return console.log([cljs.core.str("Could not send "), cljs.core.str(data), cljs.core.str(" after "), cljs.core.str(n), cljs.core.str(" attempts.")].join(""));
      }
    });
    return clojure.browser.net.transmit.call(null, conn, url, "POST", data, null, 0);
  };
  send_print = function(url, data, n) {
    switch(arguments.length) {
      case 2:
        return send_print__2.call(this, url, data);
      case 3:
        return send_print__3.call(this, url, data, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  send_print.cljs$core$IFn$_invoke$arity$2 = send_print__2;
  send_print.cljs$core$IFn$_invoke$arity$3 = send_print__3;
  return send_print;
}();
clojure.browser.repl.order = cljs.core.atom.call(null, 0);
clojure.browser.repl.wrap_message = function wrap_message(t, data) {
  return cljs.core.pr_str.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), t, new cljs.core.Keyword(null, "content", "content", 1965434859), data, new cljs.core.Keyword(null, "order", "order", 1119910592), cljs.core.swap_BANG_.call(null, clojure.browser.repl.order, cljs.core.inc)], null));
};
clojure.browser.repl.start_evaluator = function start_evaluator(url) {
  var temp__4090__auto__ = clojure.browser.net.xpc_connection.call(null);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var repl_connection = temp__4090__auto__;
    var connection = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, connection, new cljs.core.Keyword(null, "success", "success", 3441701749), function(e) {
      return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", 2953437843), e.currentTarget.getResponseText(cljs.core.List.EMPTY));
    });
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 3729280372), function(data) {
      return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "result", "result", 4374444943), data));
    });
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "print", "print", 1120839199), function(data) {
      return clojure.browser.repl.send_print.call(null, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "print", "print", 1120839199), data));
    });
    clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null));
    return setTimeout(function() {
      return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "ready", "ready", 1122290965), "ready"));
    }, 50);
  } else {
    return alert("No 'xpc' param provided to child iframe.");
  }
};
clojure.browser.repl.connect = function connect(repl_server_url) {
  var repl_connection = clojure.browser.net.xpc_connection.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "peer_uri", "peer_uri", 1083496577), repl_server_url], null));
  cljs.core.swap_BANG_.call(null, clojure.browser.repl.xpc_connection, cljs.core.constantly.call(null, repl_connection));
  clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", 2953437843), function(js) {
    return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 3729280372), clojure.browser.repl.evaluate_javascript.call(null, repl_connection, js));
  });
  return clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null), function(iframe) {
    return iframe.style.display = "none";
  });
};
goog.provide("repl_connect");
goog.require("cljs.core");
goog.require("clojure.browser.repl");
goog.require("clojure.browser.repl");
goog.require("clojure.browser.repl");
clojure.browser.repl.connect.call(null, [cljs.core.str("http://localhost:"), cljs.core.str("8080"), cljs.core.str("/repl")].join(""));
/*

 Copyright (C) 2013-2014 Jos de Jong <wjosdejong@gmail.com>

 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy
 of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
*/
goog.provide("math.js");
!function(e) {
  if ("object" == typeof exports) {
    module.exports = e();
  } else {
    if ("function" == typeof define && define.amd) {
      define(e);
    } else {
      var n;
      "undefined" != typeof window ? n = window : "undefined" != typeof global ? n = global : "undefined" != typeof self && (n = self), n.mathjs = e();
    }
  }
}(function() {
  var e;
  return function n(e, t, r) {
    function i(a, s) {
      if (!t[a]) {
        if (!e[a]) {
          var u = "function" == typeof require && require;
          if (!s && u) {
            return u(a, !0);
          }
          if (o) {
            return o(a, !0);
          }
          throw new Error("Cannot find module '" + a + "'");
        }
        var c = t[a] = {exports:{}};
        e[a][0].call(c.exports, function(n) {
          var t = e[a][1][n];
          return i(t ? t : n);
        }, c, c.exports, n, e, t, r);
      }
      return t[a].exports;
    }
    for (var o = "function" == typeof require && require, a = 0;a < r.length;a++) {
      i(r[a]);
    }
    return i;
  }({1:[function(e, n) {
    n.exports = e("./lib/math.js");
  }, {"./lib/math.js":207}], 2:[function(e, n) {
    n.exports = function(n) {
      function t(e) {
        if (!(this instanceof t)) {
          throw new SyntaxError("Selector constructor must be called with the new operator");
        }
        this.value = e instanceof t ? e.value : e;
      }
      function r(e, n) {
        var r = Array.prototype.slice;
        t.prototype[e] = "function" == typeof n ? function() {
          var e = [this.value].concat(r.call(arguments, 0));
          return new t(n.apply(this, e));
        } : new t(n);
      }
      var i = e("../util/string");
      t.prototype.done = function() {
        return this.value;
      }, t.prototype.valueOf = function() {
        return this.value;
      }, t.prototype.toString = function() {
        return i.format(this.value);
      }, t.createProxy = r;
      for (var o in n) {
        n.hasOwnProperty(o) && (o && r(o, n[o]));
      }
      return t;
    };
  }, {"../util/string":221}], 3:[function(e, n) {
    n.exports = function(n) {
      var t = e("./type/Complex");
      n.pi = Math.PI, n.e = Math.E, n.tau = 2 * Math.PI, n.i = new t(0, 1), n.Infinity = 1 / 0, n.NaN = 0 / 0, n["true"] = !0, n["false"] = !1, n.E = Math.E, n.LN2 = Math.LN2, n.LN10 = Math.LN10, n.LOG2E = Math.LOG2E, n.LOG10E = Math.LOG10E, n.PI = Math.PI, n.SQRT1_2 = Math.SQRT1_2, n.SQRT2 = Math.SQRT2;
    };
  }, {"./type/Complex":208}], 4:[function(e, n) {
    function t(e) {
      if (!(this instanceof t)) {
        throw new SyntaxError("Parser constructor must be called with the new operator");
      }
      if ("object" != typeof e) {
        throw new TypeError("Object expected as parameter math");
      }
      this.math = e, this.scope = {};
    }
    var r = e("./parse");
    t.prototype.parse = function(e) {
      return r(e);
    }, t.prototype.compile = function(e) {
      return r(e).compile(this.math);
    }, t.prototype.eval = function(e) {
      return r(e).compile(this.math).eval(this.scope);
    }, t.prototype.get = function(e) {
      return this.scope[e];
    }, t.prototype.set = function(e, n) {
      return this.scope[e] = n;
    }, t.prototype.remove = function(e) {
      delete this.scope[e];
    }, t.prototype.clear = function() {
      for (var e in this.scope) {
        this.scope.hasOwnProperty(e) && delete this.scope[e];
      }
    }, n.exports = t;
  }, {"./parse":120}], 5:[function(e, n) {
    n.exports = {name:"Infinity", category:"Constants", syntax:["Infinity"], description:"Infinity, a number which is larger than the maximum number that can be handled by a floating point number.", examples:["Infinity", "1 / 0"], seealso:[]};
  }, {}], 6:[function(e, n) {
    n.exports = {name:"LN10", category:"Constants", syntax:["LN10"], description:"Returns the natural logarithm of 10, approximately equal to 2.302", examples:["LN10", "log(10)"], seealso:[]};
  }, {}], 7:[function(e, n) {
    n.exports = {name:"LN2", category:"Constants", syntax:["LN2"], description:"Returns the natural logarithm of 2, approximately equal to 0.693", examples:["LN2", "log(2)"], seealso:[]};
  }, {}], 8:[function(e, n) {
    n.exports = {name:"LOG10E", category:"Constants", syntax:["LOG10E"], description:"Returns the base-10 logarithm of E, approximately equal to 0.434", examples:["LOG10E", "log(e, 10)"], seealso:[]};
  }, {}], 9:[function(e, n) {
    n.exports = {name:"LOG2E", category:"Constants", syntax:["LOG2E"], description:"Returns the base-2 logarithm of E, approximately equal to 1.442", examples:["LOG2E", "log(e, 2)"], seealso:[]};
  }, {}], 10:[function(e, n) {
    n.exports = {name:"NaN", category:"Constants", syntax:["NaN"], description:"Not a number", examples:["NaN", "0 / 0"], seealso:[]};
  }, {}], 11:[function(e, n) {
    n.exports = {name:"SQRT1_2", category:"Constants", syntax:["SQRT1_2"], description:"Returns the square root of 1/2, approximately equal to 0.707", examples:["SQRT1_2", "sqrt(1/2)"], seealso:[]};
  }, {}], 12:[function(e, n) {
    n.exports = {name:"SQRT2", category:"Constants", syntax:["SQRT2"], description:"Returns the square root of 2, approximately equal to 1.414", examples:["SQRT2", "sqrt(2)"], seealso:[]};
  }, {}], 13:[function(e, n) {
    n.exports = {name:"e", category:"Constants", syntax:["e"], description:"Euler's number, the base of the natural logarithm. Approximately equal to 2.71828", examples:["e", "e ^ 2", "exp(2)", "log(e)"], seealso:["exp"]};
  }, {}], 14:[function(e, n) {
    n.exports = {name:"false", category:"Constants", syntax:["false"], description:"Boolean value false", examples:["false"], seealso:["true"]};
  }, {}], 15:[function(e, n) {
    n.exports = {name:"i", category:"Constants", syntax:["i"], description:"Imaginary unit, defined as i*i\x3d-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.", examples:["i", "i * i", "sqrt(-1)"], seealso:[]};
  }, {}], 16:[function(e, n) {
    n.exports = {name:"pi", category:"Constants", syntax:["pi"], description:"The number pi is a mathematical constant that is the ratio of a circle's circumference to its diameter, and is approximately equal to 3.14159", examples:["pi", "sin(pi/2)"], seealso:["tau"]};
  }, {}], 17:[function(e, n) {
    n.exports = {name:"tau", category:"Constants", syntax:["pi"], description:"Tau is the ratio constant of a circle's circumference to radius, equal to 2 * pi, approximately 6.2832.", examples:["tau", "2 * pi"], seealso:["pi"]};
  }, {}], 18:[function(e, n) {
    n.exports = {name:"true", category:"Constants", syntax:["true"], description:"Boolean value true", examples:["true"], seealso:["false"]};
  }, {}], 19:[function(e, n) {
    n.exports = {name:"abs", category:"Arithmetic", syntax:["abs(x)"], description:"Compute the absolute value.", examples:["abs(3.5)", "abs(-4.2)"], seealso:["sign"]};
  }, {}], 20:[function(e, n) {
    n.exports = {name:"add", category:"Operators", syntax:["x + y", "add(x, y)"], description:"Add two values.", examples:["2.1 + 3.6", "ans - 3.6", "3 + 2i", '"hello" + " world"', "3 cm + 2 inch"], seealso:["subtract"]};
  }, {}], 21:[function(e, n) {
    n.exports = {name:"ceil", category:"Arithmetic", syntax:["ceil(x)"], description:"Round a value towards plus infinity.If x is complex, both real and imaginary part are rounded towards plus infinity.", examples:["ceil(3.2)", "ceil(3.8)", "ceil(-4.2)"], seealso:["floor", "fix", "round"]};
  }, {}], 22:[function(e, n) {
    n.exports = {name:"cube", category:"Arithmetic", syntax:["cube(x)"], description:"Compute the cube of a value. The cube of x is x * x * x.", examples:["cube(2)", "2^3", "2 * 2 * 2"], seealso:["multiply", "square", "pow"]};
  }, {}], 23:[function(e, n) {
    n.exports = {name:"divide", category:"Operators", syntax:["x / y", "divide(x, y)"], description:"Divide two values.", examples:["2 / 3", "ans * 3", "4.5 / 2", "3 + 4 / 2", "(3 + 4) / 2", "18 km / 4.5"], seealso:["multiply"]};
  }, {}], 24:[function(e, n) {
    n.exports = {name:"edivide", category:"Operators", syntax:["x ./ y", "edivide(x, y)"], description:"divide two values element wise.", examples:["a \x3d [1, 2, 3; 4, 5, 6]", "b \x3d [2, 1, 1; 3, 2, 5]", "a ./ b"], seealso:["multiply", "emultiply", "divide"]};
  }, {}], 25:[function(e, n) {
    n.exports = {name:"emultiply", category:"Operators", syntax:["x .* y", "emultiply(x, y)"], description:"multiply two values element wise.", examples:["a \x3d [1, 2, 3; 4, 5, 6]", "b \x3d [2, 1, 1; 3, 2, 5]", "a .* b"], seealso:["multiply", "divide", "edivide"]};
  }, {}], 26:[function(e, n) {
    n.exports = {name:"epow", category:"Operators", syntax:["x .^ y", "epow(x, y)"], description:"Calculates the power of x to y element wise.", examples:["a \x3d [1, 2, 3; 4, 5, 6]", "a .^ 2"], seealso:["pow"]};
  }, {}], 27:[function(e, n) {
    n.exports = {name:"equal", category:"Operators", syntax:["x \x3d\x3d y", "equal(x, y)"], description:"Check equality of two values. Returns 1 if the values are equal, and 0 if not.", examples:["2+2 \x3d\x3d 3", "2+2 \x3d\x3d 4", "a \x3d 3.2", "b \x3d 6-2.8", "a \x3d\x3d b", "50cm \x3d\x3d 0.5m"], seealso:["unequal", "smaller", "larger", "smallereq", "largereq"]};
  }, {}], 28:[function(e, n) {
    n.exports = {name:"exp", category:"Arithmetic", syntax:["exp(x)"], description:"Calculate the exponent of a value.", examples:["exp(1.3)", "e ^ 1.3", "log(exp(1.3))", "x \x3d 2.4", "(exp(i*x) \x3d\x3d cos(x) + i*sin(x))   # Euler's formula"], seealso:["square", "multiply", "log"]};
  }, {}], 29:[function(e, n) {
    n.exports = {name:"fix", category:"Arithmetic", syntax:["fix(x)"], description:"Round a value towards zero.If x is complex, both real and imaginary part are rounded towards zero.", examples:["fix(3.2)", "fix(3.8)", "fix(-4.2)", "fix(-4.8)"], seealso:["ceil", "floor", "round"]};
  }, {}], 30:[function(e, n) {
    n.exports = {name:"floor", category:"Arithmetic", syntax:["floor(x)"], description:"Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.", examples:["floor(3.2)", "floor(3.8)", "floor(-4.2)"], seealso:["ceil", "fix", "round"]};
  }, {}], 31:[function(e, n) {
    n.exports = {name:"gcd", category:"Arithmetic", syntax:["gcd(a, b)", "gcd(a, b, c, ...)"], description:"Compute the greatest common divisor.", examples:["gcd(8, 12)", "gcd(-4, 6)", "gcd(25, 15, -10)"], seealso:["lcm", "xgcd"]};
  }, {}], 32:[function(e, n) {
    n.exports = {name:"larger", category:"Operators", syntax:["x \x3e y", "larger(x, y)"], description:"Check if value x is larger than y. Returns 1 if x is larger than y, and 0 if not.", examples:["2 \x3e 3", "5 \x3e 2*2", "a \x3d 3.3", "b \x3d 6-2.8", "(a \x3e b)", "(b \x3c a)", "5 cm \x3e 2 inch"], seealso:["equal", "unequal", "smaller", "smallereq", "largereq"]};
  }, {}], 33:[function(e, n) {
    n.exports = {name:"largereq", category:"Operators", syntax:["x \x3e\x3d y", "largereq(x, y)"], description:"Check if value x is larger or equal to y. Returns 1 if x is larger or equal to y, and 0 if not.", examples:["2 \x3e 1+1", "2 \x3e\x3d 1+1", "a \x3d 3.2", "b \x3d 6-2.8", "(a \x3e b)"], seealso:["equal", "unequal", "smallereq", "smaller", "largereq"]};
  }, {}], 34:[function(e, n) {
    n.exports = {name:"lcm", category:"Arithmetic", syntax:["lcm(x, y)"], description:"Compute the least common multiple.", examples:["lcm(4, 6)", "lcm(6, 21)", "lcm(6, 21, 5)"], seealso:["gcd"]};
  }, {}], 35:[function(e, n) {
    n.exports = {name:"log", category:"Arithmetic", syntax:["log(x)", "log(x, base)"], description:"Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).", examples:["log(3.5)", "a \x3d log(2.4)", "exp(a)", "10 ^ 3", "log(1000, 10)", "log(1000) / log(10)", "b \x3d logb(1024, 2)", "2 ^ b"], seealso:["exp", "log10"]};
  }, {}], 36:[function(e, n) {
    n.exports = {name:"log10", category:"Arithmetic", syntax:["log10(x)"], description:"Compute the 10-base logarithm of a value.", examples:["log10(1000)", "10 ^ 3", "log10(0.01)", "log(1000) / log(10)", "log(1000, 10)"], seealso:["exp", "log"]};
  }, {}], 37:[function(e, n) {
    n.exports = {name:"mod", category:"Operators", syntax:["x % y", "x mod y", "mod(x, y)"], description:"Calculates the modulus, the remainder of an integer division.", examples:["7 % 3", "11 % 2", "10 mod 4", "function isOdd(x) \x3d x % 2", "isOdd(2)", "isOdd(3)"], seealso:[]};
  }, {}], 38:[function(e, n) {
    n.exports = {name:"multiply", category:"Operators", syntax:["x * y", "multiply(x, y)"], description:"multiply two values.", examples:["2.1 * 3.6", "ans / 3.6", "2 * 3 + 4", "2 * (3 + 4)", "3 * 2.1 km"], seealso:["divide"]};
  }, {}], 39:[function(e, n) {
    n.exports = {name:"pow", category:"Operators", syntax:["x ^ y", "pow(x, y)"], description:"Calculates the power of x to y, x^y.", examples:["2^3 \x3d 8", "2*2*2", "1 + e ^ (pi * i)"], seealso:["unequal", "smaller", "larger", "smallereq", "largereq"]};
  }, {}], 40:[function(e, n) {
    n.exports = {name:"round", category:"Arithmetic", syntax:["round(x)", "round(x, n)"], description:"round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.", examples:["round(3.2)", "round(3.8)", "round(-4.2)", "round(-4.8)", "round(pi, 3)", "round(123.45678, 2)"], seealso:["ceil", "floor", "fix"]};
  }, {}], 41:[function(e, n) {
    n.exports = {name:"sign", category:"Arithmetic", syntax:["sign(x)"], description:"Compute the sign of a value. The sign of a value x is 1 when x\x3e1, -1 when x\x3c0, and 0 when x\x3d0.", examples:["sign(3.5)", "sign(-4.2)", "sign(0)"], seealso:["abs"]};
  }, {}], 42:[function(e, n) {
    n.exports = {name:"smaller", category:"Operators", syntax:["x \x3c y", "smaller(x, y)"], description:"Check if value x is smaller than value y. Returns 1 if x is smaller than y, and 0 if not.", examples:["2 \x3c 3", "5 \x3c 2*2", "a \x3d 3.3", "b \x3d 6-2.8", "(a \x3c b)", "5 cm \x3c 2 inch"], seealso:["equal", "unequal", "larger", "smallereq", "largereq"]};
  }, {}], 43:[function(e, n) {
    n.exports = {name:"smallereq", category:"Operators", syntax:["x \x3c\x3d y", "smallereq(x, y)"], description:"Check if value x is smaller or equal to value y. Returns 1 if x is smaller than y, and 0 if not.", examples:["2 \x3c 1+1", "2 \x3c\x3d 1+1", "a \x3d 3.2", "b \x3d 6-2.8", "(a \x3c b)"], seealso:["equal", "unequal", "larger", "smaller", "largereq"]};
  }, {}], 44:[function(e, n) {
    n.exports = {name:"sqrt", category:"Arithmetic", syntax:["sqrt(x)"], description:"Compute the square root value. If x \x3d y * y, then y is the square root of x.", examples:["sqrt(25)", "5 * 5", "sqrt(-1)"], seealso:["square", "multiply"]};
  }, {}], 45:[function(e, n) {
    n.exports = {name:"square", category:"Arithmetic", syntax:["square(x)"], description:"Compute the square of a value. The square of x is x * x.", examples:["square(3)", "sqrt(9)", "3^2", "3 * 3"], seealso:["multiply", "pow", "sqrt", "cube"]};
  }, {}], 46:[function(e, n) {
    n.exports = {name:"subtract", category:"Operators", syntax:["x - y", "subtract(x, y)"], description:"subtract two values.", examples:["5.3 - 2", "ans + 2", "2/3 - 1/6", "2 * 3 - 3", "2.1 km - 500m"], seealso:["add"]};
  }, {}], 47:[function(e, n) {
    n.exports = {name:"unary", category:"Operators", syntax:["-x", "unary(x)"], description:"Inverse the sign of a value.", examples:["-4.5", "-(-5.6)"], seealso:["add", "subtract"]};
  }, {}], 48:[function(e, n) {
    n.exports = {name:"unequal", category:"Operators", syntax:["x !\x3d y", "unequal(x, y)"], description:"Check unequality of two values. Returns 1 if the values are unequal, and 0 if they are equal.", examples:["2+2 !\x3d 3", "2+2 !\x3d 4", "a \x3d 3.2", "b \x3d 6-2.8", "a !\x3d b", "50cm !\x3d 0.5m", "5 cm !\x3d 2 inch"], seealso:["equal", "smaller", "larger", "smallereq", "largereq"]};
  }, {}], 49:[function(e, n) {
    n.exports = {name:"xgcd", category:"Arithmetic", syntax:["xgcd(a, b)"], description:"Calculate the extended greatest common divisor for two values", examples:["xgcd(8, 12)", "gcd(8, 12)", "xgcd(36163, 21199)"], seealso:["gcd", "lcm"]};
  }, {}], 50:[function(e, n) {
    n.exports = {name:"arg", category:"Complex", syntax:["arg(x)"], description:"Compute the argument of a complex value. If x \x3d a+bi, the argument is computed as atan2(b, a).", examples:["arg(2 + 2i)", "atan2(3, 2)", "arg(2 - 3i)"], seealso:["re", "im", "conj", "abs"]};
  }, {}], 51:[function(e, n) {
    n.exports = {name:"conj", category:"Complex", syntax:["conj(x)"], description:"Compute the complex conjugate of a complex value. If x \x3d a+bi, the complex conjugate is a-bi.", examples:["conj(2 + 3i)", "conj(2 - 3i)", "conj(-5.2i)"], seealso:["re", "im", "abs", "arg"]};
  }, {}], 52:[function(e, n) {
    n.exports = {name:"im", category:"Complex", syntax:["im(x)"], description:"Get the imaginary part of a complex number.", examples:["im(2 + 3i)", "re(2 + 3i)", "im(-5.2i)", "im(2.4)"], seealso:["re", "conj", "abs", "arg"]};
  }, {}], 53:[function(e, n) {
    n.exports = {name:"re", category:"Complex", syntax:["re(x)"], description:"Get the real part of a complex number.", examples:["re(2 + 3i)", "im(2 + 3i)", "re(-5.2i)", "re(2.4)"], seealso:["im", "conj", "abs", "arg"]};
  }, {}], 54:[function(e, n) {
    n.exports = {name:"bignumber", category:"Type", syntax:["bignumber(x)"], description:"Create a big number from a number or string.", examples:["0.1 + 0.2", "bignumber(0.1) + bignumber(0.2)", 'bignumber("7.2")', 'bignumber("7.2e500")', "bignumber([0.1, 0.2, 0.3])"], seealso:["boolean", "complex", "index", "matrix", "string", "unit"]};
  }, {}], 55:[function(e, n) {
    n.exports = {name:"boolean", category:"Type", syntax:["x", "boolean(x)"], description:"Convert a string or number into a boolean.", examples:["boolean(0)", "boolean(1)", "boolean(3)", 'boolean("true")', 'boolean("false")', "boolean([1, 0, 1, 1])"], seealso:["bignumber", "complex", "index", "matrix", "number", "string", "unit"]};
  }, {}], 56:[function(e, n) {
    n.exports = {name:"complex", category:"Type", syntax:["complex()", "complex(re, im)", "complex(string)"], description:"Create a complex number.", examples:["complex()", "complex(2, 3)", 'complex("7 - 2i")'], seealso:["bignumber", "boolean", "index", "matrix", "number", "string", "unit"]};
  }, {}], 57:[function(e, n) {
    n.exports = {name:"index", category:"Type", syntax:["[start]", "[start:end]", "[start:step:end]", "[start1, start 2, ...]", "[start1:end1, start2:end2, ...]", "[start1:step1:end1, start2:step2:end2, ...]"], description:"Create an index to get or replace a subset of a matrix", examples:["[]", "[1, 2, 3]", "A \x3d [1, 2, 3; 4, 5, 6]", "A[1, :]", "A[1, 2] \x3d 50", "A[0:2, 0:2] \x3d ones(2, 2)"], seealso:["bignumber", "boolean", "complex", "matrix,", "number", "range", "string", "unit"]};
  }, {}], 58:[function(e, n) {
    n.exports = {name:"matrix", category:"Type", syntax:["[]", "[a1, b1, ...; a2, b2, ...]", "matrix()", "matrix([...])"], description:"Create a matrix.", examples:["[]", "[1, 2, 3]", "[1, 2, 3; 4, 5, 6]", "matrix()", "matrix([3, 4])"], seealso:["bignumber", "boolean", "complex", "index", "number", "string", "unit"]};
  }, {}], 59:[function(e, n) {
    n.exports = {name:"number", category:"Type", syntax:["x", "number(x)"], description:"Create a number or convert a string or boolean into a number.", examples:["2", "2e3", "4.05", "number(2)", 'number("7.2")', "number(true)", "number([true, false, true, true])"], seealso:["bignumber", "boolean", "complex", "index", "matrix", "string", "unit"]};
  }, {}], 60:[function(e, n) {
    n.exports = {name:"string", category:"Type", syntax:['"text"', "string(x)"], description:"Create a string or convert a value to a string", examples:['"Hello World!"', "string(4.2)", "string(3 + 2i)"], seealso:["bignumber", "boolean", "complex", "index", "matrix", "number", "unit"]};
  }, {}], 61:[function(e, n) {
    n.exports = {name:"unit", category:"Type", syntax:["value unit", "unit(value, unit)", "unit(string)"], description:"Create a unit.", examples:["5.5 mm", "3 inch", 'unit(7.1, "kilogram")', 'unit("23 deg")'], seealso:["bignumber", "boolean", "complex", "index", "matrix", "number", "string"]};
  }, {}], 62:[function(e, n) {
    n.exports = {name:"eval", category:"Expression", syntax:["eval(expression)", "eval([expr1, expr2, expr3, ...])"], description:"Evaluate an expression or an array with expressions.", examples:['eval("2 + 3")', 'eval("sqrt(" + 4 + ")")'], seealso:[]};
  }, {}], 63:[function(e, n) {
    n.exports = {name:"help", category:"Expression", syntax:["help(object)", "help(string)"], description:"Display documentation on a function or data type.", examples:["help(sqrt)", 'help("complex")'], seealso:[]};
  }, {}], 64:[function(e, n) {
    n.exports = {name:"concat", category:"Matrix", syntax:["concat(a, b, c, ...)", "concat(a, b, c, ..., dim)"], description:"Concatenate matrices. By default, the matrices are concatenated by the first dimension. The dimension on which to concatenate can be provided as last argument.", examples:["a \x3d [1, 2; 5, 6]", "b \x3d [3, 4; 7, 8]", "concat(a, b)", "[a, b]", "concat(a, b, 2)", "[a; b]"], seealso:["det", "diag", "eye", "inv", "ones", "range", "size", "squeeze", "subset", "transpose", "zeros"]};
  }, {}], 65:[function(e, n) {
    n.exports = {name:"det", category:"Matrix", syntax:["det(x)"], description:"Calculate the determinant of a matrix", examples:["det([1, 2; 3, 4])", "det([-2, 2, 3; -1, 1, 3; 2, 0, -1])"], seealso:["concat", "diag", "eye", "inv", "ones", "range", "size", "squeeze", "subset", "transpose", "zeros"]};
  }, {}], 66:[function(e, n) {
    n.exports = {name:"diag", category:"Matrix", syntax:["diag(x)", "diag(x, k)"], description:"Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned.When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.", 
    examples:["diag(1:3)", "diag(1:3, 1)", "a \x3d [1, 2, 3; 4, 5, 6; 7, 8, 9]", "diag(a)"], seealso:["concat", "det", "eye", "inv", "ones", "range", "size", "squeeze", "subset", "transpose", "zeros"]};
  }, {}], 67:[function(e, n) {
    n.exports = {name:"eye", category:"Matrix", syntax:["eye(n)", "eye(m, n)", "eye([m, n])", "eye"], description:"Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.", examples:["eye(3)", "eye(3, 5)", "a \x3d [1, 2, 3; 4, 5, 6]", "eye(size(a))"], seealso:["concat", "det", "diag", "inv", "ones", "range", "size", "squeeze", "subset", "transpose", "zeros"]};
  }, {}], 68:[function(e, n) {
    n.exports = {name:"inv", category:"Matrix", syntax:["inv(x)"], description:"Calculate the inverse of a matrix", examples:["inv([1, 2; 3, 4])", "inv(4)", "1 / 4"], seealso:["concat", "det", "diag", "eye", "ones", "range", "size", "squeeze", "subset", "transpose", "zeros"]};
  }, {}], 69:[function(e, n) {
    n.exports = {name:"ones", category:"Matrix", syntax:["ones(m)", "ones(m, n)", "ones(m, n, p, ...)", "ones([m])", "ones([m, n])", "ones([m, n, p, ...])", "ones"], description:"Create a matrix containing ones.", examples:["ones(3)", "ones(3, 5)", "ones([2,3]) * 4.5", "a \x3d [1, 2, 3; 4, 5, 6]", "ones(size(a))"], seealso:["concat", "det", "diag", "eye", "inv", "range", "size", "squeeze", "subset", "transpose", "zeros"]};
  }, {}], 70:[function(e, n) {
    n.exports = {name:"range", category:"Type", syntax:["start:end", "start:step:end", "range(start, end)", "range(start, end, step)", "range(string)"], description:"Create a range. Lower bound of the range is included, upper bound is excluded.", examples:["1:5", "3:-1:-3", "range(3, 7)", "range(0, 12, 2)", 'range("4:10")', "a \x3d [1, 2, 3, 4; 5, 6, 7, 8]", "a[1:2, 1:2]"], seealso:["concat", "det", "diag", "eye", "inv", "ones", "size", "squeeze", "subset", "transpose", "zeros"]};
  }, {}], 71:[function(e, n) {
    n.exports = {name:"resize", category:"Matrix", syntax:["resize(x, size)", "resize(x, size, defaultValue)"], description:"Resize a matrix.", examples:["resize([1,2,3,4,5], [3])", "resize([1,2,3], [5], 0)", "resize(2, [2, 3], 0)", 'resize("hello", [8], "!")'], seealso:["size", "subset", "squeeze"]};
  }, {}], 72:[function(e, n) {
    n.exports = {name:"size", category:"Matrix", syntax:["size(x)"], description:"Calculate the size of a matrix.", examples:["size(2.3)", 'size("hello world")', "a \x3d [1, 2; 3, 4; 5, 6]", "size(a)", "size(1:6)"], seealso:["concat", "det", "diag", "eye", "inv", "ones", "range", "squeeze", "subset", "transpose", "zeros"]};
  }, {}], 73:[function(e, n) {
    n.exports = {name:"squeeze", category:"Matrix", syntax:["squeeze(x)"], description:"Remove singleton dimensions from a matrix.", examples:["a \x3d zeros(1,3,2)", "size(squeeze(a))", "b \x3d zeros(3,1,1)", "size(squeeze(b))"], seealso:["concat", "det", "diag", "eye", "inv", "ones", "range", "size", "subset", "transpose", "zeros"]};
  }, {}], 74:[function(e, n) {
    n.exports = {name:"subset", category:"Matrix", syntax:["value(index)", "value(index) \x3d replacement", "subset(value, [index])", "subset(value, [index], replacement)"], description:"Get or set a subset of a matrix or string. Indexes are one-based. Both the ranges lower-bound and upper-bound are included.", examples:["d \x3d [1, 2; 3, 4]", "e \x3d []", "e[1, 1:2] \x3d [5, 6]", "e[2, :] \x3d [7, 8]", "f \x3d d * e", "f[2, 1]", "f[:, 1]"], seealso:["concat", "det", "diag", "eye", "inv", "ones", 
    "range", "size", "squeeze", "transpose", "zeros"]};
  }, {}], 75:[function(e, n) {
    n.exports = {name:"transpose", category:"Matrix", syntax:["x'", "transpose(x)"], description:"Transpose a matrix", examples:["a \x3d [1, 2, 3; 4, 5, 6]", "a'", "transpose(a)"], seealso:["concat", "det", "diag", "eye", "inv", "ones", "range", "size", "squeeze", "subset", "zeros"]};
  }, {}], 76:[function(e, n) {
    n.exports = {name:"zeros", category:"Matrix", syntax:["zeros(m)", "zeros(m, n)", "zeros(m, n, p, ...)", "zeros([m])", "zeros([m, n])", "zeros([m, n, p, ...])", "zeros"], description:"Create a matrix containing zeros.", examples:["zeros(3)", "zeros(3, 5)", "a \x3d [1, 2, 3; 4, 5, 6]", "zeros(size(a))"], seealso:["concat", "det", "diag", "eye", "inv", "ones", "range", "size", "squeeze", "subset", "transpose"]};
  }, {}], 77:[function(e, n) {
    n.exports = {name:"combinations", category:"Probability", syntax:["combinations(n, k)"], description:"Compute the number of combinations of n items taken k at a time", examples:["combinations(7, 5)"], seealso:["permutations", "factorial"]};
  }, {}], 78:[function(e, n) {
    n.exports = {name:"distribution", category:"Probability", syntax:["distribution(name)", "distribution(name, arg1, arg2, ...)"], description:'Create a distribution object of a specific type. A distribution object contains functions `random([size,] [min,] [max])`, `randomInt([size,] [min,] [max])`, and `pickRandom(array)`. Available types of distributions: "uniform", "normal". Note that the function distribution is currently not available via the expression parser.', examples:[], seealso:["random", 
    "randomInt"]};
  }, {}], 79:[function(e, n) {
    n.exports = {name:"factorial", category:"Probability", syntax:["n!", "factorial(n)"], description:"Compute the factorial of a value", examples:["5!", "5*4*3*2*1", "3!"], seealso:[]};
  }, {}], 80:[function(e, n) {
    n.exports = {name:"permutations", category:"Probability", syntax:["permutations(n)", "permutations(n, k)"], description:"Compute the number of permutations of n items taken k at a time", examples:["permutations(5)", "permutations(5, 4)"], seealso:["combinations", "factorial"]};
  }, {}], 81:[function(e, n) {
    n.exports = {name:"pickRandom", category:"Probability", syntax:["pickRandom(array)"], description:"Pick a random entry from a given array.", examples:["pickRandom(0:10)", "pickRandom([1, 3, 1, 6])"], seealso:["distribution", "random", "randomInt"]};
  }, {}], 82:[function(e, n) {
    n.exports = {name:"random", category:"Probability", syntax:["random()", "random(max)", "random(min, max)", "random(size)", "random(size, max)", "random(size, min, max)"], description:"Return a random number.", examples:["random()", "random(10, 20)", "random([2, 3])"], seealso:["distribution", "pickRandom", "randomInt"]};
  }, {}], 83:[function(e, n) {
    n.exports = {name:"randInt", category:"Probability", syntax:["randInt()", "randInt(max)", "randInt(min, max)", "randInt(size)", "randInt(size, max)", "randInt(size, min, max)"], description:"Return a random integer number", examples:["randInt()", "randInt(10, 20)", "randInt([2, 3], 10)"], seealso:["distribution", "pickRandom", "random"]};
  }, {}], 84:[function(e, n) {
    n.exports = {name:"max", category:"Statistics", syntax:["max(a, b, c, ...)", "max(A)", "max(A, dim)"], description:"Compute the maximum value of a list of values.", examples:["max(2, 3, 4, 1)", "max([2, 3, 4, 1])", "max([2, 5; 4, 3], 0)", "max([2, 5; 4, 3], 1)", "max(2.7, 7.1, -4.5, 2.0, 4.1)", "min(2.7, 7.1, -4.5, 2.0, 4.1)"], seealso:["mean", "min"]};
  }, {}], 85:[function(e, n) {
    n.exports = {name:"mean", category:"Statistics", syntax:["mean(a, b, c, ...)", "mean(A)", "mean(A, dim)"], description:"Compute the arithmetic mean of a list of values.", examples:["mean(2, 3, 4, 1)", "mean([2, 3, 4, 1])", "mean([2, 5; 4, 3], 0)", "mean([2, 5; 4, 3], 1)", "mean([1.0, 2.7, 3.2, 4.0])"], seealso:["max", "min"]};
  }, {}], 86:[function(e, n) {
    n.exports = {name:"min", category:"Statistics", syntax:["min(a, b, c, ...)", "min(A)", "min(A, dim)"], description:"Compute the minimum value of a list of values.", examples:["min(2, 3, 4, 1)", "min([2, 3, 4, 1])", "min([2, 5; 4, 3], 0)", "min([2, 5; 4, 3], 1)", "min(2.7, 7.1, -4.5, 2.0, 4.1)", "max(2.7, 7.1, -4.5, 2.0, 4.1)"], seealso:["max", "mean", "min"]};
  }, {}], 87:[function(e, n) {
    n.exports = {name:"acos", category:"Trigonometry", syntax:["acos(x)"], description:"Compute the inverse cosine of a value in radians.", examples:["acos(0.5)", "acos(cos(2.3))"], seealso:["cos", "acos", "asin"]};
  }, {}], 88:[function(e, n) {
    n.exports = {name:"asin", category:"Trigonometry", syntax:["asin(x)"], description:"Compute the inverse sine of a value in radians.", examples:["asin(0.5)", "asin(sin(2.3))"], seealso:["sin", "acos", "asin"]};
  }, {}], 89:[function(e, n) {
    n.exports = {name:"atan", category:"Trigonometry", syntax:["atan(x)"], description:"Compute the inverse tangent of a value in radians.", examples:["atan(0.5)", "atan(tan(2.3))"], seealso:["tan", "acos", "asin"]};
  }, {}], 90:[function(e, n) {
    n.exports = {name:"atan2", category:"Trigonometry", syntax:["atan2(y, x)"], description:"Computes the principal value of the arc tangent of y/x in radians.", examples:["atan2(2, 2) / pi", "angle \x3d 60 deg in rad", "x \x3d cos(angle)", "y \x3d sin(angle)", "atan2(y, x)"], seealso:["sin", "cos", "tan"]};
  }, {}], 91:[function(e, n) {
    n.exports = {name:"cos", category:"Trigonometry", syntax:["cos(x)"], description:"Compute the cosine of x in radians.", examples:["cos(2)", "cos(pi / 4) ^ 2", "cos(180 deg)", "cos(60 deg)", "sin(0.2)^2 + cos(0.2)^2"], seealso:["acos", "sin", "tan"]};
  }, {}], 92:[function(e, n) {
    n.exports = {name:"cot", category:"Trigonometry", syntax:["cot(x)"], description:"Compute the cotangent of x in radians. Defined as 1/tan(x)", examples:["cot(2)", "1 / tan(2)"], seealso:["sec", "csc", "tan"]};
  }, {}], 93:[function(e, n) {
    n.exports = {name:"csc", category:"Trigonometry", syntax:["csc(x)"], description:"Compute the cosecant of x in radians. Defined as 1/sin(x)", examples:["csc(2)", "1 / sin(2)"], seealso:["sec", "cot", "sin"]};
  }, {}], 94:[function(e, n) {
    n.exports = {name:"sec", category:"Trigonometry", syntax:["sec(x)"], description:"Compute the secant of x in radians. Defined as 1/cos(x)", examples:["sec(2)", "1 / cos(2)"], seealso:["cot", "csc", "cos"]};
  }, {}], 95:[function(e, n) {
    n.exports = {name:"sin", category:"Trigonometry", syntax:["sin(x)"], description:"Compute the sine of x in radians.", examples:["sin(2)", "sin(pi / 4) ^ 2", "sin(90 deg)", "sin(30 deg)", "sin(0.2)^2 + cos(0.2)^2"], seealso:["asin", "cos", "tan"]};
  }, {}], 96:[function(e, n) {
    n.exports = {name:"tan", category:"Trigonometry", syntax:["tan(x)"], description:"Compute the tangent of x in radians.", examples:["tan(0.5)", "sin(0.5) / cos(0.5)", "tan(pi / 4)", "tan(45 deg)"], seealso:["atan", "sin", "cos"]};
  }, {}], 97:[function(e, n) {
    n.exports = {name:"to", category:"Units", syntax:["x to unit", "to(x, unit)"], description:"Change the unit of a value.", examples:["5 inch in cm", "3.2kg in g", "16 bytes in bits"], seealso:[]};
  }, {}], 98:[function(e, n) {
    n.exports = {name:"clone", category:"Utils", syntax:["clone(x)"], description:"Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices", examples:["clone(3.5)", "clone(2 - 4i)", "clone(45 deg)", "clone([1, 2; 3, 4])", 'clone("hello world")'], seealso:[]};
  }, {}], 99:[function(e, n) {
    n.exports = {name:"forEach", category:"Utils", syntax:["forEach(x, callback)"], description:"Iterates over all elements of a matrix/array, and executes the given callback.", examples:["forEach([1, 2, 3], function(val) { console.log(val) })"], seealso:[]};
  }, {}], 100:[function(e, n) {
    n.exports = {name:"format", category:"Utils", syntax:["format(value)", "format(value, precision)"], description:"Format a value of any type as string.", examples:["format(2.3)", "format(3 - 4i)", "format([])", "format(pi, 3)"], seealso:["print"]};
  }, {}], 101:[function(e, n) {
    n.exports = {name:"import", category:"Utils", syntax:["import(string)"], description:"Import functions from a file.", examples:['import("numbers")', 'import("./mylib.js")'], seealso:[]};
  }, {}], 102:[function(e, n) {
    n.exports = {name:"map", category:"Utils", syntax:["map(x, callback)"], description:"Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.", examples:["map([1, 2, 3], function(val) { return math.max(val, 1.5) })"], seealso:[]};
  }, {}], 103:[function(e, n) {
    n.exports = {name:"typeof", category:"Utils", syntax:["typeof(x)"], description:"Get the type of a variable.", examples:["typeof(3.5)", "typeof(2 - 4i)", "typeof(45 deg)", 'typeof("hello world")'], seealso:[]};
  }, {}], 104:[function(e, n, t) {
    t.e = e("./constants/e"), t.E = e("./constants/e"), t["false"] = e("./constants/false"), t.i = e("./constants/i"), t.Infinity = e("./constants/Infinity"), t.LN2 = e("./constants/LN2"), t.LN10 = e("./constants/LN10"), t.LOG2E = e("./constants/LOG2E"), t.LOG10E = e("./constants/LOG10E"), t.NaN = e("./constants/NaN"), t.pi = e("./constants/pi"), t.PI = e("./constants/pi"), t.SQRT1_2 = e("./constants/SQRT1_2"), t.SQRT2 = e("./constants/SQRT2"), t.tau = e("./constants/tau"), t["true"] = e("./constants/true"), 
    t.abs = e("./function/arithmetic/abs"), t.add = e("./function/arithmetic/add"), t.ceil = e("./function/arithmetic/ceil"), t.cube = e("./function/arithmetic/cube"), t.divide = e("./function/arithmetic/divide"), t.edivide = e("./function/arithmetic/edivide"), t.emultiply = e("./function/arithmetic/emultiply"), t.epow = e("./function/arithmetic/epow"), t.equal = e("./function/arithmetic/equal"), t.exp = e("./function/arithmetic/exp"), t.fix = e("./function/arithmetic/fix"), t.floor = e("./function/arithmetic/floor"), 
    t.gcd = e("./function/arithmetic/gcd"), t.larger = e("./function/arithmetic/larger"), t.largereq = e("./function/arithmetic/largereq"), t.lcm = e("./function/arithmetic/lcm"), t.log = e("./function/arithmetic/log"), t.log10 = e("./function/arithmetic/log10"), t.mod = e("./function/arithmetic/mod"), t.multiply = e("./function/arithmetic/multiply"), t.pow = e("./function/arithmetic/pow"), t.round = e("./function/arithmetic/round"), t.sign = e("./function/arithmetic/sign"), t.smaller = e("./function/arithmetic/smaller"), 
    t.smallereq = e("./function/arithmetic/smallereq"), t.sqrt = e("./function/arithmetic/sqrt"), t.square = e("./function/arithmetic/square"), t.subtract = e("./function/arithmetic/subtract"), t.unary = e("./function/arithmetic/unary"), t.unequal = e("./function/arithmetic/unequal"), t.xgcd = e("./function/arithmetic/xgcd"), t.arg = e("./function/complex/arg"), t.conj = e("./function/complex/conj"), t.re = e("./function/complex/re"), t.im = e("./function/complex/im"), t.bignumber = e("./function/construction/bignumber"), 
    t["boolean"] = e("./function/construction/boolean"), t.complex = e("./function/construction/complex"), t.index = e("./function/construction/index"), t.matrix = e("./function/construction/matrix"), t.number = e("./function/construction/number"), t.string = e("./function/construction/string"), t.unit = e("./function/construction/unit"), t.eval = e("./function/expression/eval"), t.help = e("./function/expression/help"), t.concat = e("./function/matrix/concat"), t.det = e("./function/matrix/det"), 
    t.diag = e("./function/matrix/diag"), t.eye = e("./function/matrix/eye"), t.inv = e("./function/matrix/inv"), t.ones = e("./function/matrix/ones"), t.range = e("./function/matrix/range"), t.resize = e("./function/matrix/resize"), t.size = e("./function/matrix/size"), t.squeeze = e("./function/matrix/squeeze"), t.subset = e("./function/matrix/subset"), t.transpose = e("./function/matrix/transpose"), t.zeros = e("./function/matrix/zeros"), t.combinations = e("./function/probability/combinations"), 
    t.distribution = e("./function/probability/distribution"), t.factorial = e("./function/probability/factorial"), t.permutations = e("./function/probability/permutations"), t.pickRandom = e("./function/probability/pickRandom"), t.random = e("./function/probability/random"), t.randomInt = e("./function/probability/randomInt"), t.min = e("./function/statistics/min"), t.mean = e("./function/statistics/mean"), t.max = e("./function/statistics/max"), t.acos = e("./function/trigonometry/acos"), t.asin = 
    e("./function/trigonometry/asin"), t.atan = e("./function/trigonometry/atan"), t.atan2 = e("./function/trigonometry/atan2"), t.cos = e("./function/trigonometry/cos"), t.cot = e("./function/trigonometry/cot"), t.csc = e("./function/trigonometry/csc"), t.sec = e("./function/trigonometry/sec"), t.sin = e("./function/trigonometry/sin"), t.tan = e("./function/trigonometry/tan"), t.to = e("./function/units/to"), t.clone = e("./function/utils/clone"), t.map = e("./function/utils/map"), t.forEach = e("./function/utils/forEach"), 
    t.format = e("./function/utils/format"), t["import"] = e("./function/utils/import"), t["typeof"] = e("./function/utils/typeof");
  }, {"./constants/Infinity":5, "./constants/LN10":6, "./constants/LN2":7, "./constants/LOG10E":8, "./constants/LOG2E":9, "./constants/NaN":10, "./constants/SQRT1_2":11, "./constants/SQRT2":12, "./constants/e":13, "./constants/false":14, "./constants/i":15, "./constants/pi":16, "./constants/tau":17, "./constants/true":18, "./function/arithmetic/abs":19, "./function/arithmetic/add":20, "./function/arithmetic/ceil":21, "./function/arithmetic/cube":22, "./function/arithmetic/divide":23, "./function/arithmetic/edivide":24, 
  "./function/arithmetic/emultiply":25, "./function/arithmetic/epow":26, "./function/arithmetic/equal":27, "./function/arithmetic/exp":28, "./function/arithmetic/fix":29, "./function/arithmetic/floor":30, "./function/arithmetic/gcd":31, "./function/arithmetic/larger":32, "./function/arithmetic/largereq":33, "./function/arithmetic/lcm":34, "./function/arithmetic/log":35, "./function/arithmetic/log10":36, "./function/arithmetic/mod":37, "./function/arithmetic/multiply":38, "./function/arithmetic/pow":39, 
  "./function/arithmetic/round":40, "./function/arithmetic/sign":41, "./function/arithmetic/smaller":42, "./function/arithmetic/smallereq":43, "./function/arithmetic/sqrt":44, "./function/arithmetic/square":45, "./function/arithmetic/subtract":46, "./function/arithmetic/unary":47, "./function/arithmetic/unequal":48, "./function/arithmetic/xgcd":49, "./function/complex/arg":50, "./function/complex/conj":51, "./function/complex/im":52, "./function/complex/re":53, "./function/construction/bignumber":54, 
  "./function/construction/boolean":55, "./function/construction/complex":56, "./function/construction/index":57, "./function/construction/matrix":58, "./function/construction/number":59, "./function/construction/string":60, "./function/construction/unit":61, "./function/expression/eval":62, "./function/expression/help":63, "./function/matrix/concat":64, "./function/matrix/det":65, "./function/matrix/diag":66, "./function/matrix/eye":67, "./function/matrix/inv":68, "./function/matrix/ones":69, "./function/matrix/range":70, 
  "./function/matrix/resize":71, "./function/matrix/size":72, "./function/matrix/squeeze":73, "./function/matrix/subset":74, "./function/matrix/transpose":75, "./function/matrix/zeros":76, "./function/probability/combinations":77, "./function/probability/distribution":78, "./function/probability/factorial":79, "./function/probability/permutations":80, "./function/probability/pickRandom":81, "./function/probability/random":82, "./function/probability/randomInt":83, "./function/statistics/max":84, 
  "./function/statistics/mean":85, "./function/statistics/min":86, "./function/trigonometry/acos":87, "./function/trigonometry/asin":88, "./function/trigonometry/atan":89, "./function/trigonometry/atan2":90, "./function/trigonometry/cos":91, "./function/trigonometry/cot":92, "./function/trigonometry/csc":93, "./function/trigonometry/sec":94, "./function/trigonometry/sin":95, "./function/trigonometry/tan":96, "./function/units/to":97, "./function/utils/clone":98, "./function/utils/forEach":99, "./function/utils/format":100, 
  "./function/utils/import":101, "./function/utils/map":102, "./function/utils/typeof":103}], 105:[function(e, n) {
    function t(e) {
      this.nodes = e || [];
    }
    var r = e("./Node"), i = (e("../../util/object"), e("../../util/string"));
    e("../../type/collection"), e("../../type/Matrix");
    t.prototype = new r, t.prototype._compile = function(e) {
      var n = "array" !== e.math.config().matrix, t = this.nodes.map(function(n) {
        return n._compile(e);
      });
      return(n ? "math.matrix([" : "[") + t.join(",") + (n ? "])" : "]");
    }, t.prototype.find = function(e) {
      var n = [];
      this.match(e) && n.push(this);
      for (var t = this.nodes, r = 0, i = t.length;i > r;r++) {
        for (var o = t[r], a = 0, s = o.length;s > a;a++) {
          n = n.concat(o[a].find(e));
        }
      }
      return n;
    }, t.prototype.toString = function() {
      return i.format(this.nodes);
    }, n.exports = t;
  }, {"../../type/Matrix":211, "../../type/collection":214, "../../util/object":220, "../../util/string":221, "./Node":111}], 106:[function(e, n) {
    function t(e, n) {
      this.name = e, this.expr = n;
    }
    var r = e("./Node");
    t.prototype = new r, t.prototype._compile = function(e) {
      return'scope["' + this.name + '"] \x3d ' + this.expr._compile(e);
    }, t.prototype.find = function(e) {
      var n = [];
      return this.match(e) && n.push(this), this.expr && (n = n.concat(this.expr.find(e))), n;
    }, t.prototype.toString = function() {
      return this.name + " \x3d " + this.expr.toString();
    }, n.exports = t;
  }, {"./Node":111}], 107:[function(e, n) {
    function t() {
      this.params = [];
    }
    var r = e("./Node");
    t.prototype = new r, t.prototype.add = function(e, n) {
      var t = this.params.length;
      this.params[t] = {node:e, visible:void 0 != n ? n : !0};
    }, t.prototype._compile = function(e) {
      var n = this.params.map(function(n) {
        var t = n.node._compile(e);
        return n.visible ? "results.push(" + t + ");" : t + ";";
      });
      return "(function () {var results \x3d [];" + n.join("") + "return results;})()";
    }, t.prototype.find = function(e) {
      var n = [];
      this.match(e) && n.push(this);
      var t = this.params;
      if (t) {
        for (var r = 0, i = t.length;i > r;r++) {
          n = n.concat(t[r].node.find(e));
        }
      }
      return n;
    }, t.prototype.toString = function() {
      return this.params.map(function(e) {
        return e.node.toString() + (e.visible ? "" : ";");
      }).join("\n");
    }, n.exports = t;
  }, {"./Node":111}], 108:[function(e, n) {
    function t(e, n) {
      if (!o(e)) {
        throw new TypeError("Constant type must be a string");
      }
      if (!o(n)) {
        throw new TypeError("Constant value must be a string");
      }
      this.type = e, this.value = n;
    }
    var r = e("./Node"), i = (e("../../type/Complex"), e("bignumber.js"), e("../../util/string")), o = i.isString;
    t.prototype = new r, t.prototype._compile = function(e) {
      switch(this.type) {
        case "number":
          return "bignumber" === e.math.config().number ? 'math.bignumber("' + this.value + '")' : this.value.replace(/^(0*)[0-9]/, function(e, n) {
            return e.substring(n.length);
          });
        case "string":
          return'"' + this.value + '"';
        case "complex":
          return "math.complex(0, " + this.value + ")";
        case "boolean":
          return this.value;
        case "undefined":
          return this.value;
        case "null":
          return this.value;
        default:
          throw new TypeError('Unsupported type of constant "' + this.type + '"');;
      }
    }, t.prototype.toString = function() {
      switch(this.type) {
        case "string":
          return'"' + this.value + '"';
        case "complex":
          return this.value + "i";
        default:
          return this.value;
      }
    }, n.exports = t;
  }, {"../../type/Complex":208, "../../util/string":221, "./Node":111, "bignumber.js":223}], 109:[function(e, n) {
    function t(e, n, t) {
      this.name = e, this.args = n, this.expr = t;
    }
    var r = e("./Node");
    t.prototype = new r, t.prototype._eval = function() {
      return this.scope.set(this.name, this.fn), this.fn;
    }, t.prototype._compile = function(e) {
      return'scope["' + this.name + '"] \x3d   (function (scope) {    scope \x3d Object.create(scope);     var fn \x3d function ' + this.name + "(" + this.args.join(",") + ") {      if (arguments.length !\x3d " + this.args.length + ') {        throw new SyntaxError("Wrong number of arguments in function ' + this.name + ' (" + arguments.length + " provided, ' + this.args.length + ' expected)");      }' + this.args.map(function(e, n) {
        return'scope["' + e + '"] \x3d arguments[' + n + "];";
      }).join("") + "      return " + this.expr._compile(e) + '    };    fn.syntax \x3d "' + this.name + "(" + this.args.join(", ") + ')";    return fn;  })(scope);';
    }, t.prototype.find = function(e) {
      var n = [];
      return this.match(e) && n.push(this), this.expr && (n = n.concat(this.expr.find(e))), n;
    }, t.prototype.toString = function() {
      return "function " + this.name + "(" + this.args.join(", ") + ") \x3d " + this.expr.toString();
    }, n.exports = t;
  }, {"./Node":111}], 110:[function(e, n) {
    function t(e, n) {
      this.object = e, this.ranges = n;
    }
    var r = e("../../util/number.js"), i = e("./Node.js"), o = e("./RangeNode.js"), a = e("./SymbolNode.js");
    e("bignumber.js"), e("../../type/Index.js"), e("../../type/Range.js"), r.isNumber, r.toNumber;
    t.prototype = new i, t.prototype._compile = function(e) {
      return this.compileSubset(e);
    }, t.prototype.compileSubset = function(e, n) {
      var t = {type:a, properties:{name:"end"}}, r = this.ranges.map(function(e) {
        return e.find(t).length > 0;
      }), i = this.ranges.map(function(n, t) {
        var i = r[t];
        return n instanceof o ? i ? '(function (scope) {  scope \x3d Object.create(scope);   scope["end"] \x3d size[' + t + "];  var step \x3d " + (n.step ? n.step._compile(e) : "1") + ";  return [    " + n.start._compile(e) + " - 1,     " + n.end._compile(e) + " - (step \x3e 0 ? 0 : 2),     step  ];})(scope)" : "(function () {  var step \x3d " + (n.step ? n.step._compile(e) : "1") + ";  return [    " + n.start._compile(e) + " - 1,     " + n.end._compile(e) + " - (step \x3e 0 ? 0 : 2),     step  ];})()" : 
        i ? '(function (scope) {  scope \x3d Object.create(scope);   scope["end"] \x3d size[' + t + "];  return " + n._compile(e) + " - 1;})(scope)" : n._compile(e) + " - 1";
      }), s = i.some(function(e) {
        return e;
      });
      return s ? "(function () {  var obj \x3d " + this.object._compile(e) + ";  var size \x3d math.size(obj).valueOf();  return math.subset(    obj,     math.index(" + i.join(", ") + ")    " + (n ? ", " + n : "") + "  );})()" : "math.subset(" + this.object._compile(e) + ",math.index(" + i.join(", ") + (n ? ", " + n : "") + ")";
    }, t.prototype.find = function(e) {
      var n = [];
      this.match(e) && n.push(this), this.object && (n = n.concat(this.object.find(e)));
      var t = this.ranges;
      if (t) {
        for (var r = 0, i = t.length;i > r;r++) {
          n = n.concat(t[r].find(e));
        }
      }
      return n;
    }, t.prototype.objectName = function() {
      return this.object.name;
    }, t.prototype.toString = function() {
      var e = this.object ? this.object.toString() : "";
      return this.ranges && (e += "[" + this.ranges.join(", ") + "]"), e;
    }, n.exports = t;
  }, {"../../type/Index.js":210, "../../type/Range.js":212, "../../util/number.js":219, "./Node.js":111, "./RangeNode.js":114, "./SymbolNode.js":115, "bignumber.js":223}], 111:[function(e, n) {
    function t() {
    }
    t.prototype.eval = function() {
      throw new Error("Node.eval is deprecated. Use Node.compile(math).eval([scope]) instead.");
    }, t.prototype.compile = function(e) {
      if ("object" != typeof e) {
        throw new TypeError("Object expected as parameter math");
      }
      var n = {math:e}, t = this._compile(n), r = Object.keys(n).map(function(e) {
        return "    var " + e + ' \x3d defs["' + e + '"];';
      }), i = r.join(" ") + 'return {  "eval": function (scope) {    scope \x3d scope || {};    return ' + t + ";  }};", o = new Function("defs", i);
      return o(n);
    }, t.prototype._compile = function() {
      throw new Error("Cannot compile a Node interface");
    }, t.prototype.find = function(e) {
      return this.match(e) ? [this] : [];
    }, t.prototype.match = function(e) {
      var n = !0;
      if (e && (!e.type || (this instanceof e.type || (n = !1)), n && e.properties)) {
        for (var t in e.properties) {
          if (e.properties.hasOwnProperty(t) && this[t] != e.properties[t]) {
            n = !1;
            break;
          }
        }
      }
      return n;
    }, t.prototype.toString = function() {
      return "";
    }, n.exports = t;
  }, {}], 112:[function(e, n) {
    function t(e, n, t) {
      this.op = e, this.fn = n, this.params = t;
    }
    var r = e("./Node");
    t.prototype = new r, t.prototype._compile = function(e) {
      if (!(this.fn in e.math)) {
        throw new Error("Function " + this.fn + ' missing in provided namespace "math"');
      }
      var n = this.params.map(function(n) {
        return n._compile(e);
      });
      return "math." + this.fn + "(" + n.join(", ") + ")";
    }, t.prototype.find = function(e) {
      var n = [];
      this.match(e) && n.push(this);
      var t = this.params;
      if (t) {
        for (var r = 0, i = t.length;i > r;r++) {
          n = n.concat(t[r].find(e));
        }
      }
      return n;
    }, t.prototype.toString = function() {
      var e = this.params;
      switch(e.length) {
        case 1:
          return "-" == this.op ? "-" + e[0].toString() : e[0].toString() + this.op;
        case 2:
          var n = e[0].toString();
          e[0] instanceof t && (n = "(" + n + ")");
          var r = e[1].toString();
          return e[1] instanceof t && (r = "(" + r + ")"), n + " " + this.op + " " + r;
        default:
          return this.op + "(" + this.params.join(", ") + ")";
      }
    }, n.exports = t;
  }, {"./Node":111}], 113:[function(e, n) {
    function t(e, n) {
      this.object = e, this.params = n;
    }
    var r = e("../../util/number"), i = e("./Node");
    e("./RangeNode"), e("./SymbolNode"), e("bignumber.js"), e("../../type/Index"), e("../../type/Range"), r.isNumber, r.toNumber;
    t.prototype = new i, t.prototype._compile = function(e) {
      var n = this.params.map(function(n) {
        return n._compile(e);
      });
      return this.object._compile(e) + "(" + n.join(", ") + ")";
    }, t.prototype.find = function(e) {
      var n = [];
      this.match(e) && n.push(this), this.object && (n = n.concat(this.object.find(e)));
      var t = this.params;
      if (t) {
        for (var r = 0, i = t.length;i > r;r++) {
          n = n.concat(t[r].find(e));
        }
      }
      return n;
    }, t.prototype.toString = function() {
      var e = this.object ? this.object.toString() : "";
      return this.params && (e += "(" + this.params.join(", ") + ")"), e;
    }, n.exports = t;
  }, {"../../type/Index":210, "../../type/Range":212, "../../util/number":219, "./Node":111, "./RangeNode":114, "./SymbolNode":115, "bignumber.js":223}], 114:[function(e, n) {
    function t(e) {
      if (2 != e.length && 3 != e.length) {
        throw new SyntaxError("Wrong number of arguments. Expected [start, end] or [start, end, step]");
      }
      this.start = e[0], this.end = e[1], this.step = e[2];
    }
    var r = e("../../util/number"), i = e("./Node");
    e("bignumber.js"), e("../../type/Range"), e("../../type/Matrix"), r.toNumber;
    t.prototype = new i, t.prototype._compile = function(e) {
      return "math.range(" + this.start._compile(e) + ", " + this.end._compile(e) + ", " + (this.step ? this.step._compile(e) + ", " : "") + "true)";
    }, t.prototype.find = function(e) {
      var n = [];
      return this.match(e) && n.push(this), this.start && (n = n.concat(this.start.find(e))), this.step && (n = n.concat(this.step.find(e))), this.end && (n = n.concat(this.end.find(e))), n;
    }, t.prototype.toString = function() {
      var e = this.start.toString();
      return this.step && (e += ":" + this.step.toString()), e += ":" + this.end.toString();
    }, n.exports = t;
  }, {"../../type/Matrix":211, "../../type/Range":212, "../../util/number":219, "./Node":111, "bignumber.js":223}], 115:[function(e, n) {
    function t(e) {
      this.name = e;
    }
    function r(e) {
      throw new Error("Undefined symbol " + e);
    }
    var i = e("./Node"), o = e("../../type/Unit");
    t.prototype = new i, t.prototype._compile = function(e) {
      return e.undef = r, e.Unit = o, '(scope["' + this.name + '"] !\x3d\x3d undefined ? scope["' + this.name + '"] : math["' + this.name + '"] !\x3d\x3d undefined ? math["' + this.name + '"] : ' + (o.isPlainUnit(this.name) ? 'new Unit(null, "' + this.name + '")' : 'undef("' + this.name + '")') + ")";
    }, t.prototype.toString = function() {
      return this.name;
    }, n.exports = t;
  }, {"../../type/Unit":213, "./Node":111}], 116:[function(e, n) {
    function t(e, n) {
      this.value = e, this.unit = n;
    }
    var r = e("./Node"), i = (e("bignumber.js"), e("../../type/Complex"), e("../../type/Unit"), e("../../util/number"));
    i.toNumber;
    t.prototype = new r, t.prototype._compile = function(e) {
      return "math.unit(" + this.value._compile(e) + ', "' + this.unit + '")';
    }, t.prototype.find = function(e) {
      var n = [];
      return this.match(e) && n.push(this), n = n.concat(this.value.find(e));
    }, t.prototype.toString = function() {
      return this.value + " " + this.unit;
    }, n.exports = t;
  }, {"../../type/Complex":208, "../../type/Unit":213, "../../util/number":219, "./Node":111, "bignumber.js":223}], 117:[function(e, n) {
    function t(e, n) {
      if (!(e instanceof o)) {
        throw new TypeError("index mus be an IndexNode");
      }
      this.index = e, this.expr = n;
    }
    var r = e("../../util/number"), i = e("./Node"), o = (e("./RangeNode"), e("./IndexNode"));
    e("./SymbolNode"), e("bignumber.js"), e("../../type/Index"), e("../../type/Range"), r.isNumber, r.toNumber;
    t.prototype = new i, t.prototype._compile = function(e) {
      return'scope["' + this.index.objectName() + '"] \x3d ' + this.index.compileSubset(e, this.expr._compile(e));
    }, t.prototype.find = function(e) {
      var n = [];
      this.match(e) && n.push(this);
      var t = this.ranges;
      if (t) {
        for (var r = 0, i = t.length;i > r;r++) {
          n = n.concat(t[r].find(e));
        }
      }
      return this.expr && (n = n.concat(this.expr.find(e))), n;
    }, t.prototype.toString = function() {
      return this.index.toString() + " \x3d " + this.expr.toString();
    }, n.exports = t;
  }, {"../../type/Index":210, "../../type/Range":212, "../../util/number":219, "./IndexNode":110, "./Node":111, "./RangeNode":114, "./SymbolNode":115, "bignumber.js":223}], 118:[function() {
  }, {}], 119:[function(e, n, t) {
    t.ArrayNode = e("./ArrayNode"), t.AssignmentNode = e("./AssignmentNode"), t.BlockNode = e("./BlockNode"), t.ConstantNode = e("./ConstantNode"), t.IndexNode = e("./IndexNode"), t.FunctionNode = e("./FunctionNode"), t.Node = e("./Node"), t.OperatorNode = e("./OperatorNode"), t.ParamsNode = e("./ParamsNode"), t.RangeNode = e("./RangeNode"), t.SymbolNode = e("./SymbolNode"), t.UnitNode = e("./UnitNode"), t.UpdateNode = e("./UpdateNode"), t.handlers = e("./handlers");
  }, {"./ArrayNode":105, "./AssignmentNode":106, "./BlockNode":107, "./ConstantNode":108, "./FunctionNode":109, "./IndexNode":110, "./Node":111, "./OperatorNode":112, "./ParamsNode":113, "./RangeNode":114, "./SymbolNode":115, "./UnitNode":116, "./UpdateNode":117, "./handlers":118}], 120:[function(e, n) {
    function t(e) {
      if (1 != arguments.length) {
        throw new SyntaxError("Wrong number of arguments: 1 expected");
      }
      if (F(e)) {
        return un = e || "", l();
      }
      if (G(e) || e instanceof D) {
        return H.deepMap(e, function(e) {
          return un = e || "", l();
        });
      }
      throw new TypeError("String or matrix expected");
    }
    function r() {
      cn = 0, fn = un.charAt(0);
    }
    function i() {
      cn++, fn = un.charAt(cn);
    }
    function o() {
      return un.charAt(cn + 1);
    }
    function a() {
      for (mn = on.NULL, ln = "";" " == fn || "\t" == fn;) {
        i();
      }
      if ("#" == fn) {
        for (;"\n" != fn && "" != fn;) {
          i();
        }
      }
      if ("" == fn) {
        return void(mn = on.DELIMITER);
      }
      var e = fn + o();
      if (an[e]) {
        return mn = on.DELIMITER, ln = e, i(), void i();
      }
      if (an[fn]) {
        return mn = on.DELIMITER, ln = fn, void i();
      }
      if (!c(fn)) {
        if (u(fn)) {
          for (;u(fn) || f(fn);) {
            ln += fn, i();
          }
          return void(mn = sn[ln] ? on.DELIMITER : on.SYMBOL);
        }
        for (mn = on.UNKNOWN;"" != fn;) {
          ln += fn, i();
        }
        throw B('Syntax error in part "' + ln + '"');
      }
      if (mn = on.NUMBER, "." == fn) {
        ln += fn, i(), f(fn) || (mn = on.UNKNOWN);
      } else {
        for (;f(fn);) {
          ln += fn, i();
        }
        "." == fn && (ln += fn, i());
      }
      for (;f(fn);) {
        ln += fn, i();
      }
      if ("E" == fn || "e" == fn) {
        for (ln += fn, i(), ("+" == fn || "-" == fn) && (ln += fn, i()), f(fn) || (mn = on.UNKNOWN);f(fn);) {
          ln += fn, i();
        }
      }
    }
    function s() {
      for (;"\n" == ln;) {
        a();
      }
    }
    function u(e) {
      return e >= "a" && "z" >= e || (e >= "A" && "Z" >= e || "_" == e);
    }
    function c(e) {
      return e >= "0" && "9" >= e || "." == e;
    }
    function f(e) {
      return e >= "0" && "9" >= e;
    }
    function l() {
      r(), a();
      var e;
      if (e = "" == ln ? new Q("undefined", "undefined") : m(), "" != ln) {
        throw mn == on.DELIMITER ? P("Unknown operator " + ln) : B('Unexpected part "' + ln + '"');
      }
      return e;
    }
    function m() {
      var e, n, t;
      for ("\n" != ln && (";" != ln && ("" != ln && (e = p())));"\n" == ln || ";" == ln;) {
        n || (n = new W, e && (t = ";" != ln, n.add(e, t))), a(), "\n" != ln && (";" != ln && ("" != ln && (e = p(), t = ";" != ln, n.add(e, t))));
      }
      return n ? n : (e || (e = p()), e);
    }
    function p() {
      var e = h(), n = "ans";
      return new Y(n, e);
    }
    function h() {
      if (mn == on.SYMBOL && "function" == ln) {
        throw new Error('Deprecated keyword "function". Functions can now be assigned without it, like "f(x) \x3d x^2".');
      }
      return g();
    }
    function g() {
      var e, n, t, r = d();
      if ("\x3d" == ln) {
        if (r instanceof en) {
          return e = r.name, a(), t = g(), new Y(e, t);
        }
        if (r instanceof K) {
          return a(), t = g(), new tn(r, t);
        }
        if (r instanceof X) {
          var i = !0;
          if (n = [], r.object instanceof en ? (e = r.object.name, r.params.forEach(function(e, t) {
            e instanceof en ? n[t] = e.name : i = !1;
          })) : i = !1, i) {
            return a(), t = g(), new Z(e, n, t);
          }
        }
        throw B("Invalid left hand side of assignment operator \x3d");
      }
      return r;
    }
    function d() {
      var e, n = [];
      if (e = ":" == ln ? new Q("number", "1") : x(), ":" == ln) {
        for (n.push(e);":" == ln;) {
          a(), n.push(")" == ln || ("]" == ln || ("," == ln || "" == ln)) ? new en("end") : x());
        }
        if (n.length) {
          if (3 == n.length) {
            var t = n[2];
            n[2] = n[1], n[1] = t;
          }
          e = new J(n);
        }
      }
      return e;
    }
    function x() {
      var e = y();
      return e;
    }
    function y() {
      var e, n, t, r, i;
      for (e = b(), n = {"\x3d\x3d":"equal", "!\x3d":"unequal", "\x3c":"smaller", "\x3e":"larger", "\x3c\x3d":"smallereq", "\x3e\x3d":"largereq"};ln in n;) {
        t = ln, r = n[t], a(), i = [e, b()], e = new $(t, r, i);
      }
      return e;
    }
    function b() {
      var e, n, t, r, i;
      for (e = v(), n = {to:"to", "in":"to"};ln in n;) {
        t = ln, r = n[t], a(), i = [e, v()], e = new $(t, r, i);
      }
      return e;
    }
    function v() {
      var e, n, t, r, i;
      for (e = w(), n = {"+":"add", "-":"subtract"};ln in n;) {
        t = ln, r = n[t], a(), i = [e, w()], e = new $(t, r, i);
      }
      return e;
    }
    function w() {
      var e, n, t, r, i;
      for (e = E(), n = {"*":"multiply", ".*":"emultiply", "/":"divide", "./":"edivide", "%":"mod", mod:"mod"};ln in n;) {
        t = ln, r = n[t], a(), i = [e, E()], e = new $(t, r, i);
      }
      return e;
    }
    function E() {
      var e, n;
      return e = N(), (mn == on.SYMBOL || "in" == ln) && (n = ln, a(), e = new nn(e, n)), e;
    }
    function N() {
      var e, n, t;
      return "-" == ln ? (e = ln, n = "unary", a(), t = [N()], new $(e, n, t)) : j();
    }
    function j() {
      var e, n, t, r, i, o, s;
      for (t = [M()], r = [];"^" == ln || ".^" == ln;) {
        r.push(ln), a(), t.push(M());
      }
      for (e = t.pop();t.length;) {
        n = t.pop(), i = r.pop(), o = "^" == i ? "pow" : "epow", s = [n, e], e = new $(i, o, s);
      }
      return e;
    }
    function M() {
      var e, n, t, r, i;
      for (e = C(), n = {"!":"factorial", "'":"transpose"};ln in n;) {
        t = ln, r = n[t], a(), i = [e], e = new $(t, r, i);
      }
      return e;
    }
    function C() {
      var e, n;
      if (mn == on.SYMBOL && rn[ln]) {
        if (n = rn[ln], a(), "(" == ln) {
          if (e = [], a(), ")" != ln) {
            for (e.push(d());"," == ln;) {
              a(), e.push(d());
            }
          }
          if (")" != ln) {
            throw B("Parenthesis ) expected");
          }
          a();
        }
        return new n(e);
      }
      return A();
    }
    function A() {
      var e, n;
      return mn == on.SYMBOL || mn == on.DELIMITER && ln in sn ? (n = ln, a(), e = new en(n), O(e)) : T();
    }
    function O(e) {
      for (var n, t;"(" == ln || "[" == ln;) {
        if (n = ln, t = [], a(), ")" != ln && "]" != ln) {
          for (t.push(d());"," == ln;) {
            a(), t.push(d());
          }
        }
        if ("(" == n && ")" != ln) {
          throw B("Parenthesis ) expected");
        }
        if ("[" == n && "]" != ln) {
          throw B("Parenthesis ] expected");
        }
        a(), e = "(" == n ? new X(e, t) : new K(e, t);
      }
      return e;
    }
    function T() {
      var e, n, t;
      if ('"' == ln) {
        for (n = "", t = "";"" != fn && ('"' != fn || "\\" == t);) {
          n += fn, t = fn, i();
        }
        if (a(), '"' != ln) {
          throw B('End of string " expected');
        }
        return a(), e = new Q("string", n), e = O(e);
      }
      return U();
    }
    function U() {
      var e, n, t, r;
      if ("[" == ln) {
        if (a(), s(), "]" != ln) {
          var i = S();
          if (";" == ln) {
            for (t = 1, n = [i];";" == ln;) {
              a(), s(), n[t] = S(), t++, s();
            }
            if ("]" != ln) {
              throw B("End of matrix ] expected");
            }
            a(), r = n.length > 0 ? n[0].length : 0;
            for (var o = 1;t > o;o++) {
              if (n[o].length != r) {
                throw P("Number of columns must match (" + n[o].length + " !\x3d " + r + ")");
              }
            }
            e = new V(n);
          } else {
            if ("]" != ln) {
              throw B("End of matrix ] expected");
            }
            a(), e = i;
          }
        } else {
          a(), e = new V([]);
        }
        return e = O(e);
      }
      return q();
    }
    function S() {
      for (var e = [g()], n = 1;"," == ln;) {
        a(), s(), e[n] = g(), n++, s();
      }
      return new V(e);
    }
    function q() {
      var e, n;
      return mn == on.NUMBER ? (n = "." == ln ? "0" : ln, a(), "i" == ln || "I" == ln ? (a(), e = new Q("complex", n)) : e = new Q("number", n), e = O(e)) : z();
    }
    function z() {
      var e;
      if ("(" == ln) {
        if (a(), e = g(), ")" != ln) {
          throw B("Parenthesis ) expected");
        }
        return a(), e = O(e);
      }
      return R();
    }
    function R() {
      throw B("" == ln ? "Unexpected end of expression" : "Value expected");
    }
    function I() {
      return void 0;
    }
    function _() {
      return cn - ln.length + 1;
    }
    function L(e) {
      var n = I(), t = _();
      return void 0 === n ? void 0 === t ? e : e + " (char " + t + ")" : e + " (line " + n + ", char " + t + ")";
    }
    function B(e) {
      return new SyntaxError(L(e));
    }
    function P(e) {
      return new Error(L(e));
    }
    var k = e("../util/index"), F = (k.number.toNumber, k.string.isString), G = Array.isArray, D = (e("../type/Complex"), e("../type/Matrix")), H = (e("../type/Unit"), e("../type/collection")), V = e("./node/ArrayNode"), Y = e("./node/AssignmentNode"), W = e("./node/BlockNode"), Q = e("./node/ConstantNode"), Z = e("./node/FunctionNode"), K = e("./node/IndexNode"), $ = e("./node/OperatorNode"), X = e("./node/ParamsNode"), J = e("./node/RangeNode"), en = e("./node/SymbolNode"), nn = e("./node/UnitNode"), 
    tn = e("./node/UpdateNode"), rn = e("./node/handlers"), on = {NULL:0, DELIMITER:1, NUMBER:2, SYMBOL:3, UNKNOWN:4}, an = {",":!0, "(":!0, ")":!0, "[":!0, "]":!0, '"':!0, "\n":!0, ";":!0, "+":!0, "-":!0, "*":!0, ".*":!0, "/":!0, "./":!0, "%":!0, "^":!0, ".^":!0, "!":!0, "'":!0, "\x3d":!0, ":":!0, "\x3d\x3d":!0, "!\x3d":!0, "\x3c":!0, "\x3e":!0, "\x3c\x3d":!0, "\x3e\x3d":!0}, sn = {mod:!0, to:!0, "in":!0}, un = "", cn = 0, fn = "", ln = "", mn = on.NULL;
    n.exports = t;
  }, {"../type/Complex":208, "../type/Matrix":211, "../type/Unit":213, "../type/collection":214, "../util/index":218, "./node/ArrayNode":105, "./node/AssignmentNode":106, "./node/BlockNode":107, "./node/ConstantNode":108, "./node/FunctionNode":109, "./node/IndexNode":110, "./node/OperatorNode":112, "./node/ParamsNode":113, "./node/RangeNode":114, "./node/SymbolNode":115, "./node/UnitNode":116, "./node/UpdateNode":117, "./node/handlers":118}], 121:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = (e("../../type/Matrix"), e("../../type/collection")), a = t.number.isNumber, s = t["boolean"].isBoolean, u = i.isComplex, c = o.isCollection;
      n.abs = function f(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("abs", arguments.length, 1);
        }
        if (a(e)) {
          return Math.abs(e);
        }
        if (u(e)) {
          return Math.sqrt(e.re * e.re + e.im * e.im);
        }
        if (e instanceof r) {
          return e.abs();
        }
        if (c(e)) {
          return o.deepMap(e, f);
        }
        if (s(e)) {
          return Math.abs(e);
        }
        throw new n.error.UnsupportedTypeError("abs", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/Matrix":211, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 122:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = (e("../../type/Matrix"), e("../../type/Unit")), a = e("../../type/collection"), s = t["boolean"].isBoolean, u = t.number.isNumber, c = t.number.toNumber, f = t.number.toBigNumber, l = t.string.isString, m = i.isComplex, p = o.isUnit, h = a.isCollection;
      n.add = function g(e, t) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("add", arguments.length, 2);
        }
        if (u(e)) {
          if (u(t)) {
            return e + t;
          }
          if (m(t)) {
            return new i(e + t.re, t.im);
          }
        }
        if (m(e)) {
          if (m(t)) {
            return new i(e.re + t.re, e.im + t.im);
          }
          if (u(t)) {
            return new i(e.re + t, e.im);
          }
        }
        if (p(e) && p(t)) {
          if (!e.equalBase(t)) {
            throw new Error("Units do not match");
          }
          if (null == e.value) {
            throw new Error("Unit on left hand side of operator + has an undefined value");
          }
          if (null == t.value) {
            throw new Error("Unit on right hand side of operator + has an undefined value");
          }
          var o = e.clone();
          return o.value += t.value, o.fixPrefix = !1, o;
        }
        if (e instanceof r) {
          return u(t) ? t = f(t) : s(t) && (t = new r(t ? 1 : 0)), t instanceof r ? e.plus(t) : g(c(e), t);
        }
        if (t instanceof r) {
          return u(e) ? e = f(e) : s(e) && (e = new r(e ? 1 : 0)), e instanceof r ? e.plus(t) : g(e, c(t));
        }
        if (l(e) || l(t)) {
          return e + t;
        }
        if (h(e) || h(t)) {
          return a.deepMap2(e, t, g);
        }
        if (s(e)) {
          return g(+e, t);
        }
        if (s(t)) {
          return g(e, +t);
        }
        throw new n.error.UnsupportedTypeError("add", e, t);
      };
    };
  }, {"../../type/Complex":208, "../../type/Matrix":211, "../../type/Unit":213, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 123:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/collection"), a = t.number.isNumber, s = t["boolean"].isBoolean, u = o.isCollection, c = i.isComplex;
      n.ceil = function f(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("ceil", arguments.length, 1);
        }
        if (a(e)) {
          return Math.ceil(e);
        }
        if (c(e)) {
          return new i(Math.ceil(e.re), Math.ceil(e.im));
        }
        if (e instanceof r) {
          return e.ceil();
        }
        if (u(e)) {
          return o.deepMap(e, f);
        }
        if (s(e)) {
          return Math.ceil(e);
        }
        throw new n.error.UnsupportedTypeError("ceil", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 124:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/collection"), a = t.number.isNumber, s = t["boolean"].isBoolean, u = i.isComplex, c = o.isCollection;
      n.cube = function f(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("cube", arguments.length, 1);
        }
        if (a(e)) {
          return e * e * e;
        }
        if (u(e)) {
          return n.multiply(n.multiply(e, e), e);
        }
        if (e instanceof r) {
          return e.times(e).times(e);
        }
        if (c(e)) {
          return o.deepMap(e, f);
        }
        if (s(e)) {
          return f(+e);
        }
        throw new n.error.UnsupportedTypeError("cube", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 125:[function(e, n) {
    n.exports = function(n) {
      function t(e, n) {
        var t = n.re * n.re + n.im * n.im;
        return 0 != t ? new o((e.re * n.re + e.im * n.im) / t, (e.im * n.re - e.re * n.im) / t) : new o(0 != e.re ? e.re / 0 : 0, 0 != e.im ? e.im / 0 : 0);
      }
      var r = e("../../util/index"), i = e("bignumber.js"), o = e("../../type/Complex"), a = (e("../../type/Matrix"), e("../../type/Unit")), s = e("../../type/collection"), u = r.number.isNumber, c = r.number.toNumber, f = r.number.toBigNumber, l = r["boolean"].isBoolean, m = o.isComplex, p = a.isUnit, h = s.isCollection;
      n.divide = function g(e, r) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("divide", arguments.length, 2);
        }
        if (u(e)) {
          if (u(r)) {
            return e / r;
          }
          if (m(r)) {
            return t(new o(e, 0), r);
          }
        }
        if (m(e)) {
          if (m(r)) {
            return t(e, r);
          }
          if (u(r)) {
            return t(e, new o(r, 0));
          }
        }
        if (e instanceof i) {
          return u(r) ? r = f(r) : l(r) && (r = new i(r ? 1 : 0)), r instanceof i ? e.div(r) : g(c(e), r);
        }
        if (r instanceof i) {
          return u(e) ? e = f(e) : l(e) && (e = new i(e ? 1 : 0)), e instanceof i ? e.div(r) : g(e, c(r));
        }
        if (p(e) && u(r)) {
          var a = e.clone();
          return a.value /= r, a;
        }
        if (h(e)) {
          return h(r) ? n.multiply(e, n.inv(r)) : s.deepMap2(e, r, g);
        }
        if (h(r)) {
          return n.multiply(e, n.inv(r));
        }
        if (l(e)) {
          return g(+e, r);
        }
        if (l(r)) {
          return g(e, +r);
        }
        throw new n.error.UnsupportedTypeError("divide", e, r);
      };
    };
  }, {"../../type/Complex":208, "../../type/Matrix":211, "../../type/Unit":213, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 126:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../type/collection");
      n.edivide = function(e, r) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("edivide", arguments.length, 2);
        }
        return t.deepMap2(e, r, n.divide);
      };
    };
  }, {"../../type/collection":214}], 127:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../type/collection");
      n.emultiply = function(e, r) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("emultiply", arguments.length, 2);
        }
        return t.deepMap2(e, r, n.multiply);
      };
    };
  }, {"../../type/collection":214}], 128:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../type/collection");
      n.epow = function(e, r) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("epow", arguments.length, 2);
        }
        return t.deepMap2(e, r, n.pow);
      };
    };
  }, {"../../type/collection":214}], 129:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/Unit"), a = e("../../type/collection"), s = t.number.isNumber, u = t.number.toNumber, c = t.number.toBigNumber, f = t["boolean"].isBoolean, l = t.string.isString, m = i.isComplex, p = o.isUnit, h = a.isCollection;
      n.equal = function g(e, t) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("equal", arguments.length, 2);
        }
        if (s(e)) {
          if (s(t)) {
            return e == t;
          }
          if (m(t)) {
            return e == t.re && 0 == t.im;
          }
        }
        if (m(e)) {
          if (s(t)) {
            return e.re == t && 0 == e.im;
          }
          if (m(t)) {
            return e.re == t.re && e.im == t.im;
          }
        }
        if (e instanceof r) {
          return s(t) ? t = c(t) : f(t) && (t = new r(t ? 1 : 0)), t instanceof r ? e.eq(t) : g(u(e), t);
        }
        if (t instanceof r) {
          return s(e) ? e = c(e) : f(e) && (e = new r(e ? 1 : 0)), e instanceof r ? e.eq(t) : g(e, u(t));
        }
        if (p(e) && p(t)) {
          if (!e.equalBase(t)) {
            throw new Error("Cannot compare units with different base");
          }
          return e.value == t.value;
        }
        if (l(e) || l(t)) {
          return e == t;
        }
        if (h(e) || h(t)) {
          return a.deepMap2(e, t, g);
        }
        if (f(e)) {
          return g(+e, t);
        }
        if (f(t)) {
          return g(e, +t);
        }
        throw new n.error.UnsupportedTypeError("equal", e, t);
      };
    };
  }, {"../../type/Complex":208, "../../type/Unit":213, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 130:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = (e("../../type/Matrix"), e("../../type/collection")), a = t.number.isNumber, s = t["boolean"].isBoolean, u = i.isComplex, c = o.isCollection;
      n.exp = function f(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("exp", arguments.length, 1);
        }
        if (a(e)) {
          return Math.exp(e);
        }
        if (u(e)) {
          var l = Math.exp(e.re);
          return new i(l * Math.cos(e.im), l * Math.sin(e.im));
        }
        if (e instanceof r) {
          return f(t.number.toNumber(e));
        }
        if (c(e)) {
          return o.deepMap(e, f);
        }
        if (s(e)) {
          return Math.exp(e);
        }
        throw new n.error.UnsupportedTypeError("exp", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/Matrix":211, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 131:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/collection"), a = t.number.isNumber, s = t["boolean"].isBoolean, u = i.isComplex, c = o.isCollection;
      n.fix = function f(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("fix", arguments.length, 1);
        }
        if (a(e)) {
          return e > 0 ? Math.floor(e) : Math.ceil(e);
        }
        if (u(e)) {
          return new i(e.re > 0 ? Math.floor(e.re) : Math.ceil(e.re), e.im > 0 ? Math.floor(e.im) : Math.ceil(e.im));
        }
        if (e instanceof r) {
          return e.isNegative() ? e.ceil() : e.floor();
        }
        if (c(e)) {
          return o.deepMap(e, f);
        }
        if (s(e)) {
          return f(+e);
        }
        throw new n.error.UnsupportedTypeError("fix", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 132:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/collection"), a = t.number.isNumber, s = t["boolean"].isBoolean, u = i.isComplex, c = o.isCollection;
      n.floor = function f(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("floor", arguments.length, 1);
        }
        if (a(e)) {
          return Math.floor(e);
        }
        if (u(e)) {
          return new i(Math.floor(e.re), Math.floor(e.im));
        }
        if (e instanceof r) {
          return e.floor();
        }
        if (c(e)) {
          return o.deepMap(e, f);
        }
        if (s(e)) {
          return f(+e);
        }
        throw new n.error.UnsupportedTypeError("floor", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 133:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/collection"), o = t.number.isNumber, a = t.number.toNumber, s = t["boolean"].isBoolean, u = t.number.isInteger, c = i.isCollection;
      n.gcd = function f() {
        var e, t = arguments[0], l = arguments[1];
        if (2 == arguments.length) {
          if (o(t) && o(l)) {
            if (!u(t) || !u(l)) {
              throw new Error("Parameters in function gcd must be integer numbers");
            }
            for (;0 != l;) {
              e = t % l, t = l, l = e;
            }
            return 0 > t ? -t : t;
          }
          if (c(t) || c(l)) {
            return i.deepMap2(t, l, f);
          }
          if (t instanceof r) {
            return f(a(t), l);
          }
          if (l instanceof r) {
            return f(t, a(l));
          }
          if (s(t)) {
            return f(+t, l);
          }
          if (s(l)) {
            return f(t, +l);
          }
          throw new n.error.UnsupportedTypeError("gcd", t, l);
        }
        if (arguments.length > 2) {
          for (var m = 1;m < arguments.length;m++) {
            t = f(t, arguments[m]);
          }
          return t;
        }
        throw new SyntaxError("Function gcd expects two or more arguments");
      };
    };
  }, {"../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 134:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/Unit"), a = e("../../type/collection"), s = t.number.isNumber, u = t.number.toNumber, c = t.number.toBigNumber, f = t["boolean"].isBoolean, l = t.string.isString, m = i.isComplex, p = o.isUnit, h = a.isCollection;
      n.larger = function g(e, t) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("larger", arguments.length, 2);
        }
        if (s(e) && s(t)) {
          return e > t;
        }
        if (e instanceof r) {
          return s(t) ? t = c(t) : f(t) && (t = new r(t ? 1 : 0)), t instanceof r ? e.gt(t) : g(u(e), t);
        }
        if (t instanceof r) {
          return s(e) ? e = c(e) : f(e) && (e = new r(e ? 1 : 0)), e instanceof r ? e.gt(t) : g(e, u(t));
        }
        if (p(e) && p(t)) {
          if (!e.equalBase(t)) {
            throw new Error("Cannot compare units with different base");
          }
          return e.value > t.value;
        }
        if (l(e) || l(t)) {
          return e > t;
        }
        if (h(e) || h(t)) {
          return a.deepMap2(e, t, g);
        }
        if (f(e)) {
          return g(+e, t);
        }
        if (f(t)) {
          return g(e, +t);
        }
        if (m(e) || m(t)) {
          throw new TypeError("No ordering relation is defined for complex numbers");
        }
        throw new n.error.UnsupportedTypeError("larger", e, t);
      };
    };
  }, {"../../type/Complex":208, "../../type/Unit":213, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 135:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/Unit"), a = e("../../type/collection"), s = t.number.isNumber, u = t.number.toNumber, c = t.number.toBigNumber, f = t["boolean"].isBoolean, l = t.string.isString, m = i.isComplex, p = o.isUnit, h = a.isCollection;
      n.largereq = function g(e, t) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("largereq", arguments.length, 2);
        }
        if (s(e) && s(t)) {
          return e >= t;
        }
        if (e instanceof r) {
          return s(t) ? t = c(t) : f(t) && (t = new r(t ? 1 : 0)), t instanceof r ? e.gte(t) : g(u(e), t);
        }
        if (t instanceof r) {
          return s(e) ? e = c(e) : f(e) && (e = new r(e ? 1 : 0)), e instanceof r ? e.gte(t) : g(e, u(t));
        }
        if (p(e) && p(t)) {
          if (!e.equalBase(t)) {
            throw new Error("Cannot compare units with different base");
          }
          return e.value >= t.value;
        }
        if (l(e) || l(t)) {
          return e >= t;
        }
        if (h(e) || h(t)) {
          return a.deepMap2(e, t, g);
        }
        if (f(e)) {
          return g(+e, t);
        }
        if (f(t)) {
          return g(e, +t);
        }
        if (m(e) || m(t)) {
          throw new TypeError("No ordering relation is defined for complex numbers");
        }
        throw new n.error.UnsupportedTypeError("largereq", e, t);
      };
    };
  }, {"../../type/Complex":208, "../../type/Unit":213, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 136:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/collection"), o = t.number.isNumber, a = t.number.toNumber, s = t["boolean"].isBoolean, u = t.number.isInteger, c = i.isCollection;
      n.lcm = function f() {
        var e, t = arguments[0], l = arguments[1];
        if (2 == arguments.length) {
          if (o(t) && o(l)) {
            if (!u(t) || !u(l)) {
              throw new Error("Parameters in function lcm must be integer numbers");
            }
            if (0 == t || 0 == l) {
              return 0;
            }
            for (var m = t * l;0 != l;) {
              e = l, l = t % e, t = e;
            }
            return Math.abs(m / t);
          }
          if (c(t) || c(l)) {
            return i.deepMap2(t, l, f);
          }
          if (s(t)) {
            return f(+t, l);
          }
          if (s(l)) {
            return f(t, +l);
          }
          if (t instanceof r) {
            return f(a(t), l);
          }
          if (l instanceof r) {
            return f(t, a(l));
          }
          throw new n.error.UnsupportedTypeError("lcm", t, l);
        }
        if (arguments.length > 2) {
          for (var p = 1;p < arguments.length;p++) {
            t = f(t, arguments[p]);
          }
          return t;
        }
        throw new SyntaxError("Function lcm expects two or more arguments");
      };
    };
  }, {"../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 137:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/collection"), a = t.number.isNumber, s = t["boolean"].isBoolean, u = i.isComplex, c = o.isCollection;
      n.log = function f(e, l) {
        if (1 == arguments.length) {
          if (a(e)) {
            return e >= 0 ? Math.log(e) : f(new i(e, 0));
          }
          if (u(e)) {
            return new i(Math.log(Math.sqrt(e.re * e.re + e.im * e.im)), Math.atan2(e.im, e.re));
          }
          if (e instanceof r) {
            return f(t.number.toNumber(e));
          }
          if (c(e)) {
            return o.deepMap(e, f);
          }
          if (s(e)) {
            return f(+e);
          }
          throw new n.error.UnsupportedTypeError("log", e);
        }
        if (2 == arguments.length) {
          return n.divide(f(e), f(l));
        }
        throw new n.error.ArgumentsError("log", arguments.length, 1, 2);
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 138:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/collection"), a = t.number.isNumber, s = t["boolean"].isBoolean, u = i.isComplex, c = o.isCollection;
      n.log10 = function f(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("log10", arguments.length, 1);
        }
        if (a(e)) {
          return e >= 0 ? Math.log(e) / Math.LN10 : f(new i(e, 0));
        }
        if (e instanceof r) {
          return f(t.number.toNumber(e));
        }
        if (u(e)) {
          return new i(Math.log(Math.sqrt(e.re * e.re + e.im * e.im)) / Math.LN10, Math.atan2(e.im, e.re) / Math.LN10);
        }
        if (c(e)) {
          return o.deepMap(e, f);
        }
        if (s(e)) {
          return f(+e);
        }
        throw new n.error.UnsupportedTypeError("log10", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 139:[function(e, n) {
    n.exports = function(n) {
      function t(e, n) {
        if (n > 0) {
          return e > 0 ? e % n : 0 == e ? 0 : e - n * Math.floor(e / n);
        }
        if (0 == n) {
          return e;
        }
        throw new Error("Cannot calculate mod for a negative divisor");
      }
      var r = e("../../util/index"), i = e("bignumber.js"), o = e("../../type/collection"), a = r.number.isNumber, s = r.number.toNumber, u = r.number.toBigNumber, c = r["boolean"].isBoolean, f = o.isCollection;
      n.mod = function l(e, r) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("mod", arguments.length, 2);
        }
        if (a(e) && a(r)) {
          return t(e, r);
        }
        if (e instanceof i) {
          return a(r) ? r = u(r) : c(r) && (r = new i(r ? 1 : 0)), r instanceof i ? e.mod(r) : l(s(e), r);
        }
        if (r instanceof i) {
          return a(e) ? e = u(e) : c(e) && (e = new i(e ? 1 : 0)), e instanceof i ? e.mod(r) : l(e, s(r));
        }
        if (f(e) || f(r)) {
          return o.deepMap2(e, r, l);
        }
        if (c(e)) {
          return l(+e, r);
        }
        if (c(r)) {
          return l(e, +r);
        }
        throw new n.error.UnsupportedTypeError("mod", e, r);
      };
    };
  }, {"../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 140:[function(e, n) {
    n.exports = function(n) {
      function t(e, t) {
        for (var r = [], i = e.length, o = t[0].length, a = e[0].length, s = 0;i > s;s++) {
          r[s] = [];
          for (var u = 0;o > u;u++) {
            for (var c = null, f = 0;a > f;f++) {
              var l = n.multiply(e[s][f], t[f][u]);
              c = null === c ? l : n.add(c, l);
            }
            r[s][u] = c;
          }
        }
        return r;
      }
      function r(e, t) {
        for (var r = [], i = t.length, o = t[0].length, a = 0;o > a;a++) {
          for (var s = null, u = 0;i > u;u++) {
            var c = n.multiply(e[u], t[u][a]);
            s = 0 === u ? c : n.add(s, c);
          }
          r[a] = s;
        }
        return r;
      }
      function i(e, t) {
        for (var r = [], i = e.length, o = e[0].length, a = 0;i > a;a++) {
          for (var s = null, u = 0;o > u;u++) {
            var c = n.multiply(e[a][u], t[u]);
            s = 0 === u ? c : n.add(s, c);
          }
          r[a] = s;
        }
        return r;
      }
      function o(e, t) {
        var r = e.length, i = null;
        if (r) {
          i = 0;
          for (var o = 0, a = e.length;a > o;o++) {
            i = n.add(i, n.multiply(e[o], t[o]));
          }
        }
        return i;
      }
      function a(e, n) {
        return 0 == e.im ? 0 == n.im ? new c(e.re * n.re, 0) : 0 == n.re ? new c(0, e.re * n.im) : new c(e.re * n.re, e.re * n.im) : 0 == e.re ? 0 == n.im ? new c(0, e.im * n.re) : 0 == n.re ? new c(-e.im * n.im, 0) : new c(-e.im * n.im, e.im * n.re) : 0 == n.im ? new c(e.re * n.re, e.im * n.re) : 0 == n.re ? new c(-e.im * n.im, e.re * n.im) : new c(e.re * n.re - e.im * n.im, e.re * n.im + e.im * n.re);
      }
      var s = e("../../util/index"), u = e("bignumber.js"), c = e("../../type/Complex"), f = e("../../type/Matrix"), l = e("../../type/Unit"), m = e("../../type/collection"), p = s.array, h = s.number.isNumber, g = s.number.toNumber, d = s.number.toBigNumber, x = s["boolean"].isBoolean, y = c.isComplex, b = Array.isArray, v = l.isUnit;
      n.multiply = function w(e, s) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("multiply", arguments.length, 2);
        }
        if (h(e)) {
          if (h(s)) {
            return e * s;
          }
          if (y(s)) {
            return a(new c(e, 0), s);
          }
          if (v(s)) {
            return res = s.clone(), res.value *= e, res;
          }
        }
        if (y(e)) {
          if (h(s)) {
            return a(e, new c(s, 0));
          }
          if (y(s)) {
            return a(e, s);
          }
        }
        if (e instanceof u) {
          return h(s) ? s = d(s) : x(s) && (s = new u(s ? 1 : 0)), s instanceof u ? e.times(s) : w(g(e), s);
        }
        if (s instanceof u) {
          return h(e) ? e = d(e) : x(e) && (e = new u(e ? 1 : 0)), e instanceof u ? e.times(s) : w(e, g(s));
        }
        if (v(e) && h(s)) {
          return res = e.clone(), res.value *= s, res;
        }
        if (b(e)) {
          if (b(s)) {
            var l = p.size(e), E = p.size(s);
            if (1 == l.length) {
              if (1 == E.length) {
                if (l[0] != E[0]) {
                  throw new RangeError("Dimensions mismatch in multiplication. Length of A must match length of B (A is " + l[0] + ", B is " + E[0] + l[0] + " !\x3d " + E[0] + ")");
                }
                return o(e, s);
              }
              if (2 == E.length) {
                if (l[0] != E[0]) {
                  throw new RangeError("Dimensions mismatch in multiplication. Length of A must match rows of B (A is " + l[0] + ", B is " + E[0] + "x" + E[1] + ", " + l[0] + " !\x3d " + E[0] + ")");
                }
                return r(e, s);
              }
              throw new Error("Can only multiply a 1 or 2 dimensional matrix (B has " + E.length + " dimensions)");
            }
            if (2 == l.length) {
              if (1 == E.length) {
                if (l[1] != E[0]) {
                  throw new RangeError("Dimensions mismatch in multiplication. Columns of A must match length of B (A is " + l[0] + "x" + l[0] + ", B is " + E[0] + ", " + l[1] + " !\x3d " + E[0] + ")");
                }
                return i(e, s);
              }
              if (2 == E.length) {
                if (l[1] != E[0]) {
                  throw new RangeError("Dimensions mismatch in multiplication. Columns of A must match rows of B (A is " + l[0] + "x" + l[1] + ", B is " + E[0] + "x" + E[1] + ", " + l[1] + " !\x3d " + E[0] + ")");
                }
                return t(e, s);
              }
              throw new Error("Can only multiply a 1 or 2 dimensional matrix (B has " + E.length + " dimensions)");
            }
            throw new Error("Can only multiply a 1 or 2 dimensional matrix (A has " + l.length + " dimensions)");
          }
          return s instanceof f ? new f(w(e, s.valueOf())) : m.deepMap2(e, s, w);
        }
        if (e instanceof f) {
          return new f(s instanceof f ? w(e.valueOf(), s.valueOf()) : w(e.valueOf(), s));
        }
        if (b(s)) {
          return m.deepMap2(e, s, w);
        }
        if (s instanceof f) {
          return new f(m.deepMap2(e, s.valueOf(), w));
        }
        if (x(e)) {
          return w(+e, s);
        }
        if (x(s)) {
          return w(e, +s);
        }
        throw new n.error.UnsupportedTypeError("multiply", e, s);
      };
    };
  }, {"../../type/Complex":208, "../../type/Matrix":211, "../../type/Unit":213, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 141:[function(e, n) {
    n.exports = function(n) {
      function t(e, t) {
        var r = n.log(e), i = n.multiply(r, t);
        return n.exp(i);
      }
      var r = e("../../util/index"), i = e("bignumber.js"), o = e("../../type/Complex"), a = e("../../type/Matrix"), s = (e("../../type/collection"), r.array), u = r.number.isNumber, c = r.number.toNumber, f = r.number.toBigNumber, l = r["boolean"].isBoolean, m = Array.isArray, p = r.number.isInteger, h = o.isComplex;
      n.pow = function g(e, r) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("pow", arguments.length, 2);
        }
        if (u(e)) {
          if (u(r)) {
            return p(r) || e >= 0 ? Math.pow(e, r) : t(new o(e, 0), new o(r, 0));
          }
          if (h(r)) {
            return t(new o(e, 0), r);
          }
        }
        if (h(e)) {
          if (u(r)) {
            return t(e, new o(r, 0));
          }
          if (h(r)) {
            return t(e, r);
          }
        }
        if (e instanceof i) {
          return u(r) ? r = f(r) : l(r) && (r = new i(r ? 1 : 0)), r instanceof i ? e.pow(r) : g(c(e), r);
        }
        if (r instanceof i) {
          return u(e) ? e = f(e) : l(e) && (e = new i(e ? 1 : 0)), e instanceof i ? e.pow(r) : g(e, c(r));
        }
        if (m(e)) {
          if (!u(r) || (!p(r) || 0 > r)) {
            throw new TypeError("For A^b, b must be a positive integer (value is " + r + ")");
          }
          var d = s.size(e);
          if (2 != d.length) {
            throw new Error("For A^b, A must be 2 dimensional (A has " + d.length + " dimensions)");
          }
          if (d[0] != d[1]) {
            throw new Error("For A^b, A must be square (size is " + d[0] + "x" + d[1] + ")");
          }
          if (0 == r) {
            return n.eye(d[0]);
          }
          for (var x = e, y = 1;r > y;y++) {
            x = n.multiply(e, x);
          }
          return x;
        }
        if (e instanceof a) {
          return new a(g(e.valueOf(), r));
        }
        if (l(e)) {
          return g(+e, r);
        }
        if (l(r)) {
          return g(e, +r);
        }
        throw new n.error.UnsupportedTypeError("pow", e, r);
      };
    };
  }, {"../../type/Complex":208, "../../type/Matrix":211, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 142:[function(e, n) {
    n.exports = function(n) {
      function t(e, n) {
        if (n) {
          var t = Math.pow(10, n);
          return Math.round(e * t) / t;
        }
        return Math.round(e);
      }
      var r = e("../../util/index"), i = e("bignumber.js"), o = e("../../type/Complex"), a = e("../../type/collection"), s = r.number.isNumber, u = r.number.isInteger, c = r["boolean"].isBoolean, f = o.isComplex, l = a.isCollection;
      n.round = function m(e, r) {
        if (1 != arguments.length && 2 != arguments.length) {
          throw new n.error.ArgumentsError("round", arguments.length, 1, 2);
        }
        if (void 0 == r) {
          if (s(e)) {
            return Math.round(e);
          }
          if (f(e)) {
            return new o(Math.round(e.re), Math.round(e.im));
          }
          if (e instanceof i) {
            return e.round();
          }
          if (l(e)) {
            return a.deepMap(e, m);
          }
          if (c(e)) {
            return Math.round(e);
          }
          throw new n.error.UnsupportedTypeError("round", e);
        }
        if (r instanceof i && (r = parseFloat(r.valueOf())), !s(r) || !u(r)) {
          throw new TypeError("Number of decimals in function round must be an integer");
        }
        if (0 > r || r > 9) {
          throw new Error("Number of decimals in function round must be in te range of 0-9");
        }
        if (s(e)) {
          return t(e, r);
        }
        if (f(e)) {
          return new o(t(e.re, r), t(e.im, r));
        }
        if (e instanceof i && s(r)) {
          return e.round(r);
        }
        if (l(e) || l(r)) {
          return a.deepMap2(e, r, m);
        }
        if (c(e)) {
          return m(+e, r);
        }
        if (c(r)) {
          return m(e, +r);
        }
        throw new n.error.UnsupportedTypeError("round", e, r);
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 143:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/collection"), a = t.number, s = t.number.isNumber, u = t["boolean"].isBoolean, c = i.isComplex, f = o.isCollection;
      n.sign = function l(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("sign", arguments.length, 1);
        }
        if (s(e)) {
          return a.sign(e);
        }
        if (c(e)) {
          var t = Math.sqrt(e.re * e.re + e.im * e.im);
          return new i(e.re / t, e.im / t);
        }
        if (e instanceof r) {
          return new r(e.cmp(0));
        }
        if (f(e)) {
          return o.deepMap(e, l);
        }
        if (u(e)) {
          return a.sign(e);
        }
        throw new n.error.UnsupportedTypeError("sign", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 144:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/Unit"), a = e("../../type/collection"), s = t.number.isNumber, u = t.number.toNumber, c = t.number.toBigNumber, f = t["boolean"].isBoolean, l = t.string.isString, m = i.isComplex, p = o.isUnit, h = a.isCollection;
      n.smaller = function g(e, t) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("smaller", arguments.length, 2);
        }
        if (s(e) && s(t)) {
          return t > e;
        }
        if (e instanceof r) {
          return s(t) ? t = c(t) : f(t) && (t = new r(t ? 1 : 0)), t instanceof r ? e.lt(t) : g(u(e), t);
        }
        if (t instanceof r) {
          return s(e) ? e = c(e) : f(e) && (e = new r(e ? 1 : 0)), e instanceof r ? e.lt(t) : g(e, u(t));
        }
        if (p(e) && p(t)) {
          if (!e.equalBase(t)) {
            throw new Error("Cannot compare units with different base");
          }
          return e.value < t.value;
        }
        if (l(e) || l(t)) {
          return t > e;
        }
        if (h(e) || h(t)) {
          return a.deepMap2(e, t, g);
        }
        if (f(e)) {
          return g(+e, t);
        }
        if (f(t)) {
          return g(e, +t);
        }
        if (m(e) || m(t)) {
          throw new TypeError("No ordering relation is defined for complex numbers");
        }
        throw new n.error.UnsupportedTypeError("smaller", e, t);
      };
    };
  }, {"../../type/Complex":208, "../../type/Unit":213, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 145:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/Unit"), a = e("../../type/collection"), s = t.number.isNumber, u = t.number.toNumber, c = t.number.toBigNumber, f = t["boolean"].isBoolean, l = t.string.isString, m = i.isComplex, p = o.isUnit, h = a.isCollection;
      n.smallereq = function g(e, t) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("smallereq", arguments.length, 2);
        }
        if (s(e) && s(t)) {
          return t >= e;
        }
        if (e instanceof r) {
          return s(t) ? t = c(t) : f(t) && (t = new r(t ? 1 : 0)), t instanceof r ? e.lte(t) : g(u(e), t);
        }
        if (t instanceof r) {
          return s(e) ? e = c(e) : f(e) && (e = new r(e ? 1 : 0)), e instanceof r ? e.lte(t) : g(e, u(t));
        }
        if (p(e) && p(t)) {
          if (!e.equalBase(t)) {
            throw new Error("Cannot compare units with different base");
          }
          return e.value <= t.value;
        }
        if (l(e) || l(t)) {
          return t >= e;
        }
        if (h(e) || h(t)) {
          return a.deepMap2(e, t, g);
        }
        if (f(e)) {
          return g(+e, t);
        }
        if (f(t)) {
          return g(e, +t);
        }
        if (m(e) || m(t)) {
          throw new TypeError("No ordering relation is defined for complex numbers");
        }
        throw new n.error.UnsupportedTypeError("smallereq", e, t);
      };
    };
  }, {"../../type/Complex":208, "../../type/Unit":213, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 146:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/collection"), a = t.number.isNumber, s = t["boolean"].isBoolean, u = i.isComplex, c = o.isCollection;
      n.sqrt = function f(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("sqrt", arguments.length, 1);
        }
        if (a(e)) {
          return e >= 0 ? Math.sqrt(e) : f(new i(e, 0));
        }
        if (u(e)) {
          var t = Math.sqrt(e.re * e.re + e.im * e.im);
          return e.im >= 0 ? new i(0.5 * Math.sqrt(2 * (t + e.re)), 0.5 * Math.sqrt(2 * (t - e.re))) : new i(0.5 * Math.sqrt(2 * (t + e.re)), -0.5 * Math.sqrt(2 * (t - e.re)));
        }
        if (e instanceof r) {
          return e.sqrt();
        }
        if (c(e)) {
          return o.deepMap(e, f);
        }
        if (s(e)) {
          return f(+e);
        }
        throw new n.error.UnsupportedTypeError("sqrt", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 147:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/collection"), a = t.number.isNumber, s = t["boolean"].isBoolean, u = i.isComplex, c = o.isCollection;
      n.square = function f(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("square", arguments.length, 1);
        }
        if (a(e)) {
          return e * e;
        }
        if (u(e)) {
          return n.multiply(e, e);
        }
        if (e instanceof r) {
          return e.times(e);
        }
        if (c(e)) {
          return o.deepMap(e, f);
        }
        if (s(e)) {
          return e * e;
        }
        throw new n.error.UnsupportedTypeError("square", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 148:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = (e("../../type/Matrix"), e("../../type/Unit")), a = e("../../type/collection"), s = t.number.toNumber, u = t.number.toBigNumber, c = t["boolean"].isBoolean, f = t.number.isNumber, l = i.isComplex, m = o.isUnit, p = a.isCollection;
      n.subtract = function h(e, t) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("subtract", arguments.length, 2);
        }
        if (f(e)) {
          if (f(t)) {
            return e - t;
          }
          if (l(t)) {
            return new i(e - t.re, -t.im);
          }
        } else {
          if (l(e)) {
            if (f(t)) {
              return new i(e.re - t, e.im);
            }
            if (l(t)) {
              return new i(e.re - t.re, e.im - t.im);
            }
          }
        }
        if (e instanceof r) {
          return f(t) ? t = u(t) : c(t) && (t = new r(t ? 1 : 0)), t instanceof r ? e.minus(t) : h(s(e), t);
        }
        if (t instanceof r) {
          return f(e) ? e = u(e) : c(e) && (e = new r(e ? 1 : 0)), e instanceof r ? e.minus(t) : h(e, s(t));
        }
        if (m(e) && m(t)) {
          if (!e.equalBase(t)) {
            throw new Error("Units do not match");
          }
          if (null == e.value) {
            throw new Error("Unit on left hand side of operator - has an undefined value");
          }
          if (null == t.value) {
            throw new Error("Unit on right hand side of operator - has an undefined value");
          }
          var o = e.clone();
          return o.value -= t.value, o.fixPrefix = !1, o;
        }
        if (p(e) || p(t)) {
          return a.deepMap2(e, t, h);
        }
        if (c(e)) {
          return h(+e, t);
        }
        if (c(t)) {
          return h(e, +t);
        }
        throw new n.error.UnsupportedTypeError("subtract", e, t);
      };
    };
  }, {"../../type/Complex":208, "../../type/Matrix":211, "../../type/Unit":213, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 149:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/Unit"), a = e("../../type/collection"), s = t.number.isNumber, u = t["boolean"].isBoolean, c = i.isComplex, f = o.isUnit, l = a.isCollection;
      n.unary = function m(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("unary", arguments.length, 1);
        }
        if (s(e)) {
          return-e;
        }
        if (c(e)) {
          return new i(-e.re, -e.im);
        }
        if (e instanceof r) {
          return e.neg();
        }
        if (f(e)) {
          var t = e.clone();
          return t.value = -e.value, t;
        }
        if (l(e)) {
          return a.deepMap(e, m);
        }
        if (u(e)) {
          return-e;
        }
        throw new n.error.UnsupportedTypeError("unary", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/Unit":213, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 150:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/Unit"), a = e("../../type/collection"), s = t.number.isNumber, u = t.number.toNumber, c = t.number.toBigNumber, f = t["boolean"].isBoolean, l = t.string.isString, m = i.isComplex, p = o.isUnit, h = a.isCollection;
      n.unequal = function g(e, t) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("unequal", arguments.length, 2);
        }
        if (s(e)) {
          if (s(t)) {
            return e != t;
          }
          if (m(t)) {
            return e != t.re || 0 != t.im;
          }
        }
        if (m(e)) {
          if (s(t)) {
            return e.re != t || 0 != e.im;
          }
          if (m(t)) {
            return e.re != t.re || e.im != t.im;
          }
        }
        if (e instanceof r) {
          return s(t) ? t = c(t) : f(t) && (t = new r(t ? 1 : 0)), t instanceof r ? !e.eq(t) : g(u(e), t);
        }
        if (t instanceof r) {
          return s(e) ? e = c(e) : f(e) && (e = new r(e ? 1 : 0)), e instanceof r ? !e.eq(t) : g(e, u(t));
        }
        if (p(e) && p(t)) {
          if (!e.equalBase(t)) {
            throw new Error("Cannot compare units with different base");
          }
          return e.value != t.value;
        }
        if (l(e) || l(t)) {
          return e != t;
        }
        if (h(e) || h(t)) {
          return a.deepMap2(e, t, g);
        }
        if (f(e)) {
          return g(+e, t);
        }
        if (f(t)) {
          return g(e, +t);
        }
        throw new n.error.UnsupportedTypeError("unequal", e, t);
      };
    };
  }, {"../../type/Complex":208, "../../type/Unit":213, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 151:[function(e, n) {
    n.exports = function(n) {
      function t(e, n) {
        for (var t, r, i, o = 0, a = 1, s = 1, u = 0;n;) {
          r = Math.floor(e / n), i = e % n, t = o, o = a - r * o, a = t, t = s, s = u - r * s, u = t, e = n, n = i;
        }
        return 0 > e ? [-e, e ? -a : 0, -u] : [e, e ? a : 0, u];
      }
      var r = e("../../util/index"), i = e("bignumber.js"), o = r.number.toNumber, a = r.number.isNumber, s = r["boolean"].isBoolean, u = r.number.isInteger;
      n.xgcd = function c(e, r) {
        if (2 == arguments.length) {
          if (a(e) && a(r)) {
            if (!u(e) || !u(r)) {
              throw new Error("Parameters in function xgcd must be integer numbers");
            }
            return t(e, r);
          }
          if (e instanceof i) {
            return c(o(e), r);
          }
          if (r instanceof i) {
            return c(e, o(r));
          }
          if (s(e)) {
            return c(+e, r);
          }
          if (s(r)) {
            return c(e, +r);
          }
          throw new n.error.UnsupportedTypeError("xgcd", e, r);
        }
        throw new SyntaxError("Function xgcd expects two arguments");
      };
    };
  }, {"../../util/index":218, "bignumber.js":223}], 152:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/collection"), a = t.number.isNumber, s = t["boolean"].isBoolean, u = o.isCollection, c = i.isComplex;
      n.arg = function f(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("arg", arguments.length, 1);
        }
        if (a(e)) {
          return Math.atan2(0, e);
        }
        if (c(e)) {
          return Math.atan2(e.im, e.re);
        }
        if (u(e)) {
          return o.deepMap(e, f);
        }
        if (s(e)) {
          return f(+e);
        }
        if (e instanceof r) {
          return f(t.number.toNumber(e));
        }
        throw new n.error.UnsupportedTypeError("arg", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 153:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/collection"), a = t.object, s = t.number.isNumber, u = t["boolean"].isBoolean, c = o.isCollection, f = i.isComplex;
      n.conj = function l(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("conj", arguments.length, 1);
        }
        return s(e) ? e : e instanceof r ? new r(e) : f(e) ? new i(e.re, -e.im) : c(e) ? o.deepMap(e, l) : u(e) ? +e : a.clone(e);
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 154:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/collection"), a = t.number.isNumber, s = t["boolean"].isBoolean, u = o.isCollection, c = i.isComplex;
      n.im = function f(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("im", arguments.length, 1);
        }
        return a(e) ? 0 : e instanceof r ? new r(0) : c(e) ? e.im : u(e) ? o.deepMap(e, f) : s(e) ? 0 : 0;
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 155:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/collection"), a = t.object, s = t.number.isNumber, u = t["boolean"].isBoolean, c = o.isCollection, f = i.isComplex;
      n.re = function l(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("re", arguments.length, 1);
        }
        return s(e) ? e : e instanceof r ? new r(e) : f(e) ? e.re : c(e) ? o.deepMap(e, l) : u(e) ? +e : a.clone(e);
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 156:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/collection"), o = i.isCollection, a = t.number.isNumber, s = t.string.isString, u = t["boolean"].isBoolean;
      "function" != typeof r.prototype.clone && (r.prototype.clone = function() {
        return new r(this);
      }), n.bignumber = function c(e) {
        if (arguments.length > 1) {
          throw new n.error.ArgumentsError("bignumber", arguments.length, 0, 1);
        }
        if (e instanceof r || (a(e) || s(e))) {
          return new r(e);
        }
        if (u(e)) {
          return new r(+e);
        }
        if (o(e)) {
          return i.deepMap(e, c);
        }
        if (0 == arguments.length) {
          return new r(0);
        }
        throw new n.error.UnsupportedTypeError("bignumber", e);
      };
    };
  }, {"../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 157:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/collection"), o = i.isCollection, a = t.number.isNumber, s = t.string.isString;
      n["boolean"] = function u(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("boolean", arguments.length, 0, 1);
        }
        if ("true" === e || e === !0) {
          return!0;
        }
        if ("false" === e || e === !1) {
          return!1;
        }
        if (e instanceof Boolean) {
          return e ? !0 : !1;
        }
        if (a(e)) {
          return 0 !== e;
        }
        if (e instanceof r) {
          return!e.isZero();
        }
        if (s(e)) {
          var t = e.toLowerCase();
          if ("true" === t) {
            return!0;
          }
          if ("false" === t) {
            return!1;
          }
          var c = Number(e);
          if ("" != e && !isNaN(c)) {
            return 0 !== c;
          }
        }
        if (o(e)) {
          return i.deepMap(e, u);
        }
        throw new SyntaxError(e.toString() + " is no valid boolean");
      };
    };
  }, {"../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 158:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/collection"), a = o.isCollection, s = t.number.isNumber, u = t.number.toNumber, c = t.string.isString, f = i.isComplex;
      n.complex = function l() {
        switch(arguments.length) {
          case 0:
            return new i(0, 0);
          case 1:
            var e = arguments[0];
            if (s(e)) {
              return new i(e, 0);
            }
            if (e instanceof r) {
              return new i(u(e), 0);
            }
            if (f(e)) {
              return e.clone();
            }
            if (c(e)) {
              var t = i.parse(e);
              if (t) {
                return t;
              }
              throw new SyntaxError('String "' + e + '" is no valid complex number');
            }
            if (a(e)) {
              return o.deepMap(e, l);
            }
            throw new TypeError("Two numbers or a single string expected in function complex");;
          case 2:
            var m = arguments[0], p = arguments[1];
            if (m instanceof r && (m = u(m)), p instanceof r && (p = u(p)), s(m) && s(p)) {
              return new i(m, p);
            }
            throw new TypeError("Two numbers or a single string expected in function complex");;
          default:
            throw new n.error.ArgumentsError("complex", arguments.length, 0, 2);;
        }
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 159:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Index"), o = t.number.toNumber;
      n.index = function() {
        var e = new i, n = Array.prototype.slice.apply(arguments).map(function(e) {
          return e instanceof r ? o(e) : Array.isArray(e) ? e.map(function(e) {
            return e instanceof r ? o(e) : e;
          }) : e;
        });
        return i.apply(e, n), e;
      };
    };
  }, {"../../type/Index":210, "../../util/index":218, "bignumber.js":223}], 160:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../type/Matrix");
      n.matrix = function(e) {
        if (arguments.length > 1) {
          throw new n.error.ArgumentsError("matrix", arguments.length, 0, 1);
        }
        return new t(e);
      };
    };
  }, {"../../type/Matrix":211}], 161:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/collection"), o = i.isCollection, a = t.number.toNumber;
      n.number = function s(e) {
        switch(arguments.length) {
          case 0:
            return 0;
          case 1:
            if (o(e)) {
              return i.deepMap(e, s);
            }
            if (e instanceof r) {
              return a(e);
            }
            var t = Number(e);
            if (isNaN(t) && (t = Number(e.valueOf())), isNaN(t)) {
              throw new SyntaxError(e.toString() + " is no valid number");
            }
            return t;
          default:
            throw new n.error.ArgumentsError("number", arguments.length, 0, 1);;
        }
      };
    };
  }, {"../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 162:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../expression/Parser");
      n.parser = function() {
        return new t(n);
      };
    };
  }, {"../../expression/Parser":4}], 163:[function(e, n) {
    n.exports = function(e) {
      e.select = function(n) {
        return new e.chaining.Selector(n);
      };
    };
  }, {}], 164:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("../../type/collection"), i = t.number, o = t.number.isNumber, a = r.isCollection;
      n.string = function s(e) {
        switch(arguments.length) {
          case 0:
            return "";
          case 1:
            return o(e) ? i.format(e) : a(e) ? r.deepMap(e, s) : null === e ? "null" : e.toString();
          default:
            throw new n.error.ArgumentsError("string", arguments.length, 0, 1);;
        }
      };
    };
  }, {"../../type/collection":214, "../../util/index":218}], 165:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Unit"), o = e("../../type/collection"), a = o.isCollection, s = t.number.toNumber, u = t.string.isString;
      n.unit = function c(e) {
        switch(arguments.length) {
          case 1:
            var t = arguments[0];
            if (t instanceof i) {
              return t.clone();
            }
            if (u(t)) {
              if (i.isPlainUnit(t)) {
                return new i(null, t);
              }
              var f = i.parse(t);
              if (f) {
                return f;
              }
              throw new SyntaxError('String "' + t + '" is no valid unit');
            }
            if (a(e)) {
              return o.deepMap(e, c);
            }
            throw new TypeError("A string or a number and string expected in function unit");;
          case 2:
            return arguments[0] instanceof r ? new i(s(arguments[0]), arguments[1]) : new i(arguments[0], arguments[1]);
          default:
            throw new n.error.ArgumentsError("unit", arguments.length, 1, 2);;
        }
      };
    };
  }, {"../../type/Unit":213, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 166:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("../../type/collection"), i = t.string.isString, o = r.isCollection;
      n.eval = function(e, t) {
        if (1 != arguments.length && 2 != arguments.length) {
          throw new n.error.ArgumentsError("eval", arguments.length, 1, 2);
        }
        if (t = t || {}, i(e)) {
          return n.parse(e).compile(n).eval(t);
        }
        if (o(e)) {
          return r.deepMap(e, function(e) {
            return n.parse(e).compile(n).eval(t);
          });
        }
        throw new TypeError("String or matrix expected");
      };
    };
  }, {"../../type/collection":214, "../../util/index":218}], 167:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../type/Help");
      n.help = function(e) {
        if (1 != arguments.length) {
          throw new SyntaxError("Wrong number of arguments in function help (" + arguments.length + " provided, 1 expected)");
        }
        var r = null;
        if (e instanceof String || "string" == typeof e) {
          r = e;
        } else {
          var i;
          for (i in n) {
            if (n.hasOwnProperty(i) && e === n[i]) {
              r = i;
              break;
            }
          }
          if (!r) {
            for (i in n.type) {
              if (n.type.hasOwnProperty(i) && e === n.type[i]) {
                r = i;
                break;
              }
            }
          }
        }
        if (r) {
          var o = n.expression.docs[r];
          if (!o) {
            throw new Error('No documentation found on "' + r + '"');
          }
          return new t(n, o);
        }
        throw new Error('Could not find search term "' + e + '"');
      };
    };
  }, {"../../type/Help":209}], 168:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../expression/parse");
      n.parse = function() {
        return t.apply(t, arguments);
      };
    };
  }, {"../../expression/parse":120}], 169:[function(e, n) {
    n.exports = function(n) {
      function t(e, n, r, i) {
        if (r > i) {
          if (e.length != n.length) {
            throw new Error("Dimensions mismatch (" + e.length + " !\x3d " + n.length + ")");
          }
          for (var o = [], a = 0;a < e.length;a++) {
            o[a] = t(e[a], n[a], r, i + 1);
          }
          return o;
        }
        return e.concat(n);
      }
      var r = e("../../util/index"), i = e("../../type/Matrix"), o = e("../../type/collection"), a = r.object, s = r.array, u = r.number.isNumber, c = r.number.isInteger, f = o.isCollection;
      n.concat = function() {
        var e, r, o = arguments.length, l = -1, m = !1, p = [];
        for (e = 0;o > e;e++) {
          var h = arguments[e];
          if (h instanceof i && (m = !0), e == o - 1 && u(h)) {
            if (r = l, l = h, !c(l) || 0 > l) {
              throw new TypeError("Dimension number must be a positive integer (dim \x3d " + l + ")");
            }
            if (e > 0 && l > r) {
              throw new RangeError("Dimension out of range (" + l + " \x3e " + r + ")");
            }
          } else {
            if (!f(h)) {
              throw new n.error.UnsupportedTypeError("concat", h);
            }
            var g = a.clone(h).valueOf(), d = s.size(h.valueOf());
            if (p[e] = g, r = l, l = d.length - 1, e > 0 && l != r) {
              throw new RangeError("Dimension mismatch (" + r + " !\x3d " + l + ")");
            }
          }
        }
        if (0 == p.length) {
          throw new SyntaxError("At least one matrix expected");
        }
        for (var x = p.shift();p.length;) {
          x = t(x, p.shift(), l, 0);
        }
        return m ? new i(x) : x;
      };
    };
  }, {"../../type/Matrix":211, "../../type/collection":214, "../../util/index":218}], 170:[function(e, n) {
    n.exports = function(n) {
      function t(e, t, r) {
        if (1 == t) {
          return e[0][0];
        }
        if (2 == t) {
          return n.subtract(n.multiply(e[0][0], e[1][1]), n.multiply(e[1][0], e[0][1]));
        }
        for (var o = 1, a = 0, s = 0;t > s && !(a >= r);s++) {
          for (var u = s;0 == e[u][a];) {
            if (u++, u == t && (u = s, a++, a == r)) {
              return i.deepEqual(e, eye(t).valueOf()) ? n.round(o, 6) : 0;
            }
          }
          if (u != s) {
            for (var c = 0;r > c;c++) {
              var f = e[u][c];
              e[u][c] = e[s][c], e[s][c] = f;
            }
            o *= -1;
          }
          for (var l = e[s][a], c = 0;r > c;c++) {
            e[s][c] = e[s][c] / l;
          }
          o *= l;
          for (var m = 0;t > m;m++) {
            if (m != s) {
              for (var p = e[m][a], c = 0;r > c;c++) {
                e[m][c] = e[m][c] - e[s][c] * p;
              }
            }
          }
          a++;
        }
        return i.deepEqual(e, n.eye(t).valueOf()) ? n.round(o, 6) : 0;
      }
      var r = e("../../util/index"), i = (e("../../type/Matrix"), r.object), o = r.array, a = r.string;
      n.det = function(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("det", arguments.length, 1);
        }
        var r = o.size(e.valueOf());
        switch(r.length) {
          case 0:
            return i.clone(e);
          case 1:
            if (1 == r[0]) {
              return i.clone(e.valueOf()[0]);
            }
            throw new RangeError("Matrix must be square (size: " + a.format(r) + ")");;
          case 2:
            var s = r[0], u = r[1];
            if (s == u) {
              return t(e.valueOf(), s, u);
            }
            throw new RangeError("Matrix must be square (size: " + a.format(r) + ")");;
          default:
            throw new RangeError("Matrix must be two dimensional (size: " + a.format(r) + ")");;
        }
      };
    };
  }, {"../../type/Matrix":211, "../../util/index":218}], 171:[function(e, n) {
    n.exports = function(n, t) {
      var r = e("../../util/index"), i = e("../../type/Matrix"), o = (e("../../type/collection"), r.object), a = r.array.isArray, s = r.number.isNumber, u = r.number.isInteger;
      n.diag = function(e, r) {
        var c, f, l, m;
        if (1 != arguments.length && 2 != arguments.length) {
          throw new n.error.ArgumentsError("diag", arguments.length, 1, 2);
        }
        if (r) {
          if (!s(r) || !u(r)) {
            throw new TypeError("Second parameter in function diag must be an integer");
          }
        } else {
          r = 0;
        }
        var p = r > 0 ? r : 0, h = 0 > r ? -r : 0;
        if (e instanceof i) {
        } else {
          if (!a(e)) {
            throw new TypeError("First parameter in function diag must be a Matrix or Array");
          }
          e = new i(e);
        }
        var g = e.size();
        switch(g.length) {
          case 1:
            f = e.valueOf();
            var d = new i, x = 0;
            for (d.resize([f.length + h, f.length + p], x), c = d.valueOf(), m = f.length, l = 0;m > l;l++) {
              c[l + h][l + p] = o.clone(f[l]);
            }
            return "array" === t.matrix ? d.valueOf() : d;
          case 2:
            for (f = [], c = e.valueOf(), m = Math.min(g[0] - h, g[1] - p), l = 0;m > l;l++) {
              f[l] = o.clone(c[l + h][l + p]);
            }
            return "array" === t.matrix ? f : new i(f);
          default:
            throw new RangeError("Matrix for function diag must be 2 dimensional");;
        }
      };
    };
  }, {"../../type/Matrix":211, "../../type/collection":214, "../../util/index":218}], 172:[function(e, n) {
    n.exports = function(n, t) {
      var r = e("../../util/index"), i = e("bignumber.js"), o = e("../../type/Matrix"), a = e("../../type/collection"), s = r.number.toNumber, u = r.number.isNumber, c = r.number.isInteger, f = Array.isArray;
      n.eye = function(e) {
        var r = a.argsToArray(arguments), l = e instanceof o ? !0 : f(e) ? !1 : "matrix" === t.matrix;
        if (0 == r.length) {
          return l ? new o : [];
        }
        if (1 == r.length) {
          r[1] = r[0];
        } else {
          if (r.length > 2) {
            throw new n.error.ArgumentsError("eye", r.length, 0, 2);
          }
        }
        var m = r[0] instanceof i, p = r[0], h = r[1];
        if (p instanceof i && (p = s(p)), h instanceof i && (h = s(h)), !u(p) || (!c(p) || 1 > p)) {
          throw new Error("Parameters in function eye must be positive integers");
        }
        if (h && (!u(h) || (!c(h) || 1 > h))) {
          throw new Error("Parameters in function eye must be positive integers");
        }
        var g = new o, d = m ? new i(1) : 1, x = m ? new i(0) : 0;
        g.resize(r.map(s), x);
        for (var y = n.min(r), b = g.valueOf(), v = 0;y > v;v++) {
          b[v][v] = d;
        }
        return l ? g : g.valueOf();
      };
    };
  }, {"../../type/Matrix":211, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 173:[function(e, n) {
    n.exports = function(n) {
      function t(e, t, r) {
        var i, o, a, s, u;
        if (1 == t) {
          if (s = e[0][0], 0 == s) {
            throw Error("Cannot calculate inverse, determinant is zero");
          }
          return[[n.divide(1, s)]];
        }
        if (2 == t) {
          var c = n.det(e);
          if (0 == c) {
            throw Error("Cannot calculate inverse, determinant is zero");
          }
          return[[n.divide(e[1][1], c), n.divide(n.unary(e[0][1]), c)], [n.divide(n.unary(e[1][0]), c), n.divide(e[0][0], c)]];
        }
        var f = e.concat();
        for (i = 0;t > i;i++) {
          f[i] = f[i].concat();
        }
        for (var l = n.eye(t).valueOf(), m = 0;r > m;m++) {
          for (i = m;t > i && 0 == f[i][m];) {
            i++;
          }
          if (i == t || 0 == f[i][m]) {
            throw Error("Cannot calculate inverse, determinant is zero");
          }
          i != m && (u = f[m], f[m] = f[i], f[i] = u, u = l[m], l[m] = l[i], l[i] = u);
          var p = f[m], h = l[m];
          for (i = 0;t > i;i++) {
            var g = f[i], d = l[i];
            if (i != m) {
              if (0 != g[m]) {
                for (a = n.divide(n.unary(g[m]), p[m]), o = m;r > o;o++) {
                  g[o] = n.add(g[o], n.multiply(a, p[o]));
                }
                for (o = 0;r > o;o++) {
                  d[o] = n.add(d[o], n.multiply(a, h[o]));
                }
              }
            } else {
              for (a = p[m], o = m;r > o;o++) {
                g[o] = n.divide(g[o], a);
              }
              for (o = 0;r > o;o++) {
                d[o] = n.divide(d[o], a);
              }
            }
          }
        }
        return l;
      }
      var r = e("../../util/string"), i = e("../../type/Matrix");
      e("../../type/collection");
      n.inv = function(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("inv", arguments.length, 1);
        }
        var o = n.size(e).valueOf();
        switch(o.length) {
          case 0:
            return n.divide(1, e);
          case 1:
            if (1 == o[0]) {
              return e instanceof i ? new i([n.divide(1, e.valueOf()[0])]) : [n.divide(1, e[0])];
            }
            throw new RangeError("Matrix must be square (size: " + r.format(o) + ")");;
          case 2:
            var a = o[0], s = o[1];
            if (a == s) {
              return e instanceof i ? new i(t(e.valueOf(), a, s)) : t(e, a, s);
            }
            throw new RangeError("Matrix must be square (size: " + r.format(o) + ")");;
          default:
            throw new RangeError("Matrix must be two dimensional (size: " + r.format(o) + ")");;
        }
      };
    };
  }, {"../../type/Matrix":211, "../../type/collection":214, "../../util/string":221}], 174:[function(e, n) {
    n.exports = function(n, t) {
      var r = e("../../util/index"), i = e("bignumber.js"), o = e("../../type/Matrix"), a = e("../../type/collection"), s = r.array, u = r.number.toNumber, c = Array.isArray;
      n.ones = function(e) {
        var n = a.argsToArray(arguments), r = e instanceof o ? !0 : c(e) ? !1 : "matrix" === t.matrix;
        if (0 == n.length) {
          return r ? new o : [];
        }
        var f = [], l = n[0] instanceof i ? new i(1) : 1;
        return f = s.resize(f, n.map(u), l), r ? new o(f) : f;
      };
    };
  }, {"../../type/Matrix":211, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 175:[function(e, n) {
    n.exports = function(n, t) {
      function r(e, n, t) {
        var r = [], i = e;
        if (t > 0) {
          for (;n > i;) {
            r.push(i), i += t;
          }
        } else {
          if (0 > t) {
            for (;i > n;) {
              r.push(i), i += t;
            }
          }
        }
        return r;
      }
      function i(e, n, t) {
        var r = [], i = e;
        if (t > 0) {
          for (;n >= i;) {
            r.push(i), i += t;
          }
        } else {
          if (0 > t) {
            for (;i >= n;) {
              r.push(i), i += t;
            }
          }
        }
        return r;
      }
      function o(e, n, t) {
        var r = [], i = e.clone(), o = new c(0);
        if (t.gt(o)) {
          for (;i.lt(n);) {
            r.push(i), i = i.plus(t);
          }
        } else {
          if (t.lt(o)) {
            for (;i.gt(n);) {
              r.push(i), i = i.plus(t);
            }
          }
        }
        return r;
      }
      function a(e, n, t) {
        var r = [], i = e.clone(), o = new c(0);
        if (t.gt(o)) {
          for (;i.lte(n);) {
            r.push(i), i = i.plus(t);
          }
        } else {
          if (t.lt(o)) {
            for (;i.gte(n);) {
              r.push(i), i = i.plus(t);
            }
          }
        }
        return r;
      }
      function s(e) {
        var n = e.split(":"), r = null;
        if ("bignumber" === t.number) {
          try {
            r = n.map(function(e) {
              return new c(e);
            });
          } catch (i) {
            return null;
          }
        } else {
          r = n.map(function(e) {
            return parseFloat(e);
          });
          var o = r.some(function(e) {
            return isNaN(e);
          });
          if (o) {
            return null;
          }
        }
        switch(r.length) {
          case 2:
            return{start:r[0], end:r[1], step:1};
          case 3:
            return{start:r[0], end:r[2], step:r[1]};
          default:
            return null;
        }
      }
      var u = e("../../util/index"), c = e("bignumber.js"), f = e("../../type/Matrix"), l = (e("../../type/collection"), u["boolean"].isBoolean), m = u.string.isString, p = u.number.isNumber, h = u.number.toNumber, g = u.number.toBigNumber;
      n.range = function() {
        var e, u, d, x = Array.prototype.slice.call(arguments), y = !1;
        switch(l(x[x.length - 1]) && (y = x.pop() ? !0 : !1), x.length) {
          case 1:
            if (!m(x[0])) {
              throw new TypeError("Two or three numbers or a single string expected in function range");
            }
            var b = s(x[0]);
            if (!b) {
              throw new SyntaxError('String "' + b + '" is no valid range');
            }
            e = b.start, u = b.end, d = b.step;
            break;
          case 2:
            e = x[0], u = x[1], d = 1;
            break;
          case 3:
            e = x[0], u = x[1], d = x[2];
            break;
          default:
            throw new n.error.ArgumentsError("range", arguments.length, 2, 4);;
        }
        if (!(p(e) || e instanceof c)) {
          throw new TypeError("Parameter start must be a number");
        }
        if (!(p(u) || u instanceof c)) {
          throw new TypeError("Parameter end must be a number");
        }
        if (!(p(d) || d instanceof c)) {
          throw new TypeError("Parameter step must be a number");
        }
        if (!l(y)) {
          throw new TypeError("Parameter includeEnd must be a boolean");
        }
        if (e instanceof c || (u instanceof c || d instanceof c)) {
          var v = !0;
          e instanceof c || (e = g(e)), u instanceof c || (u = g(u)), d instanceof c || (d = g(d)), e instanceof c && (u instanceof c && d instanceof c) || (v = !1, e = h(e), u = h(u), d = h(d));
        }
        var w = v ? y ? a : o : y ? i : r, E = w(e, u, d);
        return "array" === t.matrix ? E : new f(E);
      };
    };
  }, {"../../type/Matrix":211, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 176:[function(e, n) {
    n.exports = function(n, t) {
      function r(e, n, t) {
        if (void 0 !== t) {
          if (!c(t) || 1 !== t.length) {
            throw new TypeError("Single character expected as defaultValue");
          }
        } else {
          t = " ";
        }
        if (1 !== n.length) {
          throw new Error("Dimension mismatch: (" + n.length + " !\x3d 1)");
        }
        var r = n[0];
        if (!l(r) || !m(r)) {
          throw new TypeError("Size must contain numbers");
        }
        if (e.length > r) {
          return e.substring(0, r);
        }
        if (e.length < r) {
          for (var i = e, o = 0, a = r - e.length;a > o;o++) {
            i += t;
          }
          return i;
        }
        return e;
      }
      var i = e("../../util/index"), o = e("bignumber.js"), a = e("../../type/Matrix"), s = i.array, u = i.object.clone, c = i.string.isString, f = i.number.toNumber, l = i.number.isNumber, m = i.number.isInteger, p = s.isArray;
      n.resize = function(e, i, l) {
        if (2 != arguments.length && 3 != arguments.length) {
          throw new n.error.ArgumentsError("resize", arguments.length, 2, 3);
        }
        var m = e instanceof a ? !0 : p(e) ? !1 : "array" !== t.matrix;
        if (e instanceof a && (e = e.valueOf()), i instanceof a && (i = i.valueOf()), i.length && (i[0] instanceof o && (i = i.map(f))), c(e)) {
          return r(e, i, l);
        }
        if (0 == i.length) {
          for (;p(e);) {
            e = e[0];
          }
          return u(e);
        }
        p(e) || (e = [e]), e = u(e);
        var h = s.resize(e, i, l);
        return m ? new a(h) : h;
      };
    };
  }, {"../../type/Matrix":211, "../../util/index":218, "bignumber.js":223}], 177:[function(e, n) {
    n.exports = function(n, t) {
      var r = e("../../util/index"), i = e("bignumber.js"), o = e("../../type/Complex"), a = e("../../type/Unit"), s = e("../../type/Matrix"), u = r.array, c = r.number.isNumber, f = r["boolean"].isBoolean, l = r.string.isString, m = o.isComplex, p = a.isUnit;
      n.size = function(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("size", arguments.length, 1);
        }
        var r = "array" === t.matrix;
        if (c(e) || (m(e) || (p(e) || (f(e) || (null == e || e instanceof i))))) {
          return r ? [] : new s([]);
        }
        if (l(e)) {
          return r ? [e.length] : new s([e.length]);
        }
        if (Array.isArray(e)) {
          return u.size(e);
        }
        if (e instanceof s) {
          return new s(e.size());
        }
        throw new n.error.UnsupportedTypeError("size", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/Matrix":211, "../../type/Unit":213, "../../util/index":218, "bignumber.js":223}], 178:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("../../type/Matrix"), i = t.object, o = t.array, a = Array.isArray;
      n.squeeze = function(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("squeeze", arguments.length, 1);
        }
        if (a(e)) {
          return o.squeeze(i.clone(e));
        }
        if (e instanceof r) {
          var t = o.squeeze(e.toArray());
          return a(t) ? new r(t) : t;
        }
        return i.clone(e);
      };
    };
  }, {"../../type/Matrix":211, "../../util/index":218}], 179:[function(e, n) {
    n.exports = function(n) {
      function t(e, t) {
        var i, o;
        if (l(e)) {
          return i = new s(e), o = i.subset(t), o.valueOf();
        }
        if (e instanceof s) {
          return e.subset(t);
        }
        if (f(e)) {
          return r(e, t);
        }
        throw new n.error.UnsupportedTypeError("subset", e);
      }
      function r(e, n) {
        if (!(n instanceof u)) {
          throw new TypeError("Index expected");
        }
        if (1 != n.size().length) {
          throw new RangeError("Dimension mismatch (" + n.size().length + " !\x3d 1)");
        }
        var t = n.range(0), r = "", i = e.length;
        return t.forEach(function(n) {
          c.validateIndex(n, i), r += e.charAt(n);
        }), r;
      }
      function i(e, t, r, i) {
        var a;
        if (l(e)) {
          return a = new s(n.clone(e)), a.subset(t, r, i), a.valueOf();
        }
        if (e instanceof s) {
          return e.clone().subset(t, r, i);
        }
        if (f(e)) {
          return o(e, t, r, i);
        }
        throw new n.error.UnsupportedTypeError("subset", e);
      }
      function o(e, n, t, r) {
        if (!(n instanceof u)) {
          throw new TypeError("Index expected");
        }
        if (1 != n.size().length) {
          throw new RangeError("Dimension mismatch (" + n.size().length + " !\x3d 1)");
        }
        if (void 0 !== r) {
          if (!f(r) || 1 !== r.length) {
            throw new TypeError("Single character expected as defaultValue");
          }
        } else {
          r = " ";
        }
        var i = n.range(0), o = i.size()[0];
        if (o != t.length) {
          throw new RangeError("Dimension mismatch (" + i.size()[0] + " !\x3d " + t.length + ")");
        }
        for (var a = e.length, s = [], l = 0;a > l;l++) {
          s[l] = e.charAt(l);
        }
        if (i.forEach(function(e, n) {
          c.validateIndex(e), s[e] = t.charAt(n);
        }), s.length > a) {
          for (l = a - 1, o = s.length;o > l;l++) {
            s[l] || (s[l] = r);
          }
        }
        return s.join("");
      }
      var a = e("../../util/index"), s = e("../../type/Matrix"), u = e("../../type/Index"), c = a.array, f = a.string.isString, l = Array.isArray;
      n.subset = function() {
        switch(arguments.length) {
          case 2:
            return t(arguments[0], arguments[1]);
          case 3:
          ;
          case 4:
            return i(arguments[0], arguments[1], arguments[2], arguments[3]);
          default:
            throw new n.error.ArgumentsError("subset", arguments.length, 2, 4);;
        }
      };
    };
  }, {"../../type/Index":210, "../../type/Matrix":211, "../../util/index":218}], 180:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("../../type/Matrix"), i = (e("../../type/collection"), t.object), o = t.string;
      n.transpose = function(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("transpose", arguments.length, 1);
        }
        var t = n.size(e).valueOf();
        switch(t.length) {
          case 0:
            return i.clone(e);
          case 1:
            return i.clone(e);
          case 2:
            var a, s = t[1], u = t[0], c = e instanceof r, f = e.valueOf(), l = [], m = i.clone;
            if (0 === s) {
              throw new RangeError("Cannot transpose a 2D matrix with no rows(size: " + o.format(t) + ")");
            }
            for (var p = 0;s > p;p++) {
              a = l[p] = [];
              for (var h = 0;u > h;h++) {
                a[h] = m(f[h][p]);
              }
            }
            return 0 == u && (l[0] = []), c ? new r(l) : l;
          default:
            throw new RangeError("Matrix must be two dimensional (size: " + o.format(t) + ")");;
        }
      };
    };
  }, {"../../type/Matrix":211, "../../type/collection":214, "../../util/index":218}], 181:[function(e, n) {
    n.exports = function(n, t) {
      var r = e("../../util/index"), i = e("bignumber.js"), o = e("../../type/Matrix"), a = e("../../type/collection"), s = r.array, u = r.number.toNumber, c = Array.isArray;
      n.zeros = function(e) {
        var n = a.argsToArray(arguments), r = e instanceof o ? !0 : c(e) ? !1 : "matrix" === t.matrix;
        if (0 == n.length) {
          return r ? new o : [];
        }
        var f = [], l = n[0] instanceof i ? new i(0) : 0;
        return f = s.resize(f, n.map(u), l), r ? new o(f) : f;
      };
    };
  }, {"../../type/Matrix":211, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 182:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = (e("../../type/collection"), t.number.isNumber), o = t.number.isInteger, a = t.number.toBigNumber;
      n.combinations = function(e, t) {
        var u = arguments.length;
        if (2 != u) {
          throw new n.error.ArgumentsError("combinations", arguments.length, 2);
        }
        if (i(e)) {
          if (!o(e) || 0 > e) {
            throw new TypeError("Positive integer value enpected in function combinations");
          }
          if (t > e) {
            throw new TypeError("k must be less than or equal to n");
          }
          return Math.floor(n.factorial(e) / (n.factorial(t) * n.factorial(e - t)));
        }
        if (e instanceof r) {
          if (t = a(t), !(t instanceof r && (s(e) && s(t)))) {
            throw new TypeError("Positive integer value expected in function combinations");
          }
          if (t.gt(e)) {
            throw new TypeError("k must be less than n in function combinations");
          }
          return n.floor(n.divide(n.factorial(e), n.multiply(n.factorial(t), n.factorial(n.subtract(e, t)))));
        }
        throw new n.error.UnsupportedTypeError("combinations", e);
      };
      var s = function(e) {
        return e.round().equals(e) && e.gte(0);
      };
    };
  }, {"../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 183:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/collection"), o = t.number.isNumber, a = t["boolean"].isBoolean, s = t.number.isInteger, u = i.isCollection;
      n.factorial = function f(e) {
        var t, l;
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("factorial", arguments.length, 1);
        }
        if (o(e)) {
          if (!s(e) || 0 > e) {
            throw new TypeError("Positive integer value expected in function factorial");
          }
          for (t = e - 1, l = e;t > 1;) {
            l *= t, t--;
          }
          return 0 == l && (l = 1), l;
        }
        if (e instanceof r) {
          if (!c(e)) {
            throw new TypeError("Positive integer value expected in function factorial");
          }
          var m = new r(1);
          for (t = e.minus(m), l = e;t.gt(m);) {
            l = l.times(t), t = t.minus(m);
          }
          return l.equals(0) && (l = m), l;
        }
        if (a(e)) {
          return 1;
        }
        if (u(e)) {
          return i.deepMap(e, f);
        }
        throw new n.error.UnsupportedTypeError("factorial", e);
      };
      var c = function(e) {
        return e.round().equals(e) && e.gte(0);
      };
    };
  }, {"../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 184:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = t.number.isNumber, o = t.number.isInteger, a = t.number.toBigNumber;
      n.permutations = function(e, t) {
        var u = arguments.length;
        if (u > 2) {
          throw new n.error.ArgumentsError("permutations", arguments.length, 2);
        }
        if (i(e)) {
          if (!o(e) || 0 > e) {
            throw new TypeError("Positive integer value enpected in function permutations");
          }
          if (1 == u) {
            return n.factorial(e);
          }
          if (2 == u && i(t)) {
            if (!o(t) || 0 > t) {
              throw new TypeError("Positive integer value enpected in function permutations");
            }
            if (t > e) {
              throw new TypeError("second argument k must be less than or equal to first argument n");
            }
            return Math.floor(n.factorial(e) / n.factorial(e - t));
          }
        }
        if (e instanceof r) {
          if (void 0 === t && s(e)) {
            return n.factorial(e);
          }
          if (t = a(t), !(t instanceof r && (s(e) && s(t)))) {
            throw new TypeError("Positive integer value expected in function permutations");
          }
          if (t.gt(e)) {
            throw new TypeError("second argument k must be less than or equal to first argument n");
          }
          return n.floor(n.divide(n.factorial(e), n.factorial(n.subtract(e, t))));
        }
        throw new n.error.UnsupportedTypeError("permutations", e);
      };
      var s = function(e) {
        return e.round().equals(e) && e.gte(0);
      };
    };
  }, {"../../util/index":218, "bignumber.js":223}], 185:[function(e, n) {
    n.exports = function(n, t) {
      var r = e("../../type/Matrix"), i = (e("../../type/collection"), {uniform:function() {
        return Math.random;
      }, normal:function() {
        return function() {
          for (var e, n, t = -1;0 > t || t > 1;) {
            e = Math.random(), n = Math.random(), t = 1 / 6 * Math.pow(-2 * Math.log(e), 0.5) * Math.cos(2 * Math.PI * n) + 0.5;
          }
          return t;
        };
      }});
      n.distribution = function(e) {
        if (!i.hasOwnProperty(e)) {
          throw new Error("unknown distribution " + e);
        }
        var o = Array.prototype.slice.call(arguments, 1), a = i[e].apply(this, o);
        return function(e) {
          var i = {random:function(e, i, a) {
            var u, c, f;
            if (arguments.length > 3) {
              throw new n.error.ArgumentsError("random", arguments.length, 0, 3);
            }
            if (1 === arguments.length ? Array.isArray(e) ? u = e : f = e : 2 === arguments.length ? Array.isArray(e) ? u = e : (c = e, f = i) : (u = e, c = i, f = a), void 0 === f && (f = 1), void 0 === c && (c = 0), void 0 !== u) {
              var l = s(u, c, f, o);
              return "array" === t.matrix ? l : new r(l);
            }
            return o(c, f);
          }, randomInt:function(e, i, o) {
            var u, c, f;
            if (arguments.length > 3 || arguments.length < 1) {
              throw new n.error.ArgumentsError("randomInt", arguments.length, 1, 3);
            }
            if (1 === arguments.length ? f = e : 2 === arguments.length ? "[object Array]" === Object.prototype.toString.call(e) ? u = e : (c = e, f = i) : (u = e, c = i, f = o), void 0 === c && (c = 0), void 0 !== u) {
              var l = s(u, c, f, a);
              return "array" === t.matrix ? l : new r(l);
            }
            return a(c, f);
          }, pickRandom:function(e) {
            if (1 !== arguments.length) {
              throw new n.error.ArgumentsError("pickRandom", arguments.length, 1);
            }
            if (!Array.isArray(e)) {
              throw new n.error.UnsupportedTypeError("pickRandom", e);
            }
            return e[Math.floor(Math.random() * e.length)];
          }}, o = function(n, t) {
            return n + e() * (t - n);
          }, a = function(n, t) {
            return Math.floor(n + e() * (t - n));
          }, s = function(e, n, t, r) {
            var i, o, a = [];
            if (e = e.slice(0), e.length > 1) {
              for (o = 0, i = e.shift();i > o;o++) {
                a.push(s(e, n, t, r));
              }
            } else {
              for (o = 0, i = e.shift();i > o;o++) {
                a.push(r(n, t));
              }
            }
            return a;
          };
          return i;
        }(a);
      };
      var o = n.distribution("uniform");
      n.random = o.random, n.randomInt = o.randomInt, n.pickRandom = o.pickRandom;
    };
  }, {"../../type/Matrix":211, "../../type/collection":214}], 186:[function(e, n) {
    n.exports = function(n) {
      function t(e, t) {
        return n.larger(e, t) ? e : t;
      }
      function r(e) {
        var t = null;
        if (i.deepForEach(e, function(e) {
          (null === t || n.larger(e, t)) && (t = e);
        }), null === t) {
          throw new Error("Cannot calculate max of an empty array");
        }
        return t;
      }
      var i = (e("../../type/Matrix"), e("../../type/collection")), o = i.isCollection;
      n.max = function(e) {
        if (0 == arguments.length) {
          throw new SyntaxError("Function max requires one or more parameters (0 provided)");
        }
        if (o(e)) {
          if (1 == arguments.length) {
            return r(e);
          }
          if (2 == arguments.length) {
            return i.reduce(arguments[0], arguments[1], t);
          }
          throw new SyntaxError("Wrong number of parameters");
        }
        return r(arguments);
      };
    };
  }, {"../../type/Matrix":211, "../../type/collection":214}], 187:[function(e, n) {
    n.exports = function(n) {
      function t(e, t) {
        var r;
        return r = i.reduce(e, t, n.add), n.divide(r, size(e)[t]);
      }
      function r(e) {
        var t = 0, r = 0;
        if (i.deepForEach(e, function(e) {
          t = n.add(t, e), r++;
        }), 0 === r) {
          throw new Error("Cannot calculate mean of an empty array");
        }
        return n.divide(t, r);
      }
      var i = (e("../../type/Matrix"), e("../../type/collection")), o = i.isCollection;
      n.mean = function(e) {
        if (0 == arguments.length) {
          throw new SyntaxError("Function mean requires one or more parameters (0 provided)");
        }
        if (o(e)) {
          if (1 == arguments.length) {
            return r(e);
          }
          if (2 == arguments.length) {
            return t(arguments[0], arguments[1]);
          }
          throw new SyntaxError("Wrong number of parameters");
        }
        return r(arguments);
      };
    };
  }, {"../../type/Matrix":211, "../../type/collection":214}], 188:[function(e, n) {
    n.exports = function(n) {
      function t(e, t) {
        return n.smaller(e, t) ? e : t;
      }
      function r(e) {
        var t = null;
        if (i.deepForEach(e, function(e) {
          (null === t || n.smaller(e, t)) && (t = e);
        }), null === t) {
          throw new Error("Cannot calculate min of an empty array");
        }
        return t;
      }
      var i = (e("../../type/Matrix"), e("../../type/collection")), o = i.isCollection;
      n.min = function(e) {
        if (0 == arguments.length) {
          throw new SyntaxError("Function min requires one or more parameters (0 provided)");
        }
        if (o(e)) {
          if (1 == arguments.length) {
            return r(e);
          }
          if (2 == arguments.length) {
            return i.reduce(arguments[0], arguments[1], t);
          }
          throw new SyntaxError("Wrong number of parameters");
        }
        return r(arguments);
      };
    };
  }, {"../../type/Matrix":211, "../../type/collection":214}], 189:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/collection"), a = t.number.isNumber, s = t["boolean"].isBoolean, u = i.isComplex, c = o.isCollection;
      n.acos = function f(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("acos", arguments.length, 1);
        }
        if (a(e)) {
          return e >= -1 && 1 >= e ? Math.acos(e) : f(new i(e, 0));
        }
        if (u(e)) {
          var l, m = new i(e.im * e.im - e.re * e.re + 1, -2 * e.re * e.im), p = n.sqrt(m);
          l = p instanceof i ? new i(p.re - e.im, p.im + e.re) : new i(p - e.im, e.re);
          var h = n.log(l);
          return h instanceof i ? new i(1.5707963267948966 - h.im, h.re) : new i(1.5707963267948966, h);
        }
        if (c(e)) {
          return o.deepMap(e, f);
        }
        if (s(e)) {
          return Math.acos(e);
        }
        if (e instanceof r) {
          return f(t.number.toNumber(e));
        }
        throw new n.error.UnsupportedTypeError("acos", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 190:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/collection"), a = t.number.isNumber, s = t["boolean"].isBoolean, u = i.isComplex, c = o.isCollection;
      n.asin = function f(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("asin", arguments.length, 1);
        }
        if (a(e)) {
          return e >= -1 && 1 >= e ? Math.asin(e) : f(new i(e, 0));
        }
        if (u(e)) {
          var l, m = e.re, p = e.im, h = new i(p * p - m * m + 1, -2 * m * p), g = n.sqrt(h);
          l = g instanceof i ? new i(g.re - p, g.im + m) : new i(g - p, m);
          var d = n.log(l);
          return d instanceof i ? new i(d.im, -d.re) : new i(0, -d);
        }
        if (c(e)) {
          return o.deepMap(e, f);
        }
        if (s(e)) {
          return Math.asin(e);
        }
        if (e instanceof r) {
          return f(t.number.toNumber(e));
        }
        throw new n.error.UnsupportedTypeError("asin", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 191:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/collection"), a = t.number.isNumber, s = t["boolean"].isBoolean, u = i.isComplex, c = o.isCollection;
      n.atan = function f(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("atan", arguments.length, 1);
        }
        if (a(e)) {
          return Math.atan(e);
        }
        if (u(e)) {
          var l = e.re, m = e.im, p = l * l + (1 - m) * (1 - m), h = new i((1 - m * m - l * l) / p, -2 * l / p), g = n.log(h);
          return g instanceof i ? new i(-0.5 * g.im, 0.5 * g.re) : new i(0, 0.5 * g);
        }
        if (c(e)) {
          return o.deepMap(e, f);
        }
        if (s(e)) {
          return Math.atan(e);
        }
        if (e instanceof r) {
          return f(t.number.toNumber(e));
        }
        throw new n.error.UnsupportedTypeError("atan", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 192:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/collection"), a = t.number.toNumber, s = t.number.isNumber, u = t["boolean"].isBoolean, c = i.isComplex, f = o.isCollection;
      n.atan2 = function l(e, t) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("atan2", arguments.length, 2);
        }
        if (s(e)) {
          if (s(t)) {
            return Math.atan2(e, t);
          }
        } else {
          if (c(e) && s(t)) {
            return Math.atan2(e.re, t);
          }
        }
        if (f(e) || f(t)) {
          return o.deepMap2(e, t, l);
        }
        if (u(e)) {
          return l(+e, t);
        }
        if (u(t)) {
          return l(e, +t);
        }
        if (e instanceof r) {
          return l(a(e), t);
        }
        if (t instanceof r) {
          return l(e, a(t));
        }
        throw new n.error.UnsupportedTypeError("atan2", e, t);
      };
    };
  }, {"../../type/Complex":208, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 193:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/Unit"), a = e("../../type/collection"), s = t.number.isNumber, u = t["boolean"].isBoolean, c = i.isComplex, f = o.isUnit, l = a.isCollection;
      n.cos = function m(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("cos", arguments.length, 1);
        }
        if (s(e)) {
          return Math.cos(e);
        }
        if (c(e)) {
          return new i(0.5 * Math.cos(e.re) * (Math.exp(-e.im) + Math.exp(e.im)), 0.5 * Math.sin(e.re) * (Math.exp(-e.im) - Math.exp(e.im)));
        }
        if (f(e)) {
          if (!e.hasBase(o.BASE_UNITS.ANGLE)) {
            throw new TypeError("Unit in function cos is no angle");
          }
          return Math.cos(e.value);
        }
        if (l(e)) {
          return a.deepMap(e, m);
        }
        if (u(e)) {
          return Math.cos(e);
        }
        if (e instanceof r) {
          return m(t.number.toNumber(e));
        }
        throw new n.error.UnsupportedTypeError("cos", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/Unit":213, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 194:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/Unit"), a = e("../../type/collection"), s = t.number.isNumber, u = t["boolean"].isBoolean, c = i.isComplex, f = o.isUnit, l = a.isCollection;
      n.cot = function m(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("cot", arguments.length, 1);
        }
        if (s(e)) {
          return 1 / Math.tan(e);
        }
        if (c(e)) {
          var p = Math.exp(-4 * e.im) - 2 * Math.exp(-2 * e.im) * Math.cos(2 * e.re) + 1;
          return new i(2 * Math.exp(-2 * e.im) * Math.sin(2 * e.re) / p, (Math.exp(-4 * e.im) - 1) / p);
        }
        if (f(e)) {
          if (!e.hasBase(o.BASE_UNITS.ANGLE)) {
            throw new TypeError("Unit in function cot is no angle");
          }
          return 1 / Math.tan(e.value);
        }
        if (l(e)) {
          return a.deepMap(e, m);
        }
        if (u(e)) {
          return m(+e);
        }
        if (e instanceof r) {
          return m(t.number.toNumber(e));
        }
        throw new n.error.UnsupportedTypeError("cot", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/Unit":213, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 195:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/Unit"), a = e("../../type/collection"), s = t.number.isNumber, u = t["boolean"].isBoolean, c = i.isComplex, f = o.isUnit, l = a.isCollection;
      n.csc = function m(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("csc", arguments.length, 1);
        }
        if (s(e)) {
          return 1 / Math.sin(e);
        }
        if (c(e)) {
          var p = 0.25 * (Math.exp(-2 * e.im) + Math.exp(2 * e.im)) - 0.5 * Math.cos(2 * e.re);
          return new i(0.5 * Math.sin(e.re) * (Math.exp(-e.im) + Math.exp(e.im)) / p, 0.5 * Math.cos(e.re) * (Math.exp(-e.im) - Math.exp(e.im)) / p);
        }
        if (f(e)) {
          if (!e.hasBase(o.BASE_UNITS.ANGLE)) {
            throw new TypeError("Unit in function csc is no angle");
          }
          return 1 / Math.sin(e.value);
        }
        if (l(e)) {
          return a.deepMap(e, m);
        }
        if (u(e)) {
          return m(+e);
        }
        if (e instanceof r) {
          return m(t.number.toNumber(e));
        }
        throw new n.error.UnsupportedTypeError("csc", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/Unit":213, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 196:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/Unit"), a = e("../../type/collection"), s = t.number.isNumber, u = t["boolean"].isBoolean, c = i.isComplex, f = o.isUnit, l = a.isCollection;
      n.sec = function m(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("sec", arguments.length, 1);
        }
        if (s(e)) {
          return 1 / Math.cos(e);
        }
        if (c(e)) {
          var p = 0.25 * (Math.exp(-2 * e.im) + Math.exp(2 * e.im)) + 0.5 * Math.cos(2 * e.re);
          return new i(0.5 * Math.cos(e.re) * (Math.exp(-e.im) + Math.exp(e.im)) / p, 0.5 * Math.sin(e.re) * (Math.exp(e.im) - Math.exp(-e.im)) / p);
        }
        if (f(e)) {
          if (!e.hasBase(o.BASE_UNITS.ANGLE)) {
            throw new TypeError("Unit in function sec is no angle");
          }
          return 1 / Math.cos(e.value);
        }
        if (l(e)) {
          return a.deepMap(e, m);
        }
        if (u(e)) {
          return m(+e);
        }
        if (e instanceof r) {
          return m(t.number.toNumber(e));
        }
        throw new n.error.UnsupportedTypeError("sec", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/Unit":213, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 197:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/Unit"), a = e("../../type/collection"), s = t.number.isNumber, u = t["boolean"].isBoolean, c = i.isComplex, f = o.isUnit, l = a.isCollection;
      n.sin = function m(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("sin", arguments.length, 1);
        }
        if (s(e)) {
          return Math.sin(e);
        }
        if (c(e)) {
          return new i(0.5 * Math.sin(e.re) * (Math.exp(-e.im) + Math.exp(e.im)), 0.5 * Math.cos(e.re) * (Math.exp(e.im) - Math.exp(-e.im)));
        }
        if (f(e)) {
          if (!e.hasBase(o.BASE_UNITS.ANGLE)) {
            throw new TypeError("Unit in function sin is no angle");
          }
          return Math.sin(e.value);
        }
        if (l(e)) {
          return a.deepMap(e, m);
        }
        if (u(e)) {
          return Math.sin(e);
        }
        if (e instanceof r) {
          return m(t.number.toNumber(e));
        }
        throw new n.error.UnsupportedTypeError("sin", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/Unit":213, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 198:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/Unit"), a = e("../../type/collection"), s = t.number.isNumber, u = t["boolean"].isBoolean, c = i.isComplex, f = o.isUnit, l = a.isCollection;
      n.tan = function m(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("tan", arguments.length, 1);
        }
        if (s(e)) {
          return Math.tan(e);
        }
        if (c(e)) {
          var p = Math.exp(-4 * e.im) + 2 * Math.exp(-2 * e.im) * Math.cos(2 * e.re) + 1;
          return new i(2 * Math.exp(-2 * e.im) * Math.sin(2 * e.re) / p, (1 - Math.exp(-4 * e.im)) / p);
        }
        if (f(e)) {
          if (!e.hasBase(o.BASE_UNITS.ANGLE)) {
            throw new TypeError("Unit in function tan is no angle");
          }
          return Math.tan(e.value);
        }
        if (l(e)) {
          return a.deepMap(e, m);
        }
        if (u(e)) {
          return Math.tan(e);
        }
        if (e instanceof r) {
          return m(t.number.toNumber(e));
        }
        throw new n.error.UnsupportedTypeError("tan", e);
      };
    };
  }, {"../../type/Complex":208, "../../type/Unit":213, "../../type/collection":214, "../../util/index":218, "bignumber.js":223}], 199:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/index"), r = e("../../type/Unit"), i = e("../../type/collection"), o = t.string.isString, a = r.isUnit, s = i.isCollection;
      n.to = function u(e, t) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("to", arguments.length, 2);
        }
        if (a(e) && (a(t) || o(t))) {
          return e.to(t);
        }
        if (s(e) || s(t)) {
          return i.deepMap2(e, t, u);
        }
        throw new n.error.UnsupportedTypeError("to", e, t);
      };
    };
  }, {"../../type/Unit":213, "../../type/collection":214, "../../util/index":218}], 200:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/object");
      n.clone = function(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("clone", arguments.length, 1);
        }
        return t.clone(e);
      };
    };
  }, {"../../util/object":220}], 201:[function(e, n) {
    n.exports = function(n) {
      function t(e, n) {
        var t = [], r = function(i, o) {
          Array.isArray(i) ? i.forEach(function(e, n) {
            t[o] = n, r(e, o + 1);
          }) : n(i, t, e);
        };
        r(e, 0);
      }
      var r = e("../../type/Matrix").isMatrix;
      n.forEach = function(e, i) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("forEach", arguments.length, 2);
        }
        if (Array.isArray(e)) {
          return t(e, i);
        }
        if (r(e)) {
          return e.forEach(i);
        }
        throw new n.error.UnsupportedTypeError("forEach", e);
      };
    };
  }, {"../../type/Matrix":211}], 202:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/string");
      n.format = function(e, r) {
        var i = arguments.length;
        if (1 !== i && 2 !== i) {
          throw new n.error.ArgumentsError("format", i, 1, 2);
        }
        return t.format(e, r);
      };
    };
  }, {"../../util/string":221}], 203:[function(e, n) {
    n.exports = function(n) {
      function t(e, t, r) {
        (r.override || void 0 === n[e]) && (n[e] = r.wrap && "function" == typeof t ? function() {
          for (var e = [], r = 0, i = arguments.length;i > r;r++) {
            e[r] = arguments[r].valueOf();
          }
          return t.apply(n, e);
        } : t, n.chaining.Selector.createProxy(e, t));
      }
      function r(e) {
        return "function" == typeof e || (s(e) || (u(e) || (c(e) || f(e))));
      }
      var i = e("../../util/index"), o = e("../../type/Complex"), a = e("../../type/Unit"), s = i.number.isNumber, u = i.string.isString, c = o.isComplex, f = a.isUnit;
      n["import"] = function l(o, a) {
        var s, c = {override:!1, wrap:!0};
        if (a && (a instanceof Object && i.object.extend(c, a)), u(o)) {
          if ("undefined" == typeof e) {
            throw new Error("Cannot load file: require not available.");
          }
          var f = e(o);
          l(f);
        } else {
          if (r(o)) {
            if (s = o.name, !s) {
              throw new Error("Cannot import an unnamed function or object");
            }
            (c.override || void 0 === n[s]) && t(s, o, c);
          } else {
            if (o instanceof Object) {
              for (s in o) {
                if (o.hasOwnProperty(s)) {
                  var m = o[s];
                  r(m) ? t(s, m, c) : l(m);
                }
              }
            }
          }
        }
      };
    };
  }, {"../../type/Complex":208, "../../type/Unit":213, "../../util/index":218}], 204:[function(e, n) {
    n.exports = function(n) {
      function t(e, n) {
        var t = [], r = function(i, o) {
          return Array.isArray(i) ? i.map(function(e, n) {
            return t[o] = n, r(e, o + 1);
          }) : n(i, t, e);
        };
        return r(e, 0);
      }
      var r = e("../../type/Matrix").isMatrix;
      n.map = function(e, i) {
        if (2 != arguments.length) {
          throw new n.error.ArgumentsError("map", arguments.length, 2);
        }
        if (Array.isArray(e)) {
          return t(e, i);
        }
        if (r(e)) {
          return e.map(i);
        }
        throw new n.error.UnsupportedTypeError("map", e);
      };
    };
  }, {"../../type/Matrix":211}], 205:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/string"), r = t.isString;
      n.print = function(e, t, i) {
        var o = arguments.length;
        if (2 != o && 3 != o) {
          throw new n.error.ArgumentsError("print", o, 2, 3);
        }
        if (!r(e)) {
          throw new TypeError("String expected as first parameter in function format");
        }
        if (!(t instanceof Object)) {
          throw new TypeError("Object expected as second parameter in function format");
        }
        return e.replace(/\$([\w\.]+)/g, function(e, o) {
          for (var a = o.split("."), s = t[a.shift()];a.length && void 0 !== s;) {
            var u = a.shift();
            s = u ? s[u] : s + ".";
          }
          return void 0 !== s ? r(s) ? s : n.format(s, i) : e;
        });
      };
    };
  }, {"../../util/string":221}], 206:[function(e, n) {
    n.exports = function(n) {
      var t = e("../../util/types"), r = e("bignumber.js"), i = e("../../type/Complex"), o = e("../../type/Matrix"), a = e("../../type/Unit"), s = e("../../type/Index"), u = e("../../type/Range"), c = e("../../type/Help");
      n["typeof"] = function(e) {
        if (1 != arguments.length) {
          throw new n.error.ArgumentsError("typeof", arguments.length, 1);
        }
        var f = t.type(e);
        if ("object" === f) {
          if (e instanceof i) {
            return "complex";
          }
          if (e instanceof r) {
            return "bignumber";
          }
          if (e instanceof o) {
            return "matrix";
          }
          if (e instanceof a) {
            return "unit";
          }
          if (e instanceof s) {
            return "index";
          }
          if (e instanceof u) {
            return "range";
          }
          if (e instanceof c) {
            return "matrix";
          }
          if (e instanceof n.chaining.Selector) {
            return "selector";
          }
        }
        return f;
      };
    };
  }, {"../../type/Complex":208, "../../type/Help":209, "../../type/Index":210, "../../type/Matrix":211, "../../type/Range":212, "../../type/Unit":213, "../../util/types":222, "bignumber.js":223}], 207:[function(e, n) {
    function t(n) {
      if ("function" != typeof Array.prototype.map) {
        throw new Error("ES5 not supported by this JavaScript engine. Please load the es5-shim library for compatibility.");
      }
      var t = {}, i = {matrix:"matrix", number:"number"};
      return t.config = function(n) {
        var t = e("bignumber.js");
        if (n) {
          if (r.deepExtend(i, n), n.decimals && t.config({DECIMAL_PLACES:n.decimals}), n.number && n.number.defaultType) {
            throw new Error("setting `number.defaultType` is deprecated. Use `number` instead.");
          }
          if (n.number && n.number.precision) {
            throw new Error("setting `number.precision` is deprecated. Use `decimals` instead.");
          }
          if (n.matrix && n.matrix.defaultType) {
            throw new Error("setting `matrix.defaultType` is deprecated. Use `matrix` instead.");
          }
          if (n.matrix && n.matrix["default"]) {
            throw new Error("setting `matrix.default` is deprecated. Use `matrix` instead.");
          }
        }
        var o = r.clone(i);
        return o.decimals = t.config().DECIMAL_PLACES, o;
      }, t.config(n), t.expression = {}, t.expression.node = e("./expression/node/index.js"), t.expression.parse = e("./expression/parse.js"), t.expression.Scope = function() {
        throw new Error("Scope is deprecated. Use a regular Object instead");
      }, t.expression.Parser = e("./expression/Parser.js"), t.expression.docs = e("./expression/docs/index.js"), t.type = {}, t.type.BigNumber = e("bignumber.js"), t.type.Complex = e("./type/Complex"), t.type.Range = e("./type/Range"), t.type.Index = e("./type/Index"), t.type.Matrix = e("./type/Matrix"), t.type.Unit = e("./type/Unit"), t.type.Help = e("./type/Help"), t.collection = e("./type/collection"), e("./type/error")(t), e("./function/expression/eval.js")(t, i), e("./function/expression/help.js")(t, 
      i), e("./function/expression/parse.js")(t, i), e("./function/arithmetic/abs.js")(t, i), e("./function/arithmetic/add.js")(t, i), e("./function/arithmetic/ceil.js")(t, i), e("./function/arithmetic/cube.js")(t, i), e("./function/arithmetic/divide.js")(t, i), e("./function/arithmetic/edivide.js")(t, i), e("./function/arithmetic/emultiply.js")(t, i), e("./function/arithmetic/epow.js")(t, i), e("./function/arithmetic/equal.js")(t, i), e("./function/arithmetic/exp.js")(t, i), e("./function/arithmetic/fix.js")(t, 
      i), e("./function/arithmetic/floor.js")(t, i), e("./function/arithmetic/gcd.js")(t, i), e("./function/arithmetic/larger.js")(t, i), e("./function/arithmetic/largereq.js")(t, i), e("./function/arithmetic/lcm.js")(t, i), e("./function/arithmetic/log.js")(t, i), e("./function/arithmetic/log10.js")(t, i), e("./function/arithmetic/mod.js")(t, i), e("./function/arithmetic/multiply.js")(t, i), e("./function/arithmetic/pow.js")(t, i), e("./function/arithmetic/round.js")(t, i), e("./function/arithmetic/sign.js")(t, 
      i), e("./function/arithmetic/smaller.js")(t, i), e("./function/arithmetic/smallereq.js")(t, i), e("./function/arithmetic/sqrt.js")(t, i), e("./function/arithmetic/square.js")(t, i), e("./function/arithmetic/subtract.js")(t, i), e("./function/arithmetic/unary.js")(t, i), e("./function/arithmetic/unequal.js")(t, i), e("./function/arithmetic/xgcd.js")(t, i), e("./function/complex/arg.js")(t, i), e("./function/complex/conj.js")(t, i), e("./function/complex/re.js")(t, i), e("./function/complex/im.js")(t, 
      i), e("./function/construction/bignumber")(t, i), e("./function/construction/boolean.js")(t, i), e("./function/construction/complex.js")(t, i), e("./function/construction/index.js")(t, i), e("./function/construction/matrix.js")(t, i), e("./function/construction/number.js")(t, i), e("./function/construction/parser.js")(t, i), e("./function/construction/select.js")(t, i), e("./function/construction/string.js")(t, i), e("./function/construction/unit.js")(t, i), e("./function/matrix/concat.js")(t, 
      i), e("./function/matrix/det.js")(t, i), e("./function/matrix/diag.js")(t, i), e("./function/matrix/eye.js")(t, i), e("./function/matrix/inv.js")(t, i), e("./function/matrix/ones.js")(t, i), e("./function/matrix/range.js")(t, i), e("./function/matrix/resize.js")(t, i), e("./function/matrix/size.js")(t, i), e("./function/matrix/squeeze.js")(t, i), e("./function/matrix/subset.js")(t, i), e("./function/matrix/transpose.js")(t, i), e("./function/matrix/zeros.js")(t, i), e("./function/probability/factorial.js")(t, 
      i), e("./function/probability/random.js")(t, i), e("./function/probability/permutations.js")(t, i), e("./function/probability/combinations.js")(t, i), e("./function/statistics/min.js")(t, i), e("./function/statistics/max.js")(t, i), e("./function/statistics/mean.js")(t, i), e("./function/trigonometry/acos.js")(t, i), e("./function/trigonometry/asin.js")(t, i), e("./function/trigonometry/atan.js")(t, i), e("./function/trigonometry/atan2.js")(t, i), e("./function/trigonometry/cos.js")(t, i), 
      e("./function/trigonometry/cot.js")(t, i), e("./function/trigonometry/csc.js")(t, i), e("./function/trigonometry/sec.js")(t, i), e("./function/trigonometry/sin.js")(t, i), e("./function/trigonometry/tan.js")(t, i), e("./function/units/to.js")(t, i), e("./function/utils/clone.js")(t, i), e("./function/utils/format.js")(t, i), e("./function/utils/import.js")(t, i), e("./function/utils/map.js")(t, i), e("./function/utils/print.js")(t, i), e("./function/utils/typeof.js")(t, i), e("./function/utils/forEach.js")(t, 
      i), e("./constants.js")(t, i), t.chaining = {}, t.chaining.Selector = e("./chaining/Selector.js")(t, i), t;
    }
    var r = e("./util/object");
    n.exports = t;
  }, {"./chaining/Selector.js":2, "./constants.js":3, "./expression/Parser.js":4, "./expression/docs/index.js":104, "./expression/node/index.js":119, "./expression/parse.js":120, "./function/arithmetic/abs.js":121, "./function/arithmetic/add.js":122, "./function/arithmetic/ceil.js":123, "./function/arithmetic/cube.js":124, "./function/arithmetic/divide.js":125, "./function/arithmetic/edivide.js":126, "./function/arithmetic/emultiply.js":127, "./function/arithmetic/epow.js":128, "./function/arithmetic/equal.js":129, 
  "./function/arithmetic/exp.js":130, "./function/arithmetic/fix.js":131, "./function/arithmetic/floor.js":132, "./function/arithmetic/gcd.js":133, "./function/arithmetic/larger.js":134, "./function/arithmetic/largereq.js":135, "./function/arithmetic/lcm.js":136, "./function/arithmetic/log.js":137, "./function/arithmetic/log10.js":138, "./function/arithmetic/mod.js":139, "./function/arithmetic/multiply.js":140, "./function/arithmetic/pow.js":141, "./function/arithmetic/round.js":142, "./function/arithmetic/sign.js":143, 
  "./function/arithmetic/smaller.js":144, "./function/arithmetic/smallereq.js":145, "./function/arithmetic/sqrt.js":146, "./function/arithmetic/square.js":147, "./function/arithmetic/subtract.js":148, "./function/arithmetic/unary.js":149, "./function/arithmetic/unequal.js":150, "./function/arithmetic/xgcd.js":151, "./function/complex/arg.js":152, "./function/complex/conj.js":153, "./function/complex/im.js":154, "./function/complex/re.js":155, "./function/construction/bignumber":156, "./function/construction/boolean.js":157, 
  "./function/construction/complex.js":158, "./function/construction/index.js":159, "./function/construction/matrix.js":160, "./function/construction/number.js":161, "./function/construction/parser.js":162, "./function/construction/select.js":163, "./function/construction/string.js":164, "./function/construction/unit.js":165, "./function/expression/eval.js":166, "./function/expression/help.js":167, "./function/expression/parse.js":168, "./function/matrix/concat.js":169, "./function/matrix/det.js":170, 
  "./function/matrix/diag.js":171, "./function/matrix/eye.js":172, "./function/matrix/inv.js":173, "./function/matrix/ones.js":174, "./function/matrix/range.js":175, "./function/matrix/resize.js":176, "./function/matrix/size.js":177, "./function/matrix/squeeze.js":178, "./function/matrix/subset.js":179, "./function/matrix/transpose.js":180, "./function/matrix/zeros.js":181, "./function/probability/combinations.js":182, "./function/probability/factorial.js":183, "./function/probability/permutations.js":184, 
  "./function/probability/random.js":185, "./function/statistics/max.js":186, "./function/statistics/mean.js":187, "./function/statistics/min.js":188, "./function/trigonometry/acos.js":189, "./function/trigonometry/asin.js":190, "./function/trigonometry/atan.js":191, "./function/trigonometry/atan2.js":192, "./function/trigonometry/cos.js":193, "./function/trigonometry/cot.js":194, "./function/trigonometry/csc.js":195, "./function/trigonometry/sec.js":196, "./function/trigonometry/sin.js":197, "./function/trigonometry/tan.js":198, 
  "./function/units/to.js":199, "./function/utils/clone.js":200, "./function/utils/forEach.js":201, "./function/utils/format.js":202, "./function/utils/import.js":203, "./function/utils/map.js":204, "./function/utils/print.js":205, "./function/utils/typeof.js":206, "./type/Complex":208, "./type/Help":209, "./type/Index":210, "./type/Matrix":211, "./type/Range":212, "./type/Unit":213, "./type/collection":214, "./type/error":215, "./util/object":220, "bignumber.js":223}], 208:[function(e, n, t) {
    function r(e, n) {
      if (!(this instanceof r)) {
        throw new SyntaxError("Complex constructor must be called with the new operator");
      }
      switch(arguments.length) {
        case 0:
          this.re = 0, this.im = 0;
          break;
        case 2:
          if (!p(e) || !p(n)) {
            throw new TypeError("Two numbers expected in Complex constructor");
          }
          this.re = e, this.im = n;
          break;
        default:
          if (0 != arguments.length && 2 != arguments.length) {
            throw new SyntaxError("Two or zero arguments expected in Complex constructor");
          }
        ;
      }
    }
    function i() {
      for (;" " == x || "\t" == x;) {
        s();
      }
    }
    function o(e) {
      return e >= "0" && "9" >= e || "." == e;
    }
    function a(e) {
      return e >= "0" && "9" >= e;
    }
    function s() {
      d++, x = g.charAt(d);
    }
    function u(e) {
      d = e, x = g.charAt(d);
    }
    function c() {
      var e, n = "";
      if (e = d, "+" == x ? s() : "-" == x && (n += x, s()), !o(x)) {
        return u(e), null;
      }
      if ("." == x) {
        if (n += x, s(), !a(x)) {
          return u(e), null;
        }
      } else {
        for (;a(x);) {
          n += x, s();
        }
        "." == x && (n += x, s());
      }
      for (;a(x);) {
        n += x, s();
      }
      if ("E" == x || "e" == x) {
        if (n += x, s(), ("+" == x || "-" == x) && (n += x, s()), !a(x)) {
          return u(e), null;
        }
        for (;a(x);) {
          n += x, s();
        }
      }
      return n;
    }
    function f() {
      var e = g.charAt(d + 1);
      if ("I" == x || "i" == x) {
        return s(), "1";
      }
      if (!("+" != x && "-" != x || "I" != e && "i" != e)) {
        var n = "+" == x ? "1" : "-1";
        return s(), s(), n;
      }
      return null;
    }
    var l = e("../util/index"), m = l.number, p = l.number.isNumber, h = l.string.isString;
    r.isComplex = function(e) {
      return e instanceof r;
    };
    var g, d, x;
    r.parse = function(e) {
      if (g = e, d = -1, x = "", !h(g)) {
        return null;
      }
      s(), i();
      var n = c();
      if (n) {
        if ("I" == x || "i" == x) {
          return s(), i(), x ? null : new r(0, Number(n));
        }
        i();
        var t = x;
        if ("+" != t && "-" != t) {
          return i(), x ? null : new r(Number(n), 0);
        }
        s(), i();
        var o = c();
        if (o) {
          if ("I" != x && "i" != x) {
            return null;
          }
          s();
        } else {
          if (o = f(), !o) {
            return null;
          }
        }
        return "-" == t && (o = "-" == o[0] ? "+" + o.substring(1) : "-" + o), s(), i(), x ? null : new r(Number(n), Number(o));
      }
      return(n = f()) ? (i(), x ? null : new r(0, Number(n))) : null;
    }, r.prototype.clone = function() {
      return new r(this.re, this.im);
    }, r.prototype.equals = function(e) {
      return this.re === e.re && this.im === e.im;
    }, r.prototype.format = function(e) {
      var n = "", t = m.format(this.re, e), r = m.format(this.im, e);
      return n = 0 == this.im ? t : 0 == this.re ? 1 == this.im ? "i" : -1 == this.im ? "-i" : r + "i" : this.im > 0 ? 1 == this.im ? t + " + i" : t + " + " + r + "i" : -1 == this.im ? t + " - i" : t + " - " + r.substring(1) + "i";
    }, r.prototype.toString = function() {
      return this.format();
    }, n.exports = r, t.isComplex = r.isComplex, t.parse = r.parse;
  }, {"../util/index":218}], 209:[function(e, n, t) {
    function r(e, n) {
      this.math = e, this.doc = n;
    }
    var i = e("../util/index"), o = i.object, a = i.string;
    r.isHelp = function(e) {
      return e instanceof r;
    }, r.prototype.toString = function() {
      var e = this.doc || {}, n = "\n";
      if (e.name && (n += "Name: " + e.name + "\n\n"), e.category && (n += "Category: " + e.category + "\n\n"), e.description && (n += "Description:\n    " + e.description + "\n\n"), e.syntax && (n += "Syntax:\n    " + e.syntax.join("\n    ") + "\n\n"), e.examples) {
        var t = this.math.parser();
        n += "Examples:\n";
        for (var i = 0;i < e.examples.length;i++) {
          var o, s = e.examples[i];
          try {
            o = t.eval(s);
          } catch (u) {
            o = u;
          }
          n += "    " + s + "\n", !o || (o instanceof r || (n += "        " + a.format(o) + "\n"));
        }
        n += "\n";
      }
      return e.seealso && (n += "See also: " + e.seealso.join(", ") + "\n"), n;
    }, r.prototype.toJSON = function() {
      return o.extend({}, this.doc);
    }, n.exports = r, t.isHelp = r.isHelp;
  }, {"../util/index":218}], 210:[function(e, n, t) {
    function r() {
      if (!(this instanceof r)) {
        throw new SyntaxError("Index constructor must be called with the new operator");
      }
      this._ranges = [];
      for (var e = 0, n = arguments.length;n > e;e++) {
        var t = arguments[e];
        if (t instanceof a) {
          this._ranges.push(t);
        } else {
          if (t && (t = t.valueOf()), f(t)) {
            this._ranges.push(i(t));
          } else {
            if (!u(t)) {
              throw new TypeError("Range expected as Array, Number, or String");
            }
            this._ranges.push(i([t, t + 1]));
          }
        }
      }
    }
    function i(e) {
      for (var n = e.length, t = 0;n > t;t++) {
        if (!u(e[t]) || !c(e[t])) {
          throw new TypeError("Index parameters must be integer numbers");
        }
      }
      switch(e.length) {
        case 2:
          return new a(e[0], e[1]);
        case 3:
          return new a(e[0], e[1], e[2]);
        default:
          throw new SyntaxError("Wrong number of arguments in Index (2 or 3 expected)");;
      }
    }
    var o = e("../util/index"), a = e("./Range"), s = o.number, u = s.isNumber, c = s.isInteger, f = Array.isArray;
    o.array.validateIndex;
    r.prototype.clone = function() {
      var e = new r;
      return e._ranges = o.object.clone(this._ranges), e;
    }, r.isIndex = function(e) {
      return e instanceof r;
    }, r.create = function(e) {
      var n = new r;
      return r.apply(n, e), n;
    }, r.prototype.size = function l() {
      for (var l = [], e = 0, n = this._ranges.length;n > e;e++) {
        var t = this._ranges[e];
        l[e] = t.size()[0];
      }
      return l;
    }, r.prototype.max = function() {
      for (var e = [], n = 0, t = this._ranges.length;t > n;n++) {
        var r = this._ranges[n];
        e[n] = r.max();
      }
      return e;
    }, r.prototype.min = function() {
      for (var e = [], n = 0, t = this._ranges.length;t > n;n++) {
        var r = this._ranges[n];
        e[n] = r.min();
      }
      return e;
    }, r.prototype.forEach = function(e) {
      for (var n = 0, t = this._ranges.length;t > n;n++) {
        e(this._ranges[n], n, this);
      }
    }, r.prototype.range = function(e) {
      return this._ranges[e];
    }, r.prototype.isScalar = function() {
      for (var e = this.size(), n = 0, t = e.length;t > n;n++) {
        if (1 !== e[n]) {
          return!1;
        }
      }
      return!0;
    }, r.prototype.toArray = function() {
      for (var e = [], n = 0, t = this._ranges.length;t > n;n++) {
        var r = this._ranges[n], i = [], o = r.start, a = r.end, s = r.step;
        if (s > 0) {
          for (;a > o;) {
            i.push(o), o += s;
          }
        } else {
          if (0 > s) {
            for (;o > a;) {
              i.push(o), o += s;
            }
          }
        }
        e.push(i);
      }
      return e;
    }, r.prototype.valueOf = r.prototype.toArray, r.prototype.toString = function() {
      for (var e = [], n = 0, t = this._ranges.length;t > n;n++) {
        var r = this._ranges[n], i = s.format(r.start);
        1 != r.step && (i += ":" + s.format(r.step)), i += ":" + s.format(r.end), e.push(i);
      }
      return "[" + e.join(",") + "]";
    }, n.exports = r, t.isIndex = r.isIndex, t.create = r.create;
  }, {"../util/index":218, "./Range":212}], 211:[function(e, n, t) {
    function r(e) {
      if (!(this instanceof r)) {
        throw new SyntaxError("Matrix constructor must be called with the new operator");
      }
      if (e instanceof r) {
        this._data = e.clone()._data;
      } else {
        if (g(e)) {
          this._data = c(e);
        } else {
          if (null != e) {
            throw new TypeError("Unsupported type of data (" + f.types.type(e) + ")");
          }
          this._data = [];
        }
      }
      this._size = p.size(this._data);
    }
    function i(e, n) {
      if (!(n instanceof l)) {
        throw new TypeError("Invalid index");
      }
      var t = n.isScalar();
      if (t) {
        return e.get(n.min());
      }
      var i = n.size();
      if (i.length != e._size.length) {
        throw new RangeError("Dimension mismatch (" + i.length + " !\x3d " + e._size.length + ")");
      }
      for (var a = new r(o(e._data, n, i.length, 0));g(a._data) && 1 == a._data.length;) {
        a._data = a._data[0], a._size.shift();
      }
      return a;
    }
    function o(e, n, t, r) {
      var i = r == t - 1, a = n.range(r);
      return a.map(i ? function(n) {
        return d(n, e.length), e[n];
      } : function(i) {
        d(i, e.length);
        var a = e[i];
        return o(a, n, t, r + 1);
      });
    }
    function a(e, n, t, i) {
      if (!(n instanceof l)) {
        throw new TypeError("Invalid index");
      }
      var o, a = n.size(), c = n.isScalar();
      if (t instanceof r ? (o = t.size(), t = t.valueOf()) : o = p.size(t), c) {
        if (0 != o.length) {
          throw new TypeError("Scalar value expected");
        }
        e.set(n.min(), t, i);
      } else {
        if (a.length < e._size.length) {
          throw new RangeError("Dimension mismatch (" + a.length + " \x3c " + e._size.length + ")");
        }
        for (var f = 0, g = a.length - o.length;g > f;f++) {
          t = [t], o.unshift(1);
        }
        if (!h.deepEqual(a, o)) {
          throw new RangeError("Dimensions mismatch (" + m.format(a) + " !\x3d " + m.format(o) + ")");
        }
        var d = n.max().map(function(e) {
          return e + 1;
        });
        u(e, d, i);
        var x = a.length, y = 0;
        s(e._data, n, t, x, y);
      }
      return e;
    }
    function s(e, n, t, r, i) {
      var o = i == r - 1, a = n.range(i);
      a.forEach(o ? function(n, r) {
        d(n), e[n] = t[r];
      } : function(o, a) {
        d(o), s(e[o], n, t[a], r, i + 1);
      });
    }
    function u(e, n, t) {
      if (!g(n)) {
        throw new Error("Array expected");
      }
      for (var r = h.clone(e._size), i = !1;r.length < n.length;) {
        r.unshift(0), i = !0;
      }
      for (var o = 0, a = n.length;a > o;o++) {
        n[o] > r[o] && (r[o] = n[o], i = !0);
      }
      i && e.resize(r, t);
    }
    function c(e) {
      for (var n = 0, t = e.length;t > n;n++) {
        var i = e[n];
        g(i) ? e[n] = c(i) : i instanceof r && (e[n] = c(i._data));
      }
      return e;
    }
    var f = e("../util/index"), l = e("./Index"), m = (f.number, f.string), p = f.array, h = f.object, g = Array.isArray, d = p.validateIndex;
    r.isMatrix = function(e) {
      return e instanceof r;
    }, r.prototype.subset = function(e, n, t) {
      switch(arguments.length) {
        case 1:
          return i(this, e);
        case 2:
        ;
        case 3:
          return a(this, e, n, t);
        default:
          throw new SyntaxError("Wrong number of arguments");;
      }
    }, r.prototype.get = function(e) {
      if (!g(e)) {
        throw new Error("Array expected");
      }
      if (e.length != this._size.length) {
        throw new RangeError("Dimension mismatch (" + e.length + " !\x3d " + this._size.length + ")");
      }
      for (var n = this._data, t = 0, r = e.length;r > t;t++) {
        var i = e[t];
        d(i, n.length), n = n[i];
      }
      return h.clone(n);
    }, r.prototype.set = function(e, n, t) {
      var r, i;
      if (!g(e)) {
        throw new Error("Array expected");
      }
      if (e.length < this._size.length) {
        throw new RangeError("Dimension mismatch (" + e.length + " \x3c " + this._size.length + ")");
      }
      var o = e.map(function(e) {
        return e + 1;
      });
      u(this, o, t);
      var a = this._data;
      for (r = 0, i = e.length - 1;i > r;r++) {
        var s = e[r];
        d(s, a.length), a = a[s];
      }
      return s = e[e.length - 1], d(s, a.length), a[s] = n, this;
    }, r.prototype.resize = function(e, n) {
      return this._size = h.clone(e), this._data = p.resize(this._data, this._size, n), this;
    }, r.prototype.clone = function() {
      var e = new r;
      return e._data = h.clone(this._data), e._size = h.clone(this._size), e;
    }, r.prototype.size = function() {
      return this._size;
    }, r.prototype.map = function(e) {
      var n = this, t = new r, i = [], o = function(t, r) {
        return g(t) ? t.map(function(e, n) {
          return i[r] = n, o(e, r + 1);
        }) : e(t, i, n);
      };
      return t._data = o(this._data, 0), t._size = h.clone(this._size), t;
    }, r.prototype.forEach = function(e) {
      var n = this, t = [], r = function(i, o) {
        g(i) ? i.forEach(function(e, n) {
          t[o] = n, r(e, o + 1);
        }) : e(i, t, n);
      };
      r(this._data, 0);
    }, r.prototype.toArray = function() {
      return h.clone(this._data);
    }, r.prototype.valueOf = function() {
      return this._data;
    }, r.prototype.format = function(e) {
      return m.format(this._data, e);
    }, r.prototype.toString = function() {
      return m.format(this._data);
    }, n.exports = r, t.isMatrix = r.isMatrix;
  }, {"../util/index":218, "./Index":210}], 212:[function(e, n, t) {
    function r(e, n, t) {
      if (!(this instanceof r)) {
        throw new SyntaxError("Range constructor must be called with the new operator");
      }
      if (null != e && !o.isNumber(e)) {
        throw new TypeError("Parameter start must be a number");
      }
      if (null != n && !o.isNumber(n)) {
        throw new TypeError("Parameter end must be a number");
      }
      if (null != t && !o.isNumber(t)) {
        throw new TypeError("Parameter step must be a number");
      }
      this.start = null != e ? parseFloat(e) : 0, this.end = null != n ? parseFloat(n) : 0, this.step = null != t ? parseFloat(t) : 1;
    }
    var i = e("../util/index"), o = i.number, a = i.string;
    i.array;
    r.parse = function(e) {
      if (!a.isString(e)) {
        return null;
      }
      var n = e.split(":"), t = n.map(function(e) {
        return parseFloat(e);
      }), i = t.some(function(e) {
        return isNaN(e);
      });
      if (i) {
        return null;
      }
      switch(t.length) {
        case 2:
          return new r(t[0], t[1]);
        case 3:
          return new r(t[0], t[2], t[1]);
        default:
          return null;
      }
    }, r.prototype.clone = function() {
      return new r(this.start, this.end, this.step);
    }, r.isRange = function(e) {
      return e instanceof r;
    }, r.prototype.size = function() {
      var e = 0, n = this.start, t = this.step, r = this.end, i = r - n;
      return o.sign(t) == o.sign(i) ? e = Math.ceil(i / t) : 0 == i && (e = 0), isNaN(e) && (e = 0), [e];
    }, r.prototype.min = function() {
      var e = this.size()[0];
      return e > 0 ? this.step > 0 ? this.start : this.start + (e - 1) * this.step : void 0;
    }, r.prototype.max = function() {
      var e = this.size()[0];
      return e > 0 ? this.step > 0 ? this.start + (e - 1) * this.step : this.start : void 0;
    }, r.prototype.forEach = function(e) {
      var n = this.start, t = this.step, r = this.end, i = 0;
      if (t > 0) {
        for (;r > n;) {
          e(n, i, this), n += t, i++;
        }
      } else {
        if (0 > t) {
          for (;n > r;) {
            e(n, i, this), n += t, i++;
          }
        }
      }
    }, r.prototype.map = function(e) {
      var n = [];
      return this.forEach(function(t, r, i) {
        n[r] = e(t, r, i);
      }), n;
    }, r.prototype.toArray = function() {
      var e = [];
      return this.forEach(function(n, t) {
        e[t] = n;
      }), e;
    }, r.prototype.valueOf = function() {
      return this.toArray();
    }, r.prototype.format = function(e) {
      var n = o.format(this.start, e);
      return 1 != this.step && (n += ":" + o.format(this.step, e)), n += ":" + o.format(this.end, e);
    }, r.prototype.toString = function() {
      return this.format();
    }, n.exports = r, t.isRange = r.isRange, t.parse = r.parse;
  }, {"../util/index":218}], 213:[function(e, n, t) {
    function r(e, n) {
      if (!(this instanceof r)) {
        throw new Error("Unit constructor must be called with the new operator");
      }
      if (null != e && !y(e)) {
        throw new TypeError("First parameter in Unit constructor must be a number");
      }
      if (null != n && !b(n)) {
        throw new TypeError("Second parameter in Unit constructor must be a string");
      }
      if (null != n) {
        var t = l(n);
        if (!t) {
          throw new SyntaxError('Unknown unit "' + n + '"');
        }
        this.unit = t.unit, this.prefix = t.prefix;
      } else {
        this.unit = UNIT_NONE, this.prefix = w;
      }
      null != e ? (this.value = this._normalize(e), this.fixPrefix = !1) : (this.value = null, this.fixPrefix = !0);
    }
    function i() {
      for (;" " == h || "\t" == h;) {
        s();
      }
    }
    function o(e) {
      return e >= "0" && "9" >= e || "." == e;
    }
    function a(e) {
      return e >= "0" && "9" >= e;
    }
    function s() {
      p++, h = m.charAt(p);
    }
    function u(e) {
      p = e, h = m.charAt(p);
    }
    function c() {
      var e, n = "";
      if (e = p, "+" == h ? s() : "-" == h && (n += h, s()), !o(h)) {
        return u(e), null;
      }
      if ("." == h) {
        if (n += h, s(), !a(h)) {
          return u(e), null;
        }
      } else {
        for (;a(h);) {
          n += h, s();
        }
        "." == h && (n += h, s());
      }
      for (;a(h);) {
        n += h, s();
      }
      if ("E" == h || "e" == h) {
        if (n += h, s(), ("+" == h || "-" == h) && (n += h, s()), !a(h)) {
          return u(e), null;
        }
        for (;a(h);) {
          n += h, s();
        }
      }
      return n;
    }
    function f() {
      var e = "";
      for (i();h && (" " != h && "\t" != h);) {
        e += h, s();
      }
      return e || null;
    }
    function l(e) {
      for (var n in N) {
        if (N.hasOwnProperty(n) && x.endsWith(e, n)) {
          var t = N[n], r = e.length - n.length, i = e.substring(0, r), o = t.prefixes[i];
          if (void 0 !== o) {
            return{unit:t, prefix:o};
          }
        }
      }
      return null;
    }
    var m, p, h, g = e("../util/index"), d = g.number, x = g.string, y = g.number.isNumber, b = g.string.isString;
    r.parse = function(e) {
      if (m = e, p = -1, h = "", !b(m)) {
        return null;
      }
      s(), i();
      var n, t = c();
      return t ? (n = f(), s(), i(), h ? null : t && n ? new r(Number(t), n) : null) : (n = f(), s(), i(), h ? null : new r(null, n));
    }, r.isUnit = function(e) {
      return e instanceof r;
    }, r.prototype.clone = function() {
      var e = new r;
      for (var n in this) {
        this.hasOwnProperty(n) && (e[n] = this[n]);
      }
      return e;
    }, r.prototype._normalize = function(e) {
      return(e + this.unit.offset) * this.unit.value * this.prefix.value;
    }, r.prototype._unnormalize = function(e, n) {
      return void 0 == n ? e / this.unit.value / this.prefix.value - this.unit.offset : e / this.unit.value / n - this.unit.offset;
    }, r.isPlainUnit = function(e) {
      return null != l(e);
    }, r.prototype.hasBase = function(e) {
      return void 0 === this.unit.base ? void 0 === e : this.unit.base === e;
    }, r.prototype.equalBase = function(e) {
      return this.unit.base === e.unit.base;
    }, r.prototype.equals = function(e) {
      return this.equalBase(e) && this.value == e.value;
    }, r.prototype.to = function(e) {
      var n;
      if (b(e)) {
        if (n = new r(null, e), !this.equalBase(n)) {
          throw new Error("Units do not match");
        }
        return n.value = this.value, n;
      }
      if (e instanceof r) {
        if (!this.equalBase(e)) {
          throw new Error("Units do not match");
        }
        if (null != e.value) {
          throw new Error("Cannot convert to a unit with a value");
        }
        if (null == e.unit) {
          throw new Error("Unit expected on the right hand side of function in");
        }
        return n = e.clone(), n.value = this.value, n.fixPrefix = !0, n;
      }
      throw new Error("String or Unit expected as parameter");
    }, r.prototype.toNumber = function(e) {
      var n = this.to(e), t = this.fixPrefix ? n._bestPrefix() : n.prefix;
      return n._unnormalize(n.value, t.value);
    }, r.prototype.toString = function() {
      return this.format();
    }, r.prototype.format = function(e) {
      var n, t;
      if (this.fixPrefix) {
        n = this._unnormalize(this.value), t = null != this.value ? d.format(n, e) + " " : "", t += this.prefix.name + this.unit.name;
      } else {
        var r = this._bestPrefix();
        n = this._unnormalize(this.value, r.value), t = null != this.value ? d.format(n, e) + " " : "", t += r.name + this.unit.name;
      }
      return t;
    }, r.prototype._bestPrefix = function() {
      var e = Math.abs(this.value / this.unit.value), n = w, t = Math.abs(Math.log(e / n.value) / Math.LN10 - 1.2), r = this.unit.prefixes;
      for (var i in r) {
        if (r.hasOwnProperty(i)) {
          var o = r[i];
          if (o.scientific) {
            var a = Math.abs(Math.log(e / o.value) / Math.LN10 - 1.2);
            t > a && (n = o, t = a);
          }
        }
      }
      return n;
    };
    var v = {NONE:{"":{name:"", value:1, scientific:!0}}, SHORT:{"":{name:"", value:1, scientific:!0}, da:{name:"da", value:10, scientific:!1}, h:{name:"h", value:100, scientific:!1}, k:{name:"k", value:1E3, scientific:!0}, M:{name:"M", value:1E6, scientific:!0}, G:{name:"G", value:1E9, scientific:!0}, T:{name:"T", value:1E12, scientific:!0}, P:{name:"P", value:1E15, scientific:!0}, E:{name:"E", value:1E18, scientific:!0}, Z:{name:"Z", value:1E21, scientific:!0}, Y:{name:"Y", value:1E24, scientific:!0}, 
    d:{name:"d", value:0.1, scientific:!1}, c:{name:"c", value:0.01, scientific:!1}, m:{name:"m", value:0.001, scientific:!0}, u:{name:"u", value:1E-6, scientific:!0}, n:{name:"n", value:1E-9, scientific:!0}, p:{name:"p", value:1E-12, scientific:!0}, f:{name:"f", value:1E-15, scientific:!0}, a:{name:"a", value:1E-18, scientific:!0}, z:{name:"z", value:1E-21, scientific:!0}, y:{name:"y", value:1E-24, scientific:!0}}, LONG:{"":{name:"", value:1, scientific:!0}, deca:{name:"deca", value:10, scientific:!1}, 
    hecto:{name:"hecto", value:100, scientific:!1}, kilo:{name:"kilo", value:1E3, scientific:!0}, mega:{name:"mega", value:1E6, scientific:!0}, giga:{name:"giga", value:1E9, scientific:!0}, tera:{name:"tera", value:1E12, scientific:!0}, peta:{name:"peta", value:1E15, scientific:!0}, exa:{name:"exa", value:1E18, scientific:!0}, zetta:{name:"zetta", value:1E21, scientific:!0}, yotta:{name:"yotta", value:1E24, scientific:!0}, deci:{name:"deci", value:0.1, scientific:!1}, centi:{name:"centi", value:0.01, 
    scientific:!1}, milli:{name:"milli", value:0.001, scientific:!0}, micro:{name:"micro", value:1E-6, scientific:!0}, nano:{name:"nano", value:1E-9, scientific:!0}, pico:{name:"pico", value:1E-12, scientific:!0}, femto:{name:"femto", value:1E-15, scientific:!0}, atto:{name:"atto", value:1E-18, scientific:!0}, zepto:{name:"zepto", value:1E-21, scientific:!0}, yocto:{name:"yocto", value:1E-24, scientific:!0}}, SQUARED:{"":{name:"", value:1, scientific:!0}, da:{name:"da", value:100, scientific:!1}, 
    h:{name:"h", value:1E4, scientific:!1}, k:{name:"k", value:1E6, scientific:!0}, M:{name:"M", value:1E12, scientific:!0}, G:{name:"G", value:1E18, scientific:!0}, T:{name:"T", value:1E24, scientific:!0}, P:{name:"P", value:1E30, scientific:!0}, E:{name:"E", value:1E36, scientific:!0}, Z:{name:"Z", value:1E42, scientific:!0}, Y:{name:"Y", value:1E48, scientific:!0}, d:{name:"d", value:0.01, scientific:!1}, c:{name:"c", value:1E-4, scientific:!1}, m:{name:"m", value:1E-6, scientific:!0}, u:{name:"u", 
    value:1E-12, scientific:!0}, n:{name:"n", value:1E-18, scientific:!0}, p:{name:"p", value:1E-24, scientific:!0}, f:{name:"f", value:1E-30, scientific:!0}, a:{name:"a", value:1E-36, scientific:!0}, z:{name:"z", value:1E-42, scientific:!0}, y:{name:"y", value:1E-42, scientific:!0}}, CUBIC:{"":{name:"", value:1, scientific:!0}, da:{name:"da", value:1E3, scientific:!1}, h:{name:"h", value:1E6, scientific:!1}, k:{name:"k", value:1E9, scientific:!0}, M:{name:"M", value:1E18, scientific:!0}, G:{name:"G", 
    value:1E27, scientific:!0}, T:{name:"T", value:1E36, scientific:!0}, P:{name:"P", value:1E45, scientific:!0}, E:{name:"E", value:1E54, scientific:!0}, Z:{name:"Z", value:1E63, scientific:!0}, Y:{name:"Y", value:1E72, scientific:!0}, d:{name:"d", value:0.001, scientific:!1}, c:{name:"c", value:1E-6, scientific:!1}, m:{name:"m", value:1E-9, scientific:!0}, u:{name:"u", value:1E-18, scientific:!0}, n:{name:"n", value:1E-27, scientific:!0}, p:{name:"p", value:1E-36, scientific:!0}, f:{name:"f", value:1E-45, 
    scientific:!0}, a:{name:"a", value:1E-54, scientific:!0}, z:{name:"z", value:1E-63, scientific:!0}, y:{name:"y", value:1E-72, scientific:!0}}, BINARY_SHORT:{"":{name:"", value:1, scientific:!0}, k:{name:"k", value:1024, scientific:!0}, M:{name:"M", value:Math.pow(1024, 2), scientific:!0}, G:{name:"G", value:Math.pow(1024, 3), scientific:!0}, T:{name:"T", value:Math.pow(1024, 4), scientific:!0}, P:{name:"P", value:Math.pow(1024, 5), scientific:!0}, E:{name:"E", value:Math.pow(1024, 6), scientific:!0}, 
    Z:{name:"Z", value:Math.pow(1024, 7), scientific:!0}, Y:{name:"Y", value:Math.pow(1024, 8), scientific:!0}, Ki:{name:"Ki", value:1024, scientific:!0}, Mi:{name:"Mi", value:Math.pow(1024, 2), scientific:!0}, Gi:{name:"Gi", value:Math.pow(1024, 3), scientific:!0}, Ti:{name:"Ti", value:Math.pow(1024, 4), scientific:!0}, Pi:{name:"Pi", value:Math.pow(1024, 5), scientific:!0}, Ei:{name:"Ei", value:Math.pow(1024, 6), scientific:!0}, Zi:{name:"Zi", value:Math.pow(1024, 7), scientific:!0}, Yi:{name:"Yi", 
    value:Math.pow(1024, 8), scientific:!0}}, BINARY_LONG:{"":{name:"", value:1, scientific:!0}, kilo:{name:"kilo", value:1024, scientific:!0}, mega:{name:"mega", value:Math.pow(1024, 2), scientific:!0}, giga:{name:"giga", value:Math.pow(1024, 3), scientific:!0}, tera:{name:"tera", value:Math.pow(1024, 4), scientific:!0}, peta:{name:"peta", value:Math.pow(1024, 5), scientific:!0}, exa:{name:"exa", value:Math.pow(1024, 6), scientific:!0}, zetta:{name:"zetta", value:Math.pow(1024, 7), scientific:!0}, 
    yotta:{name:"yotta", value:Math.pow(1024, 8), scientific:!0}, kibi:{name:"kibi", value:1024, scientific:!0}, mebi:{name:"mebi", value:Math.pow(1024, 2), scientific:!0}, gibi:{name:"gibi", value:Math.pow(1024, 3), scientific:!0}, tebi:{name:"tebi", value:Math.pow(1024, 4), scientific:!0}, pebi:{name:"pebi", value:Math.pow(1024, 5), scientific:!0}, exi:{name:"exi", value:Math.pow(1024, 6), scientific:!0}, zebi:{name:"zebi", value:Math.pow(1024, 7), scientific:!0}, yobi:{name:"yobi", value:Math.pow(1024, 
    8), scientific:!0}}}, w = {name:"", value:1, scientific:!0}, E = {NONE:{}, LENGTH:{}, MASS:{}, TIME:{}, CURRENT:{}, TEMPERATURE:{}, LUMINOUS_INTENSITY:{}, AMOUNT_OF_SUBSTANCE:{}, FORCE:{}, SURFACE:{}, VOLUME:{}, ANGLE:{}, BIT:{}};
    BASE_UNIT_NONE = {}, UNIT_NONE = {name:"", base:BASE_UNIT_NONE, value:1, offset:0};
    var N = {meter:{name:"meter", base:E.LENGTH, prefixes:v.LONG, value:1, offset:0}, inch:{name:"inch", base:E.LENGTH, prefixes:v.NONE, value:0.0254, offset:0}, foot:{name:"foot", base:E.LENGTH, prefixes:v.NONE, value:0.3048, offset:0}, yard:{name:"yard", base:E.LENGTH, prefixes:v.NONE, value:0.9144, offset:0}, mile:{name:"mile", base:E.LENGTH, prefixes:v.NONE, value:1609.344, offset:0}, link:{name:"link", base:E.LENGTH, prefixes:v.NONE, value:0.201168, offset:0}, rod:{name:"rod", base:E.LENGTH, 
    prefixes:v.NONE, value:5.02921, offset:0}, chain:{name:"chain", base:E.LENGTH, prefixes:v.NONE, value:20.1168, offset:0}, angstrom:{name:"angstrom", base:E.LENGTH, prefixes:v.NONE, value:1E-10, offset:0}, m:{name:"m", base:E.LENGTH, prefixes:v.SHORT, value:1, offset:0}, "in":{name:"in", base:E.LENGTH, prefixes:v.NONE, value:0.0254, offset:0}, ft:{name:"ft", base:E.LENGTH, prefixes:v.NONE, value:0.3048, offset:0}, yd:{name:"yd", base:E.LENGTH, prefixes:v.NONE, value:0.9144, offset:0}, mi:{name:"mi", 
    base:E.LENGTH, prefixes:v.NONE, value:1609.344, offset:0}, li:{name:"li", base:E.LENGTH, prefixes:v.NONE, value:0.201168, offset:0}, rd:{name:"rd", base:E.LENGTH, prefixes:v.NONE, value:5.02921, offset:0}, ch:{name:"ch", base:E.LENGTH, prefixes:v.NONE, value:20.1168, offset:0}, mil:{name:"mil", base:E.LENGTH, prefixes:v.NONE, value:2.54E-5, offset:0}, m2:{name:"m2", base:E.SURFACE, prefixes:v.SQUARED, value:1, offset:0}, sqin:{name:"sqin", base:E.SURFACE, prefixes:v.NONE, value:6.4516E-4, offset:0}, 
    sqft:{name:"sqft", base:E.SURFACE, prefixes:v.NONE, value:0.09290304, offset:0}, sqyd:{name:"sqyd", base:E.SURFACE, prefixes:v.NONE, value:0.83612736, offset:0}, sqmi:{name:"sqmi", base:E.SURFACE, prefixes:v.NONE, value:2589988.110336, offset:0}, sqrd:{name:"sqrd", base:E.SURFACE, prefixes:v.NONE, value:25.29295, offset:0}, sqch:{name:"sqch", base:E.SURFACE, prefixes:v.NONE, value:404.6873, offset:0}, sqmil:{name:"sqmil", base:E.SURFACE, prefixes:v.NONE, value:6.4516E-10, offset:0}, m3:{name:"m3", 
    base:E.VOLUME, prefixes:v.CUBIC, value:1, offset:0}, L:{name:"L", base:E.VOLUME, prefixes:v.SHORT, value:0.001, offset:0}, l:{name:"l", base:E.VOLUME, prefixes:v.SHORT, value:0.001, offset:0}, litre:{name:"litre", base:E.VOLUME, prefixes:v.LONG, value:0.001, offset:0}, cuin:{name:"cuin", base:E.VOLUME, prefixes:v.NONE, value:1.6387064E-5, offset:0}, cuft:{name:"cuft", base:E.VOLUME, prefixes:v.NONE, value:0.028316846592, offset:0}, cuyd:{name:"cuyd", base:E.VOLUME, prefixes:v.NONE, value:0.764554857984, 
    offset:0}, teaspoon:{name:"teaspoon", base:E.VOLUME, prefixes:v.NONE, value:5E-6, offset:0}, tablespoon:{name:"tablespoon", base:E.VOLUME, prefixes:v.NONE, value:1.5E-5, offset:0}, minim:{name:"minim", base:E.VOLUME, prefixes:v.NONE, value:6.161152E-8, offset:0}, fluiddram:{name:"fluiddram", base:E.VOLUME, prefixes:v.NONE, value:3.6966911E-6, offset:0}, fluidounce:{name:"fluidounce", base:E.VOLUME, prefixes:v.NONE, value:2.957353E-5, offset:0}, gill:{name:"gill", base:E.VOLUME, prefixes:v.NONE, 
    value:1.182941E-4, offset:0}, cc:{name:"cc", base:E.VOLUME, prefixes:v.NONE, value:1E-6, offset:0}, cup:{name:"cup", base:E.VOLUME, prefixes:v.NONE, value:2.365882E-4, offset:0}, pint:{name:"pint", base:E.VOLUME, prefixes:v.NONE, value:4.731765E-4, offset:0}, quart:{name:"quart", base:E.VOLUME, prefixes:v.NONE, value:9.463529E-4, offset:0}, gallon:{name:"gallon", base:E.VOLUME, prefixes:v.NONE, value:0.003785412, offset:0}, beerbarrel:{name:"beerbarrel", base:E.VOLUME, prefixes:v.NONE, value:0.1173478, 
    offset:0}, oilbarrel:{name:"oilbarrel", base:E.VOLUME, prefixes:v.NONE, value:0.1589873, offset:0}, hogshead:{name:"hogshead", base:E.VOLUME, prefixes:v.NONE, value:0.238481, offset:0}, fldr:{name:"fldr", base:E.VOLUME, prefixes:v.NONE, value:3.6966911E-6, offset:0}, floz:{name:"floz", base:E.VOLUME, prefixes:v.NONE, value:2.957353E-5, offset:0}, gi:{name:"gi", base:E.VOLUME, prefixes:v.NONE, value:1.182941E-4, offset:0}, cp:{name:"cp", base:E.VOLUME, prefixes:v.NONE, value:2.365882E-4, offset:0}, 
    pt:{name:"pt", base:E.VOLUME, prefixes:v.NONE, value:4.731765E-4, offset:0}, qt:{name:"qt", base:E.VOLUME, prefixes:v.NONE, value:9.463529E-4, offset:0}, gal:{name:"gal", base:E.VOLUME, prefixes:v.NONE, value:0.003785412, offset:0}, bbl:{name:"bbl", base:E.VOLUME, prefixes:v.NONE, value:0.1173478, offset:0}, obl:{name:"obl", base:E.VOLUME, prefixes:v.NONE, value:0.1589873, offset:0}, g:{name:"g", base:E.MASS, prefixes:v.SHORT, value:0.001, offset:0}, gram:{name:"gram", base:E.MASS, prefixes:v.LONG, 
    value:0.001, offset:0}, ton:{name:"ton", base:E.MASS, prefixes:v.SHORT, value:907.18474, offset:0}, tonne:{name:"tonne", base:E.MASS, prefixes:v.SHORT, value:1E3, offset:0}, grain:{name:"grain", base:E.MASS, prefixes:v.NONE, value:6.479891E-5, offset:0}, dram:{name:"dram", base:E.MASS, prefixes:v.NONE, value:0.0017718451953125, offset:0}, ounce:{name:"ounce", base:E.MASS, prefixes:v.NONE, value:0.028349523125, offset:0}, poundmass:{name:"poundmass", base:E.MASS, prefixes:v.NONE, value:0.45359237, 
    offset:0}, hundredweight:{name:"hundredweight", base:E.MASS, prefixes:v.NONE, value:45.359237, offset:0}, stick:{name:"stick", base:E.MASS, prefixes:v.NONE, value:0.115, offset:0}, gr:{name:"gr", base:E.MASS, prefixes:v.NONE, value:6.479891E-5, offset:0}, dr:{name:"dr", base:E.MASS, prefixes:v.NONE, value:0.0017718451953125, offset:0}, oz:{name:"oz", base:E.MASS, prefixes:v.NONE, value:0.028349523125, offset:0}, lbm:{name:"lbm", base:E.MASS, prefixes:v.NONE, value:0.45359237, offset:0}, cwt:{name:"cwt", 
    base:E.MASS, prefixes:v.NONE, value:45.359237, offset:0}, s:{name:"s", base:E.TIME, prefixes:v.SHORT, value:1, offset:0}, min:{name:"min", base:E.TIME, prefixes:v.NONE, value:60, offset:0}, h:{name:"h", base:E.TIME, prefixes:v.NONE, value:3600, offset:0}, second:{name:"second", base:E.TIME, prefixes:v.LONG, value:1, offset:0}, sec:{name:"sec", base:E.TIME, prefixes:v.LONG, value:1, offset:0}, minute:{name:"minute", base:E.TIME, prefixes:v.NONE, value:60, offset:0}, hour:{name:"hour", base:E.TIME, 
    prefixes:v.NONE, value:3600, offset:0}, day:{name:"day", base:E.TIME, prefixes:v.NONE, value:86400, offset:0}, rad:{name:"rad", base:E.ANGLE, prefixes:v.NONE, value:1, offset:0}, deg:{name:"deg", base:E.ANGLE, prefixes:v.NONE, value:0.017453292519943295, offset:0}, grad:{name:"grad", base:E.ANGLE, prefixes:v.NONE, value:0.015707963267948967, offset:0}, cycle:{name:"cycle", base:E.ANGLE, prefixes:v.NONE, value:6.283185307179586, offset:0}, A:{name:"A", base:E.CURRENT, prefixes:v.SHORT, value:1, 
    offset:0}, ampere:{name:"ampere", base:E.CURRENT, prefixes:v.LONG, value:1, offset:0}, K:{name:"K", base:E.TEMPERATURE, prefixes:v.NONE, value:1, offset:0}, degC:{name:"degC", base:E.TEMPERATURE, prefixes:v.NONE, value:1, offset:273.15}, degF:{name:"degF", base:E.TEMPERATURE, prefixes:v.NONE, value:1 / 1.8, offset:459.67}, degR:{name:"degR", base:E.TEMPERATURE, prefixes:v.NONE, value:1 / 1.8, offset:0}, kelvin:{name:"kelvin", base:E.TEMPERATURE, prefixes:v.NONE, value:1, offset:0}, celsius:{name:"celsius", 
    base:E.TEMPERATURE, prefixes:v.NONE, value:1, offset:273.15}, fahrenheit:{name:"fahrenheit", base:E.TEMPERATURE, prefixes:v.NONE, value:1 / 1.8, offset:459.67}, rankine:{name:"rankine", base:E.TEMPERATURE, prefixes:v.NONE, value:1 / 1.8, offset:0}, mol:{name:"mol", base:E.AMOUNT_OF_SUBSTANCE, prefixes:v.NONE, value:1, offset:0}, mole:{name:"mole", base:E.AMOUNT_OF_SUBSTANCE, prefixes:v.NONE, value:1, offset:0}, cd:{name:"cd", base:E.LUMINOUS_INTENSITY, prefixes:v.NONE, value:1, offset:0}, candela:{name:"candela", 
    base:E.LUMINOUS_INTENSITY, prefixes:v.NONE, value:1, offset:0}, N:{name:"N", base:E.FORCE, prefixes:v.SHORT, value:1, offset:0}, newton:{name:"newton", base:E.FORCE, prefixes:v.LONG, value:1, offset:0}, lbf:{name:"lbf", base:E.FORCE, prefixes:v.NONE, value:4.4482216152605, offset:0}, poundforce:{name:"poundforce", base:E.FORCE, prefixes:v.NONE, value:4.4482216152605, offset:0}, b:{name:"b", base:E.BIT, prefixes:v.BINARY_SHORT, value:1, offset:0}, bits:{name:"bits", base:E.BIT, prefixes:v.BINARY_LONG, 
    value:1, offset:0}, B:{name:"B", base:E.BIT, prefixes:v.BINARY_SHORT, value:8, offset:0}, bytes:{name:"bytes", base:E.BIT, prefixes:v.BINARY_LONG, value:8, offset:0}}, j = {meters:"meter", inches:"inch", yards:"yard", miles:"mile", links:"link", rods:"rod", chains:"chain", angstroms:"angstrom", litres:"litre", teaspoons:"teaspoon", tablespoons:"tablespoon", minims:"minim", fluiddrams:"fluiddram", fluidounces:"fluidounce", gills:"gill", cups:"cup", pints:"pint", quarts:"quart", gallons:"gallon", 
    beerbarrels:"beerbarrel", oilbarrels:"oilbarrel", hogsheads:"hogshead", grams:"gram", tons:"ton", tonnes:"tonne", grains:"grain", drams:"dram", ounces:"ounce", poundmasses:"poundmass", hundredweights:"hundredweight", sticks:"stick", seconds:"second", minutes:"minute", hours:"hour", days:"day", radians:"rad", degrees:"deg", gradients:"grad", cycles:"cycle", amperes:"ampere", moles:"mole"};
    for (var M in j) {
      if (j.hasOwnProperty(M)) {
        var C = N[j[M]], A = Object.create(C);
        A.name = M, N[M] = A;
      }
    }
    N.lt = N.l, N.liter = N.litre, N.liters = N.litres, N.lb = N.lbm, r.PREFIXES = v, r.BASE_UNITS = E, r.UNITS = N, n.exports = r, t.isUnit = r.isUnit, t.isPlainUnit = r.isPlainUnit, t.parse = r.parse;
  }, {"../util/index":218}], 214:[function(e, n, t) {
    function r(e, n, t) {
      var o, a, u, c;
      if (0 >= n) {
        if (s(e[0])) {
          for (c = i(e), a = [], o = 0;o < c.length;o++) {
            a[o] = r(c[o], n - 1, t);
          }
          return a;
        }
        for (u = e[0], o = 1;o < e.length;o++) {
          u = t(u, e[o]);
        }
        return u;
      }
      for (a = [], o = 0;o < e.length;o++) {
        a[o] = r(e[o], n - 1, t);
      }
      return a;
    }
    function i(e) {
      var n, t, r = e.length, i = e[0].length, o = [];
      for (t = 0;i > t;t++) {
        var a = [];
        for (n = 0;r > n;n++) {
          a.push(e[n][t]);
        }
        o.push(a);
      }
      return o;
    }
    var o = e("../util/index"), a = e("./Matrix"), s = o.array.isArray;
    o.string.isString;
    t.argsToArray = function(e) {
      var n;
      return 0 == e.length ? n = [] : 1 == e.length ? (n = e[0], n instanceof a && (n = n.valueOf()), s(n) || (n = [n])) : n = Array.prototype.slice.apply(e), n;
    }, t.isCollection = function(e) {
      return s(e) || e instanceof a;
    }, t.deepMap = function u(e, n) {
      return e && "function" == typeof e.map ? e.map(function(e) {
        return u(e, n);
      }) : n(e);
    }, t.deepMap2 = function c(e, n, t) {
      var r, i, o;
      if (s(e)) {
        if (s(n)) {
          if (e.length != n.length) {
            throw new RangeError("Dimension mismatch (" + e.length + " !\x3d " + n.length + ")");
          }
          for (r = [], i = e.length, o = 0;i > o;o++) {
            r[o] = c(e[o], n[o], t);
          }
        } else {
          if (n instanceof a) {
            return r = c(e, n.valueOf(), t), new a(r);
          }
          for (r = [], i = e.length, o = 0;i > o;o++) {
            r[o] = c(e[o], n, t);
          }
        }
      } else {
        if (e instanceof a) {
          return n instanceof a ? (r = c(e.valueOf(), n.valueOf(), t), new a(r)) : (r = c(e.valueOf(), n, t), new a(r));
        }
        if (s(n)) {
          for (r = [], i = n.length, o = 0;i > o;o++) {
            r[o] = c(e, n[o], t);
          }
        } else {
          if (n instanceof a) {
            return r = c(e, n.valueOf(), t), new a(r);
          }
          r = t(e, n);
        }
      }
      return r;
    }, t.reduce = function(e, n, t) {
      return e instanceof a ? new a(r(e.valueOf(), n, t)) : r(e, n, t);
    }, t.deepForEach = function f(e, n) {
      e instanceof a && (e = e.valueOf());
      for (var t = 0, r = e.length;r > t;t++) {
        var i = e[t];
        s(i) ? f(i, n) : n(i);
      }
    };
  }, {"../util/index":218, "./Matrix":211}], 215:[function(e, n) {
    n.exports = function(n) {
      var t = (e("./../util/types"), {});
      n.error = t, t.UnsupportedTypeError = function(e, t) {
        if (2 == arguments.length) {
          var r = n["typeof"](t);
          this.message = "Function " + e + "(" + r + ") not supported";
        } else {
          if (arguments.length > 2) {
            var i = Array.prototype.splice.call(arguments, 1), o = i.map(function(e) {
              return n["typeof"](e);
            });
            this.message = "Function " + e + "(" + o.join(", ") + ") not supported";
          } else {
            this.message = "Unsupported type of argument in function " + e;
          }
        }
      }, t.UnsupportedTypeError.prototype = new TypeError, t.UnsupportedTypeError.prototype.name = "UnsupportedTypeError", t.ArgumentsError = function(e, n, t, r) {
        this.message = "Wrong number of arguments in function " + e + " (" + n + " provided, " + t + (void 0 != r ? "-" + r : "") + " expected)";
      }, t.ArgumentsError.prototype = new SyntaxError, t.ArgumentsError.prototype.name = "ArgumentError";
    };
  }, {"./../util/types":222}], 216:[function(e, n, t) {
    function r(e) {
      for (var n = [];c(e);) {
        n.push(e.length), e = e[0];
      }
      return n;
    }
    function i(e, n, t) {
      var r, o = e.length;
      if (o != n[t]) {
        throw new RangeError("Dimension mismatch (" + o + " !\x3d " + n[t] + ")");
      }
      if (t < n.length - 1) {
        var a = t + 1;
        for (r = 0;o > r;r++) {
          var s = e[r];
          if (!c(s)) {
            throw new RangeError("Dimension mismatch (" + (n.length - 1) + " \x3c " + n.length + ")");
          }
          i(e[r], n, a);
        }
      } else {
        for (r = 0;o > r;r++) {
          if (c(e[r])) {
            throw new RangeError("Dimension mismatch (" + (n.length + 1) + " \x3e " + n.length + ")");
          }
        }
      }
    }
    function o(e, n, t, r) {
      if (!c(e)) {
        throw Error("Array expected");
      }
      var i, a, s = e.length, f = n[t], l = Math.min(s, f);
      if (e.length = f, t < n.length - 1) {
        var m = t + 1;
        for (i = 0;l > i;i++) {
          a = e[i], o(a, n, m, r);
        }
        for (i = l;f > i;i++) {
          a = [], e[i] = a, o(a, n, m, r);
        }
      } else {
        if (void 0 !== r) {
          for (i = s;f > i;i++) {
            e[i] = u.clone(r);
          }
        }
      }
    }
    var a = e("./number"), s = e("./string"), u = e("./object"), c = (e("./types"), Array.isArray);
    t.size = function(e) {
      var n = r(e);
      return t.validate(e, n), n;
    }, t.validate = function(e, n) {
      var t = 0 == n.length;
      if (t) {
        if (c(e)) {
          throw new RangeError("Dimension mismatch (" + e.length + " !\x3d 0)");
        }
      } else {
        i(e, n, 0);
      }
    }, t.validateIndex = function(e, n) {
      if (!a.isNumber(e) || !a.isInteger(e)) {
        throw new TypeError("Index must be an integer (value: " + e + ")");
      }
      if (0 > e) {
        throw new RangeError("Index out of range (" + e + " \x3c 0)");
      }
      if (void 0 !== n && e >= n) {
        throw new RangeError("Index out of range (" + e + " \x3e " + (n - 1) + ")");
      }
    }, t.resize = function(e, n, t) {
      if (!c(e) || !c(n)) {
        throw new TypeError("Array expected");
      }
      if (0 === n.length) {
        throw new Error("Resizing to scalar is not supported");
      }
      n.forEach(function(e) {
        if (!a.isNumber(e) || (!a.isInteger(e) || 0 > e)) {
          throw new TypeError("Invalid size, must contain positive integers (size: " + s.format(n) + ")");
        }
      });
      for (var r = 1, i = e[0];c(i);) {
        r++, i = i[0];
      }
      for (;r < n.length;) {
        e = [e], r++;
      }
      for (;r > n.length;) {
        e = e[0], r--;
      }
      return o(e, n, 0, t), e;
    }, t.squeeze = function(e) {
      for (;c(e) && 1 === e.length;) {
        e = e[0];
      }
      return e;
    }, t.unsqueeze = function(e, n) {
      for (var r = t.size(e), i = 0, o = n - r.length;o > i;i++) {
        e = [e];
      }
      return e;
    }, t.isArray = c;
  }, {"./number":219, "./object":220, "./string":221, "./types":222}], 217:[function(e, n, t) {
    t.isBoolean = function(e) {
      return e instanceof Boolean || "boolean" == typeof e;
    };
  }, {}], 218:[function(e, n, t) {
    t.array = e("./array"), t["boolean"] = e("./boolean"), t.number = e("./number"), t.object = e("./object"), t.string = e("./string"), t.types = e("./types");
  }, {"./array":216, "./boolean":217, "./number":219, "./object":220, "./string":221, "./types":222}], 219:[function(e, n, t) {
    function r(e) {
      return e instanceof o ? e.isZero() : 0 === e;
    }
    function i(e, n, t) {
      var r;
      return e instanceof o ? (r = e.abs(), r.gte(n) && r.lt(t)) : (r = Math.abs(e), r >= n && t > r);
    }
    var o = e("bignumber.js");
    t.isNumber = function(e) {
      return e instanceof Number || "number" == typeof e;
    }, t.isInteger = function(e) {
      return e == Math.round(e);
    }, t.sign = function(e) {
      return e > 0 ? 1 : 0 > e ? -1 : 0;
    }, t.format = function(e, n) {
      if ("function" == typeof n) {
        return n(e);
      }
      if (1 / 0 === e) {
        return "Infinity";
      }
      if (e === -1 / 0) {
        return "-Infinity";
      }
      if (isNaN(e)) {
        return "NaN";
      }
      var a = "auto", s = void 0;
      switch(void 0 !== n && (n.notation && (a = n.notation), n && (t.isNumber(n) ? s = n : n.precision && (s = n.precision))), a) {
        case "fixed":
          return t.toFixed(e, s);
        case "scientific":
          throw new Error('Format notation "scientific" is deprecated. Use "exponential" instead.');;
        case "exponential":
          return t.toExponential(e, s);
        case "auto":
          var u = 0.001, c = 1E5;
          if (n && n.exponential) {
            void 0 !== n.exponential.lower && (u = n.exponential.lower), void 0 !== n.exponential.upper && (c = n.exponential.upper);
          } else {
            if (n && n.scientific) {
              throw new Error("options.scientific is deprecated, use options.exponential instead.");
            }
          }
          var f = e instanceof o;
          if (f) {
            var l = o.config().EXPONENTIAL_AT;
            o.config({EXPONENTIAL_AT:[Math.round(Math.log(u) / Math.LN10), Math.round(Math.log(c) / Math.LN10)]});
          }
          if (r(e)) {
            return "0";
          }
          var m;
          if (i(e, u, c)) {
            if (f) {
              m = (new o(e.toPrecision(s))).toString();
            } else {
              var p = s ? e.toPrecision(Math.min(s, 21)) : e.toPrecision();
              m = parseFloat(p) + "";
            }
          } else {
            m = t.toExponential(e, s);
          }
          return f && o.config({EXPONENTIAL_AT:l}), m.replace(/((\.\d*?)(0+))($|e)/, function() {
            var e = arguments[2], n = arguments[4];
            return "." !== e ? e + n : n;
          });
        default:
          throw new Error('Unknown notation "' + a + '". Choose "auto", "exponential", or "fixed".');;
      }
    }, t.toExponential = function(e, n) {
      return void 0 !== n ? e.toExponential(e instanceof o ? n - 1 : Math.min(n - 1, 20)) : e.toExponential();
    }, t.toFixed = function(e, n) {
      return e.toFixed(e instanceof o ? n || 0 : Math.min(n, 20));
    }, t.digits = function(e) {
      return e.toExponential().replace(/e[\+\-0-9]*$/, "").replace(/^0\.0*|\./, "").length;
    }, t.toBigNumber = function(e) {
      return t.digits(e) > 15 ? e : new o(e);
    }, t.toNumber = function(e) {
      return parseFloat(e.valueOf());
    };
  }, {"bignumber.js":223}], 220:[function(e, n, t) {
    t.clone = function r(e) {
      var n = typeof e;
      if ("number" === n || ("string" === n || ("boolean" === n || (null === e || void 0 === e)))) {
        return e;
      }
      if ("function" == typeof e.clone) {
        return e.clone();
      }
      if (Array.isArray(e)) {
        return e.map(function(e) {
          return r(e);
        });
      }
      if (e instanceof Object) {
        var t = {};
        for (var i in e) {
          e.hasOwnProperty(i) && (t[i] = r(e[i]));
        }
        return e;
      }
      throw new TypeError("Cannot clone " + e);
    }, t.extend = function(e, n) {
      for (var t in n) {
        n.hasOwnProperty(t) && (e[t] = n[t]);
      }
      return e;
    }, t.deepExtend = function i(e, n) {
      for (var t in n) {
        n.hasOwnProperty(t) && (n[t] && n[t].constructor === Object ? (void 0 === e[t] && (e[t] = {}), e[t].constructor === Object ? i(e[t], n[t]) : e[t] = n[t]) : e[t] = n[t]);
      }
      return e;
    }, t.deepEqual = function(e, n) {
      var r, i, o;
      if (Array.isArray(e)) {
        if (!Array.isArray(n)) {
          return!1;
        }
        if (e.length != n.length) {
          return!1;
        }
        for (i = 0, o = e.length;o > i;i++) {
          if (!t.deepEqual(e[i], n[i])) {
            return!1;
          }
        }
        return!0;
      }
      if (e instanceof Object) {
        if (Array.isArray(n) || !(n instanceof Object)) {
          return!1;
        }
        for (r in e) {
          if (e.hasOwnProperty(r) && !t.deepEqual(e[r], n[r])) {
            return!1;
          }
        }
        for (r in n) {
          if (n.hasOwnProperty(r) && !t.deepEqual(e[r], n[r])) {
            return!1;
          }
        }
        return!0;
      }
      return e == n;
    };
  }, {}], 221:[function(e, n, t) {
    function r(e, n) {
      if (Array.isArray(e)) {
        for (var i = "[", o = e.length, a = 0;o > a;a++) {
          0 != a && (i += ", "), i += r(e[a], n);
        }
        return i += "]";
      }
      return t.format(e, n);
    }
    var i = e("./number"), o = e("bignumber.js");
    t.isString = function(e) {
      return e instanceof String || "string" == typeof e;
    }, t.endsWith = function(e, n) {
      var t = e.length - n.length, r = e.length;
      return e.substring(t, r) === n;
    }, t.format = function(e, n) {
      return i.isNumber(e) || e instanceof o ? i.format(e, n) : Array.isArray(e) ? r(e, n) : t.isString(e) ? '"' + e + '"' : "function" == typeof e ? e.syntax ? e.syntax + "" : "function" : e instanceof Object ? "function" == typeof e.format ? e.format(n) : e.toString() : String(e);
    };
  }, {"./number":219, "bignumber.js":223}], 222:[function(e, n, t) {
    t.type = function r(e) {
      var r = typeof e;
      if ("object" === r) {
        if (null === e) {
          return "null";
        }
        if (e instanceof Boolean) {
          return "boolean";
        }
        if (e instanceof Number) {
          return "number";
        }
        if (e instanceof String) {
          return "string";
        }
        if (Array.isArray(e)) {
          return "array";
        }
        if (e instanceof Date) {
          return "date";
        }
      }
      return r;
    };
  }, {}], 223:[function(n, t) {
    !function(n) {
      function r(e, n) {
        var t, a, s, u, l, m, g = this;
        if (!(g instanceof r)) {
          return new r(e, n);
        }
        if (e instanceof r) {
          if (N = 0, n === t) {
            return g.s = e.s, g.e = e.e, void(g.c = (e = e.c) ? e.slice() : e);
          }
          e += "";
        }
        if ("string" != typeof e && (e = (s = "number" == typeof e || "[object Number]" == Object.prototype.toString.call(e)) && (0 === e && 0 > 1 / e) ? "-0" : e + ""), m = e, n === t && j.test(e)) {
          g.s = "-" == e.charAt(0) ? (e = e.slice(1), -1) : 1;
        } else {
          if (10 == n) {
            return c(e, p, h);
          }
          if (e = M.call(e).replace(/^\+(?!-)/, ""), g.s = "-" == e.charAt(0) ? (e = e.replace(/^-(?!-)/, ""), -1) : 1, null != n ? n != (0 | n) && b || (f = !(n >= 2 && 65 > n)) ? (i(n, 2), l = j.test(e)) : (u = "[" + E.slice(0, n = 0 | n) + "]+", e = e.replace(/\.$/, "").replace(/^\./, "0."), (l = (new RegExp("^" + u + "(?:\\." + u + ")?$", 37 > n ? "i" : "")).test(e)) ? (s && (e.replace(/^0\.0*|\./, "").length > 15 && i(m, 0), s = !s), e = o(e, 10, n, g.s)) : "Infinity" != e && ("NaN" != e && 
          (i(m, 1, n), e = "NaN"))) : l = j.test(e), !l) {
            return g.c = g.e = null, "Infinity" != e && ("NaN" != e && i(m, 3), g.s = null), void(N = 0);
          }
        }
        for ((t = e.indexOf(".")) > -1 && (e = e.replace(".", "")), (a = e.search(/e/i)) > 0 ? (0 > t && (t = a), t += +e.slice(a + 1), e = e.substring(0, a)) : 0 > t && (t = e.length), a = 0;"0" == e.charAt(a);a++) {
        }
        if (n = e.length, s && (n > 15 && (e.slice(a).length > 15 && i(m, 0))), N = 0, (t -= a + 1) > y) {
          g.c = g.e = null;
        } else {
          if (a == n || x > t) {
            g.c = [g.e = 0];
          } else {
            for (;"0" == e.charAt(--n);) {
            }
            for (g.e = t, g.c = [], t = 0;n >= a;g.c[t++] = +e.charAt(a++)) {
            }
          }
        }
      }
      function i(e, n, t, r, i, o) {
        if (b) {
          var a, s = ["new BigNumber", "cmp", "div", "eq", "gt", "gte", "lt", "lte", "minus", "mod", "plus", "times", "toFr"][N ? 0 > N ? -N : N : 0 > 1 / N ? 1 : 0] + "()", u = f ? " out of range" : " not a" + (i ? " non-zero" : "n") + " integer";
          throw u = ([s + " number type has more than 15 significant digits", s + " not a base " + t + " number", s + " base" + u, s + " not a number"][n] || t + "() " + n + (o ? " not a boolean or binary digit" : u + (r ? " or not [" + (f ? " negative, positive" : " integer, integer") + " ]" : ""))) + ": " + e, f = N = 0, a = new Error(u), a.name = "BigNumber Error", a;
        }
      }
      function o(e, n, t, i) {
        function o(e, r) {
          var i, o, a = 0, s = e.length, u = [0];
          for (r = r || t;s > a;a++) {
            for (o = u.length, i = 0;o > i;u[i] *= r, i++) {
            }
            for (u[0] += E.indexOf(e.charAt(a)), i = 0;i < u.length;i++) {
              u[i] > n - 1 && (null == u[i + 1] && (u[i + 1] = 0), u[i + 1] += u[i] / n ^ 0, u[i] %= n);
            }
          }
          return u.reverse();
        }
        function s(e) {
          for (var n = 0, t = e.length, r = "";t > n;r += E.charAt(e[n++])) {
          }
          return r;
        }
        var u, c, f, l, m, p;
        if (37 > t && (e = e.toLowerCase()), (u = e.indexOf(".")) > -1) {
          if (u = e.length - u - 1, c = o((new r(t)).pow(u).toF(), 10), l = e.split("."), f = o(l[1]), l = o(l[0]), p = a(f, c, f.length - c.length, i, n, 1 & l[l.length - 1]), m = p.c, u = p.e) {
            for (;++u;m.unshift(0)) {
            }
            e = s(l) + "." + s(m);
          } else {
            m[0] ? l[u = l.length - 1] < n - 1 ? (++l[u], e = s(l)) : e = (new r(s(l), n)).plus(C).toS(n) : e = s(l);
          }
        } else {
          e = s(o(e));
        }
        return e;
      }
      function a(e, n, t, i, o, a) {
        var s, c, f, l, m, h = n.slice(), g = s = n.length, d = e.length, b = e.slice(0, s), v = b.length, w = new r(C), E = w.c = [], N = 0, j = p + (w.e = t) + 1;
        for (w.s = i, i = 0 > j ? 0 : j;v++ < s;b.push(0)) {
        }
        h.unshift(0);
        do {
          for (f = 0;o > f;f++) {
            if (s != (v = b.length)) {
              l = s > v ? 1 : -1;
            } else {
              for (m = -1, l = 0;++m < s;) {
                if (n[m] != b[m]) {
                  l = n[m] > b[m] ? 1 : -1;
                  break;
                }
              }
            }
            if (!(0 > l)) {
              break;
            }
            for (c = v == s ? n : h;v;) {
              if (b[--v] < c[v]) {
                for (m = v;m && !b[--m];b[m] = o - 1) {
                }
                --b[m], b[v] += o;
              }
              b[v] -= c[v];
            }
            for (;!b[0];b.shift()) {
            }
          }
          E[N++] = l ? f : ++f, b[0] && l ? b[v] = e[g] || 0 : b = [e[g]];
        } while ((g++ < d || null != b[0]) && i--);
        return E[0] || (1 == N || (--w.e, E.shift())), N > j && u(w, p, o, a, null != b[0]), w.e > y ? w.c = w.e = null : w.e < x && (w.c = [w.e = 0]), w;
      }
      function s(e, n, t) {
        var i = n - (e = new r(e)).e, o = e.c;
        if (!o) {
          return e.toS();
        }
        for (o.length > ++n && u(e, i, 10), i = 0 == o[0] ? i + 1 : t ? n : e.e + i + 1;o.length < i;o.push(0)) {
        }
        return i = e.e, 1 == t || 2 == t && (--n < i || g >= i) ? (e.s < 0 && o[0] ? "-" : "") + (o.length > 1 ? (o.splice(1, 0, "."), o.join("")) : o[0]) + (0 > i ? "e" : "e+") + i : e.toS();
      }
      function u(e, n, t, r, i) {
        var o = e.c, a = e.s < 0, s = t / 2, u = e.e + n + 1, c = o[u], f = i || (0 > u || null != o[u + 1]);
        if (i = 4 > h ? (null != c || f) && (0 == h || (2 == h && !a || 3 == h && a)) : c > s || c == s && (4 == h || (f || (6 == h && (1 & o[u - 1] || !n && r) || (7 == h && !a || 8 == h && a)))), 1 > u || !o[0]) {
          return o.length = 0, o.push(0), i ? (o[0] = 1, e.e = -n) : e.e = 0, e;
        }
        if (o.length = u--, i) {
          for (--t;++o[u] > t;) {
            o[u] = 0, u-- || (++e.e, o.unshift(1));
          }
        }
        for (u = o.length;!o[--u];o.pop()) {
        }
        return e;
      }
      function c(e, n, t) {
        var i = h;
        return h = t, e = new r(e), e.c && u(e, n, 10), h = i, e;
      }
      var f, l = 1E9, m = 1E6, p = 20, h = 4, g = -7, d = 21, x = -l, y = l, b = !0, v = parseInt, w = r.prototype, E = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_", N = 0, j = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, M = String.prototype.trim || function() {
        return this.replace(/^\s+|\s+$/g, "");
      }, C = r(1);
      r.ROUND_UP = 0, r.ROUND_DOWN = 1, r.ROUND_CEIL = 2, r.ROUND_FLOOR = 3, r.ROUND_HALF_UP = 4, r.ROUND_HALF_DOWN = 5, r.ROUND_HALF_EVEN = 6, r.ROUND_HALF_CEIL = 7, r.ROUND_HALF_FLOOR = 8, r.config = function() {
        var e, n, t = 0, r = {}, o = arguments, a = o[0], s = "config", u = function(e, n, t) {
          return!((f = n > e || e > t) || v(e) != e && 0 !== e);
        }, c = a && "object" == typeof a ? function() {
          return a.hasOwnProperty(n) ? null != (e = a[n]) : void 0;
        } : function() {
          return o.length > t ? null != (e = o[t++]) : void 0;
        };
        return c(n = "DECIMAL_PLACES") && (u(e, 0, l) ? p = 0 | e : i(e, n, s)), r[n] = p, c(n = "ROUNDING_MODE") && (u(e, 0, 8) ? h = 0 | e : i(e, n, s)), r[n] = h, c(n = "EXPONENTIAL_AT") && (u(e, -l, l) ? g = -(d = ~~(0 > e ? -e : +e)) : !f && (e && (u(e[0], -l, 0) && u(e[1], 0, l))) ? (g = ~~e[0], d = ~~e[1]) : i(e, n, s, 1)), r[n] = [g, d], c(n = "RANGE") && (u(e, -l, l) && ~~e ? x = -(y = ~~(0 > e ? -e : +e)) : !f && (e && (u(e[0], -l, -1) && u(e[1], 1, l))) ? (x = ~~e[0], y = ~~e[1]) : i(e, 
        n, s, 1, 1)), r[n] = [x, y], c(n = "ERRORS") && (e === !!e || (1 === e || 0 === e) ? (f = N = 0, v = (b = !!e) ? parseInt : parseFloat) : i(e, n, s, 0, 0, 1)), r[n] = b, r;
      }, w.abs = w.absoluteValue = function() {
        var e = new r(this);
        return e.s < 0 && (e.s = 1), e;
      }, w.ceil = function() {
        return c(this, 0, 2);
      }, w.comparedTo = w.cmp = function(e, n) {
        var t, i = this, o = i.c, a = (N = -N, e = new r(e, n)).c, s = i.s, u = e.s, c = i.e, f = e.e;
        if (!s || !u) {
          return null;
        }
        if (t = o && !o[0], n = a && !a[0], t || n) {
          return t ? n ? 0 : -u : s;
        }
        if (s != u) {
          return s;
        }
        if (t = 0 > s, n = c == f, !o || !a) {
          return n ? 0 : !o ^ t ? 1 : -1;
        }
        if (!n) {
          return c > f ^ t ? 1 : -1;
        }
        for (s = -1, u = (c = o.length) < (f = a.length) ? c : f;++s < u;) {
          if (o[s] != a[s]) {
            return o[s] > a[s] ^ t ? 1 : -1;
          }
        }
        return c == f ? 0 : c > f ^ t ? 1 : -1;
      }, w.dividedBy = w.div = function(e, n) {
        var t = this.c, i = this.e, o = this.s, s = (N = 2, e = new r(e, n)).c, u = e.e, c = e.s, f = o == c ? 1 : -1;
        return(i || t && t[0]) && (u || s && s[0]) ? a(t, s, i - u, f, 10) : new r(o && (c && (t ? !s || t[0] != s[0] : s)) ? t && 0 == t[0] || !s ? 0 * f : f / 0 : 0 / 0);
      }, w.equals = w.eq = function(e, n) {
        return N = 3, 0 === this.cmp(e, n);
      }, w.floor = function() {
        return c(this, 0, 3);
      }, w.greaterThan = w.gt = function(e, n) {
        return N = 4, this.cmp(e, n) > 0;
      }, w.greaterThanOrEqualTo = w.gte = function(e, n) {
        return N = 5, 1 == (n = this.cmp(e, n)) || 0 === n;
      }, w.isFinite = w.isF = function() {
        return!!this.c;
      }, w.isNaN = function() {
        return!this.s;
      }, w.isNegative = w.isNeg = function() {
        return this.s < 0;
      }, w.isZero = w.isZ = function() {
        return!!this.c && 0 == this.c[0];
      }, w.lessThan = w.lt = function(e, n) {
        return N = 6, this.cmp(e, n) < 0;
      }, w.lessThanOrEqualTo = w.lte = function(e, n) {
        return N = 7, -1 == (n = this.cmp(e, n)) || 0 === n;
      }, w.minus = function(e, n) {
        var t, i, o, a, s = this, u = s.s;
        if (n = (N = 8, e = new r(e, n)).s, !u || !n) {
          return new r(0 / 0);
        }
        if (u != n) {
          return e.s = -n, s.plus(e);
        }
        var c = s.c, f = s.e, l = e.c, m = e.e;
        if (!f || !m) {
          if (!c || !l) {
            return c ? (e.s = -n, e) : new r(l ? s : 0 / 0);
          }
          if (!c[0] || !l[0]) {
            return l[0] ? (e.s = -n, e) : new r(c[0] ? s : 3 == h ? -0 : 0);
          }
        }
        if (c = c.slice(), u = f - m) {
          for (t = (a = 0 > u) ? (u = -u, c) : (m = f, l), t.reverse(), n = u;n--;t.push(0)) {
          }
          t.reverse();
        } else {
          for (o = ((a = c.length < l.length) ? c : l).length, u = n = 0;o > n;n++) {
            if (c[n] != l[n]) {
              a = c[n] < l[n];
              break;
            }
          }
        }
        if (a && (t = c, c = l, l = t, e.s = -e.s), (n = -((o = c.length) - l.length)) > 0) {
          for (;n--;c[o++] = 0) {
          }
        }
        for (n = l.length;n > u;) {
          if (c[--n] < l[n]) {
            for (i = n;i && !c[--i];c[i] = 9) {
            }
            --c[i], c[n] += 10;
          }
          c[n] -= l[n];
        }
        for (;0 == c[--o];c.pop()) {
        }
        for (;0 == c[0];c.shift(), --m) {
        }
        return(x > m || !c[0]) && (c[0] || (e.s = 3 == h ? -1 : 1), c = [m = 0]), e.c = c, e.e = m, e;
      }, w.modulo = w.mod = function(e, n) {
        var t = this, i = t.c, o = (N = 9, e = new r(e, n)).c, a = t.s, s = e.s;
        return n = !a || (!s || o && !o[0]), n || i && !i[0] ? new r(n ? 0 / 0 : t) : (t.s = e.s = 1, n = 1 == e.cmp(t), t.s = a, e.s = s, n ? new r(t) : (a = p, s = h, p = 0, h = 1, t = t.div(e), p = a, h = s, this.minus(t.times(e))));
      }, w.negated = w.neg = function() {
        var e = new r(this);
        return e.s = -e.s || null, e;
      }, w.plus = function(e, n) {
        var t, i = this, o = i.s;
        if (n = (N = 10, e = new r(e, n)).s, !o || !n) {
          return new r(0 / 0);
        }
        if (o != n) {
          return e.s = -n, i.minus(e);
        }
        var a = i.e, s = i.c, u = e.e, c = e.c;
        if (!a || !u) {
          if (!s || !c) {
            return new r(o / 0);
          }
          if (!s[0] || !c[0]) {
            return c[0] ? e : new r(s[0] ? i : 0 * o);
          }
        }
        if (s = s.slice(), o = a - u) {
          for (t = o > 0 ? (u = a, c) : (o = -o, s), t.reverse();o--;t.push(0)) {
          }
          t.reverse();
        }
        for (s.length - c.length < 0 && (t = c, c = s, s = t), o = c.length, n = 0;o;n = (s[--o] = s[o] + c[o] + n) / 10 ^ 0, s[o] %= 10) {
        }
        for (n && (s.unshift(n), ++u > y && (s = u = null)), o = s.length;0 == s[--o];s.pop()) {
        }
        return e.c = s, e.e = u, e;
      }, w.toPower = w.pow = function(e) {
        var n = 0 * e == 0 ? 0 | e : e, t = new r(this), o = new r(C);
        if (((f = -m > e || e > m) && (n = 1 * e / 0) || v(e) != e && (0 !== e && !(n = 0 / 0))) && !i(e, "exponent", "pow") || !n) {
          return new r(Math.pow(t.toS(), n));
        }
        for (n = 0 > n ? -n : n;1 & n && (o = o.times(t)), n >>= 1, n;) {
          t = t.times(t);
        }
        return 0 > e ? C.div(o) : o;
      }, w.round = function(e, n) {
        return e = null == e || ((f = 0 > e || e > l) || v(e) != e) && !i(e, "decimal places", "round") ? 0 : 0 | e, n = null == n || ((f = 0 > n || n > 8) || v(n) != n && 0 !== n) && !i(n, "mode", "round") ? h : 0 | n, c(this, e, n);
      }, w.squareRoot = w.sqrt = function() {
        var e, n, t, i, o = this, a = o.c, s = o.s, c = o.e, f = p, l = h, m = new r("0.5");
        if (1 !== s || (!a || !a[0])) {
          return new r(!s || 0 > s && (!a || a[0]) ? 0 / 0 : a ? o : 1 / 0);
        }
        for (s = Math.sqrt(o.toS()), h = 1, 0 == s || s == 1 / 0 ? (e = a.join(""), e.length + c & 1 || (e += "0"), n = new r(Math.sqrt(e) + ""), n.c || (n.c = [1]), n.e = ((c + 1) / 2 | 0) - (0 > c || 1 & c)) : n = new r(e = s.toString()), t = n.e, s = t + (p += 4), 3 > s && (s = 0), c = s;;) {
          if (i = n, n = m.times(i.plus(o.div(i))), i.c.slice(0, s).join("") === n.c.slice(0, s).join("")) {
            if (a = n.c, s -= e && n.e < t, 9 != a[s] || (9 != a[s - 1] || (9 != a[s - 2] || !(9 == a[s - 3] || e && 4 == a[s - 3])))) {
              if (!(a[c] || (a[c - 1] || (a[c - 2] || (a[c - 3] && 5 != a[c - 3] || (a.length > c - 2 && (a.length = c - 2), n.times(n).eq(o))))))) {
                for (;a.length < c - 3;) {
                  a.push(0);
                }
                a[c - 3]++;
              }
              return h = l, u(n, p = f, 10), n;
            }
            if (e && (9 == a[s - 3] && (i = n.round(f, 0), i.times(i).eq(o)))) {
              return h = l, p = f, i;
            }
            p += 4, s += 4, e = "";
          }
        }
      }, w.times = function(e, n) {
        var t, i = this, o = i.c, a = (N = 11, e = new r(e, n)).c, s = i.e, u = e.e, c = i.s;
        if (e.s = c == (n = e.s) ? 1 : -1, !((s || o && o[0]) && (u || a && a[0]))) {
          return new r(!c || (!n || (o && (!o[0] && !a) || a && (!a[0] && !o))) ? 0 / 0 : o && a ? 0 * e.s : e.s / 0);
        }
        for (e.e = s + u, (c = o.length) < (n = a.length) && (t = o, o = a, a = t, u = c, c = n, n = u), u = c + n, t = [];u--;t.push(0)) {
        }
        for (s = n - 1;s > -1;s--) {
          for (n = 0, u = c + s;u > s;n = t[u] + a[s] * o[u - s - 1] + n, t[u--] = n % 10 | 0, n = n / 10 | 0) {
          }
          n && (t[u] = (t[u] + n) % 10);
        }
        for (n && ++e.e, !t[0] && t.shift(), u = t.length;!t[--u];t.pop()) {
        }
        return e.c = e.e > y ? e.e = null : e.e < x ? [e.e = 0] : t, e;
      }, w.toExponential = w.toE = function(e) {
        return s(this, (null == e || ((f = 0 > e || e > l) || v(e) != e && 0 !== e) && !i(e, "decimal places", "toE")) && this.c ? this.c.length - 1 : 0 | e, 1);
      }, w.toFixed = w.toF = function(e) {
        var n, t, r, o = this;
        return null == e || (((f = 0 > e || e > l) || v(e) != e && 0 !== e) && !i(e, "decimal places", "toF") || (r = o.e + (0 | e))), n = g, e = d, g = -(d = 1 / 0), r == t ? t = o.toS() : (t = s(o, r), o.s < 0 && (o.c && (o.c[0] ? t.indexOf("-") < 0 && (t = "-" + t) : t = t.replace(/^-/, "")))), g = n, d = e, t;
      }, w.toFraction = w.toFr = function(e) {
        var n, t, o, a, s, u, c, l = a = new r(C), m = o = new r("0"), g = this, d = g.c, x = y, v = p, w = h, E = new r(C);
        if (!d) {
          return g.toS();
        }
        for (c = E.e = d.length - g.e - 1, (null == e || ((!(N = 12, u = new r(e)).s || ((f = u.cmp(l) < 0 || !u.c) || b && u.e < u.c.length - 1)) && !i(e, "max denominator", "toFr") || (e = u).cmp(E) > 0)) && (e = c > 0 ? E : l), y = 1 / 0, u = new r(d.join("")), p = 0, h = 1;n = u.div(E), s = a.plus(n.times(m)), 1 != s.cmp(e);) {
          a = m, m = s, l = o.plus(n.times(s = l)), o = s, E = u.minus(n.times(s = E)), u = s;
        }
        return s = e.minus(a).div(m), o = o.plus(s.times(l)), a = a.plus(s.times(m)), o.s = l.s = g.s, p = 2 * c, h = w, t = l.div(m).minus(g).abs().cmp(o.div(a).minus(g).abs()) < 1 ? [l.toS(), m.toS()] : [o.toS(), a.toS()], y = x, p = v, t;
      }, w.toPrecision = w.toP = function(e) {
        return null == e || ((f = 1 > e || e > l) || v(e) != e) && !i(e, "precision", "toP") ? this.toS() : s(this, 0 | --e, 2);
      }, w.toString = w.toS = function(e) {
        var n, t, r, a = this, u = a.e;
        if (null === u) {
          t = a.s ? "Infinity" : "NaN";
        } else {
          if (e === n && (g >= u || u >= d)) {
            return s(a, a.c.length - 1, 1);
          }
          if (t = a.c.join(""), 0 > u) {
            for (;++u;t = "0" + t) {
            }
            t = "0." + t;
          } else {
            if (r = t.length, u > 0) {
              if (++u > r) {
                for (u -= r;u--;t += "0") {
                }
              } else {
                r > u && (t = t.slice(0, u) + "." + t.slice(u));
              }
            } else {
              if (n = t.charAt(0), r > 1) {
                t = n + "." + t.slice(1);
              } else {
                if ("0" == n) {
                  return n;
                }
              }
            }
          }
          if (null != e) {
            if ((f = !(e >= 2 && 65 > e)) || e != (0 | e) && b) {
              i(e, "base", "toS");
            } else {
              if (t = o(t, 0 | e, 10, a.s), "0" == t) {
                return t;
              }
            }
          }
        }
        return a.s < 0 ? "-" + t : t;
      }, w.valueOf = function() {
        return this.toS();
      }, "undefined" != typeof t && t.exports ? t.exports = r : "function" == typeof e && e.amd ? e(function() {
        return r;
      }) : n.BigNumber = r;
    }(this);
  }, {}]}, {}, [1])(1);
});
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function walk(inner, outer, form) {
  if (cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return outer.call(null, form);
      } else {
        return null;
      }
    }
  }
};
clojure.walk.postwalk = function postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, postwalk, f), f, form);
};
clojure.walk.prewalk = function prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function keywordize_keys(m) {
  var f = function(p__6122) {
    var vec__6123 = p__6122;
    var k = cljs.core.nth.call(null, vec__6123, 0, null);
    var v = cljs.core.nth.call(null, vec__6123, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.map_QMARK_.call(null, x)) {
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
    } else {
      return x;
    }
  }, m);
};
clojure.walk.stringify_keys = function stringify_keys(m) {
  var f = function(p__6126) {
    var vec__6127 = p__6126;
    var k = cljs.core.nth.call(null, vec__6127, 0, null);
    var v = cljs.core.nth.call(null, vec__6127, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.map_QMARK_.call(null, x)) {
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
    } else {
      return x;
    }
  }, m);
};
clojure.walk.prewalk_replace = function prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("qgame.utils.math");
goog.require("cljs.core");
goog.require("clojure.walk");
goog.require("clojure.walk");
goog.require("clojure.walk");
goog.require("math.js");
qgame.utils.math.math = mathjs();
qgame.utils.math.pi = qgame.utils.math.math.pi;
qgame.utils.math.sqrt2 = qgame.utils.math.math.SQRT2;
qgame.utils.math.sqrt1_2 = qgame.utils.math.math.SQRT1_2;
qgame.utils.math.i = qgame.utils.math.math.i;
qgame.utils.math.abs = function abs(x) {
  return qgame.utils.math.nested_to_vec.call(null, qgame.utils.math.math.abs(qgame.utils.math.nested_to_matrix.call(null, x)));
};
qgame.utils.math.round = function() {
  var round = null;
  var round__1 = function(x) {
    return round.call(null, x, 0);
  };
  var round__2 = function(x, digits) {
    return qgame.utils.math.nested_to_vec.call(null, qgame.utils.math.math.round.call(null, qgame.utils.math.nested_to_matrix.call(null, x), digits));
  };
  round = function(x, digits) {
    switch(arguments.length) {
      case 1:
        return round__1.call(this, x);
      case 2:
        return round__2.call(this, x, digits);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  round.cljs$core$IFn$_invoke$arity$1 = round__1;
  round.cljs$core$IFn$_invoke$arity$2 = round__2;
  return round;
}();
qgame.utils.math.add = function() {
  var add = null;
  var add__1 = function(x) {
    return add.call(null, x, 0);
  };
  var add__2 = function(x, y) {
    return qgame.utils.math.nested_to_vec.call(null, qgame.utils.math.math.add(qgame.utils.math.nested_to_matrix.call(null, x), qgame.utils.math.nested_to_matrix.call(null, y)));
  };
  var add__3 = function() {
    var G__4828__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, add, add.call(null, x, y), more);
    };
    var G__4828 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__4828__delegate.call(this, x, y, more);
    };
    G__4828.cljs$lang$maxFixedArity = 2;
    G__4828.cljs$lang$applyTo = function(arglist__4829) {
      var x = cljs.core.first(arglist__4829);
      arglist__4829 = cljs.core.next(arglist__4829);
      var y = cljs.core.first(arglist__4829);
      var more = cljs.core.rest(arglist__4829);
      return G__4828__delegate(x, y, more);
    };
    G__4828.cljs$core$IFn$_invoke$arity$variadic = G__4828__delegate;
    return G__4828;
  }();
  add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return add__1.call(this, x);
      case 2:
        return add__2.call(this, x, y);
      default:
        return add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  add.cljs$lang$maxFixedArity = 2;
  add.cljs$lang$applyTo = add__3.cljs$lang$applyTo;
  add.cljs$core$IFn$_invoke$arity$1 = add__1;
  add.cljs$core$IFn$_invoke$arity$2 = add__2;
  add.cljs$core$IFn$_invoke$arity$variadic = add__3.cljs$core$IFn$_invoke$arity$variadic;
  return add;
}();
qgame.utils.math.subtract = function() {
  var subtract = null;
  var subtract__1 = function(x) {
    return subtract.call(null, 0, x);
  };
  var subtract__2 = function(x, y) {
    return qgame.utils.math.nested_to_vec.call(null, qgame.utils.math.math.subtract(qgame.utils.math.nested_to_matrix.call(null, x), qgame.utils.math.nested_to_matrix.call(null, y)));
  };
  var subtract__3 = function() {
    var G__4830__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, subtract, subtract.call(null, x, y), more);
    };
    var G__4830 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__4830__delegate.call(this, x, y, more);
    };
    G__4830.cljs$lang$maxFixedArity = 2;
    G__4830.cljs$lang$applyTo = function(arglist__4831) {
      var x = cljs.core.first(arglist__4831);
      arglist__4831 = cljs.core.next(arglist__4831);
      var y = cljs.core.first(arglist__4831);
      var more = cljs.core.rest(arglist__4831);
      return G__4830__delegate(x, y, more);
    };
    G__4830.cljs$core$IFn$_invoke$arity$variadic = G__4830__delegate;
    return G__4830;
  }();
  subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return subtract__1.call(this, x);
      case 2:
        return subtract__2.call(this, x, y);
      default:
        return subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subtract.cljs$lang$maxFixedArity = 2;
  subtract.cljs$lang$applyTo = subtract__3.cljs$lang$applyTo;
  subtract.cljs$core$IFn$_invoke$arity$1 = subtract__1;
  subtract.cljs$core$IFn$_invoke$arity$2 = subtract__2;
  subtract.cljs$core$IFn$_invoke$arity$variadic = subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return subtract;
}();
qgame.utils.math.multiply = function multiply(x, y) {
  return qgame.utils.math.nested_to_vec.call(null, qgame.utils.math.math.multiply(qgame.utils.math.nested_to_matrix.call(null, x), qgame.utils.math.nested_to_matrix.call(null, y)));
};
qgame.utils.math.divide = function divide(x, y) {
  return qgame.utils.math.nested_to_vec.call(null, qgame.utils.math.math.divide(qgame.utils.math.nested_to_matrix.call(null, x), qgame.utils.math.nested_to_matrix.call(null, y)));
};
qgame.utils.math.sqrt = function sqrt(x) {
  return qgame.utils.math.nested_to_vec.call(null, qgame.utils.math.math.sqrt(qgame.utils.math.nested_to_matrix.call(null, x)));
};
qgame.utils.math.cos = function cos(x) {
  return qgame.utils.math.nested_to_vec.call(null, qgame.utils.math.math.cos(qgame.utils.math.nested_to_matrix.call(null, x)));
};
qgame.utils.math.sin = function sin(x) {
  return qgame.utils.math.nested_to_vec.call(null, qgame.utils.math.math.sin(qgame.utils.math.nested_to_matrix.call(null, x)));
};
qgame.utils.math.exp_xi = function exp_xi(x) {
  return qgame.utils.math.math.exp(new qgame.utils.math.math.complex(0, x));
};
qgame.utils.math.to_matrix = function to_matrix(x) {
  if (cljs.core.coll_QMARK_.call(null, x)) {
    return new qgame.utils.math.math.matrix(cljs.core.to_array.call(null, x));
  } else {
    return x;
  }
};
qgame.utils.math.nested_to_matrix = function nested_to_matrix(coll) {
  return clojure.walk.postwalk.call(null, qgame.utils.math.to_matrix, coll);
};
qgame.utils.math.to_vec = function to_vec(x) {
  if (x instanceof Array) {
    return cljs.core.vec.call(null, x);
  } else {
    if (cljs.core._EQ_.call(null, qgame.utils.math.math.typeof(x), "matrix")) {
      return cljs.core.vec.call(null, x.toArray());
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return x;
      } else {
        return null;
      }
    }
  }
};
qgame.utils.math.nested_to_vec = function nested_to_vec(mat) {
  return clojure.walk.prewalk.call(null, qgame.utils.math.to_vec, mat);
};
qgame.utils.math.rand_2D_complex = function() {
  var rand_2D_complex = null;
  var rand_2D_complex__3 = function(m, n, bound) {
    return rand_2D_complex.call(null, m, n, bound, bound);
  };
  var rand_2D_complex__4 = function(m, n, real_bound, imag_bound) {
    var rand_n = function rand_n(bound) {
      return cljs.core.rand_int.call(null, bound * 2 + 1 - bound);
    };
    var rand_cmp = function rand_cmp() {
      return new qgame.utils.math.math.complex(rand_n.call(null, real_bound), rand_n.call(null, imag_bound));
    };
    var rand_1D = function rand_1D(dim) {
      return qgame.utils.math.to_matrix.call(null, cljs.core.repeatedly.call(null, dim, rand_cmp));
    };
    return qgame.utils.math.to_matrix.call(null, cljs.core.repeatedly.call(null, m, function() {
      return rand_1D.call(null, n);
    }));
  };
  rand_2D_complex = function(m, n, real_bound, imag_bound) {
    switch(arguments.length) {
      case 3:
        return rand_2D_complex__3.call(this, m, n, real_bound);
      case 4:
        return rand_2D_complex__4.call(this, m, n, real_bound, imag_bound);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand_2D_complex.cljs$core$IFn$_invoke$arity$3 = rand_2D_complex__3;
  rand_2D_complex.cljs$core$IFn$_invoke$arity$4 = rand_2D_complex__4;
  return rand_2D_complex;
}();
qgame.utils.math.mat_EQ__QMARK_ = function() {
  var mat_EQ__QMARK_ = null;
  var mat_EQ__QMARK___2 = function(mat01, mat02) {
    qgame.utils.math.result = true;
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.false_QMARK_, qgame.utils.math.math.equal(mat01.size(), mat02.size())))) {
      qgame.utils.math.result = false;
    } else {
      qgame.utils.math.math.equal(mat01, mat02).forEach(function(val) {
        if (val === false) {
          return qgame.utils.math.result = false;
        } else {
          return null;
        }
      });
    }
    return qgame.utils.math.result;
  };
  var mat_EQ__QMARK___3 = function() {
    var G__4832__delegate = function(mat01, mat02, more) {
      var and__3418__auto__ = mat_EQ__QMARK_.call(null, mat01, mat02);
      if (cljs.core.truth_(and__3418__auto__)) {
        return cljs.core.apply.call(null, mat_EQ__QMARK_, mat02, more);
      } else {
        return and__3418__auto__;
      }
    };
    var G__4832 = function(mat01, mat02, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__4832__delegate.call(this, mat01, mat02, more);
    };
    G__4832.cljs$lang$maxFixedArity = 2;
    G__4832.cljs$lang$applyTo = function(arglist__4833) {
      var mat01 = cljs.core.first(arglist__4833);
      arglist__4833 = cljs.core.next(arglist__4833);
      var mat02 = cljs.core.first(arglist__4833);
      var more = cljs.core.rest(arglist__4833);
      return G__4832__delegate(mat01, mat02, more);
    };
    G__4832.cljs$core$IFn$_invoke$arity$variadic = G__4832__delegate;
    return G__4832;
  }();
  mat_EQ__QMARK_ = function(mat01, mat02, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return mat_EQ__QMARK___2.call(this, mat01, mat02);
      default:
        return mat_EQ__QMARK___3.cljs$core$IFn$_invoke$arity$variadic(mat01, mat02, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mat_EQ__QMARK_.cljs$lang$maxFixedArity = 2;
  mat_EQ__QMARK_.cljs$lang$applyTo = mat_EQ__QMARK___3.cljs$lang$applyTo;
  mat_EQ__QMARK_.cljs$core$IFn$_invoke$arity$2 = mat_EQ__QMARK___2;
  mat_EQ__QMARK_.cljs$core$IFn$_invoke$arity$variadic = mat_EQ__QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return mat_EQ__QMARK_;
}();
qgame.utils.math.square_QMARK_ = function square_QMARK_(coll) {
  var mat = qgame.utils.math.nested_to_matrix.call(null, coll);
  var vec__4835 = mat.size();
  var rows = cljs.core.nth.call(null, vec__4835, 0, null);
  var cols = cljs.core.nth.call(null, vec__4835, 1, null);
  return cljs.core._EQ_.call(null, rows, cols);
};
qgame.utils.math.complex_conjugate = function complex_conjugate(x) {
  return qgame.utils.math.nested_to_vec.call(null, qgame.utils.math.math.conj(qgame.utils.math.nested_to_matrix.call(null, x)));
};
qgame.utils.math.conjugate_transpose = function conjugate_transpose(x) {
  return qgame.utils.math.nested_to_vec.call(null, qgame.utils.math.math.transpose(qgame.utils.math.nested_to_matrix.call(null, qgame.utils.math.complex_conjugate.call(null, x))));
};
qgame.utils.math.unitary_QMARK_ = function unitary_QMARK_(coll) {
  var mat = qgame.utils.math.nested_to_matrix.call(null, coll);
  var vec__4837 = mat.size();
  var m = cljs.core.nth.call(null, vec__4837, 0, null);
  var n = cljs.core.nth.call(null, vec__4837, 1, null);
  var id_mat = qgame.utils.math.math.eye(m, n);
  var conj_trans = qgame.utils.math.conjugate_transpose.call(null, mat);
  return qgame.utils.math.mat_EQ__QMARK_.call(null, id_mat, qgame.utils.math.round.call(null, qgame.utils.math.multiply.call(null, mat, conj_trans), 5), qgame.utils.math.round.call(null, qgame.utils.math.multiply.call(null, conj_trans, mat), 5));
};
qgame.utils.math.to_string = function to_string(x) {
  return x.toString();
};
qgame.utils.math.eval_math_string = function eval_math_string(s) {
  return qgame.utils.math.round.call(null, qgame.utils.math.math.eval(s), 5);
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj6129 = {};
  return obj6129;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3418__auto__ = reader;
    if (and__3418__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4057__auto__ = reader == null ? null : reader;
    return function() {
      var or__3430__auto__ = cljs.reader.read_char[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.reader.read_char["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3418__auto__ = reader;
    if (and__3418__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3418__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4057__auto__ = reader == null ? null : reader;
    return function() {
      var or__3430__auto__ = cljs.reader.unread[goog.typeOf(x__4057__auto__)];
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.reader.unread["_"];
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__3997__auto__, writer__3998__auto__, opt__3999__auto__) {
  return cljs.core._write.call(null, writer__3998__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3430__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3430__auto__)) {
    return or__3430__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__6130) {
    var rdr = cljs.core.first(arglist__6130);
    var msg = cljs.core.rest(arglist__6130);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3418__auto__ = !(ch === "#");
  if (and__3418__auto__) {
    var and__3418__auto____$1 = !(ch === "'");
    if (and__3418__auto____$1) {
      var and__3418__auto____$2 = !(ch === ":");
      if (and__3418__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3418__auto____$2;
      }
    } else {
      return and__3418__auto____$1;
    }
  } else {
    return and__3418__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || (cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch))) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__6131 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__6132 = cljs.reader.read_char.call(null, rdr);
      sb = G__6131;
      ch = G__6132;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || (ch === "\r" || ch == null)) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+)/([0-9]+)");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "[:]?([^0-9/].*/)?([^0-9/][^/]*)");
cljs.reader.re_find_STAR_ = function re_find_STAR_(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.int_pattern, s);
  var group3 = groups[2];
  if (!(group3 == null || group3.length < 1)) {
    return 0;
  } else {
    var negate = "-" === groups[1] ? -1 : 1;
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[7]) ? [groups[7], parseInt(groups[7])] : new cljs.core.Keyword(null, "default", "default", 2558708147) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      return negate * parseInt(n, radix);
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator) / parseInt(denominator);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{2}");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{4}");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__6133 = cljs.reader.read_char.call(null, rdr);
      ch = G__6133;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4090__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var macrofn = temp__4090__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__6134 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__6134;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__6135 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__6135;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4090__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var obj = temp__4090__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3430__auto__ = ch == null;
      if (or__3430__auto__) {
        return or__3430__auto__;
      } else {
        var or__3430__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3430__auto____$1) {
          return or__3430__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3430__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3430__auto__)) {
        return or__3430__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__6136 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__6137 = cljs.reader.read_char.call(null, reader);
      buffer = G__6136;
      ch = G__6137;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__6138 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__6139 = cljs.reader.read_char.call(null, reader);
        buffer = G__6138;
        ch = G__6139;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
            var G__6140 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__6141 = cljs.reader.read_char.call(null, reader);
            buffer = G__6140;
            ch = G__6141;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || (name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1))) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__6143 = o;
    if (G__6143) {
      var bit__4080__auto__ = G__6143.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4080__auto__ || G__6143.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__6143.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__6143);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__6143);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", -1545057749, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__6144 = reader;
        var G__6145 = eof_is_error;
        var G__6146 = sentinel;
        var G__6147 = is_recursive;
        reader = G__6144;
        eof_is_error = G__6145;
        sentinel = G__6146;
        is_recursive = G__6147;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__6148 = cljs.reader.read_comment.call(null, reader, ch);
          var G__6149 = eof_is_error;
          var G__6150 = sentinel;
          var G__6151 = is_recursive;
          reader = G__6148;
          eof_is_error = G__6149;
          sentinel = G__6150;
          is_recursive = G__6151;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__6152 = reader;
              var G__6153 = eof_is_error;
              var G__6154 = sentinel;
              var G__6155 = is_recursive;
              reader = G__6152;
              eof_is_error = G__6153;
              sentinel = G__6154;
              is_recursive = G__6155;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, true, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__6156 = b.append("0");
            b = G__6156;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(month, leap_year_QMARK_) {
    return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
  };
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__6158 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__6158, 0, null);
  var years = cljs.core.nth.call(null, vec__6158, 1, null);
  var months = cljs.core.nth.call(null, vec__6158, 2, null);
  var days = cljs.core.nth.call(null, vec__6158, 3, null);
  var hours = cljs.core.nth.call(null, vec__6158, 4, null);
  var minutes = cljs.core.nth.call(null, vec__6158, 5, null);
  var seconds = cljs.core.nth.call(null, vec__6158, 6, null);
  var fraction = cljs.core.nth.call(null, vec__6158, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__6158, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__6158, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__6158, 10, null);
  var v = vec__6158;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3430__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3430__auto__)) {
        return or__3430__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3430__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3430__auto__)) {
        return or__3430__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3430__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3430__auto__)) {
        return or__3430__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3430__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3430__auto__)) {
        return or__3430__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3430__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3430__auto__)) {
        return or__3430__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3430__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3430__auto__)) {
        return or__3430__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3430__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3430__auto__)) {
        return or__3430__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3430__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3430__auto__)) {
        return or__3430__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4090__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__6160 = temp__4090__auto__;
    var years = cljs.core.nth.call(null, vec__6160, 0, null);
    var months = cljs.core.nth.call(null, vec__6160, 1, null);
    var days = cljs.core.nth.call(null, vec__6160, 2, null);
    var hours = cljs.core.nth.call(null, vec__6160, 3, null);
    var minutes = cljs.core.nth.call(null, vec__6160, 4, null);
    var seconds = cljs.core.nth.call(null, vec__6160, 5, null);
    var ms = cljs.core.nth.call(null, vec__6160, 6, null);
    var offset = cljs.core.nth.call(null, vec__6160, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__6173_6185 = cljs.core.seq.call(null, form);
    var chunk__6174_6186 = null;
    var count__6175_6187 = 0;
    var i__6176_6188 = 0;
    while (true) {
      if (i__6176_6188 < count__6175_6187) {
        var x_6189 = cljs.core._nth.call(null, chunk__6174_6186, i__6176_6188);
        arr.push(x_6189);
        var G__6190 = seq__6173_6185;
        var G__6191 = chunk__6174_6186;
        var G__6192 = count__6175_6187;
        var G__6193 = i__6176_6188 + 1;
        seq__6173_6185 = G__6190;
        chunk__6174_6186 = G__6191;
        count__6175_6187 = G__6192;
        i__6176_6188 = G__6193;
        continue;
      } else {
        var temp__4092__auto___6194 = cljs.core.seq.call(null, seq__6173_6185);
        if (temp__4092__auto___6194) {
          var seq__6173_6195__$1 = temp__4092__auto___6194;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__6173_6195__$1)) {
            var c__4178__auto___6196 = cljs.core.chunk_first.call(null, seq__6173_6195__$1);
            var G__6197 = cljs.core.chunk_rest.call(null, seq__6173_6195__$1);
            var G__6198 = c__4178__auto___6196;
            var G__6199 = cljs.core.count.call(null, c__4178__auto___6196);
            var G__6200 = 0;
            seq__6173_6185 = G__6197;
            chunk__6174_6186 = G__6198;
            count__6175_6187 = G__6199;
            i__6176_6188 = G__6200;
            continue;
          } else {
            var x_6201 = cljs.core.first.call(null, seq__6173_6195__$1);
            arr.push(x_6201);
            var G__6202 = cljs.core.next.call(null, seq__6173_6195__$1);
            var G__6203 = null;
            var G__6204 = 0;
            var G__6205 = 0;
            seq__6173_6185 = G__6202;
            chunk__6174_6186 = G__6203;
            count__6175_6187 = G__6204;
            i__6176_6188 = G__6205;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj6178 = {};
        return obj6178;
      }();
      var seq__6179_6206 = cljs.core.seq.call(null, form);
      var chunk__6180_6207 = null;
      var count__6181_6208 = 0;
      var i__6182_6209 = 0;
      while (true) {
        if (i__6182_6209 < count__6181_6208) {
          var vec__6183_6210 = cljs.core._nth.call(null, chunk__6180_6207, i__6182_6209);
          var k_6211 = cljs.core.nth.call(null, vec__6183_6210, 0, null);
          var v_6212 = cljs.core.nth.call(null, vec__6183_6210, 1, null);
          obj[cljs.core.name.call(null, k_6211)] = v_6212;
          var G__6213 = seq__6179_6206;
          var G__6214 = chunk__6180_6207;
          var G__6215 = count__6181_6208;
          var G__6216 = i__6182_6209 + 1;
          seq__6179_6206 = G__6213;
          chunk__6180_6207 = G__6214;
          count__6181_6208 = G__6215;
          i__6182_6209 = G__6216;
          continue;
        } else {
          var temp__4092__auto___6217 = cljs.core.seq.call(null, seq__6179_6206);
          if (temp__4092__auto___6217) {
            var seq__6179_6218__$1 = temp__4092__auto___6217;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__6179_6218__$1)) {
              var c__4178__auto___6219 = cljs.core.chunk_first.call(null, seq__6179_6218__$1);
              var G__6220 = cljs.core.chunk_rest.call(null, seq__6179_6218__$1);
              var G__6221 = c__4178__auto___6219;
              var G__6222 = cljs.core.count.call(null, c__4178__auto___6219);
              var G__6223 = 0;
              seq__6179_6206 = G__6220;
              chunk__6180_6207 = G__6221;
              count__6181_6208 = G__6222;
              i__6182_6209 = G__6223;
              continue;
            } else {
              var vec__6184_6224 = cljs.core.first.call(null, seq__6179_6218__$1);
              var k_6225 = cljs.core.nth.call(null, vec__6184_6224, 0, null);
              var v_6226 = cljs.core.nth.call(null, vec__6184_6224, 1, null);
              obj[cljs.core.name.call(null, k_6225)] = v_6226;
              var G__6227 = cljs.core.next.call(null, seq__6179_6218__$1);
              var G__6228 = null;
              var G__6229 = 0;
              var G__6230 = 0;
              seq__6179_6206 = G__6227;
              chunk__6180_6207 = G__6228;
              count__6181_6208 = G__6229;
              i__6182_6209 = G__6230;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return f;
  });
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return null;
  });
  return old_parser;
};
goog.provide("qgame.interpreter.parser");
goog.require("cljs.core");
goog.require("qgame.interpreter.warning");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("qgame.interpreter.warning");
goog.require("qgame.interpreter.warning");
qgame.interpreter.parser.parse_instruction = function parse_instruction(p__4966, p__4967) {
  var vec__4971 = p__4966;
  var i_sym = cljs.core.nth.call(null, vec__4971, 0, null);
  var instruction = vec__4971;
  var vec__4972 = p__4967;
  var current = cljs.core.nth.call(null, vec__4972, 0, null);
  if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "end", "end", -1640430956, null), i_sym)) {
    var G__4973 = current;
    if (cljs.core._EQ_.call(null, "else_clause", G__4973)) {
      return cljs.core.list(new cljs.core.Symbol(null, "end", "end", -1640430956, null));
    } else {
      if (cljs.core._EQ_.call(null, "then_clause", G__4973)) {
        return cljs.core.list(new cljs.core.Symbol(null, "else", "else", -1637415182, null));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(current)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    return instruction;
  }
};
qgame.interpreter.parser.revise_on_end = function revise_on_end(p__4974) {
  var vec__4977 = p__4974;
  var current = cljs.core.nth.call(null, vec__4977, 0, null);
  var remaining = cljs.core.nthnext.call(null, vec__4977, 1);
  var open_branches = vec__4977;
  if (cljs.core.empty_QMARK_.call(null, open_branches)) {
    qgame.interpreter.warning.warn_BANG_.call(null, new cljs.core.Keyword(null, "parsing", "parsing", 4515908130), new cljs.core.Keyword(null, "extra-end", "extra-end", 759430416));
    return open_branches;
  } else {
    var G__4978 = current;
    if (cljs.core._EQ_.call(null, "else_clause", G__4978)) {
      return remaining;
    } else {
      if (cljs.core._EQ_.call(null, "then_clause", G__4978)) {
        return cljs.core.cons.call(null, "else_clause", remaining);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(current)].join(""));
        } else {
          return null;
        }
      }
    }
  }
};
qgame.interpreter.parser.revise = function revise(open_branches, p__4979) {
  var vec__4982 = p__4979;
  var i_sym = cljs.core.nth.call(null, vec__4982, 0, null);
  var G__4983 = i_sym;
  if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "end", "end", -1640430956, null), G__4983)) {
    return qgame.interpreter.parser.revise_on_end.call(null, open_branches);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "else", "else", -1637415182, null), G__4983)) {
      return cljs.core.cons.call(null, "else_clause", cljs.core.rest.call(null, open_branches));
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "measure", "measure", -702210281, null), G__4983)) {
        return cljs.core.cons.call(null, "then_clause", open_branches);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return open_branches;
        } else {
          return null;
        }
      }
    }
  }
};
qgame.interpreter.parser.parse_program = function parse_program(program) {
  var open_branches = cljs.core.List.EMPTY;
  var parsed_program = cljs.core.PersistentVector.EMPTY;
  var G__4993 = program;
  var vec__4994 = G__4993;
  var instruction = cljs.core.nth.call(null, vec__4994, 0, null);
  var remaining = cljs.core.nthnext.call(null, vec__4994, 1);
  var unparsed = vec__4994;
  var open_branches__$1 = open_branches;
  var parsed_program__$1 = parsed_program;
  var G__4993__$1 = G__4993;
  while (true) {
    var open_branches__$2 = open_branches__$1;
    var parsed_program__$2 = parsed_program__$1;
    var vec__4995 = G__4993__$1;
    var instruction__$1 = cljs.core.nth.call(null, vec__4995, 0, null);
    var remaining__$1 = cljs.core.nthnext.call(null, vec__4995, 1);
    var unparsed__$1 = vec__4995;
    if (cljs.core.empty_QMARK_.call(null, unparsed__$1)) {
      var seq__4996_5000 = cljs.core.seq.call(null, open_branches__$2);
      var chunk__4997_5001 = null;
      var count__4998_5002 = 0;
      var i__4999_5003 = 0;
      while (true) {
        if (i__4999_5003 < count__4998_5002) {
          var status_5004 = cljs.core._nth.call(null, chunk__4997_5001, i__4999_5003);
          qgame.interpreter.warning.warn_BANG_.call(null, new cljs.core.Keyword(null, "parsing", "parsing", 4515908130), new cljs.core.Keyword(null, "lingering-status", "lingering-status", 1716493074), status_5004);
          var G__5005 = seq__4996_5000;
          var G__5006 = chunk__4997_5001;
          var G__5007 = count__4998_5002;
          var G__5008 = i__4999_5003 + 1;
          seq__4996_5000 = G__5005;
          chunk__4997_5001 = G__5006;
          count__4998_5002 = G__5007;
          i__4999_5003 = G__5008;
          continue;
        } else {
          var temp__4092__auto___5009 = cljs.core.seq.call(null, seq__4996_5000);
          if (temp__4092__auto___5009) {
            var seq__4996_5010__$1 = temp__4092__auto___5009;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__4996_5010__$1)) {
              var c__4178__auto___5011 = cljs.core.chunk_first.call(null, seq__4996_5010__$1);
              var G__5012 = cljs.core.chunk_rest.call(null, seq__4996_5010__$1);
              var G__5013 = c__4178__auto___5011;
              var G__5014 = cljs.core.count.call(null, c__4178__auto___5011);
              var G__5015 = 0;
              seq__4996_5000 = G__5012;
              chunk__4997_5001 = G__5013;
              count__4998_5002 = G__5014;
              i__4999_5003 = G__5015;
              continue;
            } else {
              var status_5016 = cljs.core.first.call(null, seq__4996_5010__$1);
              qgame.interpreter.warning.warn_BANG_.call(null, new cljs.core.Keyword(null, "parsing", "parsing", 4515908130), new cljs.core.Keyword(null, "lingering-status", "lingering-status", 1716493074), status_5016);
              var G__5017 = cljs.core.next.call(null, seq__4996_5010__$1);
              var G__5018 = null;
              var G__5019 = 0;
              var G__5020 = 0;
              seq__4996_5000 = G__5017;
              chunk__4997_5001 = G__5018;
              count__4998_5002 = G__5019;
              i__4999_5003 = G__5020;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return cljs.core.seq.call(null, parsed_program__$2);
    } else {
      var G__5021 = qgame.interpreter.parser.revise.call(null, open_branches__$2, instruction__$1);
      var G__5022 = cljs.core.conj.call(null, parsed_program__$2, qgame.interpreter.parser.parse_instruction.call(null, instruction__$1, open_branches__$2));
      var G__5023 = remaining__$1;
      open_branches__$1 = G__5021;
      parsed_program__$1 = G__5022;
      G__4993__$1 = G__5023;
      continue;
    }
    break;
  }
};
qgame.interpreter.parser.parse_string = function parse_string(s) {
  return qgame.interpreter.parser.parse_program.call(null, cljs.reader.read_string.call(null, s));
};
goog.provide("qgame.utils.amplitudes");
goog.require("cljs.core");
goog.require("qgame.utils.general");
goog.require("qgame.utils.math");
goog.require("qgame.utils.general");
goog.require("qgame.utils.general");
goog.require("qgame.utils.math");
goog.require("qgame.utils.math");
qgame.utils.amplitudes.get_num_qubits = function get_num_qubits(amplitudes) {
  return qgame.utils.general.bit_size.call(null, cljs.core.count.call(null, amplitudes));
};
qgame.utils.amplitudes.amplitude_to_probability = function amplitude_to_probability(amplitude) {
  var abs_val = qgame.utils.math.abs.call(null, amplitude);
  return qgame.utils.math.multiply.call(null, abs_val, abs_val);
};
qgame.utils.amplitudes.qubits_to_amplitude_indices = function qubits_to_amplitude_indices(qubits, tot_num_qubits) {
  var excluded_qubits = cljs.core.remove.call(null, cljs.core.set.call(null, qubits), cljs.core.range.call(null, tot_num_qubits));
  var iter__4147__auto__ = function iter__4820(s__4821) {
    return new cljs.core.LazySeq(null, function() {
      var s__4821__$1 = s__4821;
      while (true) {
        var temp__4092__auto__ = cljs.core.seq.call(null, s__4821__$1);
        if (temp__4092__auto__) {
          var s__4821__$2 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, s__4821__$2)) {
            var c__4145__auto__ = cljs.core.chunk_first.call(null, s__4821__$2);
            var size__4146__auto__ = cljs.core.count.call(null, c__4145__auto__);
            var b__4823 = cljs.core.chunk_buffer.call(null, size__4146__auto__);
            if (function() {
              var i__4822 = 0;
              while (true) {
                if (i__4822 < size__4146__auto__) {
                  var seed_index = cljs.core._nth.call(null, c__4145__auto__, i__4822);
                  cljs.core.chunk_append.call(null, b__4823, qgame.utils.general.itermap.call(null, cljs.core.bit_flip, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [seed_index], null), qubits));
                  var G__4824 = i__4822 + 1;
                  i__4822 = G__4824;
                  continue;
                } else {
                  return true;
                }
                break;
              }
            }()) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__4823), iter__4820.call(null, cljs.core.chunk_rest.call(null, s__4821__$2)));
            } else {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__4823), null);
            }
          } else {
            var seed_index = cljs.core.first.call(null, s__4821__$2);
            return cljs.core.cons.call(null, qgame.utils.general.itermap.call(null, cljs.core.bit_flip, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [seed_index], null), qubits), iter__4820.call(null, cljs.core.rest.call(null, s__4821__$2)));
          }
        } else {
          return null;
        }
        break;
      }
    }, null, null);
  };
  return iter__4147__auto__.call(null, qgame.utils.general.itermap.call(null, cljs.core.bit_flip, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [0], null), excluded_qubits));
};
qgame.utils.amplitudes.qubit_state_amplitudes = function qubit_state_amplitudes(amplitudes, qubit, binary_state) {
  var excluded_qubits = cljs.core.remove.call(null, cljs.core.PersistentHashSet.fromArray([qubit], true), cljs.core.range.call(null, qgame.utils.amplitudes.get_num_qubits.call(null, amplitudes)));
  var seed_index = binary_state * (0 | 1 << qubit);
  var indices = qgame.utils.general.itermap.call(null, cljs.core.bit_flip, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [seed_index], null), excluded_qubits);
  return cljs.core.map.call(null, cljs.core.partial.call(null, cljs.core.get, amplitudes), indices);
};
qgame.utils.amplitudes.probability_of = function probability_of(p__4825, qubit, binary_state) {
  var map__4827 = p__4825;
  var map__4827__$1 = cljs.core.seq_QMARK_.call(null, map__4827) ? cljs.core.apply.call(null, cljs.core.hash_map, map__4827) : map__4827;
  var amplitudes = cljs.core.get.call(null, map__4827__$1, new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714));
  var sub_amplitudes = qgame.utils.amplitudes.qubit_state_amplitudes.call(null, amplitudes, qubit, binary_state);
  var probabilities = cljs.core.map.call(null, qgame.utils.amplitudes.amplitude_to_probability, sub_amplitudes);
  return cljs.core.reduce.call(null, cljs.core._PLUS_, probabilities);
};
goog.provide("qgame.interpreter.qgates");
goog.require("cljs.core");
goog.require("qgame.utils.general");
goog.require("qgame.utils.amplitudes");
goog.require("qgame.utils.math");
goog.require("qgame.utils.amplitudes");
goog.require("qgame.utils.amplitudes");
goog.require("qgame.utils.general");
goog.require("qgame.utils.general");
goog.require("qgame.utils.math");
goog.require("qgame.utils.math");
qgame.interpreter.qgates.apply_operator = function apply_operator(amplitudes, operator, qubits) {
  return cljs.core.reduce.call(null, operator, amplitudes, qgame.utils.amplitudes.qubits_to_amplitude_indices.call(null, qubits, qgame.utils.amplitudes.get_num_qubits.call(null, amplitudes)));
};
qgame.interpreter.qgates.to_operator = function to_operator(matrix) {
  if (qgame.utils.math.square_QMARK_.call(null, matrix)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("m", "square?", "m/square?", 689332155, null), new cljs.core.Symbol(null, "matrix", "matrix", 1573196154, null))))].join(""));
  }
  if (cljs.core.truth_(qgame.utils.math.unitary_QMARK_.call(null, matrix))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("m", "unitary?", "m/unitary?", -1932796158, null), new cljs.core.Symbol(null, "matrix", "matrix", 1573196154, null))))].join(""));
  }
  return function(amps, indices) {
    return qgame.utils.general.update_sub.call(null, amps, cljs.core.partial.call(null, qgame.utils.math.multiply, matrix), indices);
  };
};
qgame.interpreter.qgates.binary_gate_matrix = function binary_gate_matrix(tt_right_column) {
  var dim = 2 * cljs.core.count.call(null, tt_right_column);
  return cljs.core.vec.call(null, cljs.core.map_indexed.call(null, function(idx, tt_val) {
    return cljs.core.assoc.call(null, cljs.core.vec.call(null, cljs.core.repeat.call(null, dim, 0)), (cljs.core.even_QMARK_.call(null, idx) ? cljs.core._PLUS_ : cljs.core._).call(null, idx, tt_val), 1);
  }, cljs.core.interleave.call(null, tt_right_column, tt_right_column)));
};
qgame.interpreter.qgates.anonymous_qgate = function anonymous_qgate(matrix) {
  return function() {
    var G__4955__delegate = function(amplitudes, qubits) {
      return qgame.interpreter.qgates.apply_operator.call(null, amplitudes, qgame.interpreter.qgates.to_operator.call(null, matrix), qubits);
    };
    var G__4955 = function(amplitudes, var_args) {
      var qubits = null;
      if (arguments.length > 1) {
        qubits = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__4955__delegate.call(this, amplitudes, qubits);
    };
    G__4955.cljs$lang$maxFixedArity = 1;
    G__4955.cljs$lang$applyTo = function(arglist__4956) {
      var amplitudes = cljs.core.first(arglist__4956);
      var qubits = cljs.core.rest(arglist__4956);
      return G__4955__delegate(amplitudes, qubits);
    };
    G__4955.cljs$core$IFn$_invoke$arity$variadic = G__4955__delegate;
    return G__4955;
  }();
};
qgame.interpreter.qgates.qnot = function() {
  var qnot__delegate = function(amplitudes__3310__auto__, qubits__3311__auto__) {
    return qgame.interpreter.qgates.apply_operator.call(null, amplitudes__3310__auto__, qgame.interpreter.qgates.to_operator.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0], null)], null)), qubits__3311__auto__);
  };
  var qnot = function(amplitudes__3310__auto__, var_args) {
    var qubits__3311__auto__ = null;
    if (arguments.length > 1) {
      qubits__3311__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return qnot__delegate.call(this, amplitudes__3310__auto__, qubits__3311__auto__);
  };
  qnot.cljs$lang$maxFixedArity = 1;
  qnot.cljs$lang$applyTo = function(arglist__4957) {
    var amplitudes__3310__auto__ = cljs.core.first(arglist__4957);
    var qubits__3311__auto__ = cljs.core.rest(arglist__4957);
    return qnot__delegate(amplitudes__3310__auto__, qubits__3311__auto__);
  };
  qnot.cljs$core$IFn$_invoke$arity$variadic = qnot__delegate;
  return qnot;
}();
qgame.interpreter.qgates.cnot = function() {
  var cnot__delegate = function(amplitudes__3310__auto__, qubits__3311__auto__) {
    return qgame.interpreter.qgates.apply_operator.call(null, amplitudes__3310__auto__, qgame.interpreter.qgates.to_operator.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [0, 0, 0, 1], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 1, 0], null)], null)), qubits__3311__auto__);
  };
  var cnot = function(amplitudes__3310__auto__, var_args) {
    var qubits__3311__auto__ = null;
    if (arguments.length > 1) {
      qubits__3311__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return cnot__delegate.call(this, amplitudes__3310__auto__, qubits__3311__auto__);
  };
  cnot.cljs$lang$maxFixedArity = 1;
  cnot.cljs$lang$applyTo = function(arglist__4958) {
    var amplitudes__3310__auto__ = cljs.core.first(arglist__4958);
    var qubits__3311__auto__ = cljs.core.rest(arglist__4958);
    return cnot__delegate(amplitudes__3310__auto__, qubits__3311__auto__);
  };
  cnot.cljs$core$IFn$_invoke$arity$variadic = cnot__delegate;
  return cnot;
}();
qgame.interpreter.qgates.srn = function() {
  var srn__delegate = function(amplitudes__3310__auto__, qubits__3311__auto__) {
    return qgame.interpreter.qgates.apply_operator.call(null, amplitudes__3310__auto__, qgame.interpreter.qgates.to_operator.call(null, qgame.utils.math.multiply.call(null, qgame.utils.math.divide.call(null, qgame.utils.math.sqrt.call(null, 2), 2), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, -1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [1, 1], null)], null))), qubits__3311__auto__);
  };
  var srn = function(amplitudes__3310__auto__, var_args) {
    var qubits__3311__auto__ = null;
    if (arguments.length > 1) {
      qubits__3311__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return srn__delegate.call(this, amplitudes__3310__auto__, qubits__3311__auto__);
  };
  srn.cljs$lang$maxFixedArity = 1;
  srn.cljs$lang$applyTo = function(arglist__4959) {
    var amplitudes__3310__auto__ = cljs.core.first(arglist__4959);
    var qubits__3311__auto__ = cljs.core.rest(arglist__4959);
    return srn__delegate(amplitudes__3310__auto__, qubits__3311__auto__);
  };
  srn.cljs$core$IFn$_invoke$arity$variadic = srn__delegate;
  return srn;
}();
qgame.interpreter.qgates.nand = function() {
  var nand__delegate = function(amplitudes__3310__auto__, qubits__3311__auto__) {
    return qgame.interpreter.qgates.apply_operator.call(null, amplitudes__3310__auto__, qgame.interpreter.qgates.to_operator.call(null, qgame.interpreter.qgates.binary_gate_matrix.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 1, 1, 0], null))), qubits__3311__auto__);
  };
  var nand = function(amplitudes__3310__auto__, var_args) {
    var qubits__3311__auto__ = null;
    if (arguments.length > 1) {
      qubits__3311__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return nand__delegate.call(this, amplitudes__3310__auto__, qubits__3311__auto__);
  };
  nand.cljs$lang$maxFixedArity = 1;
  nand.cljs$lang$applyTo = function(arglist__4960) {
    var amplitudes__3310__auto__ = cljs.core.first(arglist__4960);
    var qubits__3311__auto__ = cljs.core.rest(arglist__4960);
    return nand__delegate(amplitudes__3310__auto__, qubits__3311__auto__);
  };
  nand.cljs$core$IFn$_invoke$arity$variadic = nand__delegate;
  return nand;
}();
qgame.interpreter.qgates.hadamard = function() {
  var hadamard__delegate = function(amplitudes__3310__auto__, qubits__3311__auto__) {
    return qgame.interpreter.qgates.apply_operator.call(null, amplitudes__3310__auto__, qgame.interpreter.qgates.to_operator.call(null, qgame.utils.math.multiply.call(null, qgame.utils.math.divide.call(null, qgame.utils.math.sqrt.call(null, 2), 2), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [1, -1], null)], null))), qubits__3311__auto__);
  };
  var hadamard = function(amplitudes__3310__auto__, var_args) {
    var qubits__3311__auto__ = null;
    if (arguments.length > 1) {
      qubits__3311__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return hadamard__delegate.call(this, amplitudes__3310__auto__, qubits__3311__auto__);
  };
  hadamard.cljs$lang$maxFixedArity = 1;
  hadamard.cljs$lang$applyTo = function(arglist__4961) {
    var amplitudes__3310__auto__ = cljs.core.first(arglist__4961);
    var qubits__3311__auto__ = cljs.core.rest(arglist__4961);
    return hadamard__delegate(amplitudes__3310__auto__, qubits__3311__auto__);
  };
  hadamard.cljs$core$IFn$_invoke$arity$variadic = hadamard__delegate;
  return hadamard;
}();
qgame.interpreter.qgates.u_theta = function() {
  var u_theta__delegate = function(amplitudes__3310__auto__, theta, qubits__3311__auto__) {
    return qgame.interpreter.qgates.apply_operator.call(null, amplitudes__3310__auto__, qgame.interpreter.qgates.to_operator.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qgame.utils.math.cos.call(null, theta), qgame.utils.math.sin.call(null, theta)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qgame.utils.math.subtract.call(null, 
    qgame.utils.math.sin.call(null, theta)), qgame.utils.math.cos.call(null, theta)], null)], null)), qubits__3311__auto__);
  };
  var u_theta = function(amplitudes__3310__auto__, theta, var_args) {
    var qubits__3311__auto__ = null;
    if (arguments.length > 2) {
      qubits__3311__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return u_theta__delegate.call(this, amplitudes__3310__auto__, theta, qubits__3311__auto__);
  };
  u_theta.cljs$lang$maxFixedArity = 2;
  u_theta.cljs$lang$applyTo = function(arglist__4962) {
    var amplitudes__3310__auto__ = cljs.core.first(arglist__4962);
    arglist__4962 = cljs.core.next(arglist__4962);
    var theta = cljs.core.first(arglist__4962);
    var qubits__3311__auto__ = cljs.core.rest(arglist__4962);
    return u_theta__delegate(amplitudes__3310__auto__, theta, qubits__3311__auto__);
  };
  u_theta.cljs$core$IFn$_invoke$arity$variadic = u_theta__delegate;
  return u_theta;
}();
qgame.interpreter.qgates.cphase = function() {
  var cphase__delegate = function(amplitudes__3310__auto__, alpha, qubits__3311__auto__) {
    return qgame.interpreter.qgates.apply_operator.call(null, amplitudes__3310__auto__, qgame.interpreter.qgates.to_operator.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [0, 0, 1, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 0, qgame.utils.math.exp_xi.call(null, alpha)], null)], null)), qubits__3311__auto__);
  };
  var cphase = function(amplitudes__3310__auto__, alpha, var_args) {
    var qubits__3311__auto__ = null;
    if (arguments.length > 2) {
      qubits__3311__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return cphase__delegate.call(this, amplitudes__3310__auto__, alpha, qubits__3311__auto__);
  };
  cphase.cljs$lang$maxFixedArity = 2;
  cphase.cljs$lang$applyTo = function(arglist__4963) {
    var amplitudes__3310__auto__ = cljs.core.first(arglist__4963);
    arglist__4963 = cljs.core.next(arglist__4963);
    var alpha = cljs.core.first(arglist__4963);
    var qubits__3311__auto__ = cljs.core.rest(arglist__4963);
    return cphase__delegate(amplitudes__3310__auto__, alpha, qubits__3311__auto__);
  };
  cphase.cljs$core$IFn$_invoke$arity$variadic = cphase__delegate;
  return cphase;
}();
qgame.interpreter.qgates.u2 = function() {
  var u2__delegate = function(amplitudes__3310__auto__, phi, theta, psi, alpha, qubits__3311__auto__) {
    return qgame.interpreter.qgates.apply_operator.call(null, amplitudes__3310__auto__, qgame.interpreter.qgates.to_operator.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qgame.utils.math.multiply.call(null, qgame.utils.math.cos.call(null, theta), qgame.utils.math.exp_xi.call(null, qgame.utils.math.add.call(null, qgame.utils.math.subtract.call(null, phi), qgame.utils.math.subtract.call(null, 
    psi), alpha))), qgame.utils.math.multiply.call(null, qgame.utils.math.sin.call(null, qgame.utils.math.subtract.call(null, theta)), qgame.utils.math.exp_xi.call(null, qgame.utils.math.add.call(null, qgame.utils.math.subtract.call(null, phi), psi, alpha)))], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qgame.utils.math.multiply.call(null, qgame.utils.math.sin.call(null, theta), qgame.utils.math.exp_xi.call(null, qgame.utils.math.add.call(null, phi, qgame.utils.math.subtract.call(null, 
    psi), alpha))), qgame.utils.math.multiply.call(null, qgame.utils.math.cos.call(null, theta), qgame.utils.math.exp_xi.call(null, qgame.utils.math.add.call(null, phi, psi, alpha)))], null)], null)), qubits__3311__auto__);
  };
  var u2 = function(amplitudes__3310__auto__, phi, theta, psi, alpha, var_args) {
    var qubits__3311__auto__ = null;
    if (arguments.length > 5) {
      qubits__3311__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
    }
    return u2__delegate.call(this, amplitudes__3310__auto__, phi, theta, psi, alpha, qubits__3311__auto__);
  };
  u2.cljs$lang$maxFixedArity = 5;
  u2.cljs$lang$applyTo = function(arglist__4964) {
    var amplitudes__3310__auto__ = cljs.core.first(arglist__4964);
    arglist__4964 = cljs.core.next(arglist__4964);
    var phi = cljs.core.first(arglist__4964);
    arglist__4964 = cljs.core.next(arglist__4964);
    var theta = cljs.core.first(arglist__4964);
    arglist__4964 = cljs.core.next(arglist__4964);
    var psi = cljs.core.first(arglist__4964);
    arglist__4964 = cljs.core.next(arglist__4964);
    var alpha = cljs.core.first(arglist__4964);
    var qubits__3311__auto__ = cljs.core.rest(arglist__4964);
    return u2__delegate(amplitudes__3310__auto__, phi, theta, psi, alpha, qubits__3311__auto__);
  };
  u2.cljs$core$IFn$_invoke$arity$variadic = u2__delegate;
  return u2;
}();
qgame.interpreter.qgates.swap = function() {
  var swap__delegate = function(amplitudes__3310__auto__, qubits__3311__auto__) {
    return qgame.interpreter.qgates.apply_operator.call(null, amplitudes__3310__auto__, qgame.interpreter.qgates.to_operator.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 1, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [0, 1, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 0, 1], null)], null)), qubits__3311__auto__);
  };
  var swap = function(amplitudes__3310__auto__, var_args) {
    var qubits__3311__auto__ = null;
    if (arguments.length > 1) {
      qubits__3311__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap__delegate.call(this, amplitudes__3310__auto__, qubits__3311__auto__);
  };
  swap.cljs$lang$maxFixedArity = 1;
  swap.cljs$lang$applyTo = function(arglist__4965) {
    var amplitudes__3310__auto__ = cljs.core.first(arglist__4965);
    var qubits__3311__auto__ = cljs.core.rest(arglist__4965);
    return swap__delegate(amplitudes__3310__auto__, qubits__3311__auto__);
  };
  swap.cljs$core$IFn$_invoke$arity$variadic = swap__delegate;
  return swap;
}();
goog.provide("qgame.interpreter.core");
goog.require("cljs.core");
goog.require("qgame.interpreter.warning");
goog.require("qgame.interpreter.parser");
goog.require("qgame.utils.general");
goog.require("qgame.interpreter.qgates");
goog.require("qgame.utils.amplitudes");
goog.require("qgame.interpreter.warning");
goog.require("qgame.interpreter.qgates");
goog.require("qgame.interpreter.parser");
goog.require("qgame.interpreter.parser");
goog.require("qgame.interpreter.qgates");
goog.require("qgame.utils.amplitudes");
goog.require("qgame.utils.general");
goog.require("qgame.utils.general");
goog.require("qgame.utils.amplitudes");
goog.require("qgame.interpreter.warning");
qgame.interpreter.core.allowed_qgates = cljs.core.atom.call(null, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Symbol(null, "hadamard", "hadamard", -1927498571, null), new cljs.core.Symbol(null, "nand", "nand", -1637157790, null), new cljs.core.Symbol(null, "qnot", "qnot", -1637055877, null), new cljs.core.Symbol(null, "c-phase", "c-phase", 1717928266, null), new cljs.core.Symbol(null, "u-theta", "u-theta", 516823295, null), new cljs.core.Symbol(null, "u2", "u2", -1640527850, null), new cljs.core.Symbol(null, 
"cnot", "cnot", -1637472951, null), new cljs.core.Symbol(null, "swap", "swap", -1636988084, null), new cljs.core.Symbol(null, "srn", "srn", -1640417368, null)], [qgame.interpreter.qgates.hadamard, qgame.interpreter.qgates.nand, qgame.interpreter.qgates.qnot, qgame.interpreter.qgates.c_phase, qgame.interpreter.qgates.u_theta, qgame.interpreter.qgates.u2, qgame.interpreter.qgates.cnot, qgame.interpreter.qgates.swap, qgame.interpreter.qgates.srn]));
qgame.interpreter.core.new_quantum_system = function new_quantum_system(num_qubits) {
  var num_amplitudes = 1 << num_qubits;
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714), cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null), cljs.core.repeat.call(null, num_amplitudes - 1, 0)), new cljs.core.Keyword(null, "prior-probability", "prior-probability", 4421087524), 1, new cljs.core.Keyword(null, "oracle-count", "oracle-count", 3403530098), 0, new cljs.core.Keyword(null, "measurement-history", 
  "measurement-history", 2775390965), cljs.core.List.EMPTY], null);
};
qgame.interpreter.core.force_to = function force_to(qsys, qubit, binary_state) {
  var threshold = 0;
  var qsys__$1 = cljs.core.assoc_in.call(null, cljs.core.update_in.call(null, qsys, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "measurement-history", "measurement-history", 2775390965)], null), cljs.core.conj, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qubit, binary_state], null)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "prior-probability", "prior-probability", 4421087524)], null), qgame.utils.amplitudes.probability_of.call(null, qsys, qubit, binary_state));
  var all_indices = qgame.utils.amplitudes.qubits_to_amplitude_indices.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [qubit], null), qgame.utils.amplitudes.get_num_qubits.call(null, (new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714)).cljs$core$IFn$_invoke$arity$1(qsys__$1)));
  var relevant_indices = cljs.core.map.call(null, function(threshold, qsys__$1, all_indices) {
    return function(p1__5024_SHARP_) {
      return cljs.core.nth.call(null, p1__5024_SHARP_, 1 - binary_state);
    };
  }(threshold, qsys__$1, all_indices), all_indices);
  if ((new cljs.core.Keyword(null, "prior-probability", "prior-probability", 4421087524)).cljs$core$IFn$_invoke$arity$1(qsys__$1) > threshold) {
    return cljs.core.update_in.call(null, qsys__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714)], null), qgame.utils.general.update_sub, cljs.core.constantly.call(null, cljs.core.repeat.call(null, 0)), relevant_indices);
  } else {
    return null;
  }
};
qgame.interpreter.core.measure = function measure(p__5025, qubit) {
  var vec__5027 = p__5025;
  var head_branch = cljs.core.nth.call(null, vec__5027, 0, null);
  var remaining = cljs.core.nthnext.call(null, vec__5027, 1);
  var one_branch = cljs.core.keep.call(null, function(qsys) {
    return qgame.interpreter.core.force_to.call(null, qsys, qubit, 1);
  }, head_branch);
  var zero_branch = cljs.core.keep.call(null, function(one_branch) {
    return function(qsys) {
      return qgame.interpreter.core.force_to.call(null, qsys, qubit, 0);
    };
  }(one_branch), head_branch);
  return cljs.core.into.call(null, remaining, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.not_empty.call(null, one_branch), cljs.core.not_empty.call(null, zero_branch)], null));
};
qgame.interpreter.core.swap_first_two = function swap_first_two(p__5028) {
  var vec__5030 = p__5028;
  var head_branch = cljs.core.nth.call(null, vec__5030, 0, null);
  var alternate_branch = cljs.core.nth.call(null, vec__5030, 1, null);
  var remaining = cljs.core.nthnext.call(null, vec__5030, 2);
  return cljs.core.into.call(null, remaining, cljs.core.take_while.call(null, cljs.core.identity, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [head_branch, alternate_branch], null)));
};
qgame.interpreter.core.concat_first_two = function concat_first_two(p__5031) {
  var vec__5033 = p__5031;
  var head_branch = cljs.core.nth.call(null, vec__5033, 0, null);
  var alternate_branch = cljs.core.nth.call(null, vec__5033, 1, null);
  var remaining = cljs.core.nthnext.call(null, vec__5033, 2);
  return cljs.core.cons.call(null, cljs.core.into.call(null, alternate_branch, head_branch), remaining);
};
qgame.interpreter.core.to_qsys_updater = function to_qsys_updater(qgate, qubits) {
  return function(qsys) {
    return cljs.core.update_in.call(null, qsys, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714)], null), function(p1__5034_SHARP_) {
      return cljs.core.apply.call(null, qgate, p1__5034_SHARP_, qubits);
    });
  };
};
qgame.interpreter.core.on_head_branch = function on_head_branch(f, p__5035) {
  var vec__5037 = p__5035;
  var head_branch = cljs.core.nth.call(null, vec__5037, 0, null);
  var remaining = cljs.core.nthnext.call(null, vec__5037, 1);
  return cljs.core.cons.call(null, cljs.core.map.call(null, f, head_branch), remaining);
};
qgame.interpreter.core.execute_oracle_qgate = function execute_oracle_qgate(branches, oracle_qgate, qubits) {
  var f = cljs.core.comp.call(null, qgame.interpreter.core.to_qsys_updater.call(null, oracle_qgate, qubits), function(p1__5038_SHARP_) {
    return cljs.core.update_in.call(null, p1__5038_SHARP_, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "oracle-count", "oracle-count", 3403530098)], null), cljs.core.inc);
  });
  return qgame.interpreter.core.on_head_branch.call(null, f, branches);
};
qgame.interpreter.core.execute_qgate = function execute_qgate(branches, qgate, qubits) {
  return qgame.interpreter.core.on_head_branch.call(null, qgame.interpreter.core.to_qsys_updater.call(null, qgate, qubits), branches);
};
qgame.interpreter.core.execute_instruction = function execute_instruction(renderer, oracle_qgate, branches, p__5039) {
  var vec__5042 = p__5039;
  var i_sym = cljs.core.nth.call(null, vec__5042, 0, null);
  var args = cljs.core.nthnext.call(null, vec__5042, 1);
  var instr = vec__5042;
  if (cljs.core.truth_(renderer)) {
    renderer.call(null, branches, instr);
  } else {
  }
  var G__5043 = i_sym;
  if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "oracle", "oracle", 1645573943, null), G__5043)) {
    return qgame.interpreter.core.execute_oracle_qgate.call(null, branches, oracle_qgate, args);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "end", "end", -1640430956, null), G__5043)) {
      return qgame.interpreter.core.concat_first_two.call(null, branches);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "else", "else", -1637415182, null), G__5043)) {
        return qgame.interpreter.core.swap_first_two.call(null, branches);
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "measure", "measure", -702210281, null), G__5043)) {
          return cljs.core.apply.call(null, qgame.interpreter.core.measure, branches, args);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return qgame.interpreter.core.execute_qgate.call(null, branches, cljs.core.get.call(null, cljs.core.deref.call(null, qgame.interpreter.core.allowed_qgates), i_sym), args);
          } else {
            return null;
          }
        }
      }
    }
  }
};
qgame.interpreter.core.execute_program = function execute_program(p__5044, program) {
  var map__5046 = p__5044;
  var map__5046__$1 = cljs.core.seq_QMARK_.call(null, map__5046) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5046) : map__5046;
  var oracle = cljs.core.get.call(null, map__5046__$1, new cljs.core.Keyword(null, "oracle", "oracle", 4300009712));
  var renderer = cljs.core.get.call(null, map__5046__$1, new cljs.core.Keyword(null, "renderer", "renderer", 519058485));
  var num_qubits = cljs.core.get.call(null, map__5046__$1, new cljs.core.Keyword(null, "num-qubits", "num-qubits", 1175408835));
  cljs.core.reset_BANG_.call(null, qgame.interpreter.warning.warnings, cljs.core.PersistentVector.EMPTY);
  var init_qsystem = qgame.interpreter.core.new_quantum_system.call(null, num_qubits);
  var parsed_program = qgame.interpreter.parser.parse_program.call(null, program);
  var oracle_qgate = qgame.interpreter.qgates.anonymous_qgate.call(null, qgame.interpreter.qgates.binary_gate_matrix.call(null, oracle == null ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [0], null) : oracle));
  var final_branches = cljs.core.reduce.call(null, cljs.core.partial.call(null, qgame.interpreter.core.execute_instruction, renderer, oracle_qgate), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core._conj.call(null, cljs.core.List.EMPTY, init_qsystem)), parsed_program);
  return cljs.core.apply.call(null, cljs.core.concat, final_branches);
};
qgame.interpreter.core.execute_string = function execute_string(s) {
  return qgame.interpreter.core.execute_program.call(null, qgame.interpreter.parser.parse_string.call(null, s));
};
goog.provide("qgame.examples");
goog.require("cljs.core");
goog.require("qgame.utils.math");
goog.require("qgame.interpreter.core");
goog.require("qgame.utils.math");
goog.require("qgame.utils.math");
goog.require("qgame.interpreter.core");
qgame.interpreter.core.execute_program.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "num-qubits", "num-qubits", 1175408835), 2], null), cljs.core.list(cljs.core.list(new cljs.core.Symbol(null, "hadamard", "hadamard", -1927498571, null), 0), cljs.core.list(new cljs.core.Symbol(null, "hadamard", "hadamard", -1927498571, null), 1), cljs.core.list(new cljs.core.Symbol(null, "u-theta", "u-theta", 516823295, null), 0.62832, 0), cljs.core.list(new cljs.core.Symbol(null, 
"cnot", "cnot", -1637472951, null), 0, 1), cljs.core.list(new cljs.core.Symbol(null, "hadamard", "hadamard", -1927498571, null), 1)));
qgame.interpreter.core.execute_program.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "num-qubits", "num-qubits", 1175408835), 3], null), cljs.core.list(cljs.core.list(new cljs.core.Symbol(null, "hadamard", "hadamard", -1927498571, null), 0), cljs.core.list(new cljs.core.Symbol(null, "measure", "measure", -702210281, null), 0), cljs.core.list(new cljs.core.Symbol(null, "hadamard", "hadamard", -1927498571, null), 1), cljs.core.list(new cljs.core.Symbol(null, "measure", 
"measure", -702210281, null), 1), cljs.core.list(new cljs.core.Symbol(null, "end", "end", -1640430956, null)), cljs.core.list(new cljs.core.Symbol(null, "end", "end", -1640430956, null)), cljs.core.list(new cljs.core.Symbol(null, "end", "end", -1640430956, null)), cljs.core.list(new cljs.core.Symbol(null, "hadamard", "hadamard", -1927498571, null), 2), cljs.core.list(new cljs.core.Symbol(null, "measure", "measure", -702210281, null), 2), cljs.core.list(new cljs.core.Symbol(null, "end", "end", -1640430956, 
null)), cljs.core.list(new cljs.core.Symbol(null, "end", "end", -1640430956, null)), cljs.core.list(new cljs.core.Symbol(null, "end", "end", -1640430956, null))));
qgame.interpreter.core.execute_program.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "num-qubits", "num-qubits", 1175408835), 3, new cljs.core.Keyword(null, "renderer", "renderer", 519058485), function(branches, instruction) {
  cljs.core.println.call(null);
  cljs.core.println.call(null, "head branch amplitudes...");
  var seq__4929_4934 = cljs.core.seq.call(null, cljs.core.first.call(null, branches));
  var chunk__4930_4935 = null;
  var count__4931_4936 = 0;
  var i__4932_4937 = 0;
  while (true) {
    if (i__4932_4937 < count__4931_4936) {
      var qsys_4938 = cljs.core._nth.call(null, chunk__4930_4935, i__4932_4937);
      cljs.core.print.call(null, "  ");
      cljs.core.println.call(null, qgame.utils.math.round.call(null, (new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714)).cljs$core$IFn$_invoke$arity$1(qsys_4938), 3));
      var G__4939 = seq__4929_4934;
      var G__4940 = chunk__4930_4935;
      var G__4941 = count__4931_4936;
      var G__4942 = i__4932_4937 + 1;
      seq__4929_4934 = G__4939;
      chunk__4930_4935 = G__4940;
      count__4931_4936 = G__4941;
      i__4932_4937 = G__4942;
      continue;
    } else {
      var temp__4092__auto___4943 = cljs.core.seq.call(null, seq__4929_4934);
      if (temp__4092__auto___4943) {
        var seq__4929_4944__$1 = temp__4092__auto___4943;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__4929_4944__$1)) {
          var c__4178__auto___4945 = cljs.core.chunk_first.call(null, seq__4929_4944__$1);
          var G__4946 = cljs.core.chunk_rest.call(null, seq__4929_4944__$1);
          var G__4947 = c__4178__auto___4945;
          var G__4948 = cljs.core.count.call(null, c__4178__auto___4945);
          var G__4949 = 0;
          seq__4929_4934 = G__4946;
          chunk__4930_4935 = G__4947;
          count__4931_4936 = G__4948;
          i__4932_4937 = G__4949;
          continue;
        } else {
          var qsys_4950 = cljs.core.first.call(null, seq__4929_4944__$1);
          cljs.core.print.call(null, "  ");
          cljs.core.println.call(null, qgame.utils.math.round.call(null, (new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714)).cljs$core$IFn$_invoke$arity$1(qsys_4950), 3));
          var G__4951 = cljs.core.next.call(null, seq__4929_4944__$1);
          var G__4952 = null;
          var G__4953 = 0;
          var G__4954 = 0;
          seq__4929_4934 = G__4951;
          chunk__4930_4935 = G__4952;
          count__4931_4936 = G__4953;
          i__4932_4937 = G__4954;
          continue;
        }
      } else {
      }
    }
    break;
  }
  cljs.core.print.call(null, "instruction: ");
  cljs.core.println.call(null, function() {
    var G__4933 = cljs.core.first.call(null, instruction);
    if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "end", "end", -1640430956, null), G__4933)) {
      return "merge branches";
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "else", "else", -1637415182, null), G__4933)) {
        return "switch branches";
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "measure", "measure", -702210281, null), G__4933)) {
          return[cljs.core.str("measure and branch on qubit "), cljs.core.str(cljs.core.second.call(null, instruction))].join("");
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.apply.call(null, cljs.core.str, cljs.core.first.call(null, instruction), " on qubit ", cljs.core.rest.call(null, instruction));
          } else {
            return null;
          }
        }
      }
    }
  }());
  return cljs.core.println.call(null, "--------------------------------------------");
}], null), cljs.core.list(cljs.core.list(new cljs.core.Symbol(null, "hadamard", "hadamard", -1927498571, null), 0), cljs.core.list(new cljs.core.Symbol(null, "measure", "measure", -702210281, null), 0), cljs.core.list(new cljs.core.Symbol(null, "hadamard", "hadamard", -1927498571, null), 1), cljs.core.list(new cljs.core.Symbol(null, "measure", "measure", -702210281, null), 1), cljs.core.list(new cljs.core.Symbol(null, "end", "end", -1640430956, null)), cljs.core.list(new cljs.core.Symbol(null, "end", 
"end", -1640430956, null)), cljs.core.list(new cljs.core.Symbol(null, "end", "end", -1640430956, null)), cljs.core.list(new cljs.core.Symbol(null, "hadamard", "hadamard", -1927498571, null), 2), cljs.core.list(new cljs.core.Symbol(null, "measure", "measure", -702210281, null), 2), cljs.core.list(new cljs.core.Symbol(null, "end", "end", -1640430956, null)), cljs.core.list(new cljs.core.Symbol(null, "end", "end", -1640430956, null)), cljs.core.list(new cljs.core.Symbol(null, "end", "end", -1640430956, 
null))));
