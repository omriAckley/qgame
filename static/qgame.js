var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name);
  };
  goog.implicitNamespaces_ = {};
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
if (!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.subs = function(str, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement);
  }
  return str;
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    this.stack = (new Error).stack || "";
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return(value);
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if (arr.reduce) {
    if (opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduce(f, val);
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if (arr.reduceRight) {
    if (opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduceRight(f, val);
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn);
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2156";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__6654__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__6654 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__6654__delegate.call(this, args);
    };
    G__6654.cljs$lang$maxFixedArity = 0;
    G__6654.cljs$lang$applyTo = function(arglist__6655) {
      var args = cljs.core.seq(arglist__6655);
      return G__6654__delegate(args);
    };
    G__6654.cljs$core$IFn$_invoke$arity$variadic = G__6654__delegate;
    return G__6654;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3438__auto__ = ty;
    if (cljs.core.truth_(and__3438__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3438__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4298__auto___6656 = len;
  var i_6657 = 0;
  while (true) {
    if (i_6657 < n__4298__auto___6656) {
      new_arr[i_6657] = arr[i_6657];
      var G__6658 = i_6657 + 1;
      i_6657 = G__6658;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__6659__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__6659 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6659__delegate.call(this, array, i, idxs);
    };
    G__6659.cljs$lang$maxFixedArity = 2;
    G__6659.cljs$lang$applyTo = function(arglist__6660) {
      var array = cljs.core.first(arglist__6660);
      arglist__6660 = cljs.core.next(arglist__6660);
      var i = cljs.core.first(arglist__6660);
      var idxs = cljs.core.rest(arglist__6660);
      return G__6659__delegate(array, i, idxs);
    };
    G__6659.cljs$core$IFn$_invoke$arity$variadic = G__6659__delegate;
    return G__6659;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__6661__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__6661 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__6661__delegate.call(this, array, idx, idx2, idxv);
    };
    G__6661.cljs$lang$maxFixedArity = 3;
    G__6661.cljs$lang$applyTo = function(arglist__6662) {
      var array = cljs.core.first(arglist__6662);
      arglist__6662 = cljs.core.next(arglist__6662);
      var idx = cljs.core.first(arglist__6662);
      arglist__6662 = cljs.core.next(arglist__6662);
      var idx2 = cljs.core.first(arglist__6662);
      var idxv = cljs.core.rest(arglist__6662);
      return G__6661__delegate(array, idx, idx2, idxv);
    };
    G__6661.cljs$core$IFn$_invoke$arity$variadic = G__6661__delegate;
    return G__6661;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj6664 = {};
  return obj6664;
}();
cljs.core.IFn = function() {
  var obj6666 = {};
  return obj6666;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = cljs.core._invoke[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._invoke["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj6668 = {};
  return obj6668;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3438__auto__ = value;
    if (and__3438__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4077__auto__ = value == null ? null : value;
    return function() {
      var or__3450__auto__ = cljs.core._clone[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._clone["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj6670 = {};
  return obj6670;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._count[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._count["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj6672 = {};
  return obj6672;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._empty[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._empty["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj6674 = {};
  return obj6674;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._conj[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._conj["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj6676 = {};
  return obj6676;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3438__auto__ = coll;
      if (and__3438__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4077__auto__ = coll == null ? null : coll;
      return function() {
        var or__3450__auto__ = cljs.core._nth[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._nth["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3438__auto__ = coll;
      if (and__3438__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4077__auto__ = coll == null ? null : coll;
      return function() {
        var or__3450__auto__ = cljs.core._nth[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._nth["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj6678 = {};
  return obj6678;
}();
cljs.core.ISeq = function() {
  var obj6680 = {};
  return obj6680;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._first[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._first["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._rest[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._rest["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj6682 = {};
  return obj6682;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._next[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._next["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj6684 = {};
  return obj6684;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3438__auto__ = o;
      if (and__3438__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4077__auto__ = o == null ? null : o;
      return function() {
        var or__3450__auto__ = cljs.core._lookup[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._lookup["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3438__auto__ = o;
      if (and__3438__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4077__auto__ = o == null ? null : o;
      return function() {
        var or__3450__auto__ = cljs.core._lookup[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._lookup["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj6686 = {};
  return obj6686;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._assoc[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._assoc["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj6688 = {};
  return obj6688;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._dissoc[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._dissoc["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj6690 = {};
  return obj6690;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._key[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._key["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._val[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._val["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj6692 = {};
  return obj6692;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._disjoin[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._disjoin["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj6694 = {};
  return obj6694;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._peek[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._peek["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._pop[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._pop["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj6696 = {};
  return obj6696;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._assoc_n[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj6698 = {};
  return obj6698;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3438__auto__ = o;
    if (and__3438__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4077__auto__ = o == null ? null : o;
    return function() {
      var or__3450__auto__ = cljs.core._deref[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._deref["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj6700 = {};
  return obj6700;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3438__auto__ = o;
    if (and__3438__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4077__auto__ = o == null ? null : o;
    return function() {
      var or__3450__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj6702 = {};
  return obj6702;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3438__auto__ = o;
    if (and__3438__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4077__auto__ = o == null ? null : o;
    return function() {
      var or__3450__auto__ = cljs.core._meta[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._meta["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj6704 = {};
  return obj6704;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3438__auto__ = o;
    if (and__3438__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4077__auto__ = o == null ? null : o;
    return function() {
      var or__3450__auto__ = cljs.core._with_meta[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._with_meta["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj6706 = {};
  return obj6706;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3438__auto__ = coll;
      if (and__3438__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4077__auto__ = coll == null ? null : coll;
      return function() {
        var or__3450__auto__ = cljs.core._reduce[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._reduce["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3438__auto__ = coll;
      if (and__3438__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4077__auto__ = coll == null ? null : coll;
      return function() {
        var or__3450__auto__ = cljs.core._reduce[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = cljs.core._reduce["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj6708 = {};
  return obj6708;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj6710 = {};
  return obj6710;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3438__auto__ = o;
    if (and__3438__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4077__auto__ = o == null ? null : o;
    return function() {
      var or__3450__auto__ = cljs.core._equiv[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._equiv["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj6712 = {};
  return obj6712;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3438__auto__ = o;
    if (and__3438__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4077__auto__ = o == null ? null : o;
    return function() {
      var or__3450__auto__ = cljs.core._hash[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._hash["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj6714 = {};
  return obj6714;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3438__auto__ = o;
    if (and__3438__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4077__auto__ = o == null ? null : o;
    return function() {
      var or__3450__auto__ = cljs.core._seq[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._seq["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj6716 = {};
  return obj6716;
}();
cljs.core.IList = function() {
  var obj6718 = {};
  return obj6718;
}();
cljs.core.IRecord = function() {
  var obj6720 = {};
  return obj6720;
}();
cljs.core.IReversible = function() {
  var obj6722 = {};
  return obj6722;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._rseq[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._rseq["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj6724 = {};
  return obj6724;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._entry_key[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._entry_key["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._comparator[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._comparator["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj6726 = {};
  return obj6726;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3438__auto__ = writer;
    if (and__3438__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4077__auto__ = writer == null ? null : writer;
    return function() {
      var or__3450__auto__ = cljs.core._write[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._write["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3438__auto__ = writer;
    if (and__3438__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4077__auto__ = writer == null ? null : writer;
    return function() {
      var or__3450__auto__ = cljs.core._flush[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._flush["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj6728 = {};
  return obj6728;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3438__auto__ = o;
    if (and__3438__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4077__auto__ = o == null ? null : o;
    return function() {
      var or__3450__auto__ = cljs.core._pr_writer[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj6730 = {};
  return obj6730;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3438__auto__ = d;
    if (and__3438__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4077__auto__ = d == null ? null : d;
    return function() {
      var or__3450__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj6732 = {};
  return obj6732;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3438__auto__ = this$;
    if (and__3438__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4077__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3450__auto__ = cljs.core._notify_watches[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3438__auto__ = this$;
    if (and__3438__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4077__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3450__auto__ = cljs.core._add_watch[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._add_watch["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3438__auto__ = this$;
    if (and__3438__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4077__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3450__auto__ = cljs.core._remove_watch[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj6734 = {};
  return obj6734;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._as_transient[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._as_transient["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj6736 = {};
  return obj6736;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3438__auto__ = tcoll;
    if (and__3438__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4077__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3450__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3438__auto__ = tcoll;
    if (and__3438__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4077__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3450__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj6738 = {};
  return obj6738;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3438__auto__ = tcoll;
    if (and__3438__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4077__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3450__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj6740 = {};
  return obj6740;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3438__auto__ = tcoll;
    if (and__3438__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4077__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3450__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj6742 = {};
  return obj6742;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3438__auto__ = tcoll;
    if (and__3438__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4077__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3450__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3438__auto__ = tcoll;
    if (and__3438__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4077__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3450__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj6744 = {};
  return obj6744;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3438__auto__ = tcoll;
    if (and__3438__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4077__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3450__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj6746 = {};
  return obj6746;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3438__auto__ = x;
    if (and__3438__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4077__auto__ = x == null ? null : x;
    return function() {
      var or__3450__auto__ = cljs.core._compare[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._compare["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj6748 = {};
  return obj6748;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._drop_first[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._drop_first["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj6750 = {};
  return obj6750;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._chunked_first[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj6752 = {};
  return obj6752;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3438__auto__ = coll;
    if (and__3438__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4077__auto__ = coll == null ? null : coll;
    return function() {
      var or__3450__auto__ = cljs.core._chunked_next[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj6754 = {};
  return obj6754;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3438__auto__ = x;
    if (and__3438__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4077__auto__ = x == null ? null : x;
    return function() {
      var or__3450__auto__ = cljs.core._name[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._name["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3438__auto__ = x;
    if (and__3438__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4077__auto__ = x == null ? null : x;
    return function() {
      var or__3450__auto__ = cljs.core._namespace[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._namespace["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3438__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3438__auto__) {
        return b.ns;
      } else {
        return and__3438__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3861__auto__ = self__._hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__6756 = null;
  var G__6756__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__6756__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__6756 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6756__2.call(this, self__, coll);
      case 3:
        return G__6756__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__6756;
}();
cljs.core.Symbol.prototype.apply = function(self__, args6755) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6755)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__6758 = value;
  if (G__6758) {
    var bit__4100__auto__ = G__6758.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4100__auto__ || G__6758.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__6758.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__6758);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__6758);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6760 = coll;
      if (G__6760) {
        var bit__4093__auto__ = G__6760.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4093__auto__ || G__6760.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6762 = coll;
      if (G__6762) {
        var bit__4093__auto__ = G__6762.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4093__auto__ || G__6762.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__6764 = coll;
      if (G__6764) {
        var bit__4093__auto__ = G__6764.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4093__auto__ || G__6764.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6766 = coll;
      if (G__6766) {
        var bit__4093__auto__ = G__6766.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4093__auto__ || G__6766.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__6767__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__6768 = y;
            var G__6769 = cljs.core.first.call(null, more);
            var G__6770 = cljs.core.next.call(null, more);
            x = G__6768;
            y = G__6769;
            more = G__6770;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6767 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6767__delegate.call(this, x, y, more);
    };
    G__6767.cljs$lang$maxFixedArity = 2;
    G__6767.cljs$lang$applyTo = function(arglist__6771) {
      var x = cljs.core.first(arglist__6771);
      arglist__6771 = cljs.core.next(arglist__6771);
      var y = cljs.core.first(arglist__6771);
      var more = cljs.core.rest(arglist__6771);
      return G__6767__delegate(x, y, more);
    };
    G__6767.cljs$core$IFn$_invoke$arity$variadic = G__6767__delegate;
    return G__6767;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__6772 = nval;
            var G__6773 = n + 1;
            val = G__6772;
            n = G__6773;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__6774 = nval;
          var G__6775 = n + 1;
          val__$1 = G__6774;
          n = G__6775;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__6776 = nval;
          var G__6777 = n + 1;
          val__$1 = G__6776;
          n = G__6777;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__6778 = nval;
            var G__6779 = n + 1;
            val = G__6778;
            n = G__6779;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__6780 = nval;
          var G__6781 = n + 1;
          val__$1 = G__6780;
          n = G__6781;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__6782 = nval;
          var G__6783 = n + 1;
          val__$1 = G__6782;
          n = G__6783;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__6785 = x;
  if (G__6785) {
    var bit__4100__auto__ = G__6785.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4100__auto__ || G__6785.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__6785.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__6785);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__6785);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__6787 = x;
  if (G__6787) {
    var bit__4100__auto__ = G__6787.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4100__auto__ || G__6787.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__6787.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__6787);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__6787);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__6788 = sn;
      s = G__6788;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__6789__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__6790 = conj.call(null, coll, x);
          var G__6791 = cljs.core.first.call(null, xs);
          var G__6792 = cljs.core.next.call(null, xs);
          coll = G__6790;
          x = G__6791;
          xs = G__6792;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__6789 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6789__delegate.call(this, coll, x, xs);
    };
    G__6789.cljs$lang$maxFixedArity = 2;
    G__6789.cljs$lang$applyTo = function(arglist__6793) {
      var coll = cljs.core.first(arglist__6793);
      arglist__6793 = cljs.core.next(arglist__6793);
      var x = cljs.core.first(arglist__6793);
      var xs = cljs.core.rest(arglist__6793);
      return G__6789__delegate(coll, x, xs);
    };
    G__6789.cljs$core$IFn$_invoke$arity$variadic = G__6789__delegate;
    return G__6789;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__6794 = cljs.core.next.call(null, s);
      var G__6795 = acc + 1;
      s = G__6794;
      acc = G__6795;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__6797 = coll;
      if (G__6797) {
        var bit__4093__auto__ = G__6797.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4093__auto__ || G__6797.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__6798 = cljs.core.next.call(null, coll);
              var G__6799 = n - 1;
              coll = G__6798;
              n = G__6799;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__6800 = cljs.core.next.call(null, coll);
              var G__6801 = n - 1;
              var G__6802 = not_found;
              coll = G__6800;
              n = G__6801;
              not_found = G__6802;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (coll == null) {
      return null;
    } else {
      if (function() {
        var G__6807 = coll;
        if (G__6807) {
          var bit__4093__auto__ = G__6807.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4093__auto__ || G__6807.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__6808 = coll;
                  if (G__6808) {
                    var bit__4100__auto__ = G__6808.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4100__auto__ || G__6808.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__6808.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__6808);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__6808);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(coll == null)) {
      if (function() {
        var G__6809 = coll;
        if (G__6809) {
          var bit__4093__auto__ = G__6809.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4093__auto__ || G__6809.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__6810 = coll;
                  if (G__6810) {
                    var bit__4100__auto__ = G__6810.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4100__auto__ || G__6810.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__6810.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__6810);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__6810);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__6813 = o;
        if (G__6813) {
          var bit__4093__auto__ = G__6813.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4093__auto__ || G__6813.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__6814 = o;
        if (G__6814) {
          var bit__4093__auto__ = G__6814.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4093__auto__ || G__6814.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__6815__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__6816 = ret;
          var G__6817 = cljs.core.first.call(null, kvs);
          var G__6818 = cljs.core.second.call(null, kvs);
          var G__6819 = cljs.core.nnext.call(null, kvs);
          coll = G__6816;
          k = G__6817;
          v = G__6818;
          kvs = G__6819;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__6815 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__6815__delegate.call(this, coll, k, v, kvs);
    };
    G__6815.cljs$lang$maxFixedArity = 3;
    G__6815.cljs$lang$applyTo = function(arglist__6820) {
      var coll = cljs.core.first(arglist__6820);
      arglist__6820 = cljs.core.next(arglist__6820);
      var k = cljs.core.first(arglist__6820);
      arglist__6820 = cljs.core.next(arglist__6820);
      var v = cljs.core.first(arglist__6820);
      var kvs = cljs.core.rest(arglist__6820);
      return G__6815__delegate(coll, k, v, kvs);
    };
    G__6815.cljs$core$IFn$_invoke$arity$variadic = G__6815__delegate;
    return G__6815;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__6821__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__6822 = ret;
            var G__6823 = cljs.core.first.call(null, ks);
            var G__6824 = cljs.core.next.call(null, ks);
            coll = G__6822;
            k = G__6823;
            ks = G__6824;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__6821 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6821__delegate.call(this, coll, k, ks);
    };
    G__6821.cljs$lang$maxFixedArity = 2;
    G__6821.cljs$lang$applyTo = function(arglist__6825) {
      var coll = cljs.core.first(arglist__6825);
      arglist__6825 = cljs.core.next(arglist__6825);
      var k = cljs.core.first(arglist__6825);
      var ks = cljs.core.rest(arglist__6825);
      return G__6821__delegate(coll, k, ks);
    };
    G__6821.cljs$core$IFn$_invoke$arity$variadic = G__6821__delegate;
    return G__6821;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3450__auto__ = goog.isFunction(f);
  if (or__3450__auto__) {
    return or__3450__auto__;
  } else {
    var G__6829 = f;
    if (G__6829) {
      var bit__4100__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3450__auto____$1 = bit__4100__auto__;
        if (cljs.core.truth_(or__3450__auto____$1)) {
          return or__3450__auto____$1;
        } else {
          return G__6829.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__6829.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__6829);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__6829);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__6837 = o;
    if (G__6837) {
      var bit__4100__auto__ = G__6837.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4100__auto__ || G__6837.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__6837.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__6837);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__6837);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t6838 !== "undefined") {
      } else {
        cljs.core.t6838 = function(meta, o, with_meta, meta6839) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta6839 = meta6839;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t6838.cljs$lang$type = true;
        cljs.core.t6838.cljs$lang$ctorStr = "cljs.core/t6838";
        cljs.core.t6838.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
          return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/t6838");
        };
        cljs.core.t6838.prototype.call = function() {
          var G__6842__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__6842 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__6842__delegate.call(this, self__, args);
          };
          G__6842.cljs$lang$maxFixedArity = 1;
          G__6842.cljs$lang$applyTo = function(arglist__6843) {
            var self__ = cljs.core.first(arglist__6843);
            var args = cljs.core.rest(arglist__6843);
            return G__6842__delegate(self__, args);
          };
          G__6842.cljs$core$IFn$_invoke$arity$variadic = G__6842__delegate;
          return G__6842;
        }();
        cljs.core.t6838.prototype.apply = function(self__, args6841) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6841)));
        };
        cljs.core.t6838.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__6844__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__6844 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__6844__delegate.call(this, args);
          };
          G__6844.cljs$lang$maxFixedArity = 0;
          G__6844.cljs$lang$applyTo = function(arglist__6845) {
            var args = cljs.core.seq(arglist__6845);
            return G__6844__delegate(args);
          };
          G__6844.cljs$core$IFn$_invoke$arity$variadic = G__6844__delegate;
          return G__6844;
        }();
        cljs.core.t6838.prototype.cljs$core$Fn$ = true;
        cljs.core.t6838.prototype.cljs$core$IMeta$_meta$arity$1 = function(_6840) {
          var self__ = this;
          var _6840__$1 = this;
          return self__.meta6839;
        };
        cljs.core.t6838.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_6840, meta6839__$1) {
          var self__ = this;
          var _6840__$1 = this;
          return new cljs.core.t6838(self__.meta, self__.o, self__.with_meta, meta6839__$1);
        };
        cljs.core.__GT_t6838 = function __GT_t6838(meta__$1, o__$1, with_meta__$1, meta6839) {
          return new cljs.core.t6838(meta__$1, o__$1, with_meta__$1, meta6839);
        };
      }
      return new cljs.core.t6838(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3438__auto__ = !(o == null);
    if (and__3438__auto__) {
      var G__6849 = o;
      if (G__6849) {
        var bit__4100__auto__ = G__6849.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4100__auto__ || G__6849.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__6849.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__6849);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__6849);
      }
    } else {
      return and__3438__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__6850__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__6851 = ret;
            var G__6852 = cljs.core.first.call(null, ks);
            var G__6853 = cljs.core.next.call(null, ks);
            coll = G__6851;
            k = G__6852;
            ks = G__6853;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__6850 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6850__delegate.call(this, coll, k, ks);
    };
    G__6850.cljs$lang$maxFixedArity = 2;
    G__6850.cljs$lang$applyTo = function(arglist__6854) {
      var coll = cljs.core.first(arglist__6854);
      arglist__6854 = cljs.core.next(arglist__6854);
      var k = cljs.core.first(arglist__6854);
      var ks = cljs.core.rest(arglist__6854);
      return G__6850__delegate(coll, k, ks);
    };
    G__6850.cljs$core$IFn$_invoke$arity$variadic = G__6850__delegate;
    return G__6850;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj6856 = {};
  return obj6856;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj6860 = {};
      return obj6860;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__6862 = o;
    if (G__6862) {
      var bit__4093__auto__ = G__6862.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4093__auto__ || G__6862.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__6864 = x;
    if (G__6864) {
      var bit__4100__auto__ = G__6864.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4100__auto__ || G__6864.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__6864.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__6864);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__6864);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__6866 = x;
    if (G__6866) {
      var bit__4100__auto__ = G__6866.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4100__auto__ || G__6866.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__6866.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__6866);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__6866);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__6868 = x;
  if (G__6868) {
    var bit__4100__auto__ = G__6868.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4100__auto__ || G__6868.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__6868.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__6868);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__6868);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__6870 = x;
  if (G__6870) {
    var bit__4100__auto__ = G__6870.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4100__auto__ || G__6870.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__6870.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__6870);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__6870);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__6872 = x;
  if (G__6872) {
    var bit__4100__auto__ = G__6872.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4100__auto__ || G__6872.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__6872.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__6872);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__6872);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__6874 = x;
  if (G__6874) {
    var bit__4100__auto__ = G__6874.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4100__auto__ || G__6874.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__6874.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__6874);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__6874);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__6876 = x;
    if (G__6876) {
      var bit__4100__auto__ = G__6876.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4100__auto__ || G__6876.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__6876.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__6876);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__6876);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__6878 = x;
  if (G__6878) {
    var bit__4100__auto__ = G__6878.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4100__auto__ || G__6878.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__6878.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__6878);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__6878);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__6880 = x;
  if (G__6880) {
    var bit__4093__auto__ = G__6880.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4093__auto__ || G__6880.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj6884 = {};
    return obj6884;
  };
  var js_obj__1 = function() {
    var G__6885__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__6885 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__6885__delegate.call(this, keyvals);
    };
    G__6885.cljs$lang$maxFixedArity = 0;
    G__6885.cljs$lang$applyTo = function(arglist__6886) {
      var keyvals = cljs.core.seq(arglist__6886);
      return G__6885__delegate(keyvals);
    };
    G__6885.cljs$core$IFn$_invoke$arity$variadic = G__6885__delegate;
    return G__6885;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key);
  });
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__6887 = i__$1 + 1;
      var G__6888 = j__$1 + 1;
      var G__6889 = len__$1 - 1;
      i__$1 = G__6887;
      j__$1 = G__6888;
      len__$1 = G__6889;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__6890 = i__$1 - 1;
      var G__6891 = j__$1 - 1;
      var G__6892 = len__$1 - 1;
      i__$1 = G__6890;
      j__$1 = G__6891;
      len__$1 = G__6892;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj6894 = {};
  return obj6894;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__6896 = s;
    if (G__6896) {
      var bit__4100__auto__ = G__6896.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4100__auto__ || G__6896.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__6896.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__6896);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__6896);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__6898 = s;
  if (G__6898) {
    var bit__4100__auto__ = G__6898.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4100__auto__ || G__6898.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__6898.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__6898);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__6898);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3450__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3450__auto__) {
    return or__3450__auto__;
  } else {
    var G__6902 = f;
    if (G__6902) {
      var bit__4100__auto__ = G__6902.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4100__auto__ || G__6902.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__6902.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__6902);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__6902);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__6903__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__6904 = cljs.core.conj.call(null, s, x__$1);
              var G__6905 = etc;
              s = G__6904;
              xs = G__6905;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__6903 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6903__delegate.call(this, x, y, more);
    };
    G__6903.cljs$lang$maxFixedArity = 2;
    G__6903.cljs$lang$applyTo = function(arglist__6906) {
      var x = cljs.core.first(arglist__6906);
      arglist__6906 = cljs.core.next(arglist__6906);
      var y = cljs.core.first(arglist__6906);
      var more = cljs.core.rest(arglist__6906);
      return G__6903__delegate(x, y, more);
    };
    G__6903.cljs$core$IFn$_invoke$arity$variadic = G__6903__delegate;
    return G__6903;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3450__auto__ = cljs.core.seq.call(null, coll);
    if (or__3450__auto__) {
      return or__3450__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__6908 = x;
            if (G__6908) {
              var bit__4093__auto__ = G__6908.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4093__auto__ || G__6908.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__6909 = xs;
        var G__6910 = ys;
        var G__6911 = len;
        var G__6912 = n + 1;
        xs = G__6909;
        ys = G__6910;
        len = G__6911;
        n = G__6912;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__6913 = nval;
          var G__6914 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__6913;
          coll__$1 = G__6914;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__6917 = coll;
      if (G__6917) {
        var bit__4093__auto__ = G__6917.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4093__auto__ || G__6917.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__6918 = coll;
      if (G__6918) {
        var bit__4093__auto__ = G__6918.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4093__auto__ || G__6918.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__6919__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__6919 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6919__delegate.call(this, x, y, more);
    };
    G__6919.cljs$lang$maxFixedArity = 2;
    G__6919.cljs$lang$applyTo = function(arglist__6920) {
      var x = cljs.core.first(arglist__6920);
      arglist__6920 = cljs.core.next(arglist__6920);
      var y = cljs.core.first(arglist__6920);
      var more = cljs.core.rest(arglist__6920);
      return G__6919__delegate(x, y, more);
    };
    G__6919.cljs$core$IFn$_invoke$arity$variadic = G__6919__delegate;
    return G__6919;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__6921__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__6921 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6921__delegate.call(this, x, y, more);
    };
    G__6921.cljs$lang$maxFixedArity = 2;
    G__6921.cljs$lang$applyTo = function(arglist__6922) {
      var x = cljs.core.first(arglist__6922);
      arglist__6922 = cljs.core.next(arglist__6922);
      var y = cljs.core.first(arglist__6922);
      var more = cljs.core.rest(arglist__6922);
      return G__6921__delegate(x, y, more);
    };
    G__6921.cljs$core$IFn$_invoke$arity$variadic = G__6921__delegate;
    return G__6921;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__6923__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__6923 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6923__delegate.call(this, x, y, more);
    };
    G__6923.cljs$lang$maxFixedArity = 2;
    G__6923.cljs$lang$applyTo = function(arglist__6924) {
      var x = cljs.core.first(arglist__6924);
      arglist__6924 = cljs.core.next(arglist__6924);
      var y = cljs.core.first(arglist__6924);
      var more = cljs.core.rest(arglist__6924);
      return G__6923__delegate(x, y, more);
    };
    G__6923.cljs$core$IFn$_invoke$arity$variadic = G__6923__delegate;
    return G__6923;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__6925__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__6925 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6925__delegate.call(this, x, y, more);
    };
    G__6925.cljs$lang$maxFixedArity = 2;
    G__6925.cljs$lang$applyTo = function(arglist__6926) {
      var x = cljs.core.first(arglist__6926);
      arglist__6926 = cljs.core.next(arglist__6926);
      var y = cljs.core.first(arglist__6926);
      var more = cljs.core.rest(arglist__6926);
      return G__6925__delegate(x, y, more);
    };
    G__6925.cljs$core$IFn$_invoke$arity$variadic = G__6925__delegate;
    return G__6925;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__6927__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__6928 = y;
            var G__6929 = cljs.core.first.call(null, more);
            var G__6930 = cljs.core.next.call(null, more);
            x = G__6928;
            y = G__6929;
            more = G__6930;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6927 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6927__delegate.call(this, x, y, more);
    };
    G__6927.cljs$lang$maxFixedArity = 2;
    G__6927.cljs$lang$applyTo = function(arglist__6931) {
      var x = cljs.core.first(arglist__6931);
      arglist__6931 = cljs.core.next(arglist__6931);
      var y = cljs.core.first(arglist__6931);
      var more = cljs.core.rest(arglist__6931);
      return G__6927__delegate(x, y, more);
    };
    G__6927.cljs$core$IFn$_invoke$arity$variadic = G__6927__delegate;
    return G__6927;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__6932__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__6933 = y;
            var G__6934 = cljs.core.first.call(null, more);
            var G__6935 = cljs.core.next.call(null, more);
            x = G__6933;
            y = G__6934;
            more = G__6935;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6932 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6932__delegate.call(this, x, y, more);
    };
    G__6932.cljs$lang$maxFixedArity = 2;
    G__6932.cljs$lang$applyTo = function(arglist__6936) {
      var x = cljs.core.first(arglist__6936);
      arglist__6936 = cljs.core.next(arglist__6936);
      var y = cljs.core.first(arglist__6936);
      var more = cljs.core.rest(arglist__6936);
      return G__6932__delegate(x, y, more);
    };
    G__6932.cljs$core$IFn$_invoke$arity$variadic = G__6932__delegate;
    return G__6932;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__6937__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__6938 = y;
            var G__6939 = cljs.core.first.call(null, more);
            var G__6940 = cljs.core.next.call(null, more);
            x = G__6938;
            y = G__6939;
            more = G__6940;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6937 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6937__delegate.call(this, x, y, more);
    };
    G__6937.cljs$lang$maxFixedArity = 2;
    G__6937.cljs$lang$applyTo = function(arglist__6941) {
      var x = cljs.core.first(arglist__6941);
      arglist__6941 = cljs.core.next(arglist__6941);
      var y = cljs.core.first(arglist__6941);
      var more = cljs.core.rest(arglist__6941);
      return G__6937__delegate(x, y, more);
    };
    G__6937.cljs$core$IFn$_invoke$arity$variadic = G__6937__delegate;
    return G__6937;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__6942__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__6943 = y;
            var G__6944 = cljs.core.first.call(null, more);
            var G__6945 = cljs.core.next.call(null, more);
            x = G__6943;
            y = G__6944;
            more = G__6945;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6942 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6942__delegate.call(this, x, y, more);
    };
    G__6942.cljs$lang$maxFixedArity = 2;
    G__6942.cljs$lang$applyTo = function(arglist__6946) {
      var x = cljs.core.first(arglist__6946);
      arglist__6946 = cljs.core.next(arglist__6946);
      var y = cljs.core.first(arglist__6946);
      var more = cljs.core.rest(arglist__6946);
      return G__6942__delegate(x, y, more);
    };
    G__6942.cljs$core$IFn$_invoke$arity$variadic = G__6942__delegate;
    return G__6942;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3757__auto__ = x;
    var y__3758__auto__ = y;
    return x__3757__auto__ > y__3758__auto__ ? x__3757__auto__ : y__3758__auto__;
  };
  var max__3 = function() {
    var G__6947__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3757__auto__ = x;
        var y__3758__auto__ = y;
        return x__3757__auto__ > y__3758__auto__ ? x__3757__auto__ : y__3758__auto__;
      }(), more);
    };
    var G__6947 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6947__delegate.call(this, x, y, more);
    };
    G__6947.cljs$lang$maxFixedArity = 2;
    G__6947.cljs$lang$applyTo = function(arglist__6948) {
      var x = cljs.core.first(arglist__6948);
      arglist__6948 = cljs.core.next(arglist__6948);
      var y = cljs.core.first(arglist__6948);
      var more = cljs.core.rest(arglist__6948);
      return G__6947__delegate(x, y, more);
    };
    G__6947.cljs$core$IFn$_invoke$arity$variadic = G__6947__delegate;
    return G__6947;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3764__auto__ = x;
    var y__3765__auto__ = y;
    return x__3764__auto__ < y__3765__auto__ ? x__3764__auto__ : y__3765__auto__;
  };
  var min__3 = function() {
    var G__6949__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3764__auto__ = x;
        var y__3765__auto__ = y;
        return x__3764__auto__ < y__3765__auto__ ? x__3764__auto__ : y__3765__auto__;
      }(), more);
    };
    var G__6949 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6949__delegate.call(this, x, y, more);
    };
    G__6949.cljs$lang$maxFixedArity = 2;
    G__6949.cljs$lang$applyTo = function(arglist__6950) {
      var x = cljs.core.first(arglist__6950);
      arglist__6950 = cljs.core.next(arglist__6950);
      var y = cljs.core.first(arglist__6950);
      var more = cljs.core.rest(arglist__6950);
      return G__6949__delegate(x, y, more);
    };
    G__6949.cljs$core$IFn$_invoke$arity$variadic = G__6949__delegate;
    return G__6949;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__6951__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__6951 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6951__delegate.call(this, x, y, more);
    };
    G__6951.cljs$lang$maxFixedArity = 2;
    G__6951.cljs$lang$applyTo = function(arglist__6952) {
      var x = cljs.core.first(arglist__6952);
      arglist__6952 = cljs.core.next(arglist__6952);
      var y = cljs.core.first(arglist__6952);
      var more = cljs.core.rest(arglist__6952);
      return G__6951__delegate(x, y, more);
    };
    G__6951.cljs$core$IFn$_invoke$arity$variadic = G__6951__delegate;
    return G__6951;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__6953__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__6953 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6953__delegate.call(this, x, y, more);
    };
    G__6953.cljs$lang$maxFixedArity = 2;
    G__6953.cljs$lang$applyTo = function(arglist__6954) {
      var x = cljs.core.first(arglist__6954);
      arglist__6954 = cljs.core.next(arglist__6954);
      var y = cljs.core.first(arglist__6954);
      var more = cljs.core.rest(arglist__6954);
      return G__6953__delegate(x, y, more);
    };
    G__6953.cljs$core$IFn$_invoke$arity$variadic = G__6953__delegate;
    return G__6953;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__6955__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__6955 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6955__delegate.call(this, x, y, more);
    };
    G__6955.cljs$lang$maxFixedArity = 2;
    G__6955.cljs$lang$applyTo = function(arglist__6956) {
      var x = cljs.core.first(arglist__6956);
      arglist__6956 = cljs.core.next(arglist__6956);
      var y = cljs.core.first(arglist__6956);
      var more = cljs.core.rest(arglist__6956);
      return G__6955__delegate(x, y, more);
    };
    G__6955.cljs$core$IFn$_invoke$arity$variadic = G__6955__delegate;
    return G__6955;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__6957__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__6957 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6957__delegate.call(this, x, y, more);
    };
    G__6957.cljs$lang$maxFixedArity = 2;
    G__6957.cljs$lang$applyTo = function(arglist__6958) {
      var x = cljs.core.first(arglist__6958);
      arglist__6958 = cljs.core.next(arglist__6958);
      var y = cljs.core.first(arglist__6958);
      var more = cljs.core.rest(arglist__6958);
      return G__6957__delegate(x, y, more);
    };
    G__6957.cljs$core$IFn$_invoke$arity$variadic = G__6957__delegate;
    return G__6957;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__6959__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__6959 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6959__delegate.call(this, x, y, more);
    };
    G__6959.cljs$lang$maxFixedArity = 2;
    G__6959.cljs$lang$applyTo = function(arglist__6960) {
      var x = cljs.core.first(arglist__6960);
      arglist__6960 = cljs.core.next(arglist__6960);
      var y = cljs.core.first(arglist__6960);
      var more = cljs.core.rest(arglist__6960);
      return G__6959__delegate(x, y, more);
    };
    G__6959.cljs$core$IFn$_invoke$arity$variadic = G__6959__delegate;
    return G__6959;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__6961__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__6961 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6961__delegate.call(this, x, y, more);
    };
    G__6961.cljs$lang$maxFixedArity = 2;
    G__6961.cljs$lang$applyTo = function(arglist__6962) {
      var x = cljs.core.first(arglist__6962);
      arglist__6962 = cljs.core.next(arglist__6962);
      var y = cljs.core.first(arglist__6962);
      var more = cljs.core.rest(arglist__6962);
      return G__6961__delegate(x, y, more);
    };
    G__6961.cljs$core$IFn$_invoke$arity$variadic = G__6961__delegate;
    return G__6961;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__6963__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__6963 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6963__delegate.call(this, x, y, more);
    };
    G__6963.cljs$lang$maxFixedArity = 2;
    G__6963.cljs$lang$applyTo = function(arglist__6964) {
      var x = cljs.core.first(arglist__6964);
      arglist__6964 = cljs.core.next(arglist__6964);
      var y = cljs.core.first(arglist__6964);
      var more = cljs.core.rest(arglist__6964);
      return G__6963__delegate(x, y, more);
    };
    G__6963.cljs$core$IFn$_invoke$arity$variadic = G__6963__delegate;
    return G__6963;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__6965__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__6966 = y;
            var G__6967 = cljs.core.first.call(null, more);
            var G__6968 = cljs.core.next.call(null, more);
            x = G__6966;
            y = G__6967;
            more = G__6968;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6965 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6965__delegate.call(this, x, y, more);
    };
    G__6965.cljs$lang$maxFixedArity = 2;
    G__6965.cljs$lang$applyTo = function(arglist__6969) {
      var x = cljs.core.first(arglist__6969);
      arglist__6969 = cljs.core.next(arglist__6969);
      var y = cljs.core.first(arglist__6969);
      var more = cljs.core.rest(arglist__6969);
      return G__6965__delegate(x, y, more);
    };
    G__6965.cljs$core$IFn$_invoke$arity$variadic = G__6965__delegate;
    return G__6965;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__6970 = n__$1 - 1;
      var G__6971 = cljs.core.next.call(null, xs);
      n__$1 = G__6970;
      xs = G__6971;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__6972__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__6973 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__6974 = cljs.core.next.call(null, more);
          sb = G__6973;
          more = G__6974;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__6972 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__6972__delegate.call(this, x, ys);
    };
    G__6972.cljs$lang$maxFixedArity = 1;
    G__6972.cljs$lang$applyTo = function(arglist__6975) {
      var x = cljs.core.first(arglist__6975);
      var ys = cljs.core.rest(arglist__6975);
      return G__6972__delegate(x, ys);
    };
    G__6972.cljs$core$IFn$_invoke$arity$variadic = G__6972__delegate;
    return G__6972;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__6976 = cljs.core.next.call(null, xs);
            var G__6977 = cljs.core.next.call(null, ys);
            xs = G__6976;
            ys = G__6977;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__6978 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__6979 = cljs.core.next.call(null, s);
        res = G__6978;
        s = G__6979;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__6980 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__6981 = cljs.core.next.call(null, s);
      h = G__6980;
      s = G__6981;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__6982 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__6983 = cljs.core.next.call(null, s__$1);
      h = G__6982;
      s__$1 = G__6983;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__6990_6996 = cljs.core.seq.call(null, fn_map);
  var chunk__6991_6997 = null;
  var count__6992_6998 = 0;
  var i__6993_6999 = 0;
  while (true) {
    if (i__6993_6999 < count__6992_6998) {
      var vec__6994_7000 = cljs.core._nth.call(null, chunk__6991_6997, i__6993_6999);
      var key_name_7001 = cljs.core.nth.call(null, vec__6994_7000, 0, null);
      var f_7002 = cljs.core.nth.call(null, vec__6994_7000, 1, null);
      var str_name_7003 = cljs.core.name.call(null, key_name_7001);
      obj[str_name_7003] = f_7002;
      var G__7004 = seq__6990_6996;
      var G__7005 = chunk__6991_6997;
      var G__7006 = count__6992_6998;
      var G__7007 = i__6993_6999 + 1;
      seq__6990_6996 = G__7004;
      chunk__6991_6997 = G__7005;
      count__6992_6998 = G__7006;
      i__6993_6999 = G__7007;
      continue;
    } else {
      var temp__4092__auto___7008 = cljs.core.seq.call(null, seq__6990_6996);
      if (temp__4092__auto___7008) {
        var seq__6990_7009__$1 = temp__4092__auto___7008;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6990_7009__$1)) {
          var c__4198__auto___7010 = cljs.core.chunk_first.call(null, seq__6990_7009__$1);
          var G__7011 = cljs.core.chunk_rest.call(null, seq__6990_7009__$1);
          var G__7012 = c__4198__auto___7010;
          var G__7013 = cljs.core.count.call(null, c__4198__auto___7010);
          var G__7014 = 0;
          seq__6990_6996 = G__7011;
          chunk__6991_6997 = G__7012;
          count__6992_6998 = G__7013;
          i__6993_6999 = G__7014;
          continue;
        } else {
          var vec__6995_7015 = cljs.core.first.call(null, seq__6990_7009__$1);
          var key_name_7016 = cljs.core.nth.call(null, vec__6995_7015, 0, null);
          var f_7017 = cljs.core.nth.call(null, vec__6995_7015, 1, null);
          var str_name_7018 = cljs.core.name.call(null, key_name_7016);
          obj[str_name_7018] = f_7017;
          var G__7019 = cljs.core.next.call(null, seq__6990_7009__$1);
          var G__7020 = null;
          var G__7021 = 0;
          var G__7022 = 0;
          seq__6990_6996 = G__7019;
          chunk__6991_6997 = G__7020;
          count__6992_6998 = G__7021;
          i__6993_6999 = G__7022;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/List");
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__7024 = coll;
  if (G__7024) {
    var bit__4100__auto__ = G__7024.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4100__auto__ || G__7024.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__7024.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__7024);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__7024);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__7025 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__7025;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__7026 = i - 1;
        var G__7027 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__7026;
        r = G__7027;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__7028) {
    var xs = cljs.core.seq(arglist__7028);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3450__auto__ = coll == null;
    if (or__3450__auto__) {
      return or__3450__auto__;
    } else {
      var G__7032 = coll;
      if (G__7032) {
        var bit__4093__auto__ = G__7032.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4093__auto__ || G__7032.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__7034 = x;
  if (G__7034) {
    var bit__4100__auto__ = G__7034.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4100__auto__ || G__7034.cljs$core$IList$) {
      return true;
    } else {
      if (!G__7034.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__7034);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__7034);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__7036 = null;
  var G__7036__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__7036__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__7036 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7036__2.call(this, self__, coll);
      case 3:
        return G__7036__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7036;
}();
cljs.core.Keyword.prototype.apply = function(self__, args7035) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7035)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__7038 = x;
    if (G__7038) {
      var bit__4093__auto__ = G__7038.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4093__auto__ || G__7038.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__7039 = ls.sval();
        ls = G__7039;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__7041 = s;
    if (G__7041) {
      var bit__4093__auto__ = G__7041.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4093__auto__ || G__7041.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__7042 = cljs.core.next.call(null, s__$1);
      s__$1 = G__7042;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_7043 = 0;
  var xs_7044 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_7044) {
      ret[i_7043] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_7044));
      var G__7045 = i_7043 + 1;
      var G__7046 = cljs.core.next.call(null, xs_7044);
      i_7043 = G__7045;
      xs_7044 = G__7046;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__7047 = i + 1;
          var G__7048 = cljs.core.next.call(null, s__$1);
          i = G__7047;
          s__$1 = G__7048;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4298__auto___7049 = size;
      var i_7050 = 0;
      while (true) {
        if (i_7050 < n__4298__auto___7049) {
          a[i_7050] = init_val_or_seq;
          var G__7051 = i_7050 + 1;
          i_7050 = G__7051;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__7052 = i + 1;
          var G__7053 = cljs.core.next.call(null, s__$1);
          i = G__7052;
          s__$1 = G__7053;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4298__auto___7054 = size;
      var i_7055 = 0;
      while (true) {
        if (i_7055 < n__4298__auto___7054) {
          a[i_7055] = init_val_or_seq;
          var G__7056 = i_7055 + 1;
          i_7055 = G__7056;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__7057 = i + 1;
          var G__7058 = cljs.core.next.call(null, s__$1);
          i = G__7057;
          s__$1 = G__7058;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4298__auto___7059 = size;
      var i_7060 = 0;
      while (true) {
        if (i_7060 < n__4298__auto___7059) {
          a[i_7060] = init_val_or_seq;
          var G__7061 = i_7060 + 1;
          i_7060 = G__7061;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__7062 = i + 1;
          var G__7063 = cljs.core.next.call(null, s__$1);
          i = G__7062;
          s__$1 = G__7063;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4298__auto___7064 = size;
      var i_7065 = 0;
      while (true) {
        if (i_7065 < n__4298__auto___7064) {
          a[i_7065] = init_val_or_seq;
          var G__7066 = i_7065 + 1;
          i_7065 = G__7066;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__7067 = cljs.core.next.call(null, s__$1);
        var G__7068 = i - 1;
        var G__7069 = sum + 1;
        s__$1 = G__7067;
        i = G__7068;
        sum = G__7069;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__7070__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__7070 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7070__delegate.call(this, x, y, zs);
    };
    G__7070.cljs$lang$maxFixedArity = 2;
    G__7070.cljs$lang$applyTo = function(arglist__7071) {
      var x = cljs.core.first(arglist__7071);
      arglist__7071 = cljs.core.next(arglist__7071);
      var y = cljs.core.first(arglist__7071);
      var zs = cljs.core.rest(arglist__7071);
      return G__7070__delegate(x, y, zs);
    };
    G__7070.cljs$core$IFn$_invoke$arity$variadic = G__7070__delegate;
    return G__7070;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__7072__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__7072 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__7072__delegate.call(this, a, b, c, d, more);
    };
    G__7072.cljs$lang$maxFixedArity = 4;
    G__7072.cljs$lang$applyTo = function(arglist__7073) {
      var a = cljs.core.first(arglist__7073);
      arglist__7073 = cljs.core.next(arglist__7073);
      var b = cljs.core.first(arglist__7073);
      arglist__7073 = cljs.core.next(arglist__7073);
      var c = cljs.core.first(arglist__7073);
      arglist__7073 = cljs.core.next(arglist__7073);
      var d = cljs.core.first(arglist__7073);
      var more = cljs.core.rest(arglist__7073);
      return G__7072__delegate(a, b, c, d, more);
    };
    G__7072.cljs$core$IFn$_invoke$arity$variadic = G__7072__delegate;
    return G__7072;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__7074__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__7075 = ntcoll;
          var G__7076 = cljs.core.first.call(null, vals);
          var G__7077 = cljs.core.next.call(null, vals);
          tcoll = G__7075;
          val = G__7076;
          vals = G__7077;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7074 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7074__delegate.call(this, tcoll, val, vals);
    };
    G__7074.cljs$lang$maxFixedArity = 2;
    G__7074.cljs$lang$applyTo = function(arglist__7078) {
      var tcoll = cljs.core.first(arglist__7078);
      arglist__7078 = cljs.core.next(arglist__7078);
      var val = cljs.core.first(arglist__7078);
      var vals = cljs.core.rest(arglist__7078);
      return G__7074__delegate(tcoll, val, vals);
    };
    G__7074.cljs$core$IFn$_invoke$arity$variadic = G__7074__delegate;
    return G__7074;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__7079__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__7080 = ntcoll;
          var G__7081 = cljs.core.first.call(null, kvs);
          var G__7082 = cljs.core.second.call(null, kvs);
          var G__7083 = cljs.core.nnext.call(null, kvs);
          tcoll = G__7080;
          key = G__7081;
          val = G__7082;
          kvs = G__7083;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7079 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__7079__delegate.call(this, tcoll, key, val, kvs);
    };
    G__7079.cljs$lang$maxFixedArity = 3;
    G__7079.cljs$lang$applyTo = function(arglist__7084) {
      var tcoll = cljs.core.first(arglist__7084);
      arglist__7084 = cljs.core.next(arglist__7084);
      var key = cljs.core.first(arglist__7084);
      arglist__7084 = cljs.core.next(arglist__7084);
      var val = cljs.core.first(arglist__7084);
      var kvs = cljs.core.rest(arglist__7084);
      return G__7079__delegate(tcoll, key, val, kvs);
    };
    G__7079.cljs$core$IFn$_invoke$arity$variadic = G__7079__delegate;
    return G__7079;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__7085__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__7086 = ntcoll;
          var G__7087 = cljs.core.first.call(null, ks);
          var G__7088 = cljs.core.next.call(null, ks);
          tcoll = G__7086;
          key = G__7087;
          ks = G__7088;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7085 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7085__delegate.call(this, tcoll, key, ks);
    };
    G__7085.cljs$lang$maxFixedArity = 2;
    G__7085.cljs$lang$applyTo = function(arglist__7089) {
      var tcoll = cljs.core.first(arglist__7089);
      arglist__7089 = cljs.core.next(arglist__7089);
      var key = cljs.core.first(arglist__7089);
      var ks = cljs.core.rest(arglist__7089);
      return G__7085__delegate(tcoll, key, ks);
    };
    G__7085.cljs$core$IFn$_invoke$arity$variadic = G__7085__delegate;
    return G__7085;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__7090__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__7091 = ntcoll;
          var G__7092 = cljs.core.first.call(null, vals);
          var G__7093 = cljs.core.next.call(null, vals);
          tcoll = G__7091;
          val = G__7092;
          vals = G__7093;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__7090 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7090__delegate.call(this, tcoll, val, vals);
    };
    G__7090.cljs$lang$maxFixedArity = 2;
    G__7090.cljs$lang$applyTo = function(arglist__7094) {
      var tcoll = cljs.core.first(arglist__7094);
      arglist__7094 = cljs.core.next(arglist__7094);
      var val = cljs.core.first(arglist__7094);
      var vals = cljs.core.rest(arglist__7094);
      return G__7090__delegate(tcoll, val, vals);
    };
    G__7090.cljs$core$IFn$_invoke$arity$variadic = G__7090__delegate;
    return G__7090;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a);
      } else {
        return f.call(null, a);
      }
    } else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b);
        } else {
          return f.call(null, a, b);
        }
      } else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c);
          } else {
            return f.call(null, a, b, c);
          }
        } else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d);
            } else {
              return f.call(null, a, b, c, d);
            }
          } else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e);
              } else {
                return f.call(null, a, b, c, d, e);
              }
            } else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1);
                } else {
                  return f__$1.call(null, a, b, c, d, e, f__$1);
                }
              } else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g);
                  } else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g);
                  }
                } else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h);
                    } else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h);
                    }
                  } else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i);
                      } else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i);
                      }
                    } else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j);
                        } else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j);
                        }
                      } else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k);
                          } else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k);
                          }
                        } else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            } else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            }
                          } else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              } else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              }
                            } else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                } else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                }
                              } else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  } else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  }
                                } else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    } else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    }
                                  } else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      } else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      }
                                    } else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        } else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        }
                                      } else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          } else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          }
                                        } else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            } else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__7095__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__7095 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__7095__delegate.call(this, f, a, b, c, d, args);
    };
    G__7095.cljs$lang$maxFixedArity = 5;
    G__7095.cljs$lang$applyTo = function(arglist__7096) {
      var f = cljs.core.first(arglist__7096);
      arglist__7096 = cljs.core.next(arglist__7096);
      var a = cljs.core.first(arglist__7096);
      arglist__7096 = cljs.core.next(arglist__7096);
      var b = cljs.core.first(arglist__7096);
      arglist__7096 = cljs.core.next(arglist__7096);
      var c = cljs.core.first(arglist__7096);
      arglist__7096 = cljs.core.next(arglist__7096);
      var d = cljs.core.first(arglist__7096);
      var args = cljs.core.rest(arglist__7096);
      return G__7095__delegate(f, a, b, c, d, args);
    };
    G__7095.cljs$core$IFn$_invoke$arity$variadic = G__7095__delegate;
    return G__7095;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__7097__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__7097 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__7097__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__7097.cljs$lang$maxFixedArity = 6;
    G__7097.cljs$lang$applyTo = function(arglist__7098) {
      var obj = cljs.core.first(arglist__7098);
      arglist__7098 = cljs.core.next(arglist__7098);
      var f = cljs.core.first(arglist__7098);
      arglist__7098 = cljs.core.next(arglist__7098);
      var a = cljs.core.first(arglist__7098);
      arglist__7098 = cljs.core.next(arglist__7098);
      var b = cljs.core.first(arglist__7098);
      arglist__7098 = cljs.core.next(arglist__7098);
      var c = cljs.core.first(arglist__7098);
      arglist__7098 = cljs.core.next(arglist__7098);
      var d = cljs.core.first(arglist__7098);
      var args = cljs.core.rest(arglist__7098);
      return G__7097__delegate(obj, f, a, b, c, d, args);
    };
    G__7097.cljs$core$IFn$_invoke$arity$variadic = G__7097__delegate;
    return G__7097;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__7099__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__7099 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7099__delegate.call(this, x, y, more);
    };
    G__7099.cljs$lang$maxFixedArity = 2;
    G__7099.cljs$lang$applyTo = function(arglist__7100) {
      var x = cljs.core.first(arglist__7100);
      arglist__7100 = cljs.core.next(arglist__7100);
      var y = cljs.core.first(arglist__7100);
      var more = cljs.core.rest(arglist__7100);
      return G__7099__delegate(x, y, more);
    };
    G__7099.cljs$core$IFn$_invoke$arity$variadic = G__7099__delegate;
    return G__7099;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__7101 = pred;
        var G__7102 = cljs.core.next.call(null, coll);
        pred = G__7101;
        coll = G__7102;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3450__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3450__auto__)) {
        return or__3450__auto__;
      } else {
        var G__7103 = pred;
        var G__7104 = cljs.core.next.call(null, coll);
        pred = G__7103;
        coll = G__7104;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__7105 = null;
    var G__7105__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__7105__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__7105__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__7105__3 = function() {
      var G__7106__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__7106 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__7106__delegate.call(this, x, y, zs);
      };
      G__7106.cljs$lang$maxFixedArity = 2;
      G__7106.cljs$lang$applyTo = function(arglist__7107) {
        var x = cljs.core.first(arglist__7107);
        arglist__7107 = cljs.core.next(arglist__7107);
        var y = cljs.core.first(arglist__7107);
        var zs = cljs.core.rest(arglist__7107);
        return G__7106__delegate(x, y, zs);
      };
      G__7106.cljs$core$IFn$_invoke$arity$variadic = G__7106__delegate;
      return G__7106;
    }();
    G__7105 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__7105__0.call(this);
        case 1:
          return G__7105__1.call(this, x);
        case 2:
          return G__7105__2.call(this, x, y);
        default:
          return G__7105__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7105.cljs$lang$maxFixedArity = 2;
    G__7105.cljs$lang$applyTo = G__7105__3.cljs$lang$applyTo;
    return G__7105;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__7108__delegate = function(args) {
      return x;
    };
    var G__7108 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__7108__delegate.call(this, args);
    };
    G__7108.cljs$lang$maxFixedArity = 0;
    G__7108.cljs$lang$applyTo = function(arglist__7109) {
      var args = cljs.core.seq(arglist__7109);
      return G__7108__delegate(args);
    };
    G__7108.cljs$core$IFn$_invoke$arity$variadic = G__7108__delegate;
    return G__7108;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__7110 = null;
      var G__7110__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__7110__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__7110__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__7110__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__7110__4 = function() {
        var G__7111__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__7111 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7111__delegate.call(this, x, y, z, args);
        };
        G__7111.cljs$lang$maxFixedArity = 3;
        G__7111.cljs$lang$applyTo = function(arglist__7112) {
          var x = cljs.core.first(arglist__7112);
          arglist__7112 = cljs.core.next(arglist__7112);
          var y = cljs.core.first(arglist__7112);
          arglist__7112 = cljs.core.next(arglist__7112);
          var z = cljs.core.first(arglist__7112);
          var args = cljs.core.rest(arglist__7112);
          return G__7111__delegate(x, y, z, args);
        };
        G__7111.cljs$core$IFn$_invoke$arity$variadic = G__7111__delegate;
        return G__7111;
      }();
      G__7110 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7110__0.call(this);
          case 1:
            return G__7110__1.call(this, x);
          case 2:
            return G__7110__2.call(this, x, y);
          case 3:
            return G__7110__3.call(this, x, y, z);
          default:
            return G__7110__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7110.cljs$lang$maxFixedArity = 3;
      G__7110.cljs$lang$applyTo = G__7110__4.cljs$lang$applyTo;
      return G__7110;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__7113 = null;
      var G__7113__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__7113__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__7113__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__7113__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__7113__4 = function() {
        var G__7114__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__7114 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7114__delegate.call(this, x, y, z, args);
        };
        G__7114.cljs$lang$maxFixedArity = 3;
        G__7114.cljs$lang$applyTo = function(arglist__7115) {
          var x = cljs.core.first(arglist__7115);
          arglist__7115 = cljs.core.next(arglist__7115);
          var y = cljs.core.first(arglist__7115);
          arglist__7115 = cljs.core.next(arglist__7115);
          var z = cljs.core.first(arglist__7115);
          var args = cljs.core.rest(arglist__7115);
          return G__7114__delegate(x, y, z, args);
        };
        G__7114.cljs$core$IFn$_invoke$arity$variadic = G__7114__delegate;
        return G__7114;
      }();
      G__7113 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7113__0.call(this);
          case 1:
            return G__7113__1.call(this, x);
          case 2:
            return G__7113__2.call(this, x, y);
          case 3:
            return G__7113__3.call(this, x, y, z);
          default:
            return G__7113__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7113.cljs$lang$maxFixedArity = 3;
      G__7113.cljs$lang$applyTo = G__7113__4.cljs$lang$applyTo;
      return G__7113;
    }();
  };
  var comp__4 = function() {
    var G__7116__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__7117__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while (true) {
            if (fs__$2) {
              var G__7118 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__7119 = cljs.core.next.call(null, fs__$2);
              ret = G__7118;
              fs__$2 = G__7119;
              continue;
            } else {
              return ret;
            }
            break;
          }
        };
        var G__7117 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__7117__delegate.call(this, args);
        };
        G__7117.cljs$lang$maxFixedArity = 0;
        G__7117.cljs$lang$applyTo = function(arglist__7120) {
          var args = cljs.core.seq(arglist__7120);
          return G__7117__delegate(args);
        };
        G__7117.cljs$core$IFn$_invoke$arity$variadic = G__7117__delegate;
        return G__7117;
      }();
    };
    var G__7116 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__7116__delegate.call(this, f1, f2, f3, fs);
    };
    G__7116.cljs$lang$maxFixedArity = 3;
    G__7116.cljs$lang$applyTo = function(arglist__7121) {
      var f1 = cljs.core.first(arglist__7121);
      arglist__7121 = cljs.core.next(arglist__7121);
      var f2 = cljs.core.first(arglist__7121);
      arglist__7121 = cljs.core.next(arglist__7121);
      var f3 = cljs.core.first(arglist__7121);
      var fs = cljs.core.rest(arglist__7121);
      return G__7116__delegate(f1, f2, f3, fs);
    };
    G__7116.cljs$core$IFn$_invoke$arity$variadic = G__7116__delegate;
    return G__7116;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__7122__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__7122 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__7122__delegate.call(this, args);
      };
      G__7122.cljs$lang$maxFixedArity = 0;
      G__7122.cljs$lang$applyTo = function(arglist__7123) {
        var args = cljs.core.seq(arglist__7123);
        return G__7122__delegate(args);
      };
      G__7122.cljs$core$IFn$_invoke$arity$variadic = G__7122__delegate;
      return G__7122;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__7124__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__7124 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__7124__delegate.call(this, args);
      };
      G__7124.cljs$lang$maxFixedArity = 0;
      G__7124.cljs$lang$applyTo = function(arglist__7125) {
        var args = cljs.core.seq(arglist__7125);
        return G__7124__delegate(args);
      };
      G__7124.cljs$core$IFn$_invoke$arity$variadic = G__7124__delegate;
      return G__7124;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__7126__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__7126 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__7126__delegate.call(this, args);
      };
      G__7126.cljs$lang$maxFixedArity = 0;
      G__7126.cljs$lang$applyTo = function(arglist__7127) {
        var args = cljs.core.seq(arglist__7127);
        return G__7126__delegate(args);
      };
      G__7126.cljs$core$IFn$_invoke$arity$variadic = G__7126__delegate;
      return G__7126;
    }();
  };
  var partial__5 = function() {
    var G__7128__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__7129__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__7129 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__7129__delegate.call(this, args);
        };
        G__7129.cljs$lang$maxFixedArity = 0;
        G__7129.cljs$lang$applyTo = function(arglist__7130) {
          var args = cljs.core.seq(arglist__7130);
          return G__7129__delegate(args);
        };
        G__7129.cljs$core$IFn$_invoke$arity$variadic = G__7129__delegate;
        return G__7129;
      }();
    };
    var G__7128 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__7128__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__7128.cljs$lang$maxFixedArity = 4;
    G__7128.cljs$lang$applyTo = function(arglist__7131) {
      var f = cljs.core.first(arglist__7131);
      arglist__7131 = cljs.core.next(arglist__7131);
      var arg1 = cljs.core.first(arglist__7131);
      arglist__7131 = cljs.core.next(arglist__7131);
      var arg2 = cljs.core.first(arglist__7131);
      arglist__7131 = cljs.core.next(arglist__7131);
      var arg3 = cljs.core.first(arglist__7131);
      var more = cljs.core.rest(arglist__7131);
      return G__7128__delegate(f, arg1, arg2, arg3, more);
    };
    G__7128.cljs$core$IFn$_invoke$arity$variadic = G__7128__delegate;
    return G__7128;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__7132 = null;
      var G__7132__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__7132__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__7132__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__7132__4 = function() {
        var G__7133__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__7133 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7133__delegate.call(this, a, b, c, ds);
        };
        G__7133.cljs$lang$maxFixedArity = 3;
        G__7133.cljs$lang$applyTo = function(arglist__7134) {
          var a = cljs.core.first(arglist__7134);
          arglist__7134 = cljs.core.next(arglist__7134);
          var b = cljs.core.first(arglist__7134);
          arglist__7134 = cljs.core.next(arglist__7134);
          var c = cljs.core.first(arglist__7134);
          var ds = cljs.core.rest(arglist__7134);
          return G__7133__delegate(a, b, c, ds);
        };
        G__7133.cljs$core$IFn$_invoke$arity$variadic = G__7133__delegate;
        return G__7133;
      }();
      G__7132 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__7132__1.call(this, a);
          case 2:
            return G__7132__2.call(this, a, b);
          case 3:
            return G__7132__3.call(this, a, b, c);
          default:
            return G__7132__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7132.cljs$lang$maxFixedArity = 3;
      G__7132.cljs$lang$applyTo = G__7132__4.cljs$lang$applyTo;
      return G__7132;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__7135 = null;
      var G__7135__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__7135__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__7135__4 = function() {
        var G__7136__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__7136 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7136__delegate.call(this, a, b, c, ds);
        };
        G__7136.cljs$lang$maxFixedArity = 3;
        G__7136.cljs$lang$applyTo = function(arglist__7137) {
          var a = cljs.core.first(arglist__7137);
          arglist__7137 = cljs.core.next(arglist__7137);
          var b = cljs.core.first(arglist__7137);
          arglist__7137 = cljs.core.next(arglist__7137);
          var c = cljs.core.first(arglist__7137);
          var ds = cljs.core.rest(arglist__7137);
          return G__7136__delegate(a, b, c, ds);
        };
        G__7136.cljs$core$IFn$_invoke$arity$variadic = G__7136__delegate;
        return G__7136;
      }();
      G__7135 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__7135__2.call(this, a, b);
          case 3:
            return G__7135__3.call(this, a, b, c);
          default:
            return G__7135__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7135.cljs$lang$maxFixedArity = 3;
      G__7135.cljs$lang$applyTo = G__7135__4.cljs$lang$applyTo;
      return G__7135;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__7138 = null;
      var G__7138__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__7138__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__7138__4 = function() {
        var G__7139__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__7139 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7139__delegate.call(this, a, b, c, ds);
        };
        G__7139.cljs$lang$maxFixedArity = 3;
        G__7139.cljs$lang$applyTo = function(arglist__7140) {
          var a = cljs.core.first(arglist__7140);
          arglist__7140 = cljs.core.next(arglist__7140);
          var b = cljs.core.first(arglist__7140);
          arglist__7140 = cljs.core.next(arglist__7140);
          var c = cljs.core.first(arglist__7140);
          var ds = cljs.core.rest(arglist__7140);
          return G__7139__delegate(a, b, c, ds);
        };
        G__7139.cljs$core$IFn$_invoke$arity$variadic = G__7139__delegate;
        return G__7139;
      }();
      G__7138 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__7138__2.call(this, a, b);
          case 3:
            return G__7138__3.call(this, a, b, c);
          default:
            return G__7138__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7138.cljs$lang$maxFixedArity = 3;
      G__7138.cljs$lang$applyTo = G__7138__4.cljs$lang$applyTo;
      return G__7138;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4298__auto___7141 = size;
          var i_7142 = 0;
          while (true) {
            if (i_7142 < n__4298__auto___7141) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_7142, cljs.core._nth.call(null, c, i_7142)));
              var G__7143 = i_7142 + 1;
              i_7142 = G__7143;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4298__auto___7144 = size;
        var i_7145 = 0;
        while (true) {
          if (i_7145 < n__4298__auto___7144) {
            var x_7146 = f.call(null, cljs.core._nth.call(null, c, i_7145));
            if (x_7146 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_7146);
            }
            var G__7147 = i_7145 + 1;
            i_7145 = G__7147;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4298__auto___7148 = size;
          var i_7149 = 0;
          while (true) {
            if (i_7149 < n__4298__auto___7148) {
              var x_7150 = f.call(null, idx + i_7149, cljs.core._nth.call(null, c, i_7149));
              if (x_7150 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_7150);
              }
              var G__7151 = i_7149 + 1;
              i_7149 = G__7151;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3438__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3438__auto__)) {
            return p.call(null, y);
          } else {
            return and__3438__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3438__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3438__auto__)) {
            var and__3438__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3438__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3438__auto____$1;
            }
          } else {
            return and__3438__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__7158__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__7158 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7158__delegate.call(this, x, y, z, args);
        };
        G__7158.cljs$lang$maxFixedArity = 3;
        G__7158.cljs$lang$applyTo = function(arglist__7159) {
          var x = cljs.core.first(arglist__7159);
          arglist__7159 = cljs.core.next(arglist__7159);
          var y = cljs.core.first(arglist__7159);
          arglist__7159 = cljs.core.next(arglist__7159);
          var z = cljs.core.first(arglist__7159);
          var args = cljs.core.rest(arglist__7159);
          return G__7158__delegate(x, y, z, args);
        };
        G__7158.cljs$core$IFn$_invoke$arity$variadic = G__7158__delegate;
        return G__7158;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3438__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3438__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3438__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3438__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3438__auto__)) {
            var and__3438__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3438__auto____$1)) {
              var and__3438__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3438__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3438__auto____$2;
              }
            } else {
              return and__3438__auto____$1;
            }
          } else {
            return and__3438__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3438__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3438__auto__)) {
            var and__3438__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3438__auto____$1)) {
              var and__3438__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3438__auto____$2)) {
                var and__3438__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3438__auto____$3)) {
                  var and__3438__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3438__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3438__auto____$4;
                  }
                } else {
                  return and__3438__auto____$3;
                }
              } else {
                return and__3438__auto____$2;
              }
            } else {
              return and__3438__auto____$1;
            }
          } else {
            return and__3438__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__7160__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__7152_SHARP_) {
            var and__3438__auto__ = p1.call(null, p1__7152_SHARP_);
            if (cljs.core.truth_(and__3438__auto__)) {
              return p2.call(null, p1__7152_SHARP_);
            } else {
              return and__3438__auto__;
            }
          }, args));
        };
        var G__7160 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7160__delegate.call(this, x, y, z, args);
        };
        G__7160.cljs$lang$maxFixedArity = 3;
        G__7160.cljs$lang$applyTo = function(arglist__7161) {
          var x = cljs.core.first(arglist__7161);
          arglist__7161 = cljs.core.next(arglist__7161);
          var y = cljs.core.first(arglist__7161);
          arglist__7161 = cljs.core.next(arglist__7161);
          var z = cljs.core.first(arglist__7161);
          var args = cljs.core.rest(arglist__7161);
          return G__7160__delegate(x, y, z, args);
        };
        G__7160.cljs$core$IFn$_invoke$arity$variadic = G__7160__delegate;
        return G__7160;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3438__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3438__auto__)) {
            var and__3438__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3438__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3438__auto____$1;
            }
          } else {
            return and__3438__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3438__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3438__auto__)) {
            var and__3438__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3438__auto____$1)) {
              var and__3438__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3438__auto____$2)) {
                var and__3438__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3438__auto____$3)) {
                  var and__3438__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3438__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3438__auto____$4;
                  }
                } else {
                  return and__3438__auto____$3;
                }
              } else {
                return and__3438__auto____$2;
              }
            } else {
              return and__3438__auto____$1;
            }
          } else {
            return and__3438__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3438__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3438__auto__)) {
            var and__3438__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3438__auto____$1)) {
              var and__3438__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3438__auto____$2)) {
                var and__3438__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3438__auto____$3)) {
                  var and__3438__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3438__auto____$4)) {
                    var and__3438__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3438__auto____$5)) {
                      var and__3438__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3438__auto____$6)) {
                        var and__3438__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3438__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3438__auto____$7;
                        }
                      } else {
                        return and__3438__auto____$6;
                      }
                    } else {
                      return and__3438__auto____$5;
                    }
                  } else {
                    return and__3438__auto____$4;
                  }
                } else {
                  return and__3438__auto____$3;
                }
              } else {
                return and__3438__auto____$2;
              }
            } else {
              return and__3438__auto____$1;
            }
          } else {
            return and__3438__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__7162__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__7153_SHARP_) {
            var and__3438__auto__ = p1.call(null, p1__7153_SHARP_);
            if (cljs.core.truth_(and__3438__auto__)) {
              var and__3438__auto____$1 = p2.call(null, p1__7153_SHARP_);
              if (cljs.core.truth_(and__3438__auto____$1)) {
                return p3.call(null, p1__7153_SHARP_);
              } else {
                return and__3438__auto____$1;
              }
            } else {
              return and__3438__auto__;
            }
          }, args));
        };
        var G__7162 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7162__delegate.call(this, x, y, z, args);
        };
        G__7162.cljs$lang$maxFixedArity = 3;
        G__7162.cljs$lang$applyTo = function(arglist__7163) {
          var x = cljs.core.first(arglist__7163);
          arglist__7163 = cljs.core.next(arglist__7163);
          var y = cljs.core.first(arglist__7163);
          arglist__7163 = cljs.core.next(arglist__7163);
          var z = cljs.core.first(arglist__7163);
          var args = cljs.core.rest(arglist__7163);
          return G__7162__delegate(x, y, z, args);
        };
        G__7162.cljs$core$IFn$_invoke$arity$variadic = G__7162__delegate;
        return G__7162;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__7164__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true;
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__7154_SHARP_) {
            return p1__7154_SHARP_.call(null, x);
          }, ps__$1);
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__7155_SHARP_) {
            var and__3438__auto__ = p1__7155_SHARP_.call(null, x);
            if (cljs.core.truth_(and__3438__auto__)) {
              return p1__7155_SHARP_.call(null, y);
            } else {
              return and__3438__auto__;
            }
          }, ps__$1);
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__7156_SHARP_) {
            var and__3438__auto__ = p1__7156_SHARP_.call(null, x);
            if (cljs.core.truth_(and__3438__auto__)) {
              var and__3438__auto____$1 = p1__7156_SHARP_.call(null, y);
              if (cljs.core.truth_(and__3438__auto____$1)) {
                return p1__7156_SHARP_.call(null, z);
              } else {
                return and__3438__auto____$1;
              }
            } else {
              return and__3438__auto__;
            }
          }, ps__$1);
        };
        var epn__4 = function() {
          var G__7165__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__7157_SHARP_) {
              return cljs.core.every_QMARK_.call(null, p1__7157_SHARP_, args);
            }, ps__$1));
          };
          var G__7165 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__7165__delegate.call(this, x, y, z, args);
          };
          G__7165.cljs$lang$maxFixedArity = 3;
          G__7165.cljs$lang$applyTo = function(arglist__7166) {
            var x = cljs.core.first(arglist__7166);
            arglist__7166 = cljs.core.next(arglist__7166);
            var y = cljs.core.first(arglist__7166);
            arglist__7166 = cljs.core.next(arglist__7166);
            var z = cljs.core.first(arglist__7166);
            var args = cljs.core.rest(arglist__7166);
            return G__7165__delegate(x, y, z, args);
          };
          G__7165.cljs$core$IFn$_invoke$arity$variadic = G__7165__delegate;
          return G__7165;
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn;
      }();
    };
    var G__7164 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__7164__delegate.call(this, p1, p2, p3, ps);
    };
    G__7164.cljs$lang$maxFixedArity = 3;
    G__7164.cljs$lang$applyTo = function(arglist__7167) {
      var p1 = cljs.core.first(arglist__7167);
      arglist__7167 = cljs.core.next(arglist__7167);
      var p2 = cljs.core.first(arglist__7167);
      arglist__7167 = cljs.core.next(arglist__7167);
      var p3 = cljs.core.first(arglist__7167);
      var ps = cljs.core.rest(arglist__7167);
      return G__7164__delegate(p1, p2, p3, ps);
    };
    G__7164.cljs$core$IFn$_invoke$arity$variadic = G__7164__delegate;
    return G__7164;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3450__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3450__auto__)) {
          return or__3450__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3450__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3450__auto__)) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3450__auto____$1)) {
            return or__3450__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__7174__delegate = function(x, y, z, args) {
          var or__3450__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3450__auto__)) {
            return or__3450__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__7174 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7174__delegate.call(this, x, y, z, args);
        };
        G__7174.cljs$lang$maxFixedArity = 3;
        G__7174.cljs$lang$applyTo = function(arglist__7175) {
          var x = cljs.core.first(arglist__7175);
          arglist__7175 = cljs.core.next(arglist__7175);
          var y = cljs.core.first(arglist__7175);
          arglist__7175 = cljs.core.next(arglist__7175);
          var z = cljs.core.first(arglist__7175);
          var args = cljs.core.rest(arglist__7175);
          return G__7174__delegate(x, y, z, args);
        };
        G__7174.cljs$core$IFn$_invoke$arity$variadic = G__7174__delegate;
        return G__7174;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3450__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3450__auto__)) {
          return or__3450__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3450__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3450__auto__)) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3450__auto____$1)) {
            return or__3450__auto____$1;
          } else {
            var or__3450__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3450__auto____$2)) {
              return or__3450__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3450__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3450__auto__)) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3450__auto____$1)) {
            return or__3450__auto____$1;
          } else {
            var or__3450__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3450__auto____$2)) {
              return or__3450__auto____$2;
            } else {
              var or__3450__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3450__auto____$3)) {
                return or__3450__auto____$3;
              } else {
                var or__3450__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3450__auto____$4)) {
                  return or__3450__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__7176__delegate = function(x, y, z, args) {
          var or__3450__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3450__auto__)) {
            return or__3450__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__7168_SHARP_) {
              var or__3450__auto____$1 = p1.call(null, p1__7168_SHARP_);
              if (cljs.core.truth_(or__3450__auto____$1)) {
                return or__3450__auto____$1;
              } else {
                return p2.call(null, p1__7168_SHARP_);
              }
            }, args);
          }
        };
        var G__7176 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7176__delegate.call(this, x, y, z, args);
        };
        G__7176.cljs$lang$maxFixedArity = 3;
        G__7176.cljs$lang$applyTo = function(arglist__7177) {
          var x = cljs.core.first(arglist__7177);
          arglist__7177 = cljs.core.next(arglist__7177);
          var y = cljs.core.first(arglist__7177);
          arglist__7177 = cljs.core.next(arglist__7177);
          var z = cljs.core.first(arglist__7177);
          var args = cljs.core.rest(arglist__7177);
          return G__7176__delegate(x, y, z, args);
        };
        G__7176.cljs$core$IFn$_invoke$arity$variadic = G__7176__delegate;
        return G__7176;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3450__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3450__auto__)) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3450__auto____$1)) {
            return or__3450__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3450__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3450__auto__)) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3450__auto____$1)) {
            return or__3450__auto____$1;
          } else {
            var or__3450__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3450__auto____$2)) {
              return or__3450__auto____$2;
            } else {
              var or__3450__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3450__auto____$3)) {
                return or__3450__auto____$3;
              } else {
                var or__3450__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3450__auto____$4)) {
                  return or__3450__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3450__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3450__auto__)) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3450__auto____$1)) {
            return or__3450__auto____$1;
          } else {
            var or__3450__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3450__auto____$2)) {
              return or__3450__auto____$2;
            } else {
              var or__3450__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3450__auto____$3)) {
                return or__3450__auto____$3;
              } else {
                var or__3450__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3450__auto____$4)) {
                  return or__3450__auto____$4;
                } else {
                  var or__3450__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3450__auto____$5)) {
                    return or__3450__auto____$5;
                  } else {
                    var or__3450__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3450__auto____$6)) {
                      return or__3450__auto____$6;
                    } else {
                      var or__3450__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3450__auto____$7)) {
                        return or__3450__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__7178__delegate = function(x, y, z, args) {
          var or__3450__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3450__auto__)) {
            return or__3450__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__7169_SHARP_) {
              var or__3450__auto____$1 = p1.call(null, p1__7169_SHARP_);
              if (cljs.core.truth_(or__3450__auto____$1)) {
                return or__3450__auto____$1;
              } else {
                var or__3450__auto____$2 = p2.call(null, p1__7169_SHARP_);
                if (cljs.core.truth_(or__3450__auto____$2)) {
                  return or__3450__auto____$2;
                } else {
                  return p3.call(null, p1__7169_SHARP_);
                }
              }
            }, args);
          }
        };
        var G__7178 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7178__delegate.call(this, x, y, z, args);
        };
        G__7178.cljs$lang$maxFixedArity = 3;
        G__7178.cljs$lang$applyTo = function(arglist__7179) {
          var x = cljs.core.first(arglist__7179);
          arglist__7179 = cljs.core.next(arglist__7179);
          var y = cljs.core.first(arglist__7179);
          arglist__7179 = cljs.core.next(arglist__7179);
          var z = cljs.core.first(arglist__7179);
          var args = cljs.core.rest(arglist__7179);
          return G__7178__delegate(x, y, z, args);
        };
        G__7178.cljs$core$IFn$_invoke$arity$variadic = G__7178__delegate;
        return G__7178;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__7180__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null;
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__7170_SHARP_) {
            return p1__7170_SHARP_.call(null, x);
          }, ps__$1);
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__7171_SHARP_) {
            var or__3450__auto__ = p1__7171_SHARP_.call(null, x);
            if (cljs.core.truth_(or__3450__auto__)) {
              return or__3450__auto__;
            } else {
              return p1__7171_SHARP_.call(null, y);
            }
          }, ps__$1);
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__7172_SHARP_) {
            var or__3450__auto__ = p1__7172_SHARP_.call(null, x);
            if (cljs.core.truth_(or__3450__auto__)) {
              return or__3450__auto__;
            } else {
              var or__3450__auto____$1 = p1__7172_SHARP_.call(null, y);
              if (cljs.core.truth_(or__3450__auto____$1)) {
                return or__3450__auto____$1;
              } else {
                return p1__7172_SHARP_.call(null, z);
              }
            }
          }, ps__$1);
        };
        var spn__4 = function() {
          var G__7181__delegate = function(x, y, z, args) {
            var or__3450__auto__ = spn.call(null, x, y, z);
            if (cljs.core.truth_(or__3450__auto__)) {
              return or__3450__auto__;
            } else {
              return cljs.core.some.call(null, function(p1__7173_SHARP_) {
                return cljs.core.some.call(null, p1__7173_SHARP_, args);
              }, ps__$1);
            }
          };
          var G__7181 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__7181__delegate.call(this, x, y, z, args);
          };
          G__7181.cljs$lang$maxFixedArity = 3;
          G__7181.cljs$lang$applyTo = function(arglist__7182) {
            var x = cljs.core.first(arglist__7182);
            arglist__7182 = cljs.core.next(arglist__7182);
            var y = cljs.core.first(arglist__7182);
            arglist__7182 = cljs.core.next(arglist__7182);
            var z = cljs.core.first(arglist__7182);
            var args = cljs.core.rest(arglist__7182);
            return G__7181__delegate(x, y, z, args);
          };
          G__7181.cljs$core$IFn$_invoke$arity$variadic = G__7181__delegate;
          return G__7181;
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn;
      }();
    };
    var G__7180 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__7180__delegate.call(this, p1, p2, p3, ps);
    };
    G__7180.cljs$lang$maxFixedArity = 3;
    G__7180.cljs$lang$applyTo = function(arglist__7183) {
      var p1 = cljs.core.first(arglist__7183);
      arglist__7183 = cljs.core.next(arglist__7183);
      var p2 = cljs.core.first(arglist__7183);
      arglist__7183 = cljs.core.next(arglist__7183);
      var p3 = cljs.core.first(arglist__7183);
      var ps = cljs.core.rest(arglist__7183);
      return G__7180__delegate(p1, p2, p3, ps);
    };
    G__7180.cljs$core$IFn$_invoke$arity$variadic = G__7180__delegate;
    return G__7180;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4298__auto___7185 = size;
          var i_7186 = 0;
          while (true) {
            if (i_7186 < n__4298__auto___7185) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_7186)));
              var G__7187 = i_7186 + 1;
              i_7186 = G__7187;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__7188__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(p1__7184_SHARP_) {
        return cljs.core.apply.call(null, f, p1__7184_SHARP_);
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__7188 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__7188__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__7188.cljs$lang$maxFixedArity = 4;
    G__7188.cljs$lang$applyTo = function(arglist__7189) {
      var f = cljs.core.first(arglist__7189);
      arglist__7189 = cljs.core.next(arglist__7189);
      var c1 = cljs.core.first(arglist__7189);
      arglist__7189 = cljs.core.next(arglist__7189);
      var c2 = cljs.core.first(arglist__7189);
      arglist__7189 = cljs.core.next(arglist__7189);
      var c3 = cljs.core.first(arglist__7189);
      var colls = cljs.core.rest(arglist__7189);
      return G__7188__delegate(f, c1, c2, c3, colls);
    };
    G__7188.cljs$core$IFn$_invoke$arity$variadic = G__7188__delegate;
    return G__7188;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__7190 = n__$1 - 1;
        var G__7191 = cljs.core.rest.call(null, s);
        n__$1 = G__7190;
        coll__$1 = G__7191;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll);
  }, null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__7192 = cljs.core.next.call(null, s);
      var G__7193 = cljs.core.next.call(null, lead);
      s = G__7192;
      lead = G__7193;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__3438__auto__ = s;
        if (and__3438__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__3438__auto__;
        }
      }())) {
        var G__7194 = pred__$1;
        var G__7195 = cljs.core.rest.call(null, s);
        pred__$1 = G__7194;
        coll__$1 = G__7195;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll);
  }, null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__7196__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__7196 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7196__delegate.call(this, c1, c2, colls);
    };
    G__7196.cljs$lang$maxFixedArity = 2;
    G__7196.cljs$lang$applyTo = function(arglist__7197) {
      var c1 = cljs.core.first(arglist__7197);
      arglist__7197 = cljs.core.next(arglist__7197);
      var c2 = cljs.core.first(arglist__7197);
      var colls = cljs.core.rest(arglist__7197);
      return G__7196__delegate(c1, c2, colls);
    };
    G__7196.cljs$core$IFn$_invoke$arity$variadic = G__7196__delegate;
    return G__7196;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__7198__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__7198 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__7198__delegate.call(this, f, coll, colls);
    };
    G__7198.cljs$lang$maxFixedArity = 2;
    G__7198.cljs$lang$applyTo = function(arglist__7199) {
      var f = cljs.core.first(arglist__7199);
      arglist__7199 = cljs.core.next(arglist__7199);
      var coll = cljs.core.first(arglist__7199);
      var colls = cljs.core.rest(arglist__7199);
      return G__7198__delegate(f, coll, colls);
    };
    G__7198.cljs$core$IFn$_invoke$arity$variadic = G__7198__delegate;
    return G__7198;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4298__auto___7200 = size;
        var i_7201 = 0;
        while (true) {
          if (i_7201 < n__4298__auto___7200) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_7201)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_7201));
            } else {
            }
            var G__7202 = i_7201 + 1;
            i_7201 = G__7202;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__7203_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__7203_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__7205 = to;
      if (G__7205) {
        var bit__4093__auto__ = G__7205.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4093__auto__ || G__7205.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__7206__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__7206 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__7206__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__7206.cljs$lang$maxFixedArity = 4;
    G__7206.cljs$lang$applyTo = function(arglist__7207) {
      var f = cljs.core.first(arglist__7207);
      arglist__7207 = cljs.core.next(arglist__7207);
      var c1 = cljs.core.first(arglist__7207);
      arglist__7207 = cljs.core.next(arglist__7207);
      var c2 = cljs.core.first(arglist__7207);
      arglist__7207 = cljs.core.next(arglist__7207);
      var c3 = cljs.core.first(arglist__7207);
      var colls = cljs.core.rest(arglist__7207);
      return G__7206__delegate(f, c1, c2, c3, colls);
    };
    G__7206.cljs$core$IFn$_invoke$arity$variadic = G__7206__delegate;
    return G__7206;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__7209 = m__$1;
          if (G__7209) {
            var bit__4100__auto__ = G__7209.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4100__auto__ || G__7209.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__7209.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__7209);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__7209);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__7210 = sentinel;
            var G__7211 = m__$2;
            var G__7212 = cljs.core.next.call(null, ks__$1);
            sentinel = G__7210;
            m__$1 = G__7211;
            ks__$1 = G__7212;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__7213, v) {
  var vec__7215 = p__7213;
  var k = cljs.core.nth.call(null, vec__7215, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__7215, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__7216, f) {
    var vec__7226 = p__7216;
    var k = cljs.core.nth.call(null, vec__7226, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__7226, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__7217, f, a) {
    var vec__7227 = p__7217;
    var k = cljs.core.nth.call(null, vec__7227, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__7227, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__7218, f, a, b) {
    var vec__7228 = p__7218;
    var k = cljs.core.nth.call(null, vec__7228, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__7228, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__7219, f, a, b, c) {
    var vec__7229 = p__7219;
    var k = cljs.core.nth.call(null, vec__7229, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__7229, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__7231__delegate = function(m, p__7220, f, a, b, c, args) {
      var vec__7230 = p__7220;
      var k = cljs.core.nth.call(null, vec__7230, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__7230, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__7231 = function(m, p__7220, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__7231__delegate.call(this, m, p__7220, f, a, b, c, args);
    };
    G__7231.cljs$lang$maxFixedArity = 6;
    G__7231.cljs$lang$applyTo = function(arglist__7232) {
      var m = cljs.core.first(arglist__7232);
      arglist__7232 = cljs.core.next(arglist__7232);
      var p__7220 = cljs.core.first(arglist__7232);
      arglist__7232 = cljs.core.next(arglist__7232);
      var f = cljs.core.first(arglist__7232);
      arglist__7232 = cljs.core.next(arglist__7232);
      var a = cljs.core.first(arglist__7232);
      arglist__7232 = cljs.core.next(arglist__7232);
      var b = cljs.core.first(arglist__7232);
      arglist__7232 = cljs.core.next(arglist__7232);
      var c = cljs.core.first(arglist__7232);
      var args = cljs.core.rest(arglist__7232);
      return G__7231__delegate(m, p__7220, f, a, b, c, args);
    };
    G__7231.cljs$core$IFn$_invoke$arity$variadic = G__7231__delegate;
    return G__7231;
  }();
  update_in = function(m, p__7220, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__7220, f);
      case 4:
        return update_in__4.call(this, m, p__7220, f, a);
      case 5:
        return update_in__5.call(this, m, p__7220, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__7220, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__7220, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opts__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__7233 = ll - 5;
      var G__7234 = r;
      ll = G__7233;
      ret = G__7234;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    if (i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail;
    } else {
      var node = pv.root;
      var level = pv.shift;
      while (true) {
        if (level > 0) {
          var G__7235 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__7236 = level - 5;
          node = G__7235;
          level = G__7236;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= k && k < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= k) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[k & 31] = v;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, k, v), self__.tail, null);
    }
  } else {
    if (k === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, v);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(k), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__7238 = null;
  var G__7238__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__7238__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__7238 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7238__2.call(this, self__, k);
      case 3:
        return G__7238__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7238;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args7237) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7237)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__7239 = j + 1;
              var G__7240 = init__$2;
              j = G__7239;
              init__$1 = G__7240;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__7241 = i + step_init[0];
        i = G__7241;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4298__auto___7242 = len;
    var i_7243 = 0;
    while (true) {
      if (i_7243 < n__4298__auto___7242) {
        new_tail[i_7243] = self__.tail[i_7243];
        var G__7244 = i_7243 + 1;
        i_7243 = G__7244;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__7245 = i + 1;
        var G__7246 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__7245;
        out = G__7246;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__7247) {
    var args = cljs.core.seq(arglist__7247);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return null;
  } else {
    return s;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return cljs.core.List.EMPTY;
  } else {
    return s;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32400159;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + key;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3757__auto__ = self__.end;
    var y__3758__auto__ = v_pos + 1;
    return x__3757__auto__ > y__3758__auto__ ? x__3757__auto__ : y__3758__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__7249 = null;
  var G__7249__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__7249__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__7249 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7249__2.call(this, self__, k);
      case 3:
        return G__7249__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7249;
}();
cljs.core.Subvec.prototype.apply = function(self__, args7248) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7248)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if (i === self__.end) {
      return null;
    } else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1);
      }, null, null));
    }
  };
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__7250 = meta;
      var G__7251 = v.v;
      var G__7252 = v.start + start;
      var G__7253 = v.start + end;
      var G__7254 = __hash;
      meta = G__7250;
      v = G__7251;
      start = G__7252;
      end = G__7253;
      __hash = G__7254;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj7258 = {};
    return obj7258;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if (0 <= i && i < tv.cnt) {
    if (i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail;
    } else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while (true) {
        if (level > 0) {
          var G__7259 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__7260 = level - 5;
          node = G__7259;
          level = G__7260;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__7262 = null;
  var G__7262__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7262__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7262 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7262__2.call(this, self__, k);
      case 3:
        return G__7262__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7262;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args7261) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7261)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if (level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1;
          } else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1;
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3450__auto__ = self__.rear;
      if (cljs.core.truth_(or__3450__auto__)) {
        return or__3450__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3450__auto__ = self__.front;
    if (cljs.core.truth_(or__3450__auto__)) {
      return or__3450__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__7263 = i + incr;
        i = G__7263;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__7264 = i + 1;
      var G__7265 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__7264;
      out = G__7265;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj7269 = {};
    return obj7269;
  }();
  var l = ks.length;
  var i_7270 = 0;
  while (true) {
    if (i_7270 < l) {
      var k_7271 = ks[i_7270];
      new_obj[k_7271] = obj[k_7271];
      var G__7272 = i_7270 + 1;
      i_7270 = G__7272;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__7275 = null;
  var G__7275__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7275__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7275 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7275__2.call(this, self__, k);
      case 3:
        return G__7275__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7275;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args7274) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7274)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__7276 = cljs.core.rest.call(null, keys__$1);
        var G__7277 = init__$2;
        keys__$1 = G__7276;
        init__$1 = G__7277;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__7273_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__7273_SHARP_, self__.strobj[p1__7273_SHARP_]], null);
    }, self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj7279 = {};
  return obj7279;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__7280 = i + 2;
          i = G__7280;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__7281 = i + 2;
          i = G__7281;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__7282 = i + 2;
          i = G__7282;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__7283 = i + 2;
          i = G__7283;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__7284 = i + 2;
          i = G__7284;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_7285 = 0;
  while (true) {
    if (i_7285 < l) {
      narr[i_7285] = arr[i_7285];
      var G__7286 = i_7285 + 1;
      i_7285 = G__7286;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj7289 = {};
    return obj7289;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__7290 = cljs.core.aclone.call(null, self__.arr);
          G__7290[idx + 1] = v;
          return G__7290;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__7291 = null;
  var G__7291__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7291__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7291 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7291__2.call(this, self__, k);
      case 3:
        return G__7291__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7291;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args7287) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7287)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__7292 = i + 2;
        var G__7293 = init__$2;
        i = G__7292;
        init__$1 = G__7293;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__7294 = s + 2;
            var G__7295 = d;
            s = G__7294;
            d = G__7295;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__7296 = s + 2;
              var G__7297 = d + 2;
              s = G__7296;
              d = G__7297;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__7298 = i + 2;
        var G__7299 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__7298;
        ret = G__7299;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__7300_7302 = self__.arr;
      G__7300_7302.pop();
      G__7300_7302.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__7301 = o;
      if (G__7301) {
        var bit__4100__auto__ = G__7301.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4100__auto__ || G__7301.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__7301.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__7301);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__7301);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__7303 = cljs.core.next.call(null, es);
          var G__7304 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__7303;
          tcoll__$2 = G__7304;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__7305 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__7306 = i + 2;
      out = G__7305;
      i = G__7306;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opts__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__7309 = cljs.core.aclone.call(null, arr);
    G__7309[i] = a;
    return G__7309;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__7310 = cljs.core.aclone.call(null, arr);
    G__7310[i] = a;
    G__7310[j] = b;
    return G__7310;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__7311 = i + 2;
        var G__7312 = init__$2;
        i = G__7311;
        init__$1 = G__7312;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_7313 = 0;
        var j_7314 = 0;
        while (true) {
          if (i_7313 < 32) {
            if ((self__.bitmap >>> i_7313 & 1) === 0) {
              var G__7315 = i_7313 + 1;
              var G__7316 = j_7314;
              i_7313 = G__7315;
              j_7314 = G__7316;
              continue;
            } else {
              nodes[i_7313] = !(self__.arr[j_7314] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_7314]), self__.arr[j_7314], self__.arr[j_7314 + 1], added_leaf_QMARK_) : self__.arr[j_7314 + 1];
              var G__7317 = i_7313 + 1;
              var G__7318 = j_7314 + 2;
              i_7313 = G__7317;
              j_7314 = G__7318;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_7319 = 0;
      var j_7320 = 0;
      while (true) {
        if (i_7319 < 32) {
          if ((self__.bitmap >>> i_7319 & 1) === 0) {
            var G__7321 = i_7319 + 1;
            var G__7322 = j_7320;
            i_7319 = G__7321;
            j_7320 = G__7322;
            continue;
          } else {
            nodes[i_7319] = !(self__.arr[j_7320] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_7320]), self__.arr[j_7320], self__.arr[j_7320 + 1], added_leaf_QMARK_) : self__.arr[j_7320 + 1];
            var G__7323 = i_7319 + 1;
            var G__7324 = j_7320 + 2;
            i_7319 = G__7323;
            j_7320 = G__7324;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__7325 = i + 1;
        var G__7326 = j + 2;
        var G__7327 = bitmap | 1 << i;
        i = G__7325;
        j = G__7326;
        bitmap = G__7327;
        continue;
      } else {
        var G__7328 = i + 1;
        var G__7329 = j;
        var G__7330 = bitmap;
        i = G__7328;
        j = G__7329;
        bitmap = G__7330;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__7331 = i + 1;
          var G__7332 = init__$2;
          i = G__7331;
          init__$1 = G__7332;
          continue;
        }
      } else {
        var G__7333 = i + 1;
        var G__7334 = init__$1;
        i = G__7333;
        init__$1 = G__7334;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__7335 = i + 2;
        i = G__7335;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4090__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__7336 = j + 2;
                j = G__7336;
                continue;
              }
            } else {
              var G__7337 = j + 2;
              j = G__7337;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4090__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__7338 = j + 1;
              j = G__7338;
              continue;
            }
          } else {
            var G__7339 = j + 1;
            j = G__7339;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj7342 = {};
    return obj7342;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__7343 = null;
  var G__7343__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7343__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7343 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7343__2.call(this, self__, k);
      case 3:
        return G__7343__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7343;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args7340) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7340)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__7344 = i + 1;
      var G__7345 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__7344;
      out = G__7345;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__7346 = o;
      if (G__7346) {
        var bit__4100__auto__ = G__7346.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4100__auto__ || G__7346.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__7346.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__7346);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__7346);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__7347 = cljs.core.next.call(null, es);
          var G__7348 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__7347;
          tcoll__$1 = G__7348;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__7349 = ascending_QMARK_ ? t.left : t.right;
      var G__7350 = cljs.core.conj.call(null, stack__$1, t);
      t = G__7349;
      stack__$1 = G__7350;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__7352 = null;
  var G__7352__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7352__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7352 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7352__2.call(this, self__, k);
      case 3:
        return G__7352__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7352;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args7351) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7351)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.call = function() {
  var G__7354 = null;
  var G__7354__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7354__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7354 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7354__2.call(this, self__, k);
      case 3:
        return G__7354__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7354;
}();
cljs.core.RedNode.prototype.apply = function(self__, args7353) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7353)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__7356 = null;
  var G__7356__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7356__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7356 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7356__2.call(this, self__, k);
      case 3:
        return G__7356__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7356;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args7355) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7355)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__7357 = t.left;
          t = G__7357;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__7358 = t.right;
            t = G__7358;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__7359 = cljs.core.conj.call(null, stack, t);
              var G__7360 = t.left;
              stack = G__7359;
              t = G__7360;
              continue;
            } else {
              var G__7361 = stack;
              var G__7362 = t.right;
              stack = G__7361;
              t = G__7362;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__7363 = cljs.core.conj.call(null, stack, t);
                var G__7364 = t.right;
                stack = G__7363;
                t = G__7364;
                continue;
              } else {
                var G__7365 = stack;
                var G__7366 = t.left;
                stack = G__7365;
                t = G__7366;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__7367 = cljs.core.nnext.call(null, in$);
        var G__7368 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__7367;
        out = G__7368;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__7369) {
    var keyvals = cljs.core.seq(arglist__7369);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__7370) {
    var keyvals = cljs.core.seq(arglist__7370);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj7374 = {};
      return obj7374;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__7375 = cljs.core.nnext.call(null, kvs);
        kvs = G__7375;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__7376) {
    var keyvals = cljs.core.seq(arglist__7376);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__7377 = cljs.core.nnext.call(null, in$);
        var G__7378 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__7377;
        out = G__7378;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__7379) {
    var keyvals = cljs.core.seq(arglist__7379);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__7380 = cljs.core.nnext.call(null, in$);
        var G__7381 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__7380;
        out = G__7381;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__7382) {
    var comparator = cljs.core.first(arglist__7382);
    var keyvals = cljs.core.rest(arglist__7382);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__7383 = self__.mseq;
    if (G__7383) {
      var bit__4100__auto__ = G__7383.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4100__auto__ || G__7383.cljs$core$INext$) {
        return true;
      } else {
        if (!G__7383.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7383);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7383);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__7384 = self__.mseq;
    if (G__7384) {
      var bit__4100__auto__ = G__7384.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4100__auto__ || G__7384.cljs$core$INext$) {
        return true;
      } else {
        if (!G__7384.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7384);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7384);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__7385 = self__.mseq;
    if (G__7385) {
      var bit__4100__auto__ = G__7385.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4100__auto__ || G__7385.cljs$core$INext$) {
        return true;
      } else {
        if (!G__7385.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7385);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7385);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__7386 = self__.mseq;
    if (G__7386) {
      var bit__4100__auto__ = G__7386.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4100__auto__ || G__7386.cljs$core$INext$) {
        return true;
      } else {
        if (!G__7386.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7386);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7386);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__7387_SHARP_, p2__7388_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3450__auto__ = p1__7387_SHARP_;
          if (cljs.core.truth_(or__3450__auto__)) {
            return or__3450__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__7388_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__7389) {
    var maps = cljs.core.seq(arglist__7389);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3450__auto__ = m1;
            if (cljs.core.truth_(or__3450__auto__)) {
              return or__3450__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__7390) {
    var f = cljs.core.first(arglist__7390);
    var maps = cljs.core.rest(arglist__7390);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__7391 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__7392 = cljs.core.next.call(null, keys);
      ret = G__7391;
      keys = G__7392;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__7395 = null;
  var G__7395__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7395__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7395 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7395__2.call(this, self__, k);
      case 3:
        return G__7395__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7395;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args7394) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7394)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__7393_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__7393_SHARP_);
  }, other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__7396 = i + 1;
        var G__7397 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__7396;
        out = G__7397;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__7398 = i + 1;
        var G__7399 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__7398;
        out = G__7399;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__7401 = null;
  var G__7401__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__7401__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__7401 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7401__2.call(this, self__, k);
      case 3:
        return G__7401__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7401;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args7400) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7400)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__7404 = null;
  var G__7404__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7404__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7404 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7404__2.call(this, self__, k);
      case 3:
        return G__7404__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__7404;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args7403) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7403)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__7402_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__7402_SHARP_);
  }, other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4292__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4292__auto__.length) {
        var G__7405 = i + 1;
        var G__7406 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__7405;
        res = G__7406;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__7407 = cljs.core._next.call(null, in$__$1);
            var G__7408 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__7407;
            out = G__7408;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__7409__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__7409 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__7409__delegate.call(this, keys);
    };
    G__7409.cljs$lang$maxFixedArity = 0;
    G__7409.cljs$lang$applyTo = function(arglist__7410) {
      var keys = cljs.core.seq(arglist__7410);
      return G__7409__delegate(keys);
    };
    G__7409.cljs$core$IFn$_invoke$arity$variadic = G__7409__delegate;
    return G__7409;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__7411) {
    var keys = cljs.core.seq(arglist__7411);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__7412) {
    var comparator = cljs.core.first(arglist__7412);
    var keys = cljs.core.rest(arglist__7412);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
      } else {
        return v;
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__7413_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__7413_SHARP_);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__7413_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__7420, seen__$1) {
        while (true) {
          var vec__7421 = p__7420;
          var f = cljs.core.nth.call(null, vec__7421, 0, null);
          var xs__$1 = vec__7421;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__7422 = cljs.core.rest.call(null, s);
              var G__7423 = seen__$1;
              p__7420 = G__7422;
              seen__$1 = G__7423;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__7424 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__7425 = cljs.core.next.call(null, s__$1);
      ret = G__7424;
      s__$1 = G__7425;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__7427 = x;
    if (G__7427) {
      var bit__4093__auto__ = G__7427.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4093__auto__ || G__7427.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__7428 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__7429 = cljs.core.next.call(null, ks);
      var G__7430 = cljs.core.next.call(null, vs);
      map = G__7428;
      ks = G__7429;
      vs = G__7430;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__7433__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__7431_SHARP_, p2__7432_SHARP_) {
        return max_key.call(null, k, p1__7431_SHARP_, p2__7432_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__7433 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__7433__delegate.call(this, k, x, y, more);
    };
    G__7433.cljs$lang$maxFixedArity = 3;
    G__7433.cljs$lang$applyTo = function(arglist__7434) {
      var k = cljs.core.first(arglist__7434);
      arglist__7434 = cljs.core.next(arglist__7434);
      var x = cljs.core.first(arglist__7434);
      arglist__7434 = cljs.core.next(arglist__7434);
      var y = cljs.core.first(arglist__7434);
      var more = cljs.core.rest(arglist__7434);
      return G__7433__delegate(k, x, y, more);
    };
    G__7433.cljs$core$IFn$_invoke$arity$variadic = G__7433__delegate;
    return G__7433;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__7437__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__7435_SHARP_, p2__7436_SHARP_) {
        return min_key.call(null, k, p1__7435_SHARP_, p2__7436_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__7437 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__7437__delegate.call(this, k, x, y, more);
    };
    G__7437.cljs$lang$maxFixedArity = 3;
    G__7437.cljs$lang$applyTo = function(arglist__7438) {
      var k = cljs.core.first(arglist__7438);
      arglist__7438 = cljs.core.next(arglist__7438);
      var x = cljs.core.first(arglist__7438);
      arglist__7438 = cljs.core.next(arglist__7438);
      var y = cljs.core.first(arglist__7438);
      var more = cljs.core.rest(arglist__7438);
      return G__7437__delegate(k, x, y, more);
    };
    G__7437.cljs$core$IFn$_invoke$arity$variadic = G__7437__delegate;
    return G__7437;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__7441 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__7441, 0, null);
        var s = vec__7441;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__7442 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__7442, 0, null);
      var s = vec__7442;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__7445 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__7445, 0, null);
        var s = vec__7445;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__7446 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__7446, 0, null);
      var s = vec__7446;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3861__auto__ = self__.__hash;
  if (!(h__3861__auto__ == null)) {
    return h__3861__auto__;
  } else {
    var h__3861__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__3861__auto____$1;
    return h__3861__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__7447_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__7447_SHARP_));
        };
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__7458 = null;
      var G__7458__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__7458__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__7458__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__7458__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__7458__4 = function() {
        var G__7459__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__7459 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7459__delegate.call(this, x, y, z, args);
        };
        G__7459.cljs$lang$maxFixedArity = 3;
        G__7459.cljs$lang$applyTo = function(arglist__7460) {
          var x = cljs.core.first(arglist__7460);
          arglist__7460 = cljs.core.next(arglist__7460);
          var y = cljs.core.first(arglist__7460);
          arglist__7460 = cljs.core.next(arglist__7460);
          var z = cljs.core.first(arglist__7460);
          var args = cljs.core.rest(arglist__7460);
          return G__7459__delegate(x, y, z, args);
        };
        G__7459.cljs$core$IFn$_invoke$arity$variadic = G__7459__delegate;
        return G__7459;
      }();
      G__7458 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7458__0.call(this);
          case 1:
            return G__7458__1.call(this, x);
          case 2:
            return G__7458__2.call(this, x, y);
          case 3:
            return G__7458__3.call(this, x, y, z);
          default:
            return G__7458__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7458.cljs$lang$maxFixedArity = 3;
      G__7458.cljs$lang$applyTo = G__7458__4.cljs$lang$applyTo;
      return G__7458;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__7461 = null;
      var G__7461__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__7461__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__7461__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__7461__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__7461__4 = function() {
        var G__7462__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__7462 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7462__delegate.call(this, x, y, z, args);
        };
        G__7462.cljs$lang$maxFixedArity = 3;
        G__7462.cljs$lang$applyTo = function(arglist__7463) {
          var x = cljs.core.first(arglist__7463);
          arglist__7463 = cljs.core.next(arglist__7463);
          var y = cljs.core.first(arglist__7463);
          arglist__7463 = cljs.core.next(arglist__7463);
          var z = cljs.core.first(arglist__7463);
          var args = cljs.core.rest(arglist__7463);
          return G__7462__delegate(x, y, z, args);
        };
        G__7462.cljs$core$IFn$_invoke$arity$variadic = G__7462__delegate;
        return G__7462;
      }();
      G__7461 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7461__0.call(this);
          case 1:
            return G__7461__1.call(this, x);
          case 2:
            return G__7461__2.call(this, x, y);
          case 3:
            return G__7461__3.call(this, x, y, z);
          default:
            return G__7461__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7461.cljs$lang$maxFixedArity = 3;
      G__7461.cljs$lang$applyTo = G__7461__4.cljs$lang$applyTo;
      return G__7461;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__7464 = null;
      var G__7464__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__7464__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__7464__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__7464__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__7464__4 = function() {
        var G__7465__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__7465 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7465__delegate.call(this, x, y, z, args);
        };
        G__7465.cljs$lang$maxFixedArity = 3;
        G__7465.cljs$lang$applyTo = function(arglist__7466) {
          var x = cljs.core.first(arglist__7466);
          arglist__7466 = cljs.core.next(arglist__7466);
          var y = cljs.core.first(arglist__7466);
          arglist__7466 = cljs.core.next(arglist__7466);
          var z = cljs.core.first(arglist__7466);
          var args = cljs.core.rest(arglist__7466);
          return G__7465__delegate(x, y, z, args);
        };
        G__7465.cljs$core$IFn$_invoke$arity$variadic = G__7465__delegate;
        return G__7465;
      }();
      G__7464 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7464__0.call(this);
          case 1:
            return G__7464__1.call(this, x);
          case 2:
            return G__7464__2.call(this, x, y);
          case 3:
            return G__7464__3.call(this, x, y, z);
          default:
            return G__7464__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7464.cljs$lang$maxFixedArity = 3;
      G__7464.cljs$lang$applyTo = G__7464__4.cljs$lang$applyTo;
      return G__7464;
    }();
  };
  var juxt__4 = function() {
    var G__7467__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__7468 = null;
        var G__7468__0 = function() {
          return cljs.core.reduce.call(null, function(p1__7448_SHARP_, p2__7449_SHARP_) {
            return cljs.core.conj.call(null, p1__7448_SHARP_, p2__7449_SHARP_.call(null));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__7468__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__7450_SHARP_, p2__7451_SHARP_) {
            return cljs.core.conj.call(null, p1__7450_SHARP_, p2__7451_SHARP_.call(null, x));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__7468__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__7452_SHARP_, p2__7453_SHARP_) {
            return cljs.core.conj.call(null, p1__7452_SHARP_, p2__7453_SHARP_.call(null, x, y));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__7468__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__7454_SHARP_, p2__7455_SHARP_) {
            return cljs.core.conj.call(null, p1__7454_SHARP_, p2__7455_SHARP_.call(null, x, y, z));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__7468__4 = function() {
          var G__7469__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__7456_SHARP_, p2__7457_SHARP_) {
              return cljs.core.conj.call(null, p1__7456_SHARP_, cljs.core.apply.call(null, p2__7457_SHARP_, x, y, z, args));
            }, cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__7469 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__7469__delegate.call(this, x, y, z, args);
          };
          G__7469.cljs$lang$maxFixedArity = 3;
          G__7469.cljs$lang$applyTo = function(arglist__7470) {
            var x = cljs.core.first(arglist__7470);
            arglist__7470 = cljs.core.next(arglist__7470);
            var y = cljs.core.first(arglist__7470);
            arglist__7470 = cljs.core.next(arglist__7470);
            var z = cljs.core.first(arglist__7470);
            var args = cljs.core.rest(arglist__7470);
            return G__7469__delegate(x, y, z, args);
          };
          G__7469.cljs$core$IFn$_invoke$arity$variadic = G__7469__delegate;
          return G__7469;
        }();
        G__7468 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__7468__0.call(this);
            case 1:
              return G__7468__1.call(this, x);
            case 2:
              return G__7468__2.call(this, x, y);
            case 3:
              return G__7468__3.call(this, x, y, z);
            default:
              return G__7468__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__7468.cljs$lang$maxFixedArity = 3;
        G__7468.cljs$lang$applyTo = G__7468__4.cljs$lang$applyTo;
        return G__7468;
      }();
    };
    var G__7467 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__7467__delegate.call(this, f, g, h, fs);
    };
    G__7467.cljs$lang$maxFixedArity = 3;
    G__7467.cljs$lang$applyTo = function(arglist__7471) {
      var f = cljs.core.first(arglist__7471);
      arglist__7471 = cljs.core.next(arglist__7471);
      var g = cljs.core.first(arglist__7471);
      arglist__7471 = cljs.core.next(arglist__7471);
      var h = cljs.core.first(arglist__7471);
      var fs = cljs.core.rest(arglist__7471);
      return G__7467__delegate(f, g, h, fs);
    };
    G__7467.cljs$core$IFn$_invoke$arity$variadic = G__7467__delegate;
    return G__7467;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__7472 = cljs.core.next.call(null, coll);
        coll = G__7472;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__7473 = n - 1;
        var G__7474 = cljs.core.next.call(null, coll);
        n = G__7473;
        coll = G__7474;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
    }, null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__7476 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__7476, 0, null);
  var flags = cljs.core.nth.call(null, vec__7476, 1, null);
  var pattern = cljs.core.nth.call(null, vec__7476, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_7478 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_7479__$1 = cljs.core.next.call(null, coll);
      var n_7480 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
      while (true) {
        if (coll_7479__$1 && (n_7480 == null || !(n_7480 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_7479__$1), writer, opts);
          var G__7481 = cljs.core.next.call(null, coll_7479__$1);
          var G__7482 = n_7480 - 1;
          coll_7479__$1 = G__7481;
          n_7480 = G__7482;
          continue;
        } else {
        }
        break;
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
        cljs.core._write.call(null, writer, sep);
        print_one.call(null, "...", writer, opts);
      } else {
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_7478;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__7487 = cljs.core.seq.call(null, ss);
    var chunk__7488 = null;
    var count__7489 = 0;
    var i__7490 = 0;
    while (true) {
      if (i__7490 < count__7489) {
        var s = cljs.core._nth.call(null, chunk__7488, i__7490);
        cljs.core._write.call(null, writer, s);
        var G__7491 = seq__7487;
        var G__7492 = chunk__7488;
        var G__7493 = count__7489;
        var G__7494 = i__7490 + 1;
        seq__7487 = G__7491;
        chunk__7488 = G__7492;
        count__7489 = G__7493;
        i__7490 = G__7494;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__7487);
        if (temp__4092__auto__) {
          var seq__7487__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7487__$1)) {
            var c__4198__auto__ = cljs.core.chunk_first.call(null, seq__7487__$1);
            var G__7495 = cljs.core.chunk_rest.call(null, seq__7487__$1);
            var G__7496 = c__4198__auto__;
            var G__7497 = cljs.core.count.call(null, c__4198__auto__);
            var G__7498 = 0;
            seq__7487 = G__7495;
            chunk__7488 = G__7496;
            count__7489 = G__7497;
            i__7490 = G__7498;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__7487__$1);
            cljs.core._write.call(null, writer, s);
            var G__7499 = cljs.core.next.call(null, seq__7487__$1);
            var G__7500 = null;
            var G__7501 = 0;
            var G__7502 = 0;
            seq__7487 = G__7499;
            chunk__7488 = G__7500;
            count__7489 = G__7501;
            i__7490 = G__7502;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__7503) {
    var writer = cljs.core.first(arglist__7503);
    var ss = cljs.core.rest(arglist__7503);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj7505 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj7505;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__3438__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__3438__auto__)) {
            var and__3438__auto____$1 = function() {
              var G__7511 = obj;
              if (G__7511) {
                var bit__4100__auto__ = G__7511.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__4100__auto__ || G__7511.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__7511.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__7511);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__7511);
              }
            }();
            if (and__3438__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__3438__auto____$1;
            }
          } else {
            return and__3438__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__7512 = obj;
              if (G__7512) {
                var bit__4093__auto__ = G__7512.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__4093__auto__ || G__7512.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = [cljs.core.str(n)].join("");
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__7514 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                                ns = G__7514;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__7513 = obj;
                              if (G__7513) {
                                var bit__4100__auto__ = G__7513.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__4100__auto__ || G__7513.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__7513.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__7513);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__7513);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__7519 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__7520 = null;
  var count__7521 = 0;
  var i__7522 = 0;
  while (true) {
    if (i__7522 < count__7521) {
      var obj = cljs.core._nth.call(null, chunk__7520, i__7522);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__7523 = seq__7519;
      var G__7524 = chunk__7520;
      var G__7525 = count__7521;
      var G__7526 = i__7522 + 1;
      seq__7519 = G__7523;
      chunk__7520 = G__7524;
      count__7521 = G__7525;
      i__7522 = G__7526;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__7519);
      if (temp__4092__auto__) {
        var seq__7519__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__7519__$1)) {
          var c__4198__auto__ = cljs.core.chunk_first.call(null, seq__7519__$1);
          var G__7527 = cljs.core.chunk_rest.call(null, seq__7519__$1);
          var G__7528 = c__4198__auto__;
          var G__7529 = cljs.core.count.call(null, c__4198__auto__);
          var G__7530 = 0;
          seq__7519 = G__7527;
          chunk__7520 = G__7528;
          count__7521 = G__7529;
          i__7522 = G__7530;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__7519__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__7531 = cljs.core.next.call(null, seq__7519__$1);
          var G__7532 = null;
          var G__7533 = 0;
          var G__7534 = 0;
          seq__7519 = G__7531;
          chunk__7520 = G__7532;
          count__7521 = G__7533;
          i__7522 = G__7534;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__7535) {
    var objs = cljs.core.seq(arglist__7535);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__7536) {
    var objs = cljs.core.seq(arglist__7536);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__7537) {
    var objs = cljs.core.seq(arglist__7537);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__7538) {
    var objs = cljs.core.seq(arglist__7538);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__7539) {
    var objs = cljs.core.seq(arglist__7539);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__7540) {
    var objs = cljs.core.seq(arglist__7540);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__7541) {
    var objs = cljs.core.seq(arglist__7541);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__7542) {
    var objs = cljs.core.seq(arglist__7542);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 2;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__7543 = cljs.core.seq.call(null, self__.watches);
  var chunk__7544 = null;
  var count__7545 = 0;
  var i__7546 = 0;
  while (true) {
    if (i__7546 < count__7545) {
      var vec__7547 = cljs.core._nth.call(null, chunk__7544, i__7546);
      var key = cljs.core.nth.call(null, vec__7547, 0, null);
      var f = cljs.core.nth.call(null, vec__7547, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__7549 = seq__7543;
      var G__7550 = chunk__7544;
      var G__7551 = count__7545;
      var G__7552 = i__7546 + 1;
      seq__7543 = G__7549;
      chunk__7544 = G__7550;
      count__7545 = G__7551;
      i__7546 = G__7552;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__7543);
      if (temp__4092__auto__) {
        var seq__7543__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__7543__$1)) {
          var c__4198__auto__ = cljs.core.chunk_first.call(null, seq__7543__$1);
          var G__7553 = cljs.core.chunk_rest.call(null, seq__7543__$1);
          var G__7554 = c__4198__auto__;
          var G__7555 = cljs.core.count.call(null, c__4198__auto__);
          var G__7556 = 0;
          seq__7543 = G__7553;
          chunk__7544 = G__7554;
          count__7545 = G__7555;
          i__7546 = G__7556;
          continue;
        } else {
          var vec__7548 = cljs.core.first.call(null, seq__7543__$1);
          var key = cljs.core.nth.call(null, vec__7548, 0, null);
          var f = cljs.core.nth.call(null, vec__7548, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__7557 = cljs.core.next.call(null, seq__7543__$1);
          var G__7558 = null;
          var G__7559 = 0;
          var G__7560 = 0;
          seq__7543 = G__7557;
          chunk__7544 = G__7558;
          count__7545 = G__7559;
          i__7546 = G__7560;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__7564__delegate = function(x, p__7561) {
      var map__7563 = p__7561;
      var map__7563__$1 = cljs.core.seq_QMARK_.call(null, map__7563) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7563) : map__7563;
      var validator = cljs.core.get.call(null, map__7563__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__7563__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__7564 = function(x, var_args) {
      var p__7561 = null;
      if (arguments.length > 1) {
        p__7561 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__7564__delegate.call(this, x, p__7561);
    };
    G__7564.cljs$lang$maxFixedArity = 1;
    G__7564.cljs$lang$applyTo = function(arglist__7565) {
      var x = cljs.core.first(arglist__7565);
      var p__7561 = cljs.core.rest(arglist__7565);
      return G__7564__delegate(x, p__7561);
    };
    G__7564.cljs$core$IFn$_invoke$arity$variadic = G__7564__delegate;
    return G__7564;
  }();
  atom = function(x, var_args) {
    var p__7561 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  var validate_7566 = a.validator;
  if (validate_7566 == null) {
  } else {
    if (cljs.core.truth_(validate_7566.call(null, new_value))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
    }
  }
  var old_value_7567 = a.state;
  a.state = new_value;
  if (a.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a, old_value_7567, new_value);
  }
  return new_value;
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
  };
  var swap_BANG___3 = function(a, f, x) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
  };
  var swap_BANG___4 = function(a, f, x, y) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
  };
  var swap_BANG___5 = function(a, f, x, y, z) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y, z));
  };
  var swap_BANG___6 = function() {
    var G__7568__delegate = function(a, f, x, y, z, more) {
      return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, z, more));
    };
    var G__7568 = function(a, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 5) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__7568__delegate.call(this, a, f, x, y, z, more);
    };
    G__7568.cljs$lang$maxFixedArity = 5;
    G__7568.cljs$lang$applyTo = function(arglist__7569) {
      var a = cljs.core.first(arglist__7569);
      arglist__7569 = cljs.core.next(arglist__7569);
      var f = cljs.core.first(arglist__7569);
      arglist__7569 = cljs.core.next(arglist__7569);
      var x = cljs.core.first(arglist__7569);
      arglist__7569 = cljs.core.next(arglist__7569);
      var y = cljs.core.first(arglist__7569);
      arglist__7569 = cljs.core.next(arglist__7569);
      var z = cljs.core.first(arglist__7569);
      var more = cljs.core.rest(arglist__7569);
      return G__7568__delegate(a, f, x, y, z, more);
    };
    G__7568.cljs$core$IFn$_invoke$arity$variadic = G__7568__delegate;
    return G__7568;
  }();
  swap_BANG_ = function(a, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      case 5:
        return swap_BANG___5.call(this, a, f, x, y, z);
      default:
        return swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, z, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 5;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___6.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$5 = swap_BANG___5;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__7570) {
    var iref = cljs.core.first(arglist__7570);
    arglist__7570 = cljs.core.next(arglist__7570);
    var f = cljs.core.first(arglist__7570);
    var args = cljs.core.rest(arglist__7570);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__7571) {
    var map__7572 = p__7571;
    var map__7572__$1 = cljs.core.seq_QMARK_.call(null, map__7572) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7572) : map__7572;
    var curr_state = map__7572__$1;
    var done = cljs.core.get.call(null, map__7572__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if (cljs.core.truth_(done)) {
      return curr_state;
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
    }
  }));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj7574 = {};
  return obj7574;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3438__auto__ = x;
    if (and__3438__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4077__auto__ = x == null ? null : x;
    return function() {
      var or__3450__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3438__auto__ = x;
    if (and__3438__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4077__auto__ = x == null ? null : x;
    return function() {
      var or__3450__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__7576 = k;
    if (G__7576) {
      var bit__4100__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3450__auto__ = bit__4100__auto__;
        if (cljs.core.truth_(or__3450__auto__)) {
          return or__3450__auto__;
        } else {
          return G__7576.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__7576.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__7576);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__7576);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__7590 = x;
      if (G__7590) {
        var bit__4100__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3450__auto__ = bit__4100__auto__;
          if (cljs.core.truth_(or__3450__auto__)) {
            return or__3450__auto__;
          } else {
            return G__7590.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__7590.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__7590);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__7590);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj7592 = {};
              return obj7592;
            }();
            var seq__7593_7603 = cljs.core.seq.call(null, x);
            var chunk__7594_7604 = null;
            var count__7595_7605 = 0;
            var i__7596_7606 = 0;
            while (true) {
              if (i__7596_7606 < count__7595_7605) {
                var vec__7597_7607 = cljs.core._nth.call(null, chunk__7594_7604, i__7596_7606);
                var k_7608 = cljs.core.nth.call(null, vec__7597_7607, 0, null);
                var v_7609 = cljs.core.nth.call(null, vec__7597_7607, 1, null);
                m[cljs.core.key__GT_js.call(null, k_7608)] = clj__GT_js.call(null, v_7609);
                var G__7610 = seq__7593_7603;
                var G__7611 = chunk__7594_7604;
                var G__7612 = count__7595_7605;
                var G__7613 = i__7596_7606 + 1;
                seq__7593_7603 = G__7610;
                chunk__7594_7604 = G__7611;
                count__7595_7605 = G__7612;
                i__7596_7606 = G__7613;
                continue;
              } else {
                var temp__4092__auto___7614 = cljs.core.seq.call(null, seq__7593_7603);
                if (temp__4092__auto___7614) {
                  var seq__7593_7615__$1 = temp__4092__auto___7614;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__7593_7615__$1)) {
                    var c__4198__auto___7616 = cljs.core.chunk_first.call(null, seq__7593_7615__$1);
                    var G__7617 = cljs.core.chunk_rest.call(null, seq__7593_7615__$1);
                    var G__7618 = c__4198__auto___7616;
                    var G__7619 = cljs.core.count.call(null, c__4198__auto___7616);
                    var G__7620 = 0;
                    seq__7593_7603 = G__7617;
                    chunk__7594_7604 = G__7618;
                    count__7595_7605 = G__7619;
                    i__7596_7606 = G__7620;
                    continue;
                  } else {
                    var vec__7598_7621 = cljs.core.first.call(null, seq__7593_7615__$1);
                    var k_7622 = cljs.core.nth.call(null, vec__7598_7621, 0, null);
                    var v_7623 = cljs.core.nth.call(null, vec__7598_7621, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_7622)] = clj__GT_js.call(null, v_7623);
                    var G__7624 = cljs.core.next.call(null, seq__7593_7615__$1);
                    var G__7625 = null;
                    var G__7626 = 0;
                    var G__7627 = 0;
                    seq__7593_7603 = G__7624;
                    chunk__7594_7604 = G__7625;
                    count__7595_7605 = G__7626;
                    i__7596_7606 = G__7627;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__7599_7628 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__7600_7629 = null;
              var count__7601_7630 = 0;
              var i__7602_7631 = 0;
              while (true) {
                if (i__7602_7631 < count__7601_7630) {
                  var x_7632__$1 = cljs.core._nth.call(null, chunk__7600_7629, i__7602_7631);
                  arr.push(x_7632__$1);
                  var G__7633 = seq__7599_7628;
                  var G__7634 = chunk__7600_7629;
                  var G__7635 = count__7601_7630;
                  var G__7636 = i__7602_7631 + 1;
                  seq__7599_7628 = G__7633;
                  chunk__7600_7629 = G__7634;
                  count__7601_7630 = G__7635;
                  i__7602_7631 = G__7636;
                  continue;
                } else {
                  var temp__4092__auto___7637 = cljs.core.seq.call(null, seq__7599_7628);
                  if (temp__4092__auto___7637) {
                    var seq__7599_7638__$1 = temp__4092__auto___7637;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__7599_7638__$1)) {
                      var c__4198__auto___7639 = cljs.core.chunk_first.call(null, seq__7599_7638__$1);
                      var G__7640 = cljs.core.chunk_rest.call(null, seq__7599_7638__$1);
                      var G__7641 = c__4198__auto___7639;
                      var G__7642 = cljs.core.count.call(null, c__4198__auto___7639);
                      var G__7643 = 0;
                      seq__7599_7628 = G__7640;
                      chunk__7600_7629 = G__7641;
                      count__7601_7630 = G__7642;
                      i__7602_7631 = G__7643;
                      continue;
                    } else {
                      var x_7644__$1 = cljs.core.first.call(null, seq__7599_7638__$1);
                      arr.push(x_7644__$1);
                      var G__7645 = cljs.core.next.call(null, seq__7599_7638__$1);
                      var G__7646 = null;
                      var G__7647 = 0;
                      var G__7648 = 0;
                      seq__7599_7628 = G__7645;
                      chunk__7600_7629 = G__7646;
                      count__7601_7630 = G__7647;
                      i__7602_7631 = G__7648;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj7650 = {};
  return obj7650;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3438__auto__ = x;
    if (and__3438__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4077__auto__ = x == null ? null : x;
    return function() {
      var or__3450__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__7671__delegate = function(x, opts) {
      if (function() {
        var G__7661 = x;
        if (G__7661) {
          var bit__4100__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3450__auto__ = bit__4100__auto__;
            if (cljs.core.truth_(or__3450__auto__)) {
              return or__3450__auto__;
            } else {
              return G__7661.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__7661.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__7661);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__7661);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__7662 = opts;
          var map__7662__$1 = cljs.core.seq_QMARK_.call(null, map__7662) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7662) : map__7662;
          var keywordize_keys = cljs.core.get.call(null, map__7662__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__7662, map__7662__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4167__auto__ = function(map__7662, map__7662__$1, keywordize_keys, keyfn) {
                          return function iter__7667(s__7668) {
                            return new cljs.core.LazySeq(null, function(map__7662, map__7662__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__7668__$1 = s__7668;
                                while (true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__7668__$1);
                                  if (temp__4092__auto__) {
                                    var s__7668__$2 = temp__4092__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__7668__$2)) {
                                      var c__4165__auto__ = cljs.core.chunk_first.call(null, s__7668__$2);
                                      var size__4166__auto__ = cljs.core.count.call(null, c__4165__auto__);
                                      var b__7670 = cljs.core.chunk_buffer.call(null, size__4166__auto__);
                                      if (function() {
                                        var i__7669 = 0;
                                        while (true) {
                                          if (i__7669 < size__4166__auto__) {
                                            var k = cljs.core._nth.call(null, c__4165__auto__, i__7669);
                                            cljs.core.chunk_append.call(null, b__7670, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__7672 = i__7669 + 1;
                                            i__7669 = G__7672;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__7670), iter__7667.call(null, cljs.core.chunk_rest.call(null, s__7668__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__7670), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__7668__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__7667.call(null, cljs.core.rest.call(null, s__7668__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__7662, map__7662__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__7662, map__7662__$1, keywordize_keys, keyfn);
                        return iter__4167__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__7662, map__7662__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__7671 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__7671__delegate.call(this, x, opts);
    };
    G__7671.cljs$lang$maxFixedArity = 1;
    G__7671.cljs$lang$applyTo = function(arglist__7673) {
      var x = cljs.core.first(arglist__7673);
      var opts = cljs.core.rest(arglist__7673);
      return G__7671__delegate(x, opts);
    };
    G__7671.cljs$core$IFn$_invoke$arity$variadic = G__7671__delegate;
    return G__7671;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__7674__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v;
      } else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret;
      }
    };
    var G__7674 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__7674__delegate.call(this, args);
    };
    G__7674.cljs$lang$maxFixedArity = 0;
    G__7674.cljs$lang$applyTo = function(arglist__7675) {
      var args = cljs.core.seq(arglist__7675);
      return G__7674__delegate(args);
    };
    G__7674.cljs$core$IFn$_invoke$arity$variadic = G__7674__delegate;
    return G__7674;
  }();
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__7676 = ret;
        f = G__7676;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__7677__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__7677 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__7677__delegate.call(this, f, args);
    };
    G__7677.cljs$lang$maxFixedArity = 1;
    G__7677.cljs$lang$applyTo = function(arglist__7678) {
      var f = cljs.core.first(arglist__7678);
      var args = cljs.core.rest(arglist__7678);
      return G__7677__delegate(f, args);
    };
    G__7677.cljs$core$IFn$_invoke$arity$variadic = G__7677__delegate;
    return G__7677;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__7679) {
    var f = cljs.core.first(arglist__7679);
    var args = cljs.core.rest(arglist__7679);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3450__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3450__auto__) {
      return or__3450__auto__;
    } else {
      var or__3450__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3450__auto____$1) {
        return or__3450__auto____$1;
      } else {
        var and__3438__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3438__auto__) {
          var and__3438__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3438__auto____$1) {
            var and__3438__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3438__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__7680 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__7681 = i + 1;
                  ret = G__7680;
                  i = G__7681;
                  continue;
                }
                break;
              }
            } else {
              return and__3438__auto____$2;
            }
          } else {
            return and__3438__auto____$1;
          }
        } else {
          return and__3438__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3450__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3450__auto__)) {
      return or__3450__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__7682_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__7682_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__7682_SHARP_), cljs.core.second.call(null, p1__7682_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__7683_SHARP_, p2__7684_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__7683_SHARP_, p2__7684_SHARP_);
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3450__auto__ = cljs.core.truth_(function() {
    var and__3438__auto__ = xprefs;
    if (cljs.core.truth_(and__3438__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3438__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3450__auto__)) {
    return or__3450__auto__;
  } else {
    var or__3450__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__7685 = cljs.core.rest.call(null, ps);
          ps = G__7685;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3450__auto____$1)) {
      return or__3450__auto____$1;
    } else {
      var or__3450__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__7686 = cljs.core.rest.call(null, ps);
            ps = G__7686;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3450__auto____$2)) {
        return or__3450__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3450__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3450__auto__)) {
    return or__3450__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__7689) {
    var vec__7690 = p__7689;
    var k = cljs.core.nth.call(null, vec__7690, 0, null);
    var _ = cljs.core.nth.call(null, vec__7690, 1, null);
    var e = vec__7690;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3450__auto__ = be == null;
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj7692 = {};
  return obj7692;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3438__auto__ = mf;
    if (and__3438__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4077__auto__ = mf == null ? null : mf;
    return function() {
      var or__3450__auto__ = cljs.core._reset[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._reset["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3438__auto__ = mf;
    if (and__3438__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4077__auto__ = mf == null ? null : mf;
    return function() {
      var or__3450__auto__ = cljs.core._add_method[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._add_method["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3438__auto__ = mf;
    if (and__3438__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4077__auto__ = mf == null ? null : mf;
    return function() {
      var or__3450__auto__ = cljs.core._remove_method[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._remove_method["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3438__auto__ = mf;
    if (and__3438__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4077__auto__ = mf == null ? null : mf;
    return function() {
      var or__3450__auto__ = cljs.core._prefer_method[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3438__auto__ = mf;
    if (and__3438__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4077__auto__ = mf == null ? null : mf;
    return function() {
      var or__3450__auto__ = cljs.core._get_method[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._get_method["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3438__auto__ = mf;
    if (and__3438__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4077__auto__ = mf == null ? null : mf;
    return function() {
      var or__3450__auto__ = cljs.core._methods[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._methods["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3438__auto__ = mf;
    if (and__3438__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4077__auto__ = mf == null ? null : mf;
    return function() {
      var or__3450__auto__ = cljs.core._prefers[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._prefers["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if (function() {
    var and__3438__auto__ = mf;
    if (and__3438__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args);
  } else {
    var x__4077__auto__ = mf == null ? null : mf;
    return function() {
      var or__3450__auto__ = cljs.core._dispatch[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = cljs.core._dispatch["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args);
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args);
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null;
  });
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn;
  } else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__7693__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args);
  };
  var G__7693 = function(_, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__7693__delegate.call(this, _, args);
  };
  G__7693.cljs$lang$maxFixedArity = 1;
  G__7693.cljs$lang$applyTo = function(arglist__7694) {
    var _ = cljs.core.first(arglist__7694);
    var args = cljs.core.rest(arglist__7694);
    return G__7693__delegate(_, args);
  };
  G__7693.cljs$core$IFn$_invoke$arity$variadic = G__7693__delegate;
  return G__7693;
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4017__auto__, writer__4018__auto__, opt__4019__auto__) {
  return cljs.core._write.call(null, writer__4018__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4020__auto__, writer__4021__auto__, opts__4022__auto__) {
  return cljs.core._write.call(null, writer__4021__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function walk(inner, outer, form) {
  if (cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return outer.call(null, form);
      } else {
        return null;
      }
    }
  }
};
clojure.walk.postwalk = function postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, postwalk, f), f, form);
};
clojure.walk.prewalk = function prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function keywordize_keys(m) {
  var f = function(p__7725) {
    var vec__7726 = p__7725;
    var k = cljs.core.nth.call(null, vec__7726, 0, null);
    var v = cljs.core.nth.call(null, vec__7726, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.map_QMARK_.call(null, x)) {
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
    } else {
      return x;
    }
  }, m);
};
clojure.walk.stringify_keys = function stringify_keys(m) {
  var f = function(p__7729) {
    var vec__7730 = p__7729;
    var k = cljs.core.nth.call(null, vec__7730, 0, null);
    var v = cljs.core.nth.call(null, vec__7730, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.map_QMARK_.call(null, x)) {
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
    } else {
      return x;
    }
  }, m);
};
clojure.walk.prewalk_replace = function prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
/*

 Copyright (C) 2013-2014 Jos de Jong <wjosdejong@gmail.com>

 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy
 of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
*/
goog.provide("math.js");
!function(e) {
  return function(n) {
    return function(r) {
      "object" == typeof exports && "object" == typeof module ? module.exports = n(r) : "function" == typeof define && define.amd ? define(function() {
        return n(r);
      }) : "object" == typeof exports ? exports.mathjs = n(r) : e.mathjs = n(r);
    };
  };
}(this)(function(e) {
  function n(i) {
    if (t[i]) {
      return t[i][r];
    }
    var o = t[i] = {exports:{}, id:i, loaded:!1};
    return e[i].call(o[r], o, o[r], n), o.loaded = !0, o[r];
  }
  var r = "exports", t = {};
  return n.modules = e, n.cache = t, n.p = "", n(0);
})([function(e, n, r) {
  e.exports = r(1);
}, function(e, n, r) {
  function t(e) {
    if ("function" != typeof Object.create) {
      throw new Error("ES5 not supported by this JavaScript engine. Please load the es5-shim and es5-sham library for compatibility.");
    }
    var n = {}, t = {matrix:"matrix", number:"number"};
    return n.config = function(e) {
      var n = r(220);
      if (e) {
        if (i.deepExtend(t, e), e.decimals && n.config({DECIMAL_PLACES:e.decimals}), e.number && e.number.defaultType) {
          throw new Error("setting `number.defaultType` is deprecated. Use `number` instead.");
        }
        if (e.number && e.number.precision) {
          throw new Error("setting `number.precision` is deprecated. Use `decimals` instead.");
        }
        if (e.matrix && e.matrix.defaultType) {
          throw new Error("setting `matrix.defaultType` is deprecated. Use `matrix` instead.");
        }
        if (e.matrix && e.matrix["default"]) {
          throw new Error("setting `matrix.default` is deprecated. Use `matrix` instead.");
        }
      }
      var o = i.clone(t);
      return o.decimals = n.config().DECIMAL_PLACES, o;
    }, n.config(e), n.expression = {}, n.expression.node = r(3), n.expression.parse = r(4), n.expression.Scope = function() {
      throw new Error("Scope is deprecated. Use a regular Object instead");
    }, n.expression.Parser = r(5), n.expression.docs = r(6), n.type = {}, n.type.BigNumber = r(220), n.type.Complex = r(7), n.type.Range = r(8), n.type.Index = r(9), n.type.Matrix = r(10), n.type.Unit = r(11), n.type.Help = r(12), n.collection = r(13), r(14)(n), r(15)(n, t), r(16)(n, t), r(17)(n, t), r(18)(n, t), r(19)(n, t), r(20)(n, t), r(21)(n, t), r(22)(n, t), r(23)(n, t), r(24)(n, t), r(25)(n, t), r(26)(n, t), r(27)(n, t), r(28)(n, t), r(29)(n, t), r(30)(n, t), r(31)(n, t), r(32)(n, t), r(33)(n, 
    t), r(34)(n, t), r(35)(n, t), r(36)(n, t), r(37)(n, t), r(38)(n, t), r(39)(n, t), r(40)(n, t), r(41)(n, t), r(42)(n, t), r(43)(n, t), r(44)(n, t), r(45)(n, t), r(46)(n, t), r(47)(n, t), r(48)(n, t), r(49)(n, t), r(50)(n, t), r(51)(n, t), r(52)(n, t), r(53)(n, t), r(54)(n, t), r(55)(n, t), r(56)(n, t), r(57)(n, t), r(58)(n, t), r(59)(n, t), r(60)(n, t), r(61)(n, t), r(62)(n, t), r(63)(n, t), r(64)(n, t), r(65)(n, t), r(66)(n, t), r(67)(n, t), r(68)(n, t), r(69)(n, t), r(70)(n, t), r(71)(n, t), 
    r(72)(n, t), r(73)(n, t), r(74)(n, t), r(75)(n, t), r(76)(n, t), r(77)(n, t), r(78)(n, t), r(79)(n, t), r(80)(n, t), r(81)(n, t), r(82)(n, t), r(83)(n, t), r(84)(n, t), r(85)(n, t), r(86)(n, t), r(87)(n, t), r(88)(n, t), r(89)(n, t), r(90)(n, t), r(91)(n, t), r(92)(n, t), r(93)(n, t), r(94)(n, t), r(95)(n, t), r(96)(n, t), r(97)(n, t), r(98)(n, t), r(99)(n, t), r(100)(n, t), r(101)(n, t), r(102)(n, t), n.chaining = {}, n.chaining.Selector = r(103)(n, t), n;
  }
  var i = r(2);
  e.exports = t;
}, function(e, n) {
  n.clone = function r(e) {
    var n = typeof e;
    if ("number" === n || ("string" === n || ("boolean" === n || (null === e || void 0 === e)))) {
      return e;
    }
    if ("function" == typeof e.clone) {
      return e.clone();
    }
    if (Array.isArray(e)) {
      return e.map(function(e) {
        return r(e);
      });
    }
    if (e instanceof Object) {
      var t = {};
      for (var i in e) {
        e.hasOwnProperty(i) && (t[i] = r(e[i]));
      }
      return e;
    }
    throw new TypeError("Cannot clone " + e);
  }, n.extend = function(e, n) {
    for (var r in n) {
      n.hasOwnProperty(r) && (e[r] = n[r]);
    }
    return e;
  }, n.deepExtend = function t(e, n) {
    for (var r in n) {
      n.hasOwnProperty(r) && (n[r] && n[r].constructor === Object ? (void 0 === e[r] && (e[r] = {}), e[r].constructor === Object ? t(e[r], n[r]) : e[r] = n[r]) : e[r] = n[r]);
    }
    return e;
  }, n.deepEqual = function(e, r) {
    var t, i, o;
    if (Array.isArray(e)) {
      if (!Array.isArray(r)) {
        return!1;
      }
      if (e.length != r.length) {
        return!1;
      }
      for (i = 0, o = e.length;o > i;i++) {
        if (!n.deepEqual(e[i], r[i])) {
          return!1;
        }
      }
      return!0;
    }
    if (e instanceof Object) {
      if (Array.isArray(r) || !(r instanceof Object)) {
        return!1;
      }
      for (t in e) {
        if (e.hasOwnProperty(t) && !n.deepEqual(e[t], r[t])) {
          return!1;
        }
      }
      for (t in r) {
        if (r.hasOwnProperty(t) && !n.deepEqual(e[t], r[t])) {
          return!1;
        }
      }
      return!0;
    }
    return e == r;
  };
}, function(e, n, r) {
  n.ArrayNode = r(104), n.AssignmentNode = r(105), n.BlockNode = r(106), n.ConstantNode = r(107), n.IndexNode = r(108), n.FunctionNode = r(109), n.Node = r(110), n.OperatorNode = r(111), n.ParamsNode = r(112), n.RangeNode = r(113), n.SymbolNode = r(114), n.UnitNode = r(115), n.UpdateNode = r(116);
}, function(e, n, r) {
  function t(e, n) {
    if (1 != arguments.length && 2 != arguments.length) {
      throw new SyntaxError("Wrong number of arguments: 1 or 2 expected");
    }
    if (fn = "object" === H(n) ? n : {}, G(e)) {
      return cn = e || "", m();
    }
    if (D(e) || e instanceof V) {
      return Y.deepMap(e, function(e) {
        return cn = e || "", m();
      });
    }
    throw new TypeError("String or matrix expected");
  }
  function i() {
    ln = 0, mn = cn.charAt(0);
  }
  function o() {
    ln++, mn = cn.charAt(ln);
  }
  function a() {
    return cn.charAt(ln + 1);
  }
  function s() {
    for (hn = an.NULL, pn = "";" " == mn || "\t" == mn;) {
      o();
    }
    if ("#" == mn) {
      for (;"\n" != mn && "" != mn;) {
        o();
      }
    }
    if ("" == mn) {
      return void(hn = an.DELIMITER);
    }
    var e = mn + a();
    if (sn[e]) {
      return hn = an.DELIMITER, pn = e, o(), void o();
    }
    if (sn[mn]) {
      return hn = an.DELIMITER, pn = mn, void o();
    }
    if (!c(mn)) {
      if (f(mn)) {
        for (;f(mn) || l(mn);) {
          pn += mn, o();
        }
        return void(hn = un[pn] ? an.DELIMITER : an.SYMBOL);
      }
      for (hn = an.UNKNOWN;"" != mn;) {
        pn += mn, o();
      }
      throw P('Syntax error in part "' + pn + '"');
    }
    if (hn = an.NUMBER, "." == mn) {
      pn += mn, o(), l(mn) || (hn = an.UNKNOWN);
    } else {
      for (;l(mn);) {
        pn += mn, o();
      }
      "." == mn && (pn += mn, o());
    }
    for (;l(mn);) {
      pn += mn, o();
    }
    if ("E" == mn || "e" == mn) {
      for (pn += mn, o(), ("+" == mn || "-" == mn) && (pn += mn, o()), l(mn) || (hn = an.UNKNOWN);l(mn);) {
        pn += mn, o();
      }
    }
  }
  function u() {
    for (;"\n" == pn;) {
      s();
    }
  }
  function f(e) {
    return e >= "a" && "z" >= e || (e >= "A" && "Z" >= e || "_" == e);
  }
  function c(e) {
    return e >= "0" && "9" >= e || "." == e;
  }
  function l(e) {
    return e >= "0" && "9" >= e;
  }
  function m() {
    i(), s();
    var e;
    if (e = "" == pn ? new K("undefined", "undefined") : p(), "" != pn) {
      throw hn == an.DELIMITER ? k("Unknown operator " + pn) : P('Unexpected part "' + pn + '"');
    }
    return e;
  }
  function p() {
    var e, n, r;
    for ("\n" != pn && (";" != pn && ("" != pn && (e = h())));"\n" == pn || ";" == pn;) {
      n || (n = new Q, e && (r = ";" != pn, n.add(e, r))), s(), "\n" != pn && (";" != pn && ("" != pn && (e = h(), r = ";" != pn, n.add(e, r))));
    }
    return n ? n : (e || (e = h()), e);
  }
  function h() {
    var e = g(), n = "ans";
    return new Z(n, e);
  }
  function g() {
    if (hn == an.SYMBOL && "function" == pn) {
      throw new Error('Deprecated keyword "function". Functions can now be assigned without it, like "f(x) \x3d x^2".');
    }
    return d();
  }
  function d() {
    var e, n, r, t = x();
    if ("\x3d" == pn) {
      if (t instanceof rn) {
        return e = t.name, s(), r = d(), new Z(e, r);
      }
      if (t instanceof X) {
        return s(), r = d(), new on(t, r);
      }
      if (t instanceof en) {
        var i = !0;
        if (n = [], t.object instanceof rn ? (e = t.object.name, t.params.forEach(function(e, r) {
          e instanceof rn ? n[r] = e.name : i = !1;
        })) : i = !1, i) {
          return s(), r = d(), new $(e, n, r);
        }
      }
      throw P("Invalid left hand side of assignment operator \x3d");
    }
    return t;
  }
  function x() {
    var e, n = [];
    if (e = ":" == pn ? new K("number", "1") : v(), ":" == pn) {
      for (n.push(e);":" == pn;) {
        s(), n.push(")" == pn || ("]" == pn || ("," == pn || "" == pn)) ? new rn("end") : v());
      }
      if (n.length) {
        if (3 == n.length) {
          var r = n[2];
          n[2] = n[1], n[1] = r;
        }
        e = new nn(n);
      }
    }
    return e;
  }
  function v() {
    var e = w();
    return e;
  }
  function w() {
    var e, n, r, t, i;
    for (e = b(), n = {"\x3d\x3d":"equal", "!\x3d":"unequal", "\x3c":"smaller", "\x3e":"larger", "\x3c\x3d":"smallereq", "\x3e\x3d":"largereq"};pn in n;) {
      r = pn, t = n[r], s(), i = [e, b()], e = new J(r, t, i);
    }
    return e;
  }
  function b() {
    var e, n, r, t, i;
    for (e = y(), n = {to:"to", "in":"to"};pn in n;) {
      r = pn, t = n[r], s(), i = [e, y()], e = new J(r, t, i);
    }
    return e;
  }
  function y() {
    var e, n, r, t, i;
    for (e = E(), n = {"+":"add", "-":"subtract"};pn in n;) {
      r = pn, t = n[r], s(), i = [e, E()], e = new J(r, t, i);
    }
    return e;
  }
  function E() {
    var e, n, r, t, i;
    for (e = N(), n = {"*":"multiply", ".*":"emultiply", "/":"divide", "./":"edivide", "%":"mod", mod:"mod"};pn in n;) {
      r = pn, t = n[r], s(), i = [e, N()], e = new J(r, t, i);
    }
    return e;
  }
  function N() {
    var e, n;
    return e = M(), (hn == an.SYMBOL || "in" == pn) && (n = pn, s(), e = new tn(e, n)), e;
  }
  function M() {
    var e, n, r;
    return "-" == pn ? (e = pn, n = "unary", s(), r = [M()], new J(e, n, r)) : A();
  }
  function A() {
    var e, n, r, t, i, o, a;
    for (r = [O()], t = [];"^" == pn || ".^" == pn;) {
      t.push(pn), s(), r.push(O());
    }
    for (e = r.pop();r.length;) {
      n = r.pop(), i = t.pop(), o = "^" == i ? "pow" : "epow", a = [n, e], e = new J(i, o, a);
    }
    return e;
  }
  function O() {
    var e, n, r, t, i;
    for (e = T(), n = {"!":"factorial", "'":"transpose"};pn in n;) {
      r = pn, t = n[r], s(), i = [e], e = new J(r, t, i);
    }
    return e;
  }
  function T() {
    var e, n;
    if (hn == an.SYMBOL && fn[pn]) {
      if (n = fn[pn], s(), "(" == pn) {
        if (e = [], s(), ")" != pn) {
          for (e.push(x());"," == pn;) {
            s(), e.push(x());
          }
        }
        if (")" != pn) {
          throw P("Parenthesis ) expected");
        }
        s();
      }
      return new n(e);
    }
    return S();
  }
  function S() {
    var e, n;
    return hn == an.SYMBOL || hn == an.DELIMITER && pn in un ? (n = pn, s(), e = new rn(n), C(e)) : U();
  }
  function C(e) {
    for (var n, r;"(" == pn || "[" == pn;) {
      if (n = pn, r = [], s(), ")" != pn && "]" != pn) {
        for (r.push(x());"," == pn;) {
          s(), r.push(x());
        }
      }
      if ("(" == n && ")" != pn) {
        throw P("Parenthesis ) expected");
      }
      if ("[" == n && "]" != pn) {
        throw P("Parenthesis ] expected");
      }
      s(), e = "(" == n ? new en(e, r) : new X(e, r);
    }
    return e;
  }
  function U() {
    var e, n, r;
    if ('"' == pn) {
      for (n = "", r = "";"" != mn && ('"' != mn || "\\" == r);) {
        n += mn, r = mn, o();
      }
      if (s(), '"' != pn) {
        throw P('End of string " expected');
      }
      return s(), e = new K("string", n), e = C(e);
    }
    return z();
  }
  function z() {
    var e, n, r, t;
    if ("[" == pn) {
      if (s(), u(), "]" != pn) {
        var i = q();
        if (";" == pn) {
          for (r = 1, n = [i];";" == pn;) {
            s(), u(), n[r] = q(), r++, u();
          }
          if ("]" != pn) {
            throw P("End of matrix ] expected");
          }
          s(), t = n.length > 0 ? n[0].length : 0;
          for (var o = 1;r > o;o++) {
            if (n[o].length != t) {
              throw k("Number of columns must match (" + n[o].length + " !\x3d " + t + ")");
            }
          }
          e = new W(n);
        } else {
          if ("]" != pn) {
            throw P("End of matrix ] expected");
          }
          s(), e = i;
        }
      } else {
        s(), e = new W([]);
      }
      return e = C(e);
    }
    return R();
  }
  function q() {
    for (var e = [d()], n = 1;"," == pn;) {
      s(), u(), e[n] = d(), n++, u();
    }
    return new W(e);
  }
  function R() {
    var e, n;
    return hn == an.NUMBER ? (n = "." == pn ? "0" : pn, s(), "i" == pn || "I" == pn ? (s(), e = new K("complex", n)) : e = new K("number", n), e = C(e)) : _();
  }
  function _() {
    var e;
    if ("(" == pn) {
      if (s(), e = d(), ")" != pn) {
        throw P("Parenthesis ) expected");
      }
      return s(), e = C(e);
    }
    return I();
  }
  function I() {
    throw P("" == pn ? "Unexpected end of expression" : "Value expected");
  }
  function L() {
    return void 0;
  }
  function B() {
    return ln - pn.length + 1;
  }
  function j(e) {
    var n = L(), r = B();
    return void 0 === n ? void 0 === r ? e : e + " (char " + r + ")" : e + " (line " + n + ", char " + r + ")";
  }
  function P(e) {
    return new SyntaxError(j(e));
  }
  function k(e) {
    return new Error(j(e));
  }
  var F = r(117), G = (F.number.toNumber, F.string.isString), D = Array.isArray, H = F.types.type, V = (r(7), r(10)), Y = (r(11), r(13)), W = r(104), Z = r(105), Q = r(106), K = r(107), $ = r(109), X = r(108), J = r(111), en = r(112), nn = r(113), rn = r(114), tn = r(115), on = r(116), an = {NULL:0, DELIMITER:1, NUMBER:2, SYMBOL:3, UNKNOWN:4}, sn = {",":!0, "(":!0, ")":!0, "[":!0, "]":!0, '"':!0, "\n":!0, ";":!0, "+":!0, "-":!0, "*":!0, ".*":!0, "/":!0, "./":!0, "%":!0, "^":!0, ".^":!0, "!":!0, "'":!0, 
  "\x3d":!0, ":":!0, "\x3d\x3d":!0, "!\x3d":!0, "\x3c":!0, "\x3e":!0, "\x3c\x3d":!0, "\x3e\x3d":!0}, un = {mod:!0, to:!0, "in":!0}, fn = {}, cn = "", ln = 0, mn = "", pn = "", hn = an.NULL;
  e.exports = t;
}, function(e, n, r) {
  function t(e) {
    if (!(this instanceof t)) {
      throw new SyntaxError("Parser constructor must be called with the new operator");
    }
    if ("object" != typeof e) {
      throw new TypeError("Object expected as parameter math");
    }
    this.math = e, this.scope = {};
  }
  var i = r(4);
  t.prototype.parse = function(e) {
    return i(e);
  }, t.prototype.compile = function(e) {
    return i(e).compile(this.math);
  }, t.prototype.eval = function(e) {
    return i(e).compile(this.math).eval(this.scope);
  }, t.prototype.get = function(e) {
    return this.scope[e];
  }, t.prototype.set = function(e, n) {
    return this.scope[e] = n;
  }, t.prototype.remove = function(e) {
    delete this.scope[e];
  }, t.prototype.clear = function() {
    for (var e in this.scope) {
      this.scope.hasOwnProperty(e) && delete this.scope[e];
    }
  }, e.exports = t;
}, function(e, n, r) {
  n.e = r(118), n.E = r(118), n["false"] = r(119), n.i = r(120), n.Infinity = r(121), n.LN2 = r(122), n.LN10 = r(123), n.LOG2E = r(124), n.LOG10E = r(125), n.NaN = r(126), n.pi = r(127), n.PI = r(127), n.SQRT1_2 = r(128), n.SQRT2 = r(129), n.tau = r(130), n["true"] = r(131), n.abs = r(132), n.add = r(133), n.ceil = r(134), n.cube = r(135), n.divide = r(136), n.edivide = r(137), n.emultiply = r(138), n.epow = r(139), n.equal = r(140), n.exp = r(141), n.fix = r(142), n.floor = r(143), n.gcd = r(144), 
  n.larger = r(145), n.largereq = r(146), n.lcm = r(147), n.log = r(148), n.log10 = r(149), n.mod = r(150), n.multiply = r(151), n.pow = r(152), n.round = r(153), n.sign = r(154), n.smaller = r(155), n.smallereq = r(156), n.sqrt = r(157), n.square = r(158), n.subtract = r(159), n.unary = r(160), n.unequal = r(161), n.xgcd = r(162), n.arg = r(163), n.conj = r(164), n.re = r(165), n.im = r(166), n.bignumber = r(167), n["boolean"] = r(168), n.complex = r(169), n.index = r(170), n.matrix = r(171), n.number = 
  r(172), n.string = r(173), n.unit = r(174), n.eval = r(175), n.help = r(176), n.concat = r(177), n.det = r(178), n.diag = r(179), n.eye = r(180), n.inv = r(181), n.ones = r(182), n.range = r(183), n.resize = r(184), n.size = r(185), n.squeeze = r(186), n.subset = r(187), n.transpose = r(188), n.zeros = r(189), n.combinations = r(190), n.distribution = r(191), n.factorial = r(192), n.permutations = r(193), n.pickRandom = r(194), n.random = r(195), n.randomInt = r(196), n.min = r(197), n.mean = r(198), 
  n.max = r(199), n.acos = r(200), n.asin = r(201), n.atan = r(202), n.atan2 = r(203), n.cos = r(204), n.cot = r(205), n.csc = r(206), n.sec = r(207), n.sin = r(208), n.tan = r(209), n.to = r(210), n.clone = r(211), n.map = r(212), n.forEach = r(213), n.format = r(214), n["import"] = r(215), n["typeof"] = r(216);
}, function(e, n, r) {
  function t(e, n) {
    if (!(this instanceof t)) {
      throw new SyntaxError("Complex constructor must be called with the new operator");
    }
    switch(arguments.length) {
      case 0:
        this.re = 0, this.im = 0;
        break;
      case 2:
        if (!p(e) || !p(n)) {
          throw new TypeError("Two numbers expected in Complex constructor");
        }
        this.re = e, this.im = n;
        break;
      default:
        if (0 != arguments.length && 2 != arguments.length) {
          throw new SyntaxError("Two or zero arguments expected in Complex constructor");
        }
      ;
    }
  }
  function i() {
    for (;" " == x || "\t" == x;) {
      s();
    }
  }
  function o(e) {
    return e >= "0" && "9" >= e || "." == e;
  }
  function a(e) {
    return e >= "0" && "9" >= e;
  }
  function s() {
    d++, x = g.charAt(d);
  }
  function u(e) {
    d = e, x = g.charAt(d);
  }
  function f() {
    var e, n = "";
    if (e = d, "+" == x ? s() : "-" == x && (n += x, s()), !o(x)) {
      return u(e), null;
    }
    if ("." == x) {
      if (n += x, s(), !a(x)) {
        return u(e), null;
      }
    } else {
      for (;a(x);) {
        n += x, s();
      }
      "." == x && (n += x, s());
    }
    for (;a(x);) {
      n += x, s();
    }
    if ("E" == x || "e" == x) {
      if (n += x, s(), ("+" == x || "-" == x) && (n += x, s()), !a(x)) {
        return u(e), null;
      }
      for (;a(x);) {
        n += x, s();
      }
    }
    return n;
  }
  function c() {
    var e = g.charAt(d + 1);
    if ("I" == x || "i" == x) {
      return s(), "1";
    }
    if (!("+" != x && "-" != x || "I" != e && "i" != e)) {
      var n = "+" == x ? "1" : "-1";
      return s(), s(), n;
    }
    return null;
  }
  var l = r(117), m = l.number, p = l.number.isNumber, h = l.string.isString;
  t.isComplex = function(e) {
    return e instanceof t;
  };
  var g, d, x;
  t.parse = function(e) {
    if (g = e, d = -1, x = "", !h(g)) {
      return null;
    }
    s(), i();
    var n = f();
    if (n) {
      if ("I" == x || "i" == x) {
        return s(), i(), x ? null : new t(0, Number(n));
      }
      i();
      var r = x;
      if ("+" != r && "-" != r) {
        return i(), x ? null : new t(Number(n), 0);
      }
      s(), i();
      var o = f();
      if (o) {
        if ("I" != x && "i" != x) {
          return null;
        }
        s();
      } else {
        if (o = c(), !o) {
          return null;
        }
      }
      return "-" == r && (o = "-" == o[0] ? "+" + o.substring(1) : "-" + o), s(), i(), x ? null : new t(Number(n), Number(o));
    }
    return(n = c()) ? (i(), x ? null : new t(0, Number(n))) : null;
  }, t.prototype.clone = function() {
    return new t(this.re, this.im);
  }, t.prototype.equals = function(e) {
    return this.re === e.re && this.im === e.im;
  }, t.prototype.format = function(e) {
    var n = "", r = m.format(this.re, e), t = m.format(this.im, e);
    return n = 0 == this.im ? r : 0 == this.re ? 1 == this.im ? "i" : -1 == this.im ? "-i" : t + "i" : this.im > 0 ? 1 == this.im ? r + " + i" : r + " + " + t + "i" : -1 == this.im ? r + " - i" : r + " - " + t.substring(1) + "i";
  }, t.prototype.toString = function() {
    return this.format();
  }, e.exports = t, n.isComplex = t.isComplex, n.parse = t.parse;
}, function(e, n, r) {
  function t(e, n, r) {
    if (!(this instanceof t)) {
      throw new SyntaxError("Range constructor must be called with the new operator");
    }
    if (null != e && !o.isNumber(e)) {
      throw new TypeError("Parameter start must be a number");
    }
    if (null != n && !o.isNumber(n)) {
      throw new TypeError("Parameter end must be a number");
    }
    if (null != r && !o.isNumber(r)) {
      throw new TypeError("Parameter step must be a number");
    }
    this.start = null != e ? parseFloat(e) : 0, this.end = null != n ? parseFloat(n) : 0, this.step = null != r ? parseFloat(r) : 1;
  }
  var i = r(117), o = i.number, a = i.string;
  i.array;
  t.parse = function(e) {
    if (!a.isString(e)) {
      return null;
    }
    var n = e.split(":"), r = n.map(function(e) {
      return parseFloat(e);
    }), i = r.some(function(e) {
      return isNaN(e);
    });
    if (i) {
      return null;
    }
    switch(r.length) {
      case 2:
        return new t(r[0], r[1]);
      case 3:
        return new t(r[0], r[2], r[1]);
      default:
        return null;
    }
  }, t.prototype.clone = function() {
    return new t(this.start, this.end, this.step);
  }, t.isRange = function(e) {
    return e instanceof t;
  }, t.prototype.size = function() {
    var e = 0, n = this.start, r = this.step, t = this.end, i = t - n;
    return o.sign(r) == o.sign(i) ? e = Math.ceil(i / r) : 0 == i && (e = 0), isNaN(e) && (e = 0), [e];
  }, t.prototype.min = function() {
    var e = this.size()[0];
    return e > 0 ? this.step > 0 ? this.start : this.start + (e - 1) * this.step : void 0;
  }, t.prototype.max = function() {
    var e = this.size()[0];
    return e > 0 ? this.step > 0 ? this.start + (e - 1) * this.step : this.start : void 0;
  }, t.prototype.forEach = function(e) {
    var n = this.start, r = this.step, t = this.end, i = 0;
    if (r > 0) {
      for (;t > n;) {
        e(n, i, this), n += r, i++;
      }
    } else {
      if (0 > r) {
        for (;n > t;) {
          e(n, i, this), n += r, i++;
        }
      }
    }
  }, t.prototype.map = function(e) {
    var n = [];
    return this.forEach(function(r, t, i) {
      n[t] = e(r, t, i);
    }), n;
  }, t.prototype.toArray = function() {
    var e = [];
    return this.forEach(function(n, r) {
      e[r] = n;
    }), e;
  }, t.prototype.valueOf = function() {
    return this.toArray();
  }, t.prototype.format = function(e) {
    var n = o.format(this.start, e);
    return 1 != this.step && (n += ":" + o.format(this.step, e)), n += ":" + o.format(this.end, e);
  }, t.prototype.toString = function() {
    return this.format();
  }, e.exports = t, n.isRange = t.isRange, n.parse = t.parse;
}, function(e, n, r) {
  function t() {
    if (!(this instanceof t)) {
      throw new SyntaxError("Index constructor must be called with the new operator");
    }
    this._ranges = [];
    for (var e = 0, n = arguments.length;n > e;e++) {
      var r = arguments[e];
      if (r instanceof a) {
        this._ranges.push(r);
      } else {
        if (r && (r = r.valueOf()), c(r)) {
          this._ranges.push(i(r));
        } else {
          if (!u(r)) {
            throw new TypeError("Range expected as Array, Number, or String");
          }
          this._ranges.push(i([r, r + 1]));
        }
      }
    }
  }
  function i(e) {
    for (var n = e.length, r = 0;n > r;r++) {
      if (!u(e[r]) || !f(e[r])) {
        throw new TypeError("Index parameters must be integer numbers");
      }
    }
    switch(e.length) {
      case 2:
        return new a(e[0], e[1]);
      case 3:
        return new a(e[0], e[1], e[2]);
      default:
        throw new SyntaxError("Wrong number of arguments in Index (2 or 3 expected)");;
    }
  }
  var o = r(117), a = r(8), s = o.number, u = s.isNumber, f = s.isInteger, c = Array.isArray;
  o.array.validateIndex;
  t.prototype.clone = function() {
    var e = new t;
    return e._ranges = o.object.clone(this._ranges), e;
  }, t.isIndex = function(e) {
    return e instanceof t;
  }, t.create = function(e) {
    var n = new t;
    return t.apply(n, e), n;
  }, t.prototype.size = function l() {
    for (var l = [], e = 0, n = this._ranges.length;n > e;e++) {
      var r = this._ranges[e];
      l[e] = r.size()[0];
    }
    return l;
  }, t.prototype.max = function() {
    for (var e = [], n = 0, r = this._ranges.length;r > n;n++) {
      var t = this._ranges[n];
      e[n] = t.max();
    }
    return e;
  }, t.prototype.min = function() {
    for (var e = [], n = 0, r = this._ranges.length;r > n;n++) {
      var t = this._ranges[n];
      e[n] = t.min();
    }
    return e;
  }, t.prototype.forEach = function(e) {
    for (var n = 0, r = this._ranges.length;r > n;n++) {
      e(this._ranges[n], n, this);
    }
  }, t.prototype.range = function(e) {
    return this._ranges[e];
  }, t.prototype.isScalar = function() {
    for (var e = this.size(), n = 0, r = e.length;r > n;n++) {
      if (1 !== e[n]) {
        return!1;
      }
    }
    return!0;
  }, t.prototype.toArray = function() {
    for (var e = [], n = 0, r = this._ranges.length;r > n;n++) {
      var t = this._ranges[n], i = [], o = t.start, a = t.end, s = t.step;
      if (s > 0) {
        for (;a > o;) {
          i.push(o), o += s;
        }
      } else {
        if (0 > s) {
          for (;o > a;) {
            i.push(o), o += s;
          }
        }
      }
      e.push(i);
    }
    return e;
  }, t.prototype.valueOf = t.prototype.toArray, t.prototype.toString = function() {
    for (var e = [], n = 0, r = this._ranges.length;r > n;n++) {
      var t = this._ranges[n], i = s.format(t.start);
      1 != t.step && (i += ":" + s.format(t.step)), i += ":" + s.format(t.end), e.push(i);
    }
    return "[" + e.join(",") + "]";
  }, e.exports = t, n.isIndex = t.isIndex, n.create = t.create;
}, function(e, n, r) {
  function t(e) {
    if (!(this instanceof t)) {
      throw new SyntaxError("Matrix constructor must be called with the new operator");
    }
    if (e instanceof t) {
      this._data = e.clone()._data;
    } else {
      if (g(e)) {
        this._data = f(e);
      } else {
        if (null != e) {
          throw new TypeError("Unsupported type of data (" + c.types.type(e) + ")");
        }
        this._data = [];
      }
    }
    this._size = p.size(this._data);
  }
  function i(e, n) {
    if (!(n instanceof l)) {
      throw new TypeError("Invalid index");
    }
    var r = n.isScalar();
    if (r) {
      return e.get(n.min());
    }
    var i = n.size();
    if (i.length != e._size.length) {
      throw new RangeError("Dimension mismatch (" + i.length + " !\x3d " + e._size.length + ")");
    }
    for (var a = new t(o(e._data, n, i.length, 0));g(a._data) && 1 == a._data.length;) {
      a._data = a._data[0], a._size.shift();
    }
    return a;
  }
  function o(e, n, r, t) {
    var i = t == r - 1, a = n.range(t);
    return a.map(i ? function(n) {
      return d(n, e.length), e[n];
    } : function(i) {
      d(i, e.length);
      var a = e[i];
      return o(a, n, r, t + 1);
    });
  }
  function a(e, n, r, i) {
    if (!(n instanceof l)) {
      throw new TypeError("Invalid index");
    }
    var o, a = n.size(), f = n.isScalar();
    if (r instanceof t ? (o = r.size(), r = r.valueOf()) : o = p.size(r), f) {
      if (0 != o.length) {
        throw new TypeError("Scalar value expected");
      }
      e.set(n.min(), r, i);
    } else {
      if (a.length < e._size.length) {
        throw new RangeError("Dimension mismatch (" + a.length + " \x3c " + e._size.length + ")");
      }
      for (var c = 0, g = a.length - o.length;g > c;c++) {
        r = [r], o.unshift(1);
      }
      if (!h.deepEqual(a, o)) {
        throw new RangeError("Dimensions mismatch (" + m.format(a) + " !\x3d " + m.format(o) + ")");
      }
      var d = n.max().map(function(e) {
        return e + 1;
      });
      u(e, d, i);
      var x = a.length, v = 0;
      s(e._data, n, r, x, v);
    }
    return e;
  }
  function s(e, n, r, t, i) {
    var o = i == t - 1, a = n.range(i);
    a.forEach(o ? function(n, t) {
      d(n), e[n] = r[t];
    } : function(o, a) {
      d(o), s(e[o], n, r[a], t, i + 1);
    });
  }
  function u(e, n, r) {
    if (!g(n)) {
      throw new Error("Array expected");
    }
    for (var t = h.clone(e._size), i = !1;t.length < n.length;) {
      t.unshift(0), i = !0;
    }
    for (var o = 0, a = n.length;a > o;o++) {
      n[o] > t[o] && (t[o] = n[o], i = !0);
    }
    i && e.resize(t, r);
  }
  function f(e) {
    for (var n = 0, r = e.length;r > n;n++) {
      var i = e[n];
      g(i) ? e[n] = f(i) : i instanceof t && (e[n] = f(i._data));
    }
    return e;
  }
  var c = r(117), l = r(9), m = (c.number, c.string), p = c.array, h = c.object, g = Array.isArray, d = p.validateIndex;
  t.isMatrix = function(e) {
    return e instanceof t;
  }, t.prototype.subset = function(e, n, r) {
    switch(arguments.length) {
      case 1:
        return i(this, e);
      case 2:
      ;
      case 3:
        return a(this, e, n, r);
      default:
        throw new SyntaxError("Wrong number of arguments");;
    }
  }, t.prototype.get = function(e) {
    if (!g(e)) {
      throw new Error("Array expected");
    }
    if (e.length != this._size.length) {
      throw new RangeError("Dimension mismatch (" + e.length + " !\x3d " + this._size.length + ")");
    }
    for (var n = this._data, r = 0, t = e.length;t > r;r++) {
      var i = e[r];
      d(i, n.length), n = n[i];
    }
    return h.clone(n);
  }, t.prototype.set = function(e, n, r) {
    var t, i;
    if (!g(e)) {
      throw new Error("Array expected");
    }
    if (e.length < this._size.length) {
      throw new RangeError("Dimension mismatch (" + e.length + " \x3c " + this._size.length + ")");
    }
    var o = e.map(function(e) {
      return e + 1;
    });
    u(this, o, r);
    var a = this._data;
    for (t = 0, i = e.length - 1;i > t;t++) {
      var s = e[t];
      d(s, a.length), a = a[s];
    }
    return s = e[e.length - 1], d(s, a.length), a[s] = n, this;
  }, t.prototype.resize = function(e, n) {
    return this._size = h.clone(e), this._data = p.resize(this._data, this._size, n), this;
  }, t.prototype.clone = function() {
    var e = new t;
    return e._data = h.clone(this._data), e._size = h.clone(this._size), e;
  }, t.prototype.size = function() {
    return this._size;
  }, t.prototype.map = function(e) {
    var n = this, r = new t, i = [], o = function(r, t) {
      return g(r) ? r.map(function(e, n) {
        return i[t] = n, o(e, t + 1);
      }) : e(r, i, n);
    };
    return r._data = o(this._data, 0), r._size = h.clone(this._size), r;
  }, t.prototype.forEach = function(e) {
    var n = this, r = [], t = function(i, o) {
      g(i) ? i.forEach(function(e, n) {
        r[o] = n, t(e, o + 1);
      }) : e(i, r, n);
    };
    t(this._data, 0);
  }, t.prototype.toArray = function() {
    return h.clone(this._data);
  }, t.prototype.valueOf = function() {
    return this._data;
  }, t.prototype.format = function(e) {
    return m.format(this._data, e);
  }, t.prototype.toString = function() {
    return m.format(this._data);
  }, e.exports = t, n.isMatrix = t.isMatrix;
}, function(e, n, r) {
  function t(e, n) {
    if (!(this instanceof t)) {
      throw new Error("Unit constructor must be called with the new operator");
    }
    if (null != e && !v(e)) {
      throw new TypeError("First parameter in Unit constructor must be a number");
    }
    if (null != n && !w(n)) {
      throw new TypeError("Second parameter in Unit constructor must be a string");
    }
    if (null != n) {
      var r = l(n);
      if (!r) {
        throw new SyntaxError('Unknown unit "' + n + '"');
      }
      this.unit = r.unit, this.prefix = r.prefix;
    } else {
      this.unit = UNIT_NONE, this.prefix = y;
    }
    null != e ? (this.value = this._normalize(e), this.fixPrefix = !1) : (this.value = null, this.fixPrefix = !0);
  }
  function i() {
    for (;" " == h || "\t" == h;) {
      s();
    }
  }
  function o(e) {
    return e >= "0" && "9" >= e || "." == e;
  }
  function a(e) {
    return e >= "0" && "9" >= e;
  }
  function s() {
    p++, h = m.charAt(p);
  }
  function u(e) {
    p = e, h = m.charAt(p);
  }
  function f() {
    var e, n = "";
    if (e = p, "+" == h ? s() : "-" == h && (n += h, s()), !o(h)) {
      return u(e), null;
    }
    if ("." == h) {
      if (n += h, s(), !a(h)) {
        return u(e), null;
      }
    } else {
      for (;a(h);) {
        n += h, s();
      }
      "." == h && (n += h, s());
    }
    for (;a(h);) {
      n += h, s();
    }
    if ("E" == h || "e" == h) {
      if (n += h, s(), ("+" == h || "-" == h) && (n += h, s()), !a(h)) {
        return u(e), null;
      }
      for (;a(h);) {
        n += h, s();
      }
    }
    return n;
  }
  function c() {
    var e = "";
    for (i();h && (" " != h && "\t" != h);) {
      e += h, s();
    }
    return e || null;
  }
  function l(e) {
    for (var n in N) {
      if (N.hasOwnProperty(n) && x.endsWith(e, n)) {
        var r = N[n], t = e.length - n.length, i = e.substring(0, t), o = r.prefixes[i];
        if (void 0 !== o) {
          return{unit:r, prefix:o};
        }
      }
    }
    return null;
  }
  var m, p, h, g = r(117), d = g.number, x = g.string, v = g.number.isNumber, w = g.string.isString;
  t.parse = function(e) {
    if (m = e, p = -1, h = "", !w(m)) {
      return null;
    }
    s(), i();
    var n, r = f();
    return r ? (n = c(), s(), i(), h ? null : r && n ? new t(Number(r), n) : null) : (n = c(), s(), i(), h ? null : new t(null, n));
  }, t.isUnit = function(e) {
    return e instanceof t;
  }, t.prototype.clone = function() {
    var e = new t;
    for (var n in this) {
      this.hasOwnProperty(n) && (e[n] = this[n]);
    }
    return e;
  }, t.prototype._normalize = function(e) {
    return(e + this.unit.offset) * this.unit.value * this.prefix.value;
  }, t.prototype._unnormalize = function(e, n) {
    return void 0 == n ? e / this.unit.value / this.prefix.value - this.unit.offset : e / this.unit.value / n - this.unit.offset;
  }, t.isPlainUnit = function(e) {
    return null != l(e);
  }, t.prototype.hasBase = function(e) {
    return void 0 === this.unit.base ? void 0 === e : this.unit.base === e;
  }, t.prototype.equalBase = function(e) {
    return this.unit.base === e.unit.base;
  }, t.prototype.equals = function(e) {
    return this.equalBase(e) && this.value == e.value;
  }, t.prototype.to = function(e) {
    var n;
    if (w(e)) {
      if (n = new t(null, e), !this.equalBase(n)) {
        throw new Error("Units do not match");
      }
      return n.value = this.value, n;
    }
    if (e instanceof t) {
      if (!this.equalBase(e)) {
        throw new Error("Units do not match");
      }
      if (null != e.value) {
        throw new Error("Cannot convert to a unit with a value");
      }
      if (null == e.unit) {
        throw new Error("Unit expected on the right hand side of function in");
      }
      return n = e.clone(), n.value = this.value, n.fixPrefix = !0, n;
    }
    throw new Error("String or Unit expected as parameter");
  }, t.prototype.toNumber = function(e) {
    var n = this.to(e), r = this.fixPrefix ? n._bestPrefix() : n.prefix;
    return n._unnormalize(n.value, r.value);
  }, t.prototype.toString = function() {
    return this.format();
  }, t.prototype.format = function(e) {
    var n, r;
    if (this.fixPrefix) {
      n = this._unnormalize(this.value), r = null != this.value ? d.format(n, e) + " " : "", r += this.prefix.name + this.unit.name;
    } else {
      var t = this._bestPrefix();
      n = this._unnormalize(this.value, t.value), r = null != this.value ? d.format(n, e) + " " : "", r += t.name + this.unit.name;
    }
    return r;
  }, t.prototype._bestPrefix = function() {
    var e = Math.abs(this.value / this.unit.value), n = y, r = Math.abs(Math.log(e / n.value) / Math.LN10 - 1.2), t = this.unit.prefixes;
    for (var i in t) {
      if (t.hasOwnProperty(i)) {
        var o = t[i];
        if (o.scientific) {
          var a = Math.abs(Math.log(e / o.value) / Math.LN10 - 1.2);
          r > a && (n = o, r = a);
        }
      }
    }
    return n;
  };
  var b = {NONE:{"":{name:"", value:1, scientific:!0}}, SHORT:{"":{name:"", value:1, scientific:!0}, da:{name:"da", value:10, scientific:!1}, h:{name:"h", value:100, scientific:!1}, k:{name:"k", value:1E3, scientific:!0}, M:{name:"M", value:1E6, scientific:!0}, G:{name:"G", value:1E9, scientific:!0}, T:{name:"T", value:1E12, scientific:!0}, P:{name:"P", value:1E15, scientific:!0}, E:{name:"E", value:1E18, scientific:!0}, Z:{name:"Z", value:1E21, scientific:!0}, Y:{name:"Y", value:1E24, scientific:!0}, 
  d:{name:"d", value:0.1, scientific:!1}, c:{name:"c", value:0.01, scientific:!1}, m:{name:"m", value:0.001, scientific:!0}, u:{name:"u", value:1E-6, scientific:!0}, n:{name:"n", value:1E-9, scientific:!0}, p:{name:"p", value:1E-12, scientific:!0}, f:{name:"f", value:1E-15, scientific:!0}, a:{name:"a", value:1E-18, scientific:!0}, z:{name:"z", value:1E-21, scientific:!0}, y:{name:"y", value:1E-24, scientific:!0}}, LONG:{"":{name:"", value:1, scientific:!0}, deca:{name:"deca", value:10, scientific:!1}, 
  hecto:{name:"hecto", value:100, scientific:!1}, kilo:{name:"kilo", value:1E3, scientific:!0}, mega:{name:"mega", value:1E6, scientific:!0}, giga:{name:"giga", value:1E9, scientific:!0}, tera:{name:"tera", value:1E12, scientific:!0}, peta:{name:"peta", value:1E15, scientific:!0}, exa:{name:"exa", value:1E18, scientific:!0}, zetta:{name:"zetta", value:1E21, scientific:!0}, yotta:{name:"yotta", value:1E24, scientific:!0}, deci:{name:"deci", value:0.1, scientific:!1}, centi:{name:"centi", value:0.01, 
  scientific:!1}, milli:{name:"milli", value:0.001, scientific:!0}, micro:{name:"micro", value:1E-6, scientific:!0}, nano:{name:"nano", value:1E-9, scientific:!0}, pico:{name:"pico", value:1E-12, scientific:!0}, femto:{name:"femto", value:1E-15, scientific:!0}, atto:{name:"atto", value:1E-18, scientific:!0}, zepto:{name:"zepto", value:1E-21, scientific:!0}, yocto:{name:"yocto", value:1E-24, scientific:!0}}, SQUARED:{"":{name:"", value:1, scientific:!0}, da:{name:"da", value:100, scientific:!1}, h:{name:"h", 
  value:1E4, scientific:!1}, k:{name:"k", value:1E6, scientific:!0}, M:{name:"M", value:1E12, scientific:!0}, G:{name:"G", value:1E18, scientific:!0}, T:{name:"T", value:1E24, scientific:!0}, P:{name:"P", value:1E30, scientific:!0}, E:{name:"E", value:1E36, scientific:!0}, Z:{name:"Z", value:1E42, scientific:!0}, Y:{name:"Y", value:1E48, scientific:!0}, d:{name:"d", value:0.01, scientific:!1}, c:{name:"c", value:1E-4, scientific:!1}, m:{name:"m", value:1E-6, scientific:!0}, u:{name:"u", value:1E-12, 
  scientific:!0}, n:{name:"n", value:1E-18, scientific:!0}, p:{name:"p", value:1E-24, scientific:!0}, f:{name:"f", value:1E-30, scientific:!0}, a:{name:"a", value:1E-36, scientific:!0}, z:{name:"z", value:1E-42, scientific:!0}, y:{name:"y", value:1E-42, scientific:!0}}, CUBIC:{"":{name:"", value:1, scientific:!0}, da:{name:"da", value:1E3, scientific:!1}, h:{name:"h", value:1E6, scientific:!1}, k:{name:"k", value:1E9, scientific:!0}, M:{name:"M", value:1E18, scientific:!0}, G:{name:"G", value:1E27, 
  scientific:!0}, T:{name:"T", value:1E36, scientific:!0}, P:{name:"P", value:1E45, scientific:!0}, E:{name:"E", value:1E54, scientific:!0}, Z:{name:"Z", value:1E63, scientific:!0}, Y:{name:"Y", value:1E72, scientific:!0}, d:{name:"d", value:0.001, scientific:!1}, c:{name:"c", value:1E-6, scientific:!1}, m:{name:"m", value:1E-9, scientific:!0}, u:{name:"u", value:1E-18, scientific:!0}, n:{name:"n", value:1E-27, scientific:!0}, p:{name:"p", value:1E-36, scientific:!0}, f:{name:"f", value:1E-45, scientific:!0}, 
  a:{name:"a", value:1E-54, scientific:!0}, z:{name:"z", value:1E-63, scientific:!0}, y:{name:"y", value:1E-72, scientific:!0}}, BINARY_SHORT:{"":{name:"", value:1, scientific:!0}, k:{name:"k", value:1024, scientific:!0}, M:{name:"M", value:Math.pow(1024, 2), scientific:!0}, G:{name:"G", value:Math.pow(1024, 3), scientific:!0}, T:{name:"T", value:Math.pow(1024, 4), scientific:!0}, P:{name:"P", value:Math.pow(1024, 5), scientific:!0}, E:{name:"E", value:Math.pow(1024, 6), scientific:!0}, Z:{name:"Z", 
  value:Math.pow(1024, 7), scientific:!0}, Y:{name:"Y", value:Math.pow(1024, 8), scientific:!0}, Ki:{name:"Ki", value:1024, scientific:!0}, Mi:{name:"Mi", value:Math.pow(1024, 2), scientific:!0}, Gi:{name:"Gi", value:Math.pow(1024, 3), scientific:!0}, Ti:{name:"Ti", value:Math.pow(1024, 4), scientific:!0}, Pi:{name:"Pi", value:Math.pow(1024, 5), scientific:!0}, Ei:{name:"Ei", value:Math.pow(1024, 6), scientific:!0}, Zi:{name:"Zi", value:Math.pow(1024, 7), scientific:!0}, Yi:{name:"Yi", value:Math.pow(1024, 
  8), scientific:!0}}, BINARY_LONG:{"":{name:"", value:1, scientific:!0}, kilo:{name:"kilo", value:1024, scientific:!0}, mega:{name:"mega", value:Math.pow(1024, 2), scientific:!0}, giga:{name:"giga", value:Math.pow(1024, 3), scientific:!0}, tera:{name:"tera", value:Math.pow(1024, 4), scientific:!0}, peta:{name:"peta", value:Math.pow(1024, 5), scientific:!0}, exa:{name:"exa", value:Math.pow(1024, 6), scientific:!0}, zetta:{name:"zetta", value:Math.pow(1024, 7), scientific:!0}, yotta:{name:"yotta", 
  value:Math.pow(1024, 8), scientific:!0}, kibi:{name:"kibi", value:1024, scientific:!0}, mebi:{name:"mebi", value:Math.pow(1024, 2), scientific:!0}, gibi:{name:"gibi", value:Math.pow(1024, 3), scientific:!0}, tebi:{name:"tebi", value:Math.pow(1024, 4), scientific:!0}, pebi:{name:"pebi", value:Math.pow(1024, 5), scientific:!0}, exi:{name:"exi", value:Math.pow(1024, 6), scientific:!0}, zebi:{name:"zebi", value:Math.pow(1024, 7), scientific:!0}, yobi:{name:"yobi", value:Math.pow(1024, 8), scientific:!0}}}, 
  y = {name:"", value:1, scientific:!0}, E = {NONE:{}, LENGTH:{}, MASS:{}, TIME:{}, CURRENT:{}, TEMPERATURE:{}, LUMINOUS_INTENSITY:{}, AMOUNT_OF_SUBSTANCE:{}, FORCE:{}, SURFACE:{}, VOLUME:{}, ANGLE:{}, BIT:{}};
  BASE_UNIT_NONE = {}, UNIT_NONE = {name:"", base:BASE_UNIT_NONE, value:1, offset:0};
  var N = {meter:{name:"meter", base:E.LENGTH, prefixes:b.LONG, value:1, offset:0}, inch:{name:"inch", base:E.LENGTH, prefixes:b.NONE, value:0.0254, offset:0}, foot:{name:"foot", base:E.LENGTH, prefixes:b.NONE, value:0.3048, offset:0}, yard:{name:"yard", base:E.LENGTH, prefixes:b.NONE, value:0.9144, offset:0}, mile:{name:"mile", base:E.LENGTH, prefixes:b.NONE, value:1609.344, offset:0}, link:{name:"link", base:E.LENGTH, prefixes:b.NONE, value:0.201168, offset:0}, rod:{name:"rod", base:E.LENGTH, prefixes:b.NONE, 
  value:5.02921, offset:0}, chain:{name:"chain", base:E.LENGTH, prefixes:b.NONE, value:20.1168, offset:0}, angstrom:{name:"angstrom", base:E.LENGTH, prefixes:b.NONE, value:1E-10, offset:0}, m:{name:"m", base:E.LENGTH, prefixes:b.SHORT, value:1, offset:0}, "in":{name:"in", base:E.LENGTH, prefixes:b.NONE, value:0.0254, offset:0}, ft:{name:"ft", base:E.LENGTH, prefixes:b.NONE, value:0.3048, offset:0}, yd:{name:"yd", base:E.LENGTH, prefixes:b.NONE, value:0.9144, offset:0}, mi:{name:"mi", base:E.LENGTH, 
  prefixes:b.NONE, value:1609.344, offset:0}, li:{name:"li", base:E.LENGTH, prefixes:b.NONE, value:0.201168, offset:0}, rd:{name:"rd", base:E.LENGTH, prefixes:b.NONE, value:5.02921, offset:0}, ch:{name:"ch", base:E.LENGTH, prefixes:b.NONE, value:20.1168, offset:0}, mil:{name:"mil", base:E.LENGTH, prefixes:b.NONE, value:2.54E-5, offset:0}, m2:{name:"m2", base:E.SURFACE, prefixes:b.SQUARED, value:1, offset:0}, sqin:{name:"sqin", base:E.SURFACE, prefixes:b.NONE, value:6.4516E-4, offset:0}, sqft:{name:"sqft", 
  base:E.SURFACE, prefixes:b.NONE, value:0.09290304, offset:0}, sqyd:{name:"sqyd", base:E.SURFACE, prefixes:b.NONE, value:0.83612736, offset:0}, sqmi:{name:"sqmi", base:E.SURFACE, prefixes:b.NONE, value:2589988.110336, offset:0}, sqrd:{name:"sqrd", base:E.SURFACE, prefixes:b.NONE, value:25.29295, offset:0}, sqch:{name:"sqch", base:E.SURFACE, prefixes:b.NONE, value:404.6873, offset:0}, sqmil:{name:"sqmil", base:E.SURFACE, prefixes:b.NONE, value:6.4516E-10, offset:0}, m3:{name:"m3", base:E.VOLUME, 
  prefixes:b.CUBIC, value:1, offset:0}, L:{name:"L", base:E.VOLUME, prefixes:b.SHORT, value:0.001, offset:0}, l:{name:"l", base:E.VOLUME, prefixes:b.SHORT, value:0.001, offset:0}, litre:{name:"litre", base:E.VOLUME, prefixes:b.LONG, value:0.001, offset:0}, cuin:{name:"cuin", base:E.VOLUME, prefixes:b.NONE, value:1.6387064E-5, offset:0}, cuft:{name:"cuft", base:E.VOLUME, prefixes:b.NONE, value:0.028316846592, offset:0}, cuyd:{name:"cuyd", base:E.VOLUME, prefixes:b.NONE, value:0.764554857984, offset:0}, 
  teaspoon:{name:"teaspoon", base:E.VOLUME, prefixes:b.NONE, value:5E-6, offset:0}, tablespoon:{name:"tablespoon", base:E.VOLUME, prefixes:b.NONE, value:1.5E-5, offset:0}, minim:{name:"minim", base:E.VOLUME, prefixes:b.NONE, value:6.161152E-8, offset:0}, fluiddram:{name:"fluiddram", base:E.VOLUME, prefixes:b.NONE, value:3.6966911E-6, offset:0}, fluidounce:{name:"fluidounce", base:E.VOLUME, prefixes:b.NONE, value:2.957353E-5, offset:0}, gill:{name:"gill", base:E.VOLUME, prefixes:b.NONE, value:1.182941E-4, 
  offset:0}, cc:{name:"cc", base:E.VOLUME, prefixes:b.NONE, value:1E-6, offset:0}, cup:{name:"cup", base:E.VOLUME, prefixes:b.NONE, value:2.365882E-4, offset:0}, pint:{name:"pint", base:E.VOLUME, prefixes:b.NONE, value:4.731765E-4, offset:0}, quart:{name:"quart", base:E.VOLUME, prefixes:b.NONE, value:9.463529E-4, offset:0}, gallon:{name:"gallon", base:E.VOLUME, prefixes:b.NONE, value:0.003785412, offset:0}, beerbarrel:{name:"beerbarrel", base:E.VOLUME, prefixes:b.NONE, value:0.1173478, offset:0}, 
  oilbarrel:{name:"oilbarrel", base:E.VOLUME, prefixes:b.NONE, value:0.1589873, offset:0}, hogshead:{name:"hogshead", base:E.VOLUME, prefixes:b.NONE, value:0.238481, offset:0}, fldr:{name:"fldr", base:E.VOLUME, prefixes:b.NONE, value:3.6966911E-6, offset:0}, floz:{name:"floz", base:E.VOLUME, prefixes:b.NONE, value:2.957353E-5, offset:0}, gi:{name:"gi", base:E.VOLUME, prefixes:b.NONE, value:1.182941E-4, offset:0}, cp:{name:"cp", base:E.VOLUME, prefixes:b.NONE, value:2.365882E-4, offset:0}, pt:{name:"pt", 
  base:E.VOLUME, prefixes:b.NONE, value:4.731765E-4, offset:0}, qt:{name:"qt", base:E.VOLUME, prefixes:b.NONE, value:9.463529E-4, offset:0}, gal:{name:"gal", base:E.VOLUME, prefixes:b.NONE, value:0.003785412, offset:0}, bbl:{name:"bbl", base:E.VOLUME, prefixes:b.NONE, value:0.1173478, offset:0}, obl:{name:"obl", base:E.VOLUME, prefixes:b.NONE, value:0.1589873, offset:0}, g:{name:"g", base:E.MASS, prefixes:b.SHORT, value:0.001, offset:0}, gram:{name:"gram", base:E.MASS, prefixes:b.LONG, value:0.001, 
  offset:0}, ton:{name:"ton", base:E.MASS, prefixes:b.SHORT, value:907.18474, offset:0}, tonne:{name:"tonne", base:E.MASS, prefixes:b.SHORT, value:1E3, offset:0}, grain:{name:"grain", base:E.MASS, prefixes:b.NONE, value:6.479891E-5, offset:0}, dram:{name:"dram", base:E.MASS, prefixes:b.NONE, value:0.0017718451953125, offset:0}, ounce:{name:"ounce", base:E.MASS, prefixes:b.NONE, value:0.028349523125, offset:0}, poundmass:{name:"poundmass", base:E.MASS, prefixes:b.NONE, value:0.45359237, offset:0}, 
  hundredweight:{name:"hundredweight", base:E.MASS, prefixes:b.NONE, value:45.359237, offset:0}, stick:{name:"stick", base:E.MASS, prefixes:b.NONE, value:0.115, offset:0}, gr:{name:"gr", base:E.MASS, prefixes:b.NONE, value:6.479891E-5, offset:0}, dr:{name:"dr", base:E.MASS, prefixes:b.NONE, value:0.0017718451953125, offset:0}, oz:{name:"oz", base:E.MASS, prefixes:b.NONE, value:0.028349523125, offset:0}, lbm:{name:"lbm", base:E.MASS, prefixes:b.NONE, value:0.45359237, offset:0}, cwt:{name:"cwt", base:E.MASS, 
  prefixes:b.NONE, value:45.359237, offset:0}, s:{name:"s", base:E.TIME, prefixes:b.SHORT, value:1, offset:0}, min:{name:"min", base:E.TIME, prefixes:b.NONE, value:60, offset:0}, h:{name:"h", base:E.TIME, prefixes:b.NONE, value:3600, offset:0}, second:{name:"second", base:E.TIME, prefixes:b.LONG, value:1, offset:0}, sec:{name:"sec", base:E.TIME, prefixes:b.LONG, value:1, offset:0}, minute:{name:"minute", base:E.TIME, prefixes:b.NONE, value:60, offset:0}, hour:{name:"hour", base:E.TIME, prefixes:b.NONE, 
  value:3600, offset:0}, day:{name:"day", base:E.TIME, prefixes:b.NONE, value:86400, offset:0}, rad:{name:"rad", base:E.ANGLE, prefixes:b.NONE, value:1, offset:0}, deg:{name:"deg", base:E.ANGLE, prefixes:b.NONE, value:0.017453292519943295, offset:0}, grad:{name:"grad", base:E.ANGLE, prefixes:b.NONE, value:0.015707963267948967, offset:0}, cycle:{name:"cycle", base:E.ANGLE, prefixes:b.NONE, value:6.283185307179586, offset:0}, A:{name:"A", base:E.CURRENT, prefixes:b.SHORT, value:1, offset:0}, ampere:{name:"ampere", 
  base:E.CURRENT, prefixes:b.LONG, value:1, offset:0}, K:{name:"K", base:E.TEMPERATURE, prefixes:b.NONE, value:1, offset:0}, degC:{name:"degC", base:E.TEMPERATURE, prefixes:b.NONE, value:1, offset:273.15}, degF:{name:"degF", base:E.TEMPERATURE, prefixes:b.NONE, value:1 / 1.8, offset:459.67}, degR:{name:"degR", base:E.TEMPERATURE, prefixes:b.NONE, value:1 / 1.8, offset:0}, kelvin:{name:"kelvin", base:E.TEMPERATURE, prefixes:b.NONE, value:1, offset:0}, celsius:{name:"celsius", base:E.TEMPERATURE, prefixes:b.NONE, 
  value:1, offset:273.15}, fahrenheit:{name:"fahrenheit", base:E.TEMPERATURE, prefixes:b.NONE, value:1 / 1.8, offset:459.67}, rankine:{name:"rankine", base:E.TEMPERATURE, prefixes:b.NONE, value:1 / 1.8, offset:0}, mol:{name:"mol", base:E.AMOUNT_OF_SUBSTANCE, prefixes:b.NONE, value:1, offset:0}, mole:{name:"mole", base:E.AMOUNT_OF_SUBSTANCE, prefixes:b.NONE, value:1, offset:0}, cd:{name:"cd", base:E.LUMINOUS_INTENSITY, prefixes:b.NONE, value:1, offset:0}, candela:{name:"candela", base:E.LUMINOUS_INTENSITY, 
  prefixes:b.NONE, value:1, offset:0}, N:{name:"N", base:E.FORCE, prefixes:b.SHORT, value:1, offset:0}, newton:{name:"newton", base:E.FORCE, prefixes:b.LONG, value:1, offset:0}, lbf:{name:"lbf", base:E.FORCE, prefixes:b.NONE, value:4.4482216152605, offset:0}, poundforce:{name:"poundforce", base:E.FORCE, prefixes:b.NONE, value:4.4482216152605, offset:0}, b:{name:"b", base:E.BIT, prefixes:b.BINARY_SHORT, value:1, offset:0}, bits:{name:"bits", base:E.BIT, prefixes:b.BINARY_LONG, value:1, offset:0}, 
  B:{name:"B", base:E.BIT, prefixes:b.BINARY_SHORT, value:8, offset:0}, bytes:{name:"bytes", base:E.BIT, prefixes:b.BINARY_LONG, value:8, offset:0}}, M = {meters:"meter", inches:"inch", feet:"foot", yards:"yard", miles:"mile", links:"link", rods:"rod", chains:"chain", angstroms:"angstrom", litres:"litre", teaspoons:"teaspoon", tablespoons:"tablespoon", minims:"minim", fluiddrams:"fluiddram", fluidounces:"fluidounce", gills:"gill", cups:"cup", pints:"pint", quarts:"quart", gallons:"gallon", beerbarrels:"beerbarrel", 
  oilbarrels:"oilbarrel", hogsheads:"hogshead", grams:"gram", tons:"ton", tonnes:"tonne", grains:"grain", drams:"dram", ounces:"ounce", poundmasses:"poundmass", hundredweights:"hundredweight", sticks:"stick", seconds:"second", minutes:"minute", hours:"hour", days:"day", radians:"rad", degrees:"deg", gradients:"grad", cycles:"cycle", amperes:"ampere", moles:"mole"};
  for (var A in M) {
    if (M.hasOwnProperty(A)) {
      var O = N[M[A]], T = Object.create(O);
      T.name = A, N[A] = T;
    }
  }
  N.lt = N.l, N.liter = N.litre, N.liters = N.litres, N.lb = N.lbm, t.PREFIXES = b, t.BASE_UNITS = E, t.UNITS = N, e.exports = t, n.isUnit = t.isUnit, n.isPlainUnit = t.isPlainUnit, n.parse = t.parse;
}, function(e, n, r) {
  function t(e, n) {
    this.math = e, this.doc = n;
  }
  var i = r(117), o = i.object, a = i.string;
  t.isHelp = function(e) {
    return e instanceof t;
  }, t.prototype.toString = function() {
    var e = this.doc || {}, n = "\n";
    if (e.name && (n += "Name: " + e.name + "\n\n"), e.category && (n += "Category: " + e.category + "\n\n"), e.description && (n += "Description:\n    " + e.description + "\n\n"), e.syntax && (n += "Syntax:\n    " + e.syntax.join("\n    ") + "\n\n"), e.examples) {
      var r = this.math.parser();
      n += "Examples:\n";
      for (var i = 0;i < e.examples.length;i++) {
        var o, s = e.examples[i];
        try {
          o = r.eval(s);
        } catch (u) {
          o = u;
        }
        n += "    " + s + "\n", !o || (o instanceof t || (n += "        " + a.format(o) + "\n"));
      }
      n += "\n";
    }
    return e.seealso && (n += "See also: " + e.seealso.join(", ") + "\n"), n;
  }, t.prototype.toJSON = function() {
    return o.extend({}, this.doc);
  }, e.exports = t, n.isHelp = t.isHelp;
}, function(e, n, r) {
  function t(e, n, r) {
    var o, a, u, f;
    if (0 >= n) {
      if (s(e[0])) {
        for (f = i(e), a = [], o = 0;o < f.length;o++) {
          a[o] = t(f[o], n - 1, r);
        }
        return a;
      }
      for (u = e[0], o = 1;o < e.length;o++) {
        u = r(u, e[o]);
      }
      return u;
    }
    for (a = [], o = 0;o < e.length;o++) {
      a[o] = t(e[o], n - 1, r);
    }
    return a;
  }
  function i(e) {
    var n, r, t = e.length, i = e[0].length, o = [];
    for (r = 0;i > r;r++) {
      var a = [];
      for (n = 0;t > n;n++) {
        a.push(e[n][r]);
      }
      o.push(a);
    }
    return o;
  }
  var o = r(117), a = r(10), s = o.array.isArray;
  o.string.isString;
  n.argsToArray = function(e) {
    var n;
    return 0 == e.length ? n = [] : 1 == e.length ? (n = e[0], n instanceof a && (n = n.valueOf()), s(n) || (n = [n])) : n = Array.prototype.slice.apply(e), n;
  }, n.isCollection = function(e) {
    return s(e) || e instanceof a;
  }, n.deepMap = function u(e, n) {
    return e && "function" == typeof e.map ? e.map(function(e) {
      return u(e, n);
    }) : n(e);
  }, n.deepMap2 = function f(e, n, r) {
    var t, i, o;
    if (s(e)) {
      if (s(n)) {
        if (e.length != n.length) {
          throw new RangeError("Dimension mismatch (" + e.length + " !\x3d " + n.length + ")");
        }
        for (t = [], i = e.length, o = 0;i > o;o++) {
          t[o] = f(e[o], n[o], r);
        }
      } else {
        if (n instanceof a) {
          return t = f(e, n.valueOf(), r), new a(t);
        }
        for (t = [], i = e.length, o = 0;i > o;o++) {
          t[o] = f(e[o], n, r);
        }
      }
    } else {
      if (e instanceof a) {
        return n instanceof a ? (t = f(e.valueOf(), n.valueOf(), r), new a(t)) : (t = f(e.valueOf(), n, r), new a(t));
      }
      if (s(n)) {
        for (t = [], i = n.length, o = 0;i > o;o++) {
          t[o] = f(e, n[o], r);
        }
      } else {
        if (n instanceof a) {
          return t = f(e, n.valueOf(), r), new a(t);
        }
        t = r(e, n);
      }
    }
    return t;
  }, n.reduce = function(e, n, r) {
    return e instanceof a ? new a(t(e.valueOf(), n, r)) : t(e, n, r);
  }, n.deepForEach = function c(e, n) {
    e instanceof a && (e = e.valueOf());
    for (var r = 0, t = e.length;t > r;r++) {
      var i = e[r];
      s(i) ? c(i, n) : n(i);
    }
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = (r(217), {});
    e.error = n, n.UnsupportedTypeError = function(n, r) {
      if (2 == arguments.length) {
        var t = e["typeof"](r);
        this.message = "Function " + n + "(" + t + ") not supported";
      } else {
        if (arguments.length > 2) {
          var i = Array.prototype.splice.call(arguments, 1), o = i.map(function(n) {
            return e["typeof"](n);
          });
          this.message = "Function " + n + "(" + o.join(", ") + ") not supported";
        } else {
          this.message = "Unsupported type of argument in function " + n;
        }
      }
      this.stack = (new Error).stack;
    }, n.UnsupportedTypeError.prototype = new TypeError, n.UnsupportedTypeError.prototype.constructor = TypeError, n.UnsupportedTypeError.prototype.name = "UnsupportedTypeError", n.ArgumentsError = function(e, n, r, t) {
      this.message = "Wrong number of arguments in function " + e + " (" + n + " provided, " + r + (void 0 != t ? "-" + t : "") + " expected)", this.stack = (new Error).stack;
    }, n.ArgumentsError.prototype = new Error, n.ArgumentsError.prototype.constructor = Error, n.ArgumentsError.prototype.name = "ArgumentError";
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(4), i = r(13), o = n.string.isString, a = i.isCollection;
    e.compile = function(n) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("compile", arguments.length, 1);
      }
      if (o(n)) {
        return t(n).compile(e);
      }
      if (a(n)) {
        return i.deepMap(n, function(n) {
          return t(n).compile(e);
        });
      }
      throw new TypeError("String, array, or matrix expected");
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(4), i = r(13), o = n.string.isString, a = i.isCollection;
    e.eval = function(n, r) {
      if (1 != arguments.length && 2 != arguments.length) {
        throw new e.error.ArgumentsError("eval", arguments.length, 1, 2);
      }
      if (r = r || {}, o(n)) {
        return t(n).compile(e).eval(r);
      }
      if (a(n)) {
        return i.deepMap(n, function(n) {
          return t(n).compile(e).eval(r);
        });
      }
      throw new TypeError("String, array, or matrix expected");
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(12);
    e.help = function(r) {
      if (1 != arguments.length) {
        throw new SyntaxError("Wrong number of arguments in function help (" + arguments.length + " provided, 1 expected)");
      }
      var t = null;
      if (r instanceof String || "string" == typeof r) {
        t = r;
      } else {
        var i;
        for (i in e) {
          if (e.hasOwnProperty(i) && r === e[i]) {
            t = i;
            break;
          }
        }
        if (!t) {
          for (i in e.type) {
            if (e.type.hasOwnProperty(i) && r === e.type[i]) {
              t = i;
              break;
            }
          }
        }
      }
      if (t) {
        var o = e.expression.docs[t];
        if (!o) {
          throw new Error('No documentation found on "' + t + '"');
        }
        return new n(e, o);
      }
      throw new Error('Could not find search term "' + r + '"');
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(4);
    e.parse = function() {
      return n.apply(n, arguments);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = (r(10), r(13)), a = n.number.isNumber, s = n["boolean"].isBoolean, u = i.isComplex, f = o.isCollection;
    e.abs = function c(n) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("abs", arguments.length, 1);
      }
      if (a(n)) {
        return Math.abs(n);
      }
      if (u(n)) {
        return Math.sqrt(n.re * n.re + n.im * n.im);
      }
      if (n instanceof t) {
        return n.abs();
      }
      if (f(n)) {
        return o.deepMap(n, c);
      }
      if (s(n)) {
        return Math.abs(n);
      }
      throw new e.error.UnsupportedTypeError("abs", n);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = (r(10), r(11)), a = r(13), s = n["boolean"].isBoolean, u = n.number.isNumber, f = n.number.toNumber, c = n.number.toBigNumber, l = n.string.isString, m = i.isComplex, p = o.isUnit, h = a.isCollection;
    e.add = function g(n, r) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("add", arguments.length, 2);
      }
      if (u(n)) {
        if (u(r)) {
          return n + r;
        }
        if (m(r)) {
          return new i(n + r.re, r.im);
        }
      }
      if (m(n)) {
        if (m(r)) {
          return new i(n.re + r.re, n.im + r.im);
        }
        if (u(r)) {
          return new i(n.re + r, n.im);
        }
      }
      if (p(n) && p(r)) {
        if (!n.equalBase(r)) {
          throw new Error("Units do not match");
        }
        if (null == n.value) {
          throw new Error("Unit on left hand side of operator + has an undefined value");
        }
        if (null == r.value) {
          throw new Error("Unit on right hand side of operator + has an undefined value");
        }
        var o = n.clone();
        return o.value += r.value, o.fixPrefix = !1, o;
      }
      if (n instanceof t) {
        return u(r) ? r = c(r) : s(r) && (r = new t(r ? 1 : 0)), r instanceof t ? n.plus(r) : g(f(n), r);
      }
      if (r instanceof t) {
        return u(n) ? n = c(n) : s(n) && (n = new t(n ? 1 : 0)), n instanceof t ? n.plus(r) : g(n, f(r));
      }
      if (l(n) || l(r)) {
        return n + r;
      }
      if (h(n) || h(r)) {
        return a.deepMap2(n, r, g);
      }
      if (s(n)) {
        return g(+n, r);
      }
      if (s(r)) {
        return g(n, +r);
      }
      throw new e.error.UnsupportedTypeError("add", n, r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(13), a = n.number.isNumber, s = n["boolean"].isBoolean, u = o.isCollection, f = i.isComplex;
    e.ceil = function c(n) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("ceil", arguments.length, 1);
      }
      if (a(n)) {
        return Math.ceil(n);
      }
      if (f(n)) {
        return new i(Math.ceil(n.re), Math.ceil(n.im));
      }
      if (n instanceof t) {
        return n.ceil();
      }
      if (u(n)) {
        return o.deepMap(n, c);
      }
      if (s(n)) {
        return Math.ceil(n);
      }
      throw new e.error.UnsupportedTypeError("ceil", n);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(13), a = n.number.isNumber, s = n["boolean"].isBoolean, u = i.isComplex, f = o.isCollection;
    e.cube = function c(n) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("cube", arguments.length, 1);
      }
      if (a(n)) {
        return n * n * n;
      }
      if (u(n)) {
        return e.multiply(e.multiply(n, n), n);
      }
      if (n instanceof t) {
        return n.times(n).times(n);
      }
      if (f(n)) {
        return o.deepMap(n, c);
      }
      if (s(n)) {
        return c(+n);
      }
      throw new e.error.UnsupportedTypeError("cube", n);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    function n(e, n) {
      var r = n.re * n.re + n.im * n.im;
      return 0 != r ? new o((e.re * n.re + e.im * n.im) / r, (e.im * n.re - e.re * n.im) / r) : new o(0 != e.re ? e.re / 0 : 0, 0 != e.im ? e.im / 0 : 0);
    }
    var t = r(117), i = r(220), o = r(7), a = (r(10), r(11)), s = r(13), u = t.number.isNumber, f = t.number.toNumber, c = t.number.toBigNumber, l = t["boolean"].isBoolean, m = o.isComplex, p = a.isUnit, h = s.isCollection;
    e.divide = function g(r, t) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("divide", arguments.length, 2);
      }
      if (u(r)) {
        if (u(t)) {
          return r / t;
        }
        if (m(t)) {
          return n(new o(r, 0), t);
        }
      }
      if (m(r)) {
        if (m(t)) {
          return n(r, t);
        }
        if (u(t)) {
          return n(r, new o(t, 0));
        }
      }
      if (r instanceof i) {
        return u(t) ? t = c(t) : l(t) && (t = new i(t ? 1 : 0)), t instanceof i ? r.div(t) : g(f(r), t);
      }
      if (t instanceof i) {
        return u(r) ? r = c(r) : l(r) && (r = new i(r ? 1 : 0)), r instanceof i ? r.div(t) : g(r, f(t));
      }
      if (p(r) && u(t)) {
        var a = r.clone();
        return a.value /= t, a;
      }
      if (h(r)) {
        return h(t) ? e.multiply(r, e.inv(t)) : s.deepMap2(r, t, g);
      }
      if (h(t)) {
        return e.multiply(r, e.inv(t));
      }
      if (l(r)) {
        return g(+r, t);
      }
      if (l(t)) {
        return g(r, +t);
      }
      throw new e.error.UnsupportedTypeError("divide", r, t);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(13);
    e.edivide = function(r, t) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("edivide", arguments.length, 2);
      }
      return n.deepMap2(r, t, e.divide);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(13);
    e.emultiply = function(r, t) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("emultiply", arguments.length, 2);
      }
      return n.deepMap2(r, t, e.multiply);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(13);
    e.epow = function(r, t) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("epow", arguments.length, 2);
      }
      return n.deepMap2(r, t, e.pow);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(11), a = r(13), s = n.number.isNumber, u = n.number.toNumber, f = n.number.toBigNumber, c = n["boolean"].isBoolean, l = n.string.isString, m = i.isComplex, p = o.isUnit, h = a.isCollection;
    e.equal = function g(n, r) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("equal", arguments.length, 2);
      }
      if (s(n)) {
        if (s(r)) {
          return n == r;
        }
        if (m(r)) {
          return n == r.re && 0 == r.im;
        }
      }
      if (m(n)) {
        if (s(r)) {
          return n.re == r && 0 == n.im;
        }
        if (m(r)) {
          return n.re == r.re && n.im == r.im;
        }
      }
      if (n instanceof t) {
        return s(r) ? r = f(r) : c(r) && (r = new t(r ? 1 : 0)), r instanceof t ? n.eq(r) : g(u(n), r);
      }
      if (r instanceof t) {
        return s(n) ? n = f(n) : c(n) && (n = new t(n ? 1 : 0)), n instanceof t ? n.eq(r) : g(n, u(r));
      }
      if (p(n) && p(r)) {
        if (!n.equalBase(r)) {
          throw new Error("Cannot compare units with different base");
        }
        return n.value == r.value;
      }
      if (l(n) || l(r)) {
        return n == r;
      }
      if (h(n) || h(r)) {
        return a.deepMap2(n, r, g);
      }
      if (c(n)) {
        return g(+n, r);
      }
      if (c(r)) {
        return g(n, +r);
      }
      throw new e.error.UnsupportedTypeError("equal", n, r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = (r(10), r(13)), a = n.number.isNumber, s = n["boolean"].isBoolean, u = i.isComplex, f = o.isCollection;
    e.exp = function c(r) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("exp", arguments.length, 1);
      }
      if (a(r)) {
        return Math.exp(r);
      }
      if (u(r)) {
        var l = Math.exp(r.re);
        return new i(l * Math.cos(r.im), l * Math.sin(r.im));
      }
      if (r instanceof t) {
        return c(n.number.toNumber(r));
      }
      if (f(r)) {
        return o.deepMap(r, c);
      }
      if (s(r)) {
        return Math.exp(r);
      }
      throw new e.error.UnsupportedTypeError("exp", r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(13), a = n.number.isNumber, s = n["boolean"].isBoolean, u = i.isComplex, f = o.isCollection;
    e.fix = function c(n) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("fix", arguments.length, 1);
      }
      if (a(n)) {
        return n > 0 ? Math.floor(n) : Math.ceil(n);
      }
      if (u(n)) {
        return new i(n.re > 0 ? Math.floor(n.re) : Math.ceil(n.re), n.im > 0 ? Math.floor(n.im) : Math.ceil(n.im));
      }
      if (n instanceof t) {
        return n.isNegative() ? n.ceil() : n.floor();
      }
      if (f(n)) {
        return o.deepMap(n, c);
      }
      if (s(n)) {
        return c(+n);
      }
      throw new e.error.UnsupportedTypeError("fix", n);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(13), a = n.number.isNumber, s = n["boolean"].isBoolean, u = i.isComplex, f = o.isCollection;
    e.floor = function c(n) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("floor", arguments.length, 1);
      }
      if (a(n)) {
        return Math.floor(n);
      }
      if (u(n)) {
        return new i(Math.floor(n.re), Math.floor(n.im));
      }
      if (n instanceof t) {
        return n.floor();
      }
      if (f(n)) {
        return o.deepMap(n, c);
      }
      if (s(n)) {
        return c(+n);
      }
      throw new e.error.UnsupportedTypeError("floor", n);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(13), o = n.number.isNumber, a = n.number.toNumber, s = n["boolean"].isBoolean, u = n.number.isInteger, f = i.isCollection;
    e.gcd = function c() {
      var n, r = arguments[0], l = arguments[1];
      if (2 == arguments.length) {
        if (o(r) && o(l)) {
          if (!u(r) || !u(l)) {
            throw new Error("Parameters in function gcd must be integer numbers");
          }
          for (;0 != l;) {
            n = r % l, r = l, l = n;
          }
          return 0 > r ? -r : r;
        }
        if (f(r) || f(l)) {
          return i.deepMap2(r, l, c);
        }
        if (r instanceof t) {
          return c(a(r), l);
        }
        if (l instanceof t) {
          return c(r, a(l));
        }
        if (s(r)) {
          return c(+r, l);
        }
        if (s(l)) {
          return c(r, +l);
        }
        throw new e.error.UnsupportedTypeError("gcd", r, l);
      }
      if (arguments.length > 2) {
        for (var m = 1;m < arguments.length;m++) {
          r = c(r, arguments[m]);
        }
        return r;
      }
      throw new SyntaxError("Function gcd expects two or more arguments");
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(11), a = r(13), s = n.number.isNumber, u = n.number.toNumber, f = n.number.toBigNumber, c = n["boolean"].isBoolean, l = n.string.isString, m = i.isComplex, p = o.isUnit, h = a.isCollection;
    e.larger = function g(n, r) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("larger", arguments.length, 2);
      }
      if (s(n) && s(r)) {
        return n > r;
      }
      if (n instanceof t) {
        return s(r) ? r = f(r) : c(r) && (r = new t(r ? 1 : 0)), r instanceof t ? n.gt(r) : g(u(n), r);
      }
      if (r instanceof t) {
        return s(n) ? n = f(n) : c(n) && (n = new t(n ? 1 : 0)), n instanceof t ? n.gt(r) : g(n, u(r));
      }
      if (p(n) && p(r)) {
        if (!n.equalBase(r)) {
          throw new Error("Cannot compare units with different base");
        }
        return n.value > r.value;
      }
      if (l(n) || l(r)) {
        return n > r;
      }
      if (h(n) || h(r)) {
        return a.deepMap2(n, r, g);
      }
      if (c(n)) {
        return g(+n, r);
      }
      if (c(r)) {
        return g(n, +r);
      }
      if (m(n) || m(r)) {
        throw new TypeError("No ordering relation is defined for complex numbers");
      }
      throw new e.error.UnsupportedTypeError("larger", n, r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(11), a = r(13), s = n.number.isNumber, u = n.number.toNumber, f = n.number.toBigNumber, c = n["boolean"].isBoolean, l = n.string.isString, m = i.isComplex, p = o.isUnit, h = a.isCollection;
    e.largereq = function g(n, r) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("largereq", arguments.length, 2);
      }
      if (s(n) && s(r)) {
        return n >= r;
      }
      if (n instanceof t) {
        return s(r) ? r = f(r) : c(r) && (r = new t(r ? 1 : 0)), r instanceof t ? n.gte(r) : g(u(n), r);
      }
      if (r instanceof t) {
        return s(n) ? n = f(n) : c(n) && (n = new t(n ? 1 : 0)), n instanceof t ? n.gte(r) : g(n, u(r));
      }
      if (p(n) && p(r)) {
        if (!n.equalBase(r)) {
          throw new Error("Cannot compare units with different base");
        }
        return n.value >= r.value;
      }
      if (l(n) || l(r)) {
        return n >= r;
      }
      if (h(n) || h(r)) {
        return a.deepMap2(n, r, g);
      }
      if (c(n)) {
        return g(+n, r);
      }
      if (c(r)) {
        return g(n, +r);
      }
      if (m(n) || m(r)) {
        throw new TypeError("No ordering relation is defined for complex numbers");
      }
      throw new e.error.UnsupportedTypeError("largereq", n, r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(13), o = n.number.isNumber, a = n.number.toNumber, s = n["boolean"].isBoolean, u = n.number.isInteger, f = i.isCollection;
    e.lcm = function c() {
      var n, r = arguments[0], l = arguments[1];
      if (2 == arguments.length) {
        if (o(r) && o(l)) {
          if (!u(r) || !u(l)) {
            throw new Error("Parameters in function lcm must be integer numbers");
          }
          if (0 == r || 0 == l) {
            return 0;
          }
          for (var m = r * l;0 != l;) {
            n = l, l = r % n, r = n;
          }
          return Math.abs(m / r);
        }
        if (f(r) || f(l)) {
          return i.deepMap2(r, l, c);
        }
        if (s(r)) {
          return c(+r, l);
        }
        if (s(l)) {
          return c(r, +l);
        }
        if (r instanceof t) {
          return c(a(r), l);
        }
        if (l instanceof t) {
          return c(r, a(l));
        }
        throw new e.error.UnsupportedTypeError("lcm", r, l);
      }
      if (arguments.length > 2) {
        for (var p = 1;p < arguments.length;p++) {
          r = c(r, arguments[p]);
        }
        return r;
      }
      throw new SyntaxError("Function lcm expects two or more arguments");
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(13), a = n.number.isNumber, s = n["boolean"].isBoolean, u = i.isComplex, f = o.isCollection;
    e.log = function c(r, l) {
      if (1 == arguments.length) {
        if (a(r)) {
          return r >= 0 ? Math.log(r) : c(new i(r, 0));
        }
        if (u(r)) {
          return new i(Math.log(Math.sqrt(r.re * r.re + r.im * r.im)), Math.atan2(r.im, r.re));
        }
        if (r instanceof t) {
          return c(n.number.toNumber(r));
        }
        if (f(r)) {
          return o.deepMap(r, c);
        }
        if (s(r)) {
          return c(+r);
        }
        throw new e.error.UnsupportedTypeError("log", r);
      }
      if (2 == arguments.length) {
        return e.divide(c(r), c(l));
      }
      throw new e.error.ArgumentsError("log", arguments.length, 1, 2);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(13), a = n.number.isNumber, s = n["boolean"].isBoolean, u = i.isComplex, f = o.isCollection;
    e.log10 = function c(r) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("log10", arguments.length, 1);
      }
      if (a(r)) {
        return r >= 0 ? Math.log(r) / Math.LN10 : c(new i(r, 0));
      }
      if (r instanceof t) {
        return c(n.number.toNumber(r));
      }
      if (u(r)) {
        return new i(Math.log(Math.sqrt(r.re * r.re + r.im * r.im)) / Math.LN10, Math.atan2(r.im, r.re) / Math.LN10);
      }
      if (f(r)) {
        return o.deepMap(r, c);
      }
      if (s(r)) {
        return c(+r);
      }
      throw new e.error.UnsupportedTypeError("log10", r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    function n(e, n) {
      if (n > 0) {
        return e > 0 ? e % n : 0 == e ? 0 : e - n * Math.floor(e / n);
      }
      if (0 == n) {
        return e;
      }
      throw new Error("Cannot calculate mod for a negative divisor");
    }
    var t = r(117), i = r(220), o = r(13), a = t.number.isNumber, s = t.number.toNumber, u = t.number.toBigNumber, f = t["boolean"].isBoolean, c = o.isCollection;
    e.mod = function l(r, t) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("mod", arguments.length, 2);
      }
      if (a(r) && a(t)) {
        return n(r, t);
      }
      if (r instanceof i) {
        return a(t) ? t = u(t) : f(t) && (t = new i(t ? 1 : 0)), t instanceof i ? r.mod(t) : l(s(r), t);
      }
      if (t instanceof i) {
        return a(r) ? r = u(r) : f(r) && (r = new i(r ? 1 : 0)), r instanceof i ? r.mod(t) : l(r, s(t));
      }
      if (c(r) || c(t)) {
        return o.deepMap2(r, t, l);
      }
      if (f(r)) {
        return l(+r, t);
      }
      if (f(t)) {
        return l(r, +t);
      }
      throw new e.error.UnsupportedTypeError("mod", r, t);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    function n(n, r) {
      for (var t = [], i = n.length, o = r[0].length, a = n[0].length, s = 0;i > s;s++) {
        t[s] = [];
        for (var u = 0;o > u;u++) {
          for (var f = null, c = 0;a > c;c++) {
            var l = e.multiply(n[s][c], r[c][u]);
            f = null === f ? l : e.add(f, l);
          }
          t[s][u] = f;
        }
      }
      return t;
    }
    function t(n, r) {
      for (var t = [], i = r.length, o = r[0].length, a = 0;o > a;a++) {
        for (var s = null, u = 0;i > u;u++) {
          var f = e.multiply(n[u], r[u][a]);
          s = 0 === u ? f : e.add(s, f);
        }
        t[a] = s;
      }
      return t;
    }
    function i(n, r) {
      for (var t = [], i = n.length, o = n[0].length, a = 0;i > a;a++) {
        for (var s = null, u = 0;o > u;u++) {
          var f = e.multiply(n[a][u], r[u]);
          s = 0 === u ? f : e.add(s, f);
        }
        t[a] = s;
      }
      return t;
    }
    function o(n, r) {
      var t = n.length, i = null;
      if (t) {
        i = 0;
        for (var o = 0, a = n.length;a > o;o++) {
          i = e.add(i, e.multiply(n[o], r[o]));
        }
      }
      return i;
    }
    function a(e, n) {
      return 0 == e.im ? 0 == n.im ? new f(e.re * n.re, 0) : 0 == n.re ? new f(0, e.re * n.im) : new f(e.re * n.re, e.re * n.im) : 0 == e.re ? 0 == n.im ? new f(0, e.im * n.re) : 0 == n.re ? new f(-e.im * n.im, 0) : new f(-e.im * n.im, e.im * n.re) : 0 == n.im ? new f(e.re * n.re, e.im * n.re) : 0 == n.re ? new f(-e.im * n.im, e.re * n.im) : new f(e.re * n.re - e.im * n.im, e.re * n.im + e.im * n.re);
    }
    var s = r(117), u = r(220), f = r(7), c = r(10), l = r(11), m = r(13), p = s.array, h = s.number.isNumber, g = s.number.toNumber, d = s.number.toBigNumber, x = s["boolean"].isBoolean, v = f.isComplex, w = Array.isArray, b = l.isUnit;
    e.multiply = function y(r, s) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("multiply", arguments.length, 2);
      }
      if (h(r)) {
        if (h(s)) {
          return r * s;
        }
        if (v(s)) {
          return a(new f(r, 0), s);
        }
        if (b(s)) {
          return res = s.clone(), res.value *= r, res;
        }
      }
      if (v(r)) {
        if (h(s)) {
          return a(r, new f(s, 0));
        }
        if (v(s)) {
          return a(r, s);
        }
      }
      if (r instanceof u) {
        return h(s) ? s = d(s) : x(s) && (s = new u(s ? 1 : 0)), s instanceof u ? r.times(s) : y(g(r), s);
      }
      if (s instanceof u) {
        return h(r) ? r = d(r) : x(r) && (r = new u(r ? 1 : 0)), r instanceof u ? r.times(s) : y(r, g(s));
      }
      if (b(r) && h(s)) {
        return res = r.clone(), res.value *= s, res;
      }
      if (w(r)) {
        if (w(s)) {
          var l = p.size(r), E = p.size(s);
          if (1 == l.length) {
            if (1 == E.length) {
              if (l[0] != E[0]) {
                throw new RangeError("Dimensions mismatch in multiplication. Length of A must match length of B (A is " + l[0] + ", B is " + E[0] + l[0] + " !\x3d " + E[0] + ")");
              }
              return o(r, s);
            }
            if (2 == E.length) {
              if (l[0] != E[0]) {
                throw new RangeError("Dimensions mismatch in multiplication. Length of A must match rows of B (A is " + l[0] + ", B is " + E[0] + "x" + E[1] + ", " + l[0] + " !\x3d " + E[0] + ")");
              }
              return t(r, s);
            }
            throw new Error("Can only multiply a 1 or 2 dimensional matrix (B has " + E.length + " dimensions)");
          }
          if (2 == l.length) {
            if (1 == E.length) {
              if (l[1] != E[0]) {
                throw new RangeError("Dimensions mismatch in multiplication. Columns of A must match length of B (A is " + l[0] + "x" + l[0] + ", B is " + E[0] + ", " + l[1] + " !\x3d " + E[0] + ")");
              }
              return i(r, s);
            }
            if (2 == E.length) {
              if (l[1] != E[0]) {
                throw new RangeError("Dimensions mismatch in multiplication. Columns of A must match rows of B (A is " + l[0] + "x" + l[1] + ", B is " + E[0] + "x" + E[1] + ", " + l[1] + " !\x3d " + E[0] + ")");
              }
              return n(r, s);
            }
            throw new Error("Can only multiply a 1 or 2 dimensional matrix (B has " + E.length + " dimensions)");
          }
          throw new Error("Can only multiply a 1 or 2 dimensional matrix (A has " + l.length + " dimensions)");
        }
        return s instanceof c ? new c(y(r, s.valueOf())) : m.deepMap2(r, s, y);
      }
      if (r instanceof c) {
        return new c(s instanceof c ? y(r.valueOf(), s.valueOf()) : y(r.valueOf(), s));
      }
      if (w(s)) {
        return m.deepMap2(r, s, y);
      }
      if (s instanceof c) {
        return new c(m.deepMap2(r, s.valueOf(), y));
      }
      if (x(r)) {
        return y(+r, s);
      }
      if (x(s)) {
        return y(r, +s);
      }
      throw new e.error.UnsupportedTypeError("multiply", r, s);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    function n(n, r) {
      var t = e.log(n), i = e.multiply(t, r);
      return e.exp(i);
    }
    var t = r(117), i = r(220), o = r(7), a = r(10), s = (r(13), t.array), u = t.number.isNumber, f = t.number.toNumber, c = t.number.toBigNumber, l = t["boolean"].isBoolean, m = Array.isArray, p = t.number.isInteger, h = o.isComplex;
    e.pow = function g(r, t) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("pow", arguments.length, 2);
      }
      if (u(r)) {
        if (u(t)) {
          return p(t) || r >= 0 ? Math.pow(r, t) : n(new o(r, 0), new o(t, 0));
        }
        if (h(t)) {
          return n(new o(r, 0), t);
        }
      }
      if (h(r)) {
        if (u(t)) {
          return n(r, new o(t, 0));
        }
        if (h(t)) {
          return n(r, t);
        }
      }
      if (r instanceof i) {
        return u(t) ? t = c(t) : l(t) && (t = new i(t ? 1 : 0)), t instanceof i ? r.pow(t) : g(f(r), t);
      }
      if (t instanceof i) {
        return u(r) ? r = c(r) : l(r) && (r = new i(r ? 1 : 0)), r instanceof i ? r.pow(t) : g(r, f(t));
      }
      if (m(r)) {
        if (!u(t) || (!p(t) || 0 > t)) {
          throw new TypeError("For A^b, b must be a positive integer (value is " + t + ")");
        }
        var d = s.size(r);
        if (2 != d.length) {
          throw new Error("For A^b, A must be 2 dimensional (A has " + d.length + " dimensions)");
        }
        if (d[0] != d[1]) {
          throw new Error("For A^b, A must be square (size is " + d[0] + "x" + d[1] + ")");
        }
        for (var x = e.eye(d[0]).valueOf(), v = r;t >= 1;) {
          1 == (1 & t) && (x = e.multiply(v, x)), t >>= 1, v = e.multiply(v, v);
        }
        return x;
      }
      if (r instanceof a) {
        return new a(g(r.valueOf(), t));
      }
      if (l(r)) {
        return g(+r, t);
      }
      if (l(t)) {
        return g(r, +t);
      }
      throw new e.error.UnsupportedTypeError("pow", r, t);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    function n(e, n) {
      if (n) {
        var r = Math.pow(10, n);
        return Math.round(e * r) / r;
      }
      return Math.round(e);
    }
    var t = r(117), i = r(220), o = r(7), a = r(13), s = t.number.isNumber, u = t.number.isInteger, f = t["boolean"].isBoolean, c = o.isComplex, l = a.isCollection;
    e.round = function m(r, t) {
      if (1 != arguments.length && 2 != arguments.length) {
        throw new e.error.ArgumentsError("round", arguments.length, 1, 2);
      }
      if (void 0 == t) {
        if (s(r)) {
          return Math.round(r);
        }
        if (c(r)) {
          return new o(Math.round(r.re), Math.round(r.im));
        }
        if (r instanceof i) {
          return r.round();
        }
        if (l(r)) {
          return a.deepMap(r, m);
        }
        if (f(r)) {
          return Math.round(r);
        }
        throw new e.error.UnsupportedTypeError("round", r);
      }
      if (t instanceof i && (t = parseFloat(t.valueOf())), !s(t) || !u(t)) {
        throw new TypeError("Number of decimals in function round must be an integer");
      }
      if (0 > t || t > 9) {
        throw new Error("Number of decimals in function round must be in te range of 0-9");
      }
      if (s(r)) {
        return n(r, t);
      }
      if (c(r)) {
        return new o(n(r.re, t), n(r.im, t));
      }
      if (r instanceof i && s(t)) {
        return r.round(t);
      }
      if (l(r) || l(t)) {
        return a.deepMap2(r, t, m);
      }
      if (f(r)) {
        return m(+r, t);
      }
      if (f(t)) {
        return m(r, +t);
      }
      throw new e.error.UnsupportedTypeError("round", r, t);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(13), a = n.number, s = n.number.isNumber, u = n["boolean"].isBoolean, f = i.isComplex, c = o.isCollection;
    e.sign = function l(n) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("sign", arguments.length, 1);
      }
      if (s(n)) {
        return a.sign(n);
      }
      if (f(n)) {
        var r = Math.sqrt(n.re * n.re + n.im * n.im);
        return new i(n.re / r, n.im / r);
      }
      if (n instanceof t) {
        return new t(n.cmp(0));
      }
      if (c(n)) {
        return o.deepMap(n, l);
      }
      if (u(n)) {
        return a.sign(n);
      }
      throw new e.error.UnsupportedTypeError("sign", n);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(11), a = r(13), s = n.number.isNumber, u = n.number.toNumber, f = n.number.toBigNumber, c = n["boolean"].isBoolean, l = n.string.isString, m = i.isComplex, p = o.isUnit, h = a.isCollection;
    e.smaller = function g(n, r) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("smaller", arguments.length, 2);
      }
      if (s(n) && s(r)) {
        return r > n;
      }
      if (n instanceof t) {
        return s(r) ? r = f(r) : c(r) && (r = new t(r ? 1 : 0)), r instanceof t ? n.lt(r) : g(u(n), r);
      }
      if (r instanceof t) {
        return s(n) ? n = f(n) : c(n) && (n = new t(n ? 1 : 0)), n instanceof t ? n.lt(r) : g(n, u(r));
      }
      if (p(n) && p(r)) {
        if (!n.equalBase(r)) {
          throw new Error("Cannot compare units with different base");
        }
        return n.value < r.value;
      }
      if (l(n) || l(r)) {
        return r > n;
      }
      if (h(n) || h(r)) {
        return a.deepMap2(n, r, g);
      }
      if (c(n)) {
        return g(+n, r);
      }
      if (c(r)) {
        return g(n, +r);
      }
      if (m(n) || m(r)) {
        throw new TypeError("No ordering relation is defined for complex numbers");
      }
      throw new e.error.UnsupportedTypeError("smaller", n, r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(11), a = r(13), s = n.number.isNumber, u = n.number.toNumber, f = n.number.toBigNumber, c = n["boolean"].isBoolean, l = n.string.isString, m = i.isComplex, p = o.isUnit, h = a.isCollection;
    e.smallereq = function g(n, r) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("smallereq", arguments.length, 2);
      }
      if (s(n) && s(r)) {
        return r >= n;
      }
      if (n instanceof t) {
        return s(r) ? r = f(r) : c(r) && (r = new t(r ? 1 : 0)), r instanceof t ? n.lte(r) : g(u(n), r);
      }
      if (r instanceof t) {
        return s(n) ? n = f(n) : c(n) && (n = new t(n ? 1 : 0)), n instanceof t ? n.lte(r) : g(n, u(r));
      }
      if (p(n) && p(r)) {
        if (!n.equalBase(r)) {
          throw new Error("Cannot compare units with different base");
        }
        return n.value <= r.value;
      }
      if (l(n) || l(r)) {
        return r >= n;
      }
      if (h(n) || h(r)) {
        return a.deepMap2(n, r, g);
      }
      if (c(n)) {
        return g(+n, r);
      }
      if (c(r)) {
        return g(n, +r);
      }
      if (m(n) || m(r)) {
        throw new TypeError("No ordering relation is defined for complex numbers");
      }
      throw new e.error.UnsupportedTypeError("smallereq", n, r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(13), a = n.number.isNumber, s = n["boolean"].isBoolean, u = i.isComplex, f = o.isCollection;
    e.sqrt = function c(n) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("sqrt", arguments.length, 1);
      }
      if (a(n)) {
        return n >= 0 ? Math.sqrt(n) : c(new i(n, 0));
      }
      if (u(n)) {
        var r = Math.sqrt(n.re * n.re + n.im * n.im);
        return n.im >= 0 ? new i(0.5 * Math.sqrt(2 * (r + n.re)), 0.5 * Math.sqrt(2 * (r - n.re))) : new i(0.5 * Math.sqrt(2 * (r + n.re)), -0.5 * Math.sqrt(2 * (r - n.re)));
      }
      if (n instanceof t) {
        return n.sqrt();
      }
      if (f(n)) {
        return o.deepMap(n, c);
      }
      if (s(n)) {
        return c(+n);
      }
      throw new e.error.UnsupportedTypeError("sqrt", n);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(13), a = n.number.isNumber, s = n["boolean"].isBoolean, u = i.isComplex, f = o.isCollection;
    e.square = function c(n) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("square", arguments.length, 1);
      }
      if (a(n)) {
        return n * n;
      }
      if (u(n)) {
        return e.multiply(n, n);
      }
      if (n instanceof t) {
        return n.times(n);
      }
      if (f(n)) {
        return o.deepMap(n, c);
      }
      if (s(n)) {
        return n * n;
      }
      throw new e.error.UnsupportedTypeError("square", n);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = (r(10), r(11)), a = r(13), s = n.number.toNumber, u = n.number.toBigNumber, f = n["boolean"].isBoolean, c = n.number.isNumber, l = i.isComplex, m = o.isUnit, p = a.isCollection;
    e.subtract = function h(n, r) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("subtract", arguments.length, 2);
      }
      if (c(n)) {
        if (c(r)) {
          return n - r;
        }
        if (l(r)) {
          return new i(n - r.re, -r.im);
        }
      } else {
        if (l(n)) {
          if (c(r)) {
            return new i(n.re - r, n.im);
          }
          if (l(r)) {
            return new i(n.re - r.re, n.im - r.im);
          }
        }
      }
      if (n instanceof t) {
        return c(r) ? r = u(r) : f(r) && (r = new t(r ? 1 : 0)), r instanceof t ? n.minus(r) : h(s(n), r);
      }
      if (r instanceof t) {
        return c(n) ? n = u(n) : f(n) && (n = new t(n ? 1 : 0)), n instanceof t ? n.minus(r) : h(n, s(r));
      }
      if (m(n) && m(r)) {
        if (!n.equalBase(r)) {
          throw new Error("Units do not match");
        }
        if (null == n.value) {
          throw new Error("Unit on left hand side of operator - has an undefined value");
        }
        if (null == r.value) {
          throw new Error("Unit on right hand side of operator - has an undefined value");
        }
        var o = n.clone();
        return o.value -= r.value, o.fixPrefix = !1, o;
      }
      if (p(n) || p(r)) {
        return a.deepMap2(n, r, h);
      }
      if (f(n)) {
        return h(+n, r);
      }
      if (f(r)) {
        return h(n, +r);
      }
      throw new e.error.UnsupportedTypeError("subtract", n, r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(11), a = r(13), s = n.number.isNumber, u = n["boolean"].isBoolean, f = i.isComplex, c = o.isUnit, l = a.isCollection;
    e.unary = function m(n) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("unary", arguments.length, 1);
      }
      if (s(n)) {
        return-n;
      }
      if (f(n)) {
        return new i(-n.re, -n.im);
      }
      if (n instanceof t) {
        return n.neg();
      }
      if (c(n)) {
        var r = n.clone();
        return r.value = -n.value, r;
      }
      if (l(n)) {
        return a.deepMap(n, m);
      }
      if (u(n)) {
        return-n;
      }
      throw new e.error.UnsupportedTypeError("unary", n);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(11), a = r(13), s = n.number.isNumber, u = n.number.toNumber, f = n.number.toBigNumber, c = n["boolean"].isBoolean, l = n.string.isString, m = i.isComplex, p = o.isUnit, h = a.isCollection;
    e.unequal = function g(n, r) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("unequal", arguments.length, 2);
      }
      if (s(n)) {
        if (s(r)) {
          return n != r;
        }
        if (m(r)) {
          return n != r.re || 0 != r.im;
        }
      }
      if (m(n)) {
        if (s(r)) {
          return n.re != r || 0 != n.im;
        }
        if (m(r)) {
          return n.re != r.re || n.im != r.im;
        }
      }
      if (n instanceof t) {
        return s(r) ? r = f(r) : c(r) && (r = new t(r ? 1 : 0)), r instanceof t ? !n.eq(r) : g(u(n), r);
      }
      if (r instanceof t) {
        return s(n) ? n = f(n) : c(n) && (n = new t(n ? 1 : 0)), n instanceof t ? !n.eq(r) : g(n, u(r));
      }
      if (p(n) && p(r)) {
        if (!n.equalBase(r)) {
          throw new Error("Cannot compare units with different base");
        }
        return n.value != r.value;
      }
      if (l(n) || l(r)) {
        return n != r;
      }
      if (h(n) || h(r)) {
        return a.deepMap2(n, r, g);
      }
      if (c(n)) {
        return g(+n, r);
      }
      if (c(r)) {
        return g(n, +r);
      }
      throw new e.error.UnsupportedTypeError("unequal", n, r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    function n(e, n) {
      for (var r, t, i, o = 0, a = 1, s = 1, u = 0;n;) {
        t = Math.floor(e / n), i = e % n, r = o, o = a - t * o, a = r, r = s, s = u - t * s, u = r, e = n, n = i;
      }
      return 0 > e ? [-e, e ? -a : 0, -u] : [e, e ? a : 0, u];
    }
    var t = r(117), i = r(220), o = t.number.toNumber, a = t.number.isNumber, s = t["boolean"].isBoolean, u = t.number.isInteger;
    e.xgcd = function f(r, t) {
      if (2 == arguments.length) {
        if (a(r) && a(t)) {
          if (!u(r) || !u(t)) {
            throw new Error("Parameters in function xgcd must be integer numbers");
          }
          return n(r, t);
        }
        if (r instanceof i) {
          return f(o(r), t);
        }
        if (t instanceof i) {
          return f(r, o(t));
        }
        if (s(r)) {
          return f(+r, t);
        }
        if (s(t)) {
          return f(r, +t);
        }
        throw new e.error.UnsupportedTypeError("xgcd", r, t);
      }
      throw new SyntaxError("Function xgcd expects two arguments");
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(13), a = n.number.isNumber, s = n["boolean"].isBoolean, u = o.isCollection, f = i.isComplex;
    e.arg = function c(r) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("arg", arguments.length, 1);
      }
      if (a(r)) {
        return Math.atan2(0, r);
      }
      if (f(r)) {
        return Math.atan2(r.im, r.re);
      }
      if (u(r)) {
        return o.deepMap(r, c);
      }
      if (s(r)) {
        return c(+r);
      }
      if (r instanceof t) {
        return c(n.number.toNumber(r));
      }
      throw new e.error.UnsupportedTypeError("arg", r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(13), a = n.object, s = n.number.isNumber, u = n["boolean"].isBoolean, f = o.isCollection, c = i.isComplex;
    e.conj = function l(n) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("conj", arguments.length, 1);
      }
      return s(n) ? n : n instanceof t ? new t(n) : c(n) ? new i(n.re, -n.im) : f(n) ? o.deepMap(n, l) : u(n) ? +n : a.clone(n);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(13), a = n.object, s = n.number.isNumber, u = n["boolean"].isBoolean, f = o.isCollection, c = i.isComplex;
    e.re = function l(n) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("re", arguments.length, 1);
      }
      return s(n) ? n : n instanceof t ? new t(n) : c(n) ? n.re : f(n) ? o.deepMap(n, l) : u(n) ? +n : a.clone(n);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(13), a = n.number.isNumber, s = n["boolean"].isBoolean, u = o.isCollection, f = i.isComplex;
    e.im = function c(n) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("im", arguments.length, 1);
      }
      return a(n) ? 0 : n instanceof t ? new t(0) : f(n) ? n.im : u(n) ? o.deepMap(n, c) : s(n) ? 0 : 0;
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(13), o = i.isCollection, a = n.number.isNumber, s = n.string.isString, u = n["boolean"].isBoolean;
    "function" != typeof t.prototype.clone && (t.prototype.clone = function() {
      return new t(this);
    }), e.bignumber = function f(n) {
      if (arguments.length > 1) {
        throw new e.error.ArgumentsError("bignumber", arguments.length, 0, 1);
      }
      if (n instanceof t || (a(n) || s(n))) {
        return new t(n);
      }
      if (u(n)) {
        return new t(+n);
      }
      if (o(n)) {
        return i.deepMap(n, f);
      }
      if (0 == arguments.length) {
        return new t(0);
      }
      throw new e.error.UnsupportedTypeError("bignumber", n);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(13), o = i.isCollection, a = n.number.isNumber, s = n.string.isString;
    e["boolean"] = function u(n) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("boolean", arguments.length, 0, 1);
      }
      if ("true" === n || n === !0) {
        return!0;
      }
      if ("false" === n || n === !1) {
        return!1;
      }
      if (n instanceof Boolean) {
        return n ? !0 : !1;
      }
      if (a(n)) {
        return 0 !== n;
      }
      if (n instanceof t) {
        return!n.isZero();
      }
      if (s(n)) {
        var r = n.toLowerCase();
        if ("true" === r) {
          return!0;
        }
        if ("false" === r) {
          return!1;
        }
        var f = Number(n);
        if ("" != n && !isNaN(f)) {
          return 0 !== f;
        }
      }
      if (o(n)) {
        return i.deepMap(n, u);
      }
      throw new SyntaxError(n.toString() + " is no valid boolean");
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(13), a = o.isCollection, s = n.number.isNumber, u = n.number.toNumber, f = n.string.isString, c = i.isComplex;
    e.complex = function l() {
      switch(arguments.length) {
        case 0:
          return new i(0, 0);
        case 1:
          var n = arguments[0];
          if (s(n)) {
            return new i(n, 0);
          }
          if (n instanceof t) {
            return new i(u(n), 0);
          }
          if (c(n)) {
            return n.clone();
          }
          if (f(n)) {
            var r = i.parse(n);
            if (r) {
              return r;
            }
            throw new SyntaxError('String "' + n + '" is no valid complex number');
          }
          if (a(n)) {
            return o.deepMap(n, l);
          }
          throw new TypeError("Two numbers or a single string expected in function complex");;
        case 2:
          var m = arguments[0], p = arguments[1];
          if (m instanceof t && (m = u(m)), p instanceof t && (p = u(p)), s(m) && s(p)) {
            return new i(m, p);
          }
          throw new TypeError("Two numbers or a single string expected in function complex");;
        default:
          throw new e.error.ArgumentsError("complex", arguments.length, 0, 2);;
      }
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(9), o = n.number.toNumber;
    e.index = function() {
      var e = new i, n = Array.prototype.slice.apply(arguments).map(function(e) {
        return e instanceof t ? o(e) : Array.isArray(e) ? e.map(function(e) {
          return e instanceof t ? o(e) : e;
        }) : e;
      });
      return i.apply(e, n), e;
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(10);
    e.matrix = function(r) {
      if (arguments.length > 1) {
        throw new e.error.ArgumentsError("matrix", arguments.length, 0, 1);
      }
      return new n(r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(13), o = i.isCollection, a = n.number.toNumber, s = n.number.isNumber, u = n["boolean"].isBoolean, f = n.string.isString;
    e.number = function c(n) {
      switch(arguments.length) {
        case 0:
          return 0;
        case 1:
          if (o(n)) {
            return i.deepMap(n, c);
          }
          if (n instanceof t) {
            return a(n);
          }
          if (f(n)) {
            var r = Number(n);
            if (isNaN(r) && (r = Number(n.valueOf())), isNaN(r)) {
              throw new SyntaxError(n.toString() + " is no valid number");
            }
            return r;
          }
          if (u(n)) {
            return n + 0;
          }
          if (s(n)) {
            return n;
          }
          throw new e.error.UnsupportedTypeError("number", n);;
        default:
          throw new e.error.ArgumentsError("number", arguments.length, 0, 1);;
      }
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(5);
    e.parser = function() {
      return new n(e);
    };
  };
}, function(e) {
  e.exports = function(e) {
    e.select = function(n) {
      return new e.chaining.Selector(n);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(13), i = n.number, o = n.number.isNumber, a = t.isCollection;
    e.string = function s(n) {
      switch(arguments.length) {
        case 0:
          return "";
        case 1:
          return o(n) ? i.format(n) : a(n) ? t.deepMap(n, s) : null === n ? "null" : n.toString();
        default:
          throw new e.error.ArgumentsError("string", arguments.length, 0, 1);;
      }
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(11), o = r(13), a = o.isCollection, s = n.number.toNumber, u = n.string.isString;
    e.unit = function f(n) {
      switch(arguments.length) {
        case 1:
          var r = arguments[0];
          if (r instanceof i) {
            return r.clone();
          }
          if (u(r)) {
            if (i.isPlainUnit(r)) {
              return new i(null, r);
            }
            var c = i.parse(r);
            if (c) {
              return c;
            }
            throw new SyntaxError('String "' + r + '" is no valid unit');
          }
          if (a(n)) {
            return o.deepMap(n, f);
          }
          throw new TypeError("A string or a number and string expected in function unit");;
        case 2:
          return arguments[0] instanceof t ? new i(s(arguments[0]), arguments[1]) : new i(arguments[0], arguments[1]);
        default:
          throw new e.error.ArgumentsError("unit", arguments.length, 1, 2);;
      }
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    function n(e, r, t, i) {
      if (t > i) {
        if (e.length != r.length) {
          throw new Error("Dimensions mismatch (" + e.length + " !\x3d " + r.length + ")");
        }
        for (var o = [], a = 0;a < e.length;a++) {
          o[a] = n(e[a], r[a], t, i + 1);
        }
        return o;
      }
      return e.concat(r);
    }
    var t = r(117), i = r(10), o = r(13), a = t.object, s = t.array, u = t.number.isNumber, f = t.number.isInteger, c = o.isCollection;
    e.concat = function() {
      var r, t, o = arguments.length, l = -1, m = !1, p = [];
      for (r = 0;o > r;r++) {
        var h = arguments[r];
        if (h instanceof i && (m = !0), r == o - 1 && u(h)) {
          if (t = l, l = h, !f(l) || 0 > l) {
            throw new TypeError("Dimension number must be a positive integer (dim \x3d " + l + ")");
          }
          if (r > 0 && l > t) {
            throw new RangeError("Dimension out of range (" + l + " \x3e " + t + ")");
          }
        } else {
          if (!c(h)) {
            throw new e.error.UnsupportedTypeError("concat", h);
          }
          var g = a.clone(h).valueOf(), d = s.size(h.valueOf());
          if (p[r] = g, t = l, l = d.length - 1, r > 0 && l != t) {
            throw new RangeError("Dimension mismatch (" + t + " !\x3d " + l + ")");
          }
        }
      }
      if (0 == p.length) {
        throw new SyntaxError("At least one matrix expected");
      }
      for (var x = p.shift();p.length;) {
        x = n(x, p.shift(), l, 0);
      }
      return m ? new i(x) : x;
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    function n(n, r, t) {
      if (1 == r) {
        return n[0][0];
      }
      if (2 == r) {
        return e.subtract(e.multiply(n[0][0], n[1][1]), e.multiply(n[1][0], n[0][1]));
      }
      for (var i = 1, a = 0, s = 0;r > s && !(a >= t);s++) {
        for (var u = s;0 == n[u][a];) {
          if (u++, u == r && (u = s, a++, a == t)) {
            return o.deepEqual(n, e.eye(r).valueOf()) ? e.round(i, 6) : 0;
          }
        }
        if (u != s) {
          for (var f = 0;t > f;f++) {
            var c = n[u][f];
            n[u][f] = n[s][f], n[s][f] = c;
          }
          i *= -1;
        }
        for (var l = n[s][a], f = 0;t > f;f++) {
          n[s][f] = n[s][f] / l;
        }
        i *= l;
        for (var m = 0;r > m;m++) {
          if (m != s) {
            for (var p = n[m][a], f = 0;t > f;f++) {
              n[m][f] = n[m][f] - n[s][f] * p;
            }
          }
        }
        a++;
      }
      return o.deepEqual(n, e.eye(r).valueOf()) ? e.round(i, 6) : 0;
    }
    var t = r(117), i = r(10), o = t.object, a = (t.array, t.string);
    e.det = function(r) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("det", arguments.length, 1);
      }
      if (!(r instanceof i)) {
        if (!(r instanceof Array)) {
          throw new TypeError("Determinant is only defined for Matrix or Array.");
        }
        r = new i(r);
      }
      var t = r.size();
      switch(t.length) {
        case 0:
          return o.clone(r);
        case 1:
          if (1 == t[0]) {
            return o.clone(r.valueOf()[0]);
          }
          throw new RangeError("Matrix must be square (size: " + a.format(t) + ")");;
        case 2:
          var s = t[0], u = t[1];
          if (s == u) {
            return n(r.clone().valueOf(), s, u);
          }
          throw new RangeError("Matrix must be square (size: " + a.format(t) + ")");;
        default:
          throw new RangeError("Matrix must be two dimensional (size: " + a.format(t) + ")");;
      }
    };
  };
}, function(e, n, r) {
  e.exports = function(e, n) {
    var t = r(117), i = r(10), o = (r(13), t.object), a = t.array.isArray, s = t.number.isNumber, u = t.number.isInteger;
    e.diag = function(r, t) {
      var f, c, l, m;
      if (1 != arguments.length && 2 != arguments.length) {
        throw new e.error.ArgumentsError("diag", arguments.length, 1, 2);
      }
      if (t) {
        if (!s(t) || !u(t)) {
          throw new TypeError("Second parameter in function diag must be an integer");
        }
      } else {
        t = 0;
      }
      var p = t > 0 ? t : 0, h = 0 > t ? -t : 0;
      if (r instanceof i) {
      } else {
        if (!a(r)) {
          throw new TypeError("First parameter in function diag must be a Matrix or Array");
        }
        r = new i(r);
      }
      var g = r.size();
      switch(g.length) {
        case 1:
          c = r.valueOf();
          var d = new i, x = 0;
          for (d.resize([c.length + h, c.length + p], x), f = d.valueOf(), m = c.length, l = 0;m > l;l++) {
            f[l + h][l + p] = o.clone(c[l]);
          }
          return "array" === n.matrix ? d.valueOf() : d;
        case 2:
          for (c = [], f = r.valueOf(), m = Math.min(g[0] - h, g[1] - p), l = 0;m > l;l++) {
            c[l] = o.clone(f[l + h][l + p]);
          }
          return "array" === n.matrix ? c : new i(c);
        default:
          throw new RangeError("Matrix for function diag must be 2 dimensional");;
      }
    };
  };
}, function(e, n, r) {
  e.exports = function(e, n) {
    var t = r(117), i = r(220), o = r(10), a = r(13), s = t.number.toNumber, u = t.number.isNumber, f = t.number.isInteger, c = Array.isArray;
    e.eye = function(r) {
      var t = a.argsToArray(arguments), l = r instanceof o ? !0 : c(r) ? !1 : "matrix" === n.matrix;
      if (0 == t.length) {
        return l ? new o : [];
      }
      if (1 == t.length) {
        t[1] = t[0];
      } else {
        if (t.length > 2) {
          throw new e.error.ArgumentsError("eye", t.length, 0, 2);
        }
      }
      var m = t[0] instanceof i, p = t[0], h = t[1];
      if (p instanceof i && (p = s(p)), h instanceof i && (h = s(h)), !u(p) || (!f(p) || 1 > p)) {
        throw new Error("Parameters in function eye must be positive integers");
      }
      if (h && (!u(h) || (!f(h) || 1 > h))) {
        throw new Error("Parameters in function eye must be positive integers");
      }
      var g = new o, d = m ? new i(1) : 1, x = m ? new i(0) : 0;
      g.resize(t.map(s), x);
      for (var v = e.min(t), w = g.valueOf(), b = 0;v > b;b++) {
        w[b][b] = d;
      }
      return l ? g : g.valueOf();
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    function n(n, r, t) {
      var i, o, a, s, u;
      if (1 == r) {
        if (s = n[0][0], 0 == s) {
          throw Error("Cannot calculate inverse, determinant is zero");
        }
        return[[e.divide(1, s)]];
      }
      if (2 == r) {
        var f = e.det(n);
        if (0 == f) {
          throw Error("Cannot calculate inverse, determinant is zero");
        }
        return[[e.divide(n[1][1], f), e.divide(e.unary(n[0][1]), f)], [e.divide(e.unary(n[1][0]), f), e.divide(n[0][0], f)]];
      }
      var c = n.concat();
      for (i = 0;r > i;i++) {
        c[i] = c[i].concat();
      }
      for (var l = e.eye(r).valueOf(), m = 0;t > m;m++) {
        for (i = m;r > i && 0 == c[i][m];) {
          i++;
        }
        if (i == r || 0 == c[i][m]) {
          throw Error("Cannot calculate inverse, determinant is zero");
        }
        i != m && (u = c[m], c[m] = c[i], c[i] = u, u = l[m], l[m] = l[i], l[i] = u);
        var p = c[m], h = l[m];
        for (i = 0;r > i;i++) {
          var g = c[i], d = l[i];
          if (i != m) {
            if (0 != g[m]) {
              for (a = e.divide(e.unary(g[m]), p[m]), o = m;t > o;o++) {
                g[o] = e.add(g[o], e.multiply(a, p[o]));
              }
              for (o = 0;t > o;o++) {
                d[o] = e.add(d[o], e.multiply(a, h[o]));
              }
            }
          } else {
            for (a = p[m], o = m;t > o;o++) {
              g[o] = e.divide(g[o], a);
            }
            for (o = 0;t > o;o++) {
              d[o] = e.divide(d[o], a);
            }
          }
        }
      }
      return l;
    }
    var t = r(218), i = r(10);
    r(13);
    e.inv = function(r) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("inv", arguments.length, 1);
      }
      var o = e.size(r).valueOf();
      switch(o.length) {
        case 0:
          return e.divide(1, r);
        case 1:
          if (1 == o[0]) {
            return r instanceof i ? new i([e.divide(1, r.valueOf()[0])]) : [e.divide(1, r[0])];
          }
          throw new RangeError("Matrix must be square (size: " + t.format(o) + ")");;
        case 2:
          var a = o[0], s = o[1];
          if (a == s) {
            return r instanceof i ? new i(n(r.valueOf(), a, s)) : n(r, a, s);
          }
          throw new RangeError("Matrix must be square (size: " + t.format(o) + ")");;
        default:
          throw new RangeError("Matrix must be two dimensional (size: " + t.format(o) + ")");;
      }
    };
  };
}, function(e, n, r) {
  e.exports = function(e, n) {
    var t = r(117), i = r(220), o = r(10), a = r(13), s = t.array, u = t.number.toNumber, f = Array.isArray;
    e.ones = function(e) {
      var r = a.argsToArray(arguments), t = e instanceof o ? !0 : f(e) ? !1 : "matrix" === n.matrix;
      if (0 == r.length) {
        return t ? new o : [];
      }
      var c = [], l = r[0] instanceof i ? new i(1) : 1;
      return c = s.resize(c, r.map(u), l), t ? new o(c) : c;
    };
  };
}, function(e, n, r) {
  e.exports = function(e, n) {
    function t(e, n, r) {
      var t = [], i = e;
      if (r > 0) {
        for (;n > i;) {
          t.push(i), i += r;
        }
      } else {
        if (0 > r) {
          for (;i > n;) {
            t.push(i), i += r;
          }
        }
      }
      return t;
    }
    function i(e, n, r) {
      var t = [], i = e;
      if (r > 0) {
        for (;n >= i;) {
          t.push(i), i += r;
        }
      } else {
        if (0 > r) {
          for (;i >= n;) {
            t.push(i), i += r;
          }
        }
      }
      return t;
    }
    function o(e, n, r) {
      var t = [], i = e.clone(), o = new f(0);
      if (r.gt(o)) {
        for (;i.lt(n);) {
          t.push(i), i = i.plus(r);
        }
      } else {
        if (r.lt(o)) {
          for (;i.gt(n);) {
            t.push(i), i = i.plus(r);
          }
        }
      }
      return t;
    }
    function a(e, n, r) {
      var t = [], i = e.clone(), o = new f(0);
      if (r.gt(o)) {
        for (;i.lte(n);) {
          t.push(i), i = i.plus(r);
        }
      } else {
        if (r.lt(o)) {
          for (;i.gte(n);) {
            t.push(i), i = i.plus(r);
          }
        }
      }
      return t;
    }
    function s(e) {
      var r = e.split(":"), t = null;
      if ("bignumber" === n.number) {
        try {
          t = r.map(function(e) {
            return new f(e);
          });
        } catch (i) {
          return null;
        }
      } else {
        t = r.map(function(e) {
          return parseFloat(e);
        });
        var o = t.some(function(e) {
          return isNaN(e);
        });
        if (o) {
          return null;
        }
      }
      switch(t.length) {
        case 2:
          return{start:t[0], end:t[1], step:1};
        case 3:
          return{start:t[0], end:t[2], step:t[1]};
        default:
          return null;
      }
    }
    var u = r(117), f = r(220), c = r(10), l = (r(13), u["boolean"].isBoolean), m = u.string.isString, p = u.number.isNumber, h = u.number.toNumber, g = u.number.toBigNumber;
    e.range = function() {
      var r, u, d, x = Array.prototype.slice.call(arguments), v = !1;
      switch(l(x[x.length - 1]) && (v = x.pop() ? !0 : !1), x.length) {
        case 1:
          if (!m(x[0])) {
            throw new TypeError("Two or three numbers or a single string expected in function range");
          }
          var w = s(x[0]);
          if (!w) {
            throw new SyntaxError('String "' + w + '" is no valid range');
          }
          r = w.start, u = w.end, d = w.step;
          break;
        case 2:
          r = x[0], u = x[1], d = 1;
          break;
        case 3:
          r = x[0], u = x[1], d = x[2];
          break;
        default:
          throw new e.error.ArgumentsError("range", arguments.length, 2, 4);;
      }
      if (!(p(r) || r instanceof f)) {
        throw new TypeError("Parameter start must be a number");
      }
      if (!(p(u) || u instanceof f)) {
        throw new TypeError("Parameter end must be a number");
      }
      if (!(p(d) || d instanceof f)) {
        throw new TypeError("Parameter step must be a number");
      }
      if (!l(v)) {
        throw new TypeError("Parameter includeEnd must be a boolean");
      }
      if (r instanceof f || (u instanceof f || d instanceof f)) {
        var b = !0;
        r instanceof f || (r = g(r)), u instanceof f || (u = g(u)), d instanceof f || (d = g(d)), r instanceof f && (u instanceof f && d instanceof f) || (b = !1, r = h(r), u = h(u), d = h(d));
      }
      var y = b ? v ? a : o : v ? i : t, E = y(r, u, d);
      return "array" === n.matrix ? E : new c(E);
    };
  };
}, function(e, n, r) {
  e.exports = function(e, n) {
    function t(e, n, r) {
      if (void 0 !== r) {
        if (!f(r) || 1 !== r.length) {
          throw new TypeError("Single character expected as defaultValue");
        }
      } else {
        r = " ";
      }
      if (1 !== n.length) {
        throw new Error("Dimension mismatch: (" + n.length + " !\x3d 1)");
      }
      var t = n[0];
      if (!l(t) || !m(t)) {
        throw new TypeError("Size must contain numbers");
      }
      if (e.length > t) {
        return e.substring(0, t);
      }
      if (e.length < t) {
        for (var i = e, o = 0, a = t - e.length;a > o;o++) {
          i += r;
        }
        return i;
      }
      return e;
    }
    var i = r(117), o = r(220), a = r(10), s = i.array, u = i.object.clone, f = i.string.isString, c = i.number.toNumber, l = i.number.isNumber, m = i.number.isInteger, p = s.isArray;
    e.resize = function(r, i, l) {
      if (2 != arguments.length && 3 != arguments.length) {
        throw new e.error.ArgumentsError("resize", arguments.length, 2, 3);
      }
      var m = r instanceof a ? !0 : p(r) ? !1 : "array" !== n.matrix;
      if (r instanceof a && (r = r.valueOf()), i instanceof a && (i = i.valueOf()), i.length && (i[0] instanceof o && (i = i.map(c))), f(r)) {
        return t(r, i, l);
      }
      if (0 == i.length) {
        for (;p(r);) {
          r = r[0];
        }
        return u(r);
      }
      p(r) || (r = [r]), r = u(r);
      var h = s.resize(r, i, l);
      return m ? new a(h) : h;
    };
  };
}, function(e, n, r) {
  e.exports = function(e, n) {
    var t = r(117), i = r(220), o = r(7), a = r(11), s = r(10), u = t.array, f = t.number.isNumber, c = t["boolean"].isBoolean, l = t.string.isString, m = o.isComplex, p = a.isUnit;
    e.size = function(r) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("size", arguments.length, 1);
      }
      var t = "array" === n.matrix;
      if (f(r) || (m(r) || (p(r) || (c(r) || (null == r || r instanceof i))))) {
        return t ? [] : new s([]);
      }
      if (l(r)) {
        return t ? [r.length] : new s([r.length]);
      }
      if (Array.isArray(r)) {
        return u.size(r);
      }
      if (r instanceof s) {
        return new s(r.size());
      }
      throw new e.error.UnsupportedTypeError("size", r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(10), i = n.object, o = n.array, a = Array.isArray;
    e.squeeze = function(n) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("squeeze", arguments.length, 1);
      }
      if (a(n)) {
        return o.squeeze(i.clone(n));
      }
      if (n instanceof t) {
        var r = o.squeeze(n.toArray());
        return a(r) ? new t(r) : r;
      }
      return i.clone(n);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    function n(n, r) {
      var i, o;
      if (l(n)) {
        return i = new s(n), o = i.subset(r), o.valueOf();
      }
      if (n instanceof s) {
        return n.subset(r);
      }
      if (c(n)) {
        return t(n, r);
      }
      throw new e.error.UnsupportedTypeError("subset", n);
    }
    function t(e, n) {
      if (!(n instanceof u)) {
        throw new TypeError("Index expected");
      }
      if (1 != n.size().length) {
        throw new RangeError("Dimension mismatch (" + n.size().length + " !\x3d 1)");
      }
      var r = n.range(0), t = "", i = e.length;
      return r.forEach(function(n) {
        f.validateIndex(n, i), t += e.charAt(n);
      }), t;
    }
    function i(n, r, t, i) {
      var a;
      if (l(n)) {
        return a = new s(e.clone(n)), a.subset(r, t, i), a.valueOf();
      }
      if (n instanceof s) {
        return n.clone().subset(r, t, i);
      }
      if (c(n)) {
        return o(n, r, t, i);
      }
      throw new e.error.UnsupportedTypeError("subset", n);
    }
    function o(e, n, r, t) {
      if (!(n instanceof u)) {
        throw new TypeError("Index expected");
      }
      if (1 != n.size().length) {
        throw new RangeError("Dimension mismatch (" + n.size().length + " !\x3d 1)");
      }
      if (void 0 !== t) {
        if (!c(t) || 1 !== t.length) {
          throw new TypeError("Single character expected as defaultValue");
        }
      } else {
        t = " ";
      }
      var i = n.range(0), o = i.size()[0];
      if (o != r.length) {
        throw new RangeError("Dimension mismatch (" + i.size()[0] + " !\x3d " + r.length + ")");
      }
      for (var a = e.length, s = [], l = 0;a > l;l++) {
        s[l] = e.charAt(l);
      }
      if (i.forEach(function(e, n) {
        f.validateIndex(e), s[e] = r.charAt(n);
      }), s.length > a) {
        for (l = a - 1, o = s.length;o > l;l++) {
          s[l] || (s[l] = t);
        }
      }
      return s.join("");
    }
    var a = r(117), s = r(10), u = r(9), f = a.array, c = a.string.isString, l = Array.isArray;
    e.subset = function() {
      switch(arguments.length) {
        case 2:
          return n(arguments[0], arguments[1]);
        case 3:
        ;
        case 4:
          return i(arguments[0], arguments[1], arguments[2], arguments[3]);
        default:
          throw new e.error.ArgumentsError("subset", arguments.length, 2, 4);;
      }
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(10), i = (r(13), n.object), o = n.string;
    e.transpose = function(n) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("transpose", arguments.length, 1);
      }
      var r = e.size(n).valueOf();
      switch(r.length) {
        case 0:
          return i.clone(n);
        case 1:
          return i.clone(n);
        case 2:
          var a, s = r[1], u = r[0], f = n instanceof t, c = n.valueOf(), l = [], m = i.clone;
          if (0 === s) {
            throw new RangeError("Cannot transpose a 2D matrix with no rows(size: " + o.format(r) + ")");
          }
          for (var p = 0;s > p;p++) {
            a = l[p] = [];
            for (var h = 0;u > h;h++) {
              a[h] = m(c[h][p]);
            }
          }
          return 0 == u && (l[0] = []), f ? new t(l) : l;
        default:
          throw new RangeError("Matrix must be two dimensional (size: " + o.format(r) + ")");;
      }
    };
  };
}, function(e, n, r) {
  e.exports = function(e, n) {
    var t = r(117), i = r(220), o = r(10), a = r(13), s = t.array, u = t.number.toNumber, f = Array.isArray;
    e.zeros = function(e) {
      var r = a.argsToArray(arguments), t = e instanceof o ? !0 : f(e) ? !1 : "matrix" === n.matrix;
      if (0 == r.length) {
        return t ? new o : [];
      }
      var c = [], l = r[0] instanceof i ? new i(0) : 0;
      return c = s.resize(c, r.map(u), l), t ? new o(c) : c;
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(13), o = n.number.isNumber, a = n["boolean"].isBoolean, s = n.number.isInteger, u = i.isCollection;
    e.factorial = function c(n) {
      var r, l;
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("factorial", arguments.length, 1);
      }
      if (o(n)) {
        if (!s(n) || 0 > n) {
          throw new TypeError("Positive integer value expected in function factorial");
        }
        for (r = n - 1, l = n;r > 1;) {
          l *= r, r--;
        }
        return 0 == l && (l = 1), l;
      }
      if (n instanceof t) {
        if (!f(n)) {
          throw new TypeError("Positive integer value expected in function factorial");
        }
        var m = new t(1);
        for (r = n.minus(m), l = n;r.gt(m);) {
          l = l.times(r), r = r.minus(m);
        }
        return l.equals(0) && (l = m), l;
      }
      if (a(n)) {
        return 1;
      }
      if (u(n)) {
        return i.deepMap(n, c);
      }
      throw new e.error.UnsupportedTypeError("factorial", n);
    };
    var f = function(e) {
      return e.round().equals(e) && e.gte(0);
    };
  };
}, function(e, n, r) {
  e.exports = function(e, n) {
    var t = r(10), i = (r(13), {uniform:function() {
      return Math.random;
    }, normal:function() {
      return function() {
        for (var e, n, r = -1;0 > r || r > 1;) {
          e = Math.random(), n = Math.random(), r = 1 / 6 * Math.pow(-2 * Math.log(e), 0.5) * Math.cos(2 * Math.PI * n) + 0.5;
        }
        return r;
      };
    }});
    e.distribution = function(r) {
      if (!i.hasOwnProperty(r)) {
        throw new Error("unknown distribution " + r);
      }
      var o = Array.prototype.slice.call(arguments, 1), a = i[r].apply(this, o);
      return function(r) {
        var i = {random:function(r, i, a) {
          var u, f, c;
          if (arguments.length > 3) {
            throw new e.error.ArgumentsError("random", arguments.length, 0, 3);
          }
          if (1 === arguments.length ? Array.isArray(r) ? u = r : c = r : 2 === arguments.length ? Array.isArray(r) ? u = r : (f = r, c = i) : (u = r, f = i, c = a), void 0 === c && (c = 1), void 0 === f && (f = 0), void 0 !== u) {
            var l = s(u, f, c, o);
            return "array" === n.matrix ? l : new t(l);
          }
          return o(f, c);
        }, randomInt:function(r, i, o) {
          var u, f, c;
          if (arguments.length > 3 || arguments.length < 1) {
            throw new e.error.ArgumentsError("randomInt", arguments.length, 1, 3);
          }
          if (1 === arguments.length ? c = r : 2 === arguments.length ? "[object Array]" === Object.prototype.toString.call(r) ? u = r : (f = r, c = i) : (u = r, f = i, c = o), void 0 === f && (f = 0), void 0 !== u) {
            var l = s(u, f, c, a);
            return "array" === n.matrix ? l : new t(l);
          }
          return a(f, c);
        }, pickRandom:function(n) {
          if (1 !== arguments.length) {
            throw new e.error.ArgumentsError("pickRandom", arguments.length, 1);
          }
          if (!Array.isArray(n)) {
            throw new e.error.UnsupportedTypeError("pickRandom", n);
          }
          return n[Math.floor(Math.random() * n.length)];
        }}, o = function(e, n) {
          return e + r() * (n - e);
        }, a = function(e, n) {
          return Math.floor(e + r() * (n - e));
        }, s = function(e, n, r, t) {
          var i, o, a = [];
          if (e = e.slice(0), e.length > 1) {
            for (o = 0, i = e.shift();i > o;o++) {
              a.push(s(e, n, r, t));
            }
          } else {
            for (o = 0, i = e.shift();i > o;o++) {
              a.push(t(n, r));
            }
          }
          return a;
        };
        return i;
      }(a);
    };
    var o = e.distribution("uniform");
    e.random = o.random, e.randomInt = o.randomInt, e.pickRandom = o.pickRandom;
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = n.number.isNumber, o = n.number.isInteger, a = n.number.toBigNumber;
    e.permutations = function(n, r) {
      var u, f, c = arguments.length;
      if (c > 2) {
        throw new e.error.ArgumentsError("permutations", arguments.length, 2);
      }
      if (i(n)) {
        if (!o(n) || 0 > n) {
          throw new TypeError("Positive integer value expected in function permutations");
        }
        if (1 == c) {
          return e.factorial(n);
        }
        if (2 == c && i(r)) {
          if (!o(r) || 0 > r) {
            throw new TypeError("Positive integer value expected in function permutations");
          }
          if (r > n) {
            throw new TypeError("second argument k must be less than or equal to first argument n");
          }
          for (u = 1, f = n - r + 1;n >= f;f++) {
            u *= f;
          }
          return u;
        }
      }
      if (n instanceof t) {
        if (void 0 === r && s(n)) {
          return e.factorial(n);
        }
        if (r = a(r), !(r instanceof t && (s(n) && s(r)))) {
          throw new TypeError("Positive integer value expected in function permutations");
        }
        if (r.gt(n)) {
          throw new TypeError("second argument k must be less than or equal to first argument n");
        }
        for (u = new t(1), f = n.minus(r).plus(1);f.lte(n);f = f.plus(1)) {
          u = u.times(f);
        }
        return u;
      }
      throw new e.error.UnsupportedTypeError("permutations", n);
    };
    var s = function(e) {
      return e.round().equals(e) && e.gte(0);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = (r(13), n.number.isNumber), o = n.number.isInteger, a = n.number.toBigNumber;
    e.combinations = function(n, r) {
      var u, f, c, l, m = arguments.length;
      if (2 != m) {
        throw new e.error.ArgumentsError("combinations", arguments.length, 2);
      }
      if (i(n)) {
        if (!o(n) || 0 > n) {
          throw new TypeError("Positive integer value enpected in function combinations");
        }
        if (r > n) {
          throw new TypeError("k must be less than or equal to n");
        }
        for (u = Math.max(r, n - r), f = 1, c = 1;n - u >= c;c++) {
          f = f * (u + c) / c;
        }
        return f;
      }
      if (n instanceof t) {
        if (r = a(r), !(r instanceof t && (s(n) && s(r)))) {
          throw new TypeError("Positive integer value expected in function combinations");
        }
        if (r.gt(n)) {
          throw new TypeError("k must be less than n in function combinations");
        }
        for (u = n.minus(r), r.lt(u) && (u = r), f = new t(1), c = new t(1), l = n.minus(u);c.lte(l);c = c.plus(1)) {
          f = f.times(u.plus(c)).dividedBy(c);
        }
        return f;
      }
      throw new e.error.UnsupportedTypeError("combinations", n);
    };
    var s = function(e) {
      return e.round().equals(e) && e.gte(0);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    function n(n, r) {
      return e.smaller(n, r) ? n : r;
    }
    function t(n) {
      var r = null;
      if (i.deepForEach(n, function(n) {
        (null === r || e.smaller(n, r)) && (r = n);
      }), null === r) {
        throw new Error("Cannot calculate min of an empty array");
      }
      return r;
    }
    var i = (r(10), r(13)), o = i.isCollection;
    e.min = function(e) {
      if (0 == arguments.length) {
        throw new SyntaxError("Function min requires one or more parameters (0 provided)");
      }
      if (o(e)) {
        if (1 == arguments.length) {
          return t(e);
        }
        if (2 == arguments.length) {
          return i.reduce(arguments[0], arguments[1], n);
        }
        throw new SyntaxError("Wrong number of parameters");
      }
      return t(arguments);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    function n(n, r) {
      return e.larger(n, r) ? n : r;
    }
    function t(n) {
      var r = null;
      if (i.deepForEach(n, function(n) {
        (null === r || e.larger(n, r)) && (r = n);
      }), null === r) {
        throw new Error("Cannot calculate max of an empty array");
      }
      return r;
    }
    var i = (r(10), r(13)), o = i.isCollection;
    e.max = function(e) {
      if (0 == arguments.length) {
        throw new SyntaxError("Function max requires one or more parameters (0 provided)");
      }
      if (o(e)) {
        if (1 == arguments.length) {
          return t(e);
        }
        if (2 == arguments.length) {
          return i.reduce(arguments[0], arguments[1], n);
        }
        throw new SyntaxError("Wrong number of parameters");
      }
      return t(arguments);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    function n(n, r) {
      var t;
      return t = i.reduce(n, r, e.add), e.divide(t, size(n)[r]);
    }
    function t(n) {
      var r = 0, t = 0;
      if (i.deepForEach(n, function(n) {
        r = e.add(r, n), t++;
      }), 0 === t) {
        throw new Error("Cannot calculate mean of an empty array");
      }
      return e.divide(r, t);
    }
    var i = (r(10), r(13)), o = i.isCollection;
    e.mean = function(e) {
      if (0 == arguments.length) {
        throw new SyntaxError("Function mean requires one or more parameters (0 provided)");
      }
      if (o(e)) {
        if (1 == arguments.length) {
          return t(e);
        }
        if (2 == arguments.length) {
          return n(arguments[0], arguments[1]);
        }
        throw new SyntaxError("Wrong number of parameters");
      }
      return t(arguments);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(13), a = n.number.isNumber, s = n["boolean"].isBoolean, u = i.isComplex, f = o.isCollection;
    e.acos = function c(r) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("acos", arguments.length, 1);
      }
      if (a(r)) {
        return r >= -1 && 1 >= r ? Math.acos(r) : c(new i(r, 0));
      }
      if (u(r)) {
        var l, m = new i(r.im * r.im - r.re * r.re + 1, -2 * r.re * r.im), p = e.sqrt(m);
        l = p instanceof i ? new i(p.re - r.im, p.im + r.re) : new i(p - r.im, r.re);
        var h = e.log(l);
        return h instanceof i ? new i(1.5707963267948966 - h.im, h.re) : new i(1.5707963267948966, h);
      }
      if (f(r)) {
        return o.deepMap(r, c);
      }
      if (s(r)) {
        return Math.acos(r);
      }
      if (r instanceof t) {
        return c(n.number.toNumber(r));
      }
      throw new e.error.UnsupportedTypeError("acos", r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(13), a = n.number.isNumber, s = n["boolean"].isBoolean, u = i.isComplex, f = o.isCollection;
    e.asin = function c(r) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("asin", arguments.length, 1);
      }
      if (a(r)) {
        return r >= -1 && 1 >= r ? Math.asin(r) : c(new i(r, 0));
      }
      if (u(r)) {
        var l, m = r.re, p = r.im, h = new i(p * p - m * m + 1, -2 * m * p), g = e.sqrt(h);
        l = g instanceof i ? new i(g.re - p, g.im + m) : new i(g - p, m);
        var d = e.log(l);
        return d instanceof i ? new i(d.im, -d.re) : new i(0, -d);
      }
      if (f(r)) {
        return o.deepMap(r, c);
      }
      if (s(r)) {
        return Math.asin(r);
      }
      if (r instanceof t) {
        return c(n.number.toNumber(r));
      }
      throw new e.error.UnsupportedTypeError("asin", r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(13), a = n.number.isNumber, s = n["boolean"].isBoolean, u = i.isComplex, f = o.isCollection;
    e.atan = function c(r) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("atan", arguments.length, 1);
      }
      if (a(r)) {
        return Math.atan(r);
      }
      if (u(r)) {
        var l = r.re, m = r.im, p = l * l + (1 - m) * (1 - m), h = new i((1 - m * m - l * l) / p, -2 * l / p), g = e.log(h);
        return g instanceof i ? new i(-0.5 * g.im, 0.5 * g.re) : new i(0, 0.5 * g);
      }
      if (f(r)) {
        return o.deepMap(r, c);
      }
      if (s(r)) {
        return Math.atan(r);
      }
      if (r instanceof t) {
        return c(n.number.toNumber(r));
      }
      throw new e.error.UnsupportedTypeError("atan", r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(13), a = n.number.toNumber, s = n.number.isNumber, u = n["boolean"].isBoolean, f = i.isComplex, c = o.isCollection;
    e.atan2 = function l(n, r) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("atan2", arguments.length, 2);
      }
      if (s(n)) {
        if (s(r)) {
          return Math.atan2(n, r);
        }
      } else {
        if (f(n) && s(r)) {
          return Math.atan2(n.re, r);
        }
      }
      if (c(n) || c(r)) {
        return o.deepMap2(n, r, l);
      }
      if (u(n)) {
        return l(+n, r);
      }
      if (u(r)) {
        return l(n, +r);
      }
      if (n instanceof t) {
        return l(a(n), r);
      }
      if (r instanceof t) {
        return l(n, a(r));
      }
      throw new e.error.UnsupportedTypeError("atan2", n, r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(11), a = r(13), s = n.number.isNumber, u = n["boolean"].isBoolean, f = i.isComplex, c = o.isUnit, l = a.isCollection;
    e.cos = function m(r) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("cos", arguments.length, 1);
      }
      if (s(r)) {
        return Math.cos(r);
      }
      if (f(r)) {
        return new i(0.5 * Math.cos(r.re) * (Math.exp(-r.im) + Math.exp(r.im)), 0.5 * Math.sin(r.re) * (Math.exp(-r.im) - Math.exp(r.im)));
      }
      if (c(r)) {
        if (!r.hasBase(o.BASE_UNITS.ANGLE)) {
          throw new TypeError("Unit in function cos is no angle");
        }
        return Math.cos(r.value);
      }
      if (l(r)) {
        return a.deepMap(r, m);
      }
      if (u(r)) {
        return Math.cos(r);
      }
      if (r instanceof t) {
        return m(n.number.toNumber(r));
      }
      throw new e.error.UnsupportedTypeError("cos", r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(11), a = r(13), s = n.number.isNumber, u = n["boolean"].isBoolean, f = i.isComplex, c = o.isUnit, l = a.isCollection;
    e.cot = function m(r) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("cot", arguments.length, 1);
      }
      if (s(r)) {
        return 1 / Math.tan(r);
      }
      if (f(r)) {
        var p = Math.exp(-4 * r.im) - 2 * Math.exp(-2 * r.im) * Math.cos(2 * r.re) + 1;
        return new i(2 * Math.exp(-2 * r.im) * Math.sin(2 * r.re) / p, (Math.exp(-4 * r.im) - 1) / p);
      }
      if (c(r)) {
        if (!r.hasBase(o.BASE_UNITS.ANGLE)) {
          throw new TypeError("Unit in function cot is no angle");
        }
        return 1 / Math.tan(r.value);
      }
      if (l(r)) {
        return a.deepMap(r, m);
      }
      if (u(r)) {
        return m(+r);
      }
      if (r instanceof t) {
        return m(n.number.toNumber(r));
      }
      throw new e.error.UnsupportedTypeError("cot", r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(11), a = r(13), s = n.number.isNumber, u = n["boolean"].isBoolean, f = i.isComplex, c = o.isUnit, l = a.isCollection;
    e.csc = function m(r) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("csc", arguments.length, 1);
      }
      if (s(r)) {
        return 1 / Math.sin(r);
      }
      if (f(r)) {
        var p = 0.25 * (Math.exp(-2 * r.im) + Math.exp(2 * r.im)) - 0.5 * Math.cos(2 * r.re);
        return new i(0.5 * Math.sin(r.re) * (Math.exp(-r.im) + Math.exp(r.im)) / p, 0.5 * Math.cos(r.re) * (Math.exp(-r.im) - Math.exp(r.im)) / p);
      }
      if (c(r)) {
        if (!r.hasBase(o.BASE_UNITS.ANGLE)) {
          throw new TypeError("Unit in function csc is no angle");
        }
        return 1 / Math.sin(r.value);
      }
      if (l(r)) {
        return a.deepMap(r, m);
      }
      if (u(r)) {
        return m(+r);
      }
      if (r instanceof t) {
        return m(n.number.toNumber(r));
      }
      throw new e.error.UnsupportedTypeError("csc", r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(11), a = r(13), s = n.number.isNumber, u = n["boolean"].isBoolean, f = i.isComplex, c = o.isUnit, l = a.isCollection;
    e.sec = function m(r) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("sec", arguments.length, 1);
      }
      if (s(r)) {
        return 1 / Math.cos(r);
      }
      if (f(r)) {
        var p = 0.25 * (Math.exp(-2 * r.im) + Math.exp(2 * r.im)) + 0.5 * Math.cos(2 * r.re);
        return new i(0.5 * Math.cos(r.re) * (Math.exp(-r.im) + Math.exp(r.im)) / p, 0.5 * Math.sin(r.re) * (Math.exp(r.im) - Math.exp(-r.im)) / p);
      }
      if (c(r)) {
        if (!r.hasBase(o.BASE_UNITS.ANGLE)) {
          throw new TypeError("Unit in function sec is no angle");
        }
        return 1 / Math.cos(r.value);
      }
      if (l(r)) {
        return a.deepMap(r, m);
      }
      if (u(r)) {
        return m(+r);
      }
      if (r instanceof t) {
        return m(n.number.toNumber(r));
      }
      throw new e.error.UnsupportedTypeError("sec", r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(11), a = r(13), s = n.number.isNumber, u = n["boolean"].isBoolean, f = i.isComplex, c = o.isUnit, l = a.isCollection;
    e.sin = function m(r) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("sin", arguments.length, 1);
      }
      if (s(r)) {
        return Math.sin(r);
      }
      if (f(r)) {
        return new i(0.5 * Math.sin(r.re) * (Math.exp(-r.im) + Math.exp(r.im)), 0.5 * Math.cos(r.re) * (Math.exp(r.im) - Math.exp(-r.im)));
      }
      if (c(r)) {
        if (!r.hasBase(o.BASE_UNITS.ANGLE)) {
          throw new TypeError("Unit in function sin is no angle");
        }
        return Math.sin(r.value);
      }
      if (l(r)) {
        return a.deepMap(r, m);
      }
      if (u(r)) {
        return Math.sin(r);
      }
      if (r instanceof t) {
        return m(n.number.toNumber(r));
      }
      throw new e.error.UnsupportedTypeError("sin", r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(220), i = r(7), o = r(11), a = r(13), s = n.number.isNumber, u = n["boolean"].isBoolean, f = i.isComplex, c = o.isUnit, l = a.isCollection;
    e.tan = function m(r) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("tan", arguments.length, 1);
      }
      if (s(r)) {
        return Math.tan(r);
      }
      if (f(r)) {
        var p = Math.exp(-4 * r.im) + 2 * Math.exp(-2 * r.im) * Math.cos(2 * r.re) + 1;
        return new i(2 * Math.exp(-2 * r.im) * Math.sin(2 * r.re) / p, (1 - Math.exp(-4 * r.im)) / p);
      }
      if (c(r)) {
        if (!r.hasBase(o.BASE_UNITS.ANGLE)) {
          throw new TypeError("Unit in function tan is no angle");
        }
        return Math.tan(r.value);
      }
      if (l(r)) {
        return a.deepMap(r, m);
      }
      if (u(r)) {
        return Math.tan(r);
      }
      if (r instanceof t) {
        return m(n.number.toNumber(r));
      }
      throw new e.error.UnsupportedTypeError("tan", r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(117), t = r(11), i = r(13), o = n.string.isString, a = t.isUnit, s = i.isCollection;
    e.to = function u(n, r) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("to", arguments.length, 2);
      }
      if (a(n) && (a(r) || o(r))) {
        return n.to(r);
      }
      if (s(n) || s(r)) {
        return i.deepMap2(n, r, u);
      }
      throw new e.error.UnsupportedTypeError("to", n, r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(2);
    e.clone = function(r) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("clone", arguments.length, 1);
      }
      return n.clone(r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(218);
    e.format = function(r, t) {
      var i = arguments.length;
      if (1 !== i && 2 !== i) {
        throw new e.error.ArgumentsError("format", i, 1, 2);
      }
      return n.format(r, t);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    function n(n, r, t) {
      (t.override || void 0 === e[n]) && (e[n] = t.wrap && "function" == typeof r ? function() {
        for (var n = [], t = 0, i = arguments.length;i > t;t++) {
          n[t] = arguments[t].valueOf();
        }
        return r.apply(e, n);
      } : r, e.chaining.Selector.createProxy(n, r));
    }
    function t(e) {
      return "function" == typeof e || (s(e) || (u(e) || (f(e) || c(e))));
    }
    var i = r(117), o = r(7), a = r(11), s = i.number.isNumber, u = i.string.isString, f = o.isComplex, c = a.isUnit;
    e["import"] = function l(o, a) {
      var s, f = {override:!1, wrap:!0};
      if (a && (a instanceof Object && i.object.extend(f, a)), u(o)) {
        var c = r(219)(o);
        l(c);
      } else {
        if (t(o)) {
          if (s = o.name, !s) {
            throw new Error("Cannot import an unnamed function or object");
          }
          (f.override || void 0 === e[s]) && n(s, o, f);
        } else {
          if (o instanceof Object) {
            for (s in o) {
              if (o.hasOwnProperty(s)) {
                var m = o[s];
                t(m) ? n(s, m, f) : l(m);
              }
            }
          }
        }
      }
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    function n(e, n) {
      var r = [], t = function(i, o) {
        return Array.isArray(i) ? i.map(function(e, n) {
          return r[o] = n, t(e, o + 1);
        }) : n(i, r, e);
      };
      return t(e, 0);
    }
    var t = r(10).isMatrix;
    e.map = function(r, i) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("map", arguments.length, 2);
      }
      if (Array.isArray(r)) {
        return n(r, i);
      }
      if (t(r)) {
        return r.map(i);
      }
      throw new e.error.UnsupportedTypeError("map", r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(218), t = n.isString;
    e.print = function(n, r, i) {
      var o = arguments.length;
      if (2 != o && 3 != o) {
        throw new e.error.ArgumentsError("print", o, 2, 3);
      }
      if (!t(n)) {
        throw new TypeError("String expected as first parameter in function format");
      }
      if (!(r instanceof Object)) {
        throw new TypeError("Object expected as second parameter in function format");
      }
      return n.replace(/\$([\w\.]+)/g, function(n, o) {
        for (var a = o.split("."), s = r[a.shift()];a.length && void 0 !== s;) {
          var u = a.shift();
          s = u ? s[u] : s + ".";
        }
        return void 0 !== s ? t(s) ? s : e.format(s, i) : n;
      });
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(217), t = r(220), i = r(7), o = r(10), a = r(11), s = r(9), u = r(8), f = r(12);
    e["typeof"] = function(r) {
      if (1 != arguments.length) {
        throw new e.error.ArgumentsError("typeof", arguments.length, 1);
      }
      var c = n.type(r);
      if ("object" === c) {
        if (r instanceof i) {
          return "complex";
        }
        if (r instanceof t) {
          return "bignumber";
        }
        if (r instanceof o) {
          return "matrix";
        }
        if (r instanceof a) {
          return "unit";
        }
        if (r instanceof s) {
          return "index";
        }
        if (r instanceof u) {
          return "range";
        }
        if (r instanceof f) {
          return "matrix";
        }
        if (r instanceof e.chaining.Selector) {
          return "selector";
        }
      }
      return c;
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    function n(e, n) {
      var r = [], t = function(i, o) {
        Array.isArray(i) ? i.forEach(function(e, n) {
          r[o] = n, t(e, o + 1);
        }) : n(i, r, e);
      };
      t(e, 0);
    }
    var t = r(10).isMatrix;
    e.forEach = function(r, i) {
      if (2 != arguments.length) {
        throw new e.error.ArgumentsError("forEach", arguments.length, 2);
      }
      if (Array.isArray(r)) {
        return n(r, i);
      }
      if (t(r)) {
        return r.forEach(i);
      }
      throw new e.error.UnsupportedTypeError("forEach", r);
    };
  };
}, function(e, n, r) {
  e.exports = function(e) {
    var n = r(7);
    e.pi = Math.PI, e.e = Math.E, e.tau = 2 * Math.PI, e.i = new n(0, 1), e.Infinity = 1 / 0, e.NaN = 0 / 0, e["true"] = !0, e["false"] = !1, e.E = Math.E, e.LN2 = Math.LN2, e.LN10 = Math.LN10, e.LOG2E = Math.LOG2E, e.LOG10E = Math.LOG10E, e.PI = Math.PI, e.SQRT1_2 = Math.SQRT1_2, e.SQRT2 = Math.SQRT2;
  };
}, function(e, n, r) {
  e.exports = function(e) {
    function n(e) {
      if (!(this instanceof n)) {
        throw new SyntaxError("Selector constructor must be called with the new operator");
      }
      this.value = e instanceof n ? e.value : e;
    }
    function t(e, r) {
      var t = Array.prototype.slice;
      n.prototype[e] = "function" == typeof r ? function() {
        var e = [this.value].concat(t.call(arguments, 0));
        return new n(r.apply(this, e));
      } : new n(r);
    }
    var i = r(218);
    n.prototype.done = function() {
      return this.value;
    }, n.prototype.valueOf = function() {
      return this.value;
    }, n.prototype.toString = function() {
      return i.format(this.value);
    }, n.createProxy = t;
    for (var o in e) {
      e.hasOwnProperty(o) && (o && t(o, e[o]));
    }
    return n;
  };
}, function(e, n, r) {
  function t(e) {
    this.nodes = e || [];
  }
  var i = r(110), o = (r(2), r(218));
  r(13), r(10);
  t.prototype = new i, t.prototype._compile = function(e) {
    var n = "array" !== e.math.config().matrix, r = this.nodes.map(function(n) {
      return n._compile(e);
    });
    return(n ? "math.matrix([" : "[") + r.join(",") + (n ? "])" : "]");
  }, t.prototype.find = function(e) {
    var n = [];
    this.match(e) && n.push(this);
    for (var r = this.nodes, t = 0, i = r.length;i > t;t++) {
      for (var o = r[t], a = 0, s = o.length;s > a;a++) {
        n = n.concat(o[a].find(e));
      }
    }
    return n;
  }, t.prototype.toString = function() {
    return o.format(this.nodes);
  }, e.exports = t;
}, function(e, n, r) {
  function t(e, n) {
    this.name = e, this.expr = n;
  }
  var i = r(110);
  t.prototype = new i, t.prototype._compile = function(e) {
    return'scope["' + this.name + '"] \x3d ' + this.expr._compile(e);
  }, t.prototype.find = function(e) {
    var n = [];
    return this.match(e) && n.push(this), this.expr && (n = n.concat(this.expr.find(e))), n;
  }, t.prototype.toString = function() {
    return this.name + " \x3d " + this.expr.toString();
  }, e.exports = t;
}, function(e, n, r) {
  function t() {
    this.params = [];
  }
  var i = r(110);
  t.prototype = new i, t.prototype.add = function(e, n) {
    var r = this.params.length;
    this.params[r] = {node:e, visible:void 0 != n ? n : !0};
  }, t.prototype._compile = function(e) {
    var n = this.params.map(function(n) {
      var r = n.node._compile(e);
      return n.visible ? "results.push(" + r + ");" : r + ";";
    });
    return "(function () {var results \x3d [];" + n.join("") + "return results;})()";
  }, t.prototype.find = function(e) {
    var n = [];
    this.match(e) && n.push(this);
    var r = this.params;
    if (r) {
      for (var t = 0, i = r.length;i > t;t++) {
        n = n.concat(r[t].node.find(e));
      }
    }
    return n;
  }, t.prototype.toString = function() {
    return this.params.map(function(e) {
      return e.node.toString() + (e.visible ? "" : ";");
    }).join("\n");
  }, e.exports = t;
}, function(e, n, r) {
  function t(e, n) {
    if (!a(e)) {
      throw new TypeError("Constant type must be a string");
    }
    if (!a(n)) {
      throw new TypeError("Constant value must be a string");
    }
    this.type = e, this.value = n;
  }
  var i = r(110), o = (r(7), r(220), r(218)), a = o.isString;
  t.prototype = new i, t.prototype._compile = function(e) {
    switch(this.type) {
      case "number":
        return "bignumber" === e.math.config().number ? 'math.bignumber("' + this.value + '")' : this.value.replace(/^(0*)[0-9]/, function(e, n) {
          return e.substring(n.length);
        });
      case "string":
        return'"' + this.value + '"';
      case "complex":
        return "math.complex(0, " + this.value + ")";
      case "boolean":
        return this.value;
      case "undefined":
        return this.value;
      case "null":
        return this.value;
      default:
        throw new TypeError('Unsupported type of constant "' + this.type + '"');;
    }
  }, t.prototype.toString = function() {
    switch(this.type) {
      case "string":
        return'"' + this.value + '"';
      case "complex":
        return this.value + "i";
      default:
        return this.value;
    }
  }, e.exports = t;
}, function(e, n, r) {
  function t(e, n) {
    this.object = e, this.ranges = n;
  }
  var i = r(221), o = r(110), a = r(113), s = r(114);
  r(220), r(9), r(8), i.isNumber, i.toNumber;
  t.prototype = new o, t.prototype._compile = function(e) {
    return this.compileSubset(e);
  }, t.prototype.compileSubset = function(e, n) {
    var r = {type:s, properties:{name:"end"}}, t = this.ranges.map(function(e) {
      return e.find(r).length > 0;
    }), i = this.ranges.map(function(n, r) {
      var i = t[r];
      return n instanceof a ? i ? '(function (scope) {  scope \x3d Object.create(scope);   scope["end"] \x3d size[' + r + "];  var step \x3d " + (n.step ? n.step._compile(e) : "1") + ";  return [    " + n.start._compile(e) + " - 1,     " + n.end._compile(e) + " - (step \x3e 0 ? 0 : 2),     step  ];})(scope)" : "(function () {  var step \x3d " + (n.step ? n.step._compile(e) : "1") + ";  return [    " + n.start._compile(e) + " - 1,     " + n.end._compile(e) + " - (step \x3e 0 ? 0 : 2),     step  ];})()" : 
      i ? '(function (scope) {  scope \x3d Object.create(scope);   scope["end"] \x3d size[' + r + "];  return " + n._compile(e) + " - 1;})(scope)" : n._compile(e) + " - 1";
    }), o = i.some(function(e) {
      return e;
    });
    return o ? "(function () {  var obj \x3d " + this.object._compile(e) + ";  var size \x3d math.size(obj).valueOf();  return math.subset(    obj,     math.index(" + i.join(", ") + ")    " + (n ? ", " + n : "") + "  );})()" : "math.subset(" + this.object._compile(e) + ",math.index(" + i.join(", ") + (n ? ", " + n : "") + ")";
  }, t.prototype.find = function(e) {
    var n = [];
    this.match(e) && n.push(this), this.object && (n = n.concat(this.object.find(e)));
    var r = this.ranges;
    if (r) {
      for (var t = 0, i = r.length;i > t;t++) {
        n = n.concat(r[t].find(e));
      }
    }
    return n;
  }, t.prototype.objectName = function() {
    return this.object.name;
  }, t.prototype.toString = function() {
    var e = this.object ? this.object.toString() : "";
    return this.ranges && (e += "[" + this.ranges.join(", ") + "]"), e;
  }, e.exports = t;
}, function(e, n, r) {
  function t(e, n, r) {
    this.name = e, this.args = n, this.expr = r;
  }
  var i = r(110);
  t.prototype = new i, t.prototype._eval = function() {
    return this.scope.set(this.name, this.fn), this.fn;
  }, t.prototype._compile = function(e) {
    return'scope["' + this.name + '"] \x3d   (function (scope) {    scope \x3d Object.create(scope);     var fn \x3d function ' + this.name + "(" + this.args.join(",") + ") {      if (arguments.length !\x3d " + this.args.length + ') {        throw new SyntaxError("Wrong number of arguments in function ' + this.name + ' (" + arguments.length + " provided, ' + this.args.length + ' expected)");      }' + this.args.map(function(e, n) {
      return'scope["' + e + '"] \x3d arguments[' + n + "];";
    }).join("") + "      return " + this.expr._compile(e) + '    };    fn.syntax \x3d "' + this.name + "(" + this.args.join(", ") + ')";    return fn;  })(scope);';
  }, t.prototype.find = function(e) {
    var n = [];
    return this.match(e) && n.push(this), this.expr && (n = n.concat(this.expr.find(e))), n;
  }, t.prototype.toString = function() {
    return "function " + this.name + "(" + this.args.join(", ") + ") \x3d " + this.expr.toString();
  }, e.exports = t;
}, function(e) {
  function n() {
  }
  n.prototype.eval = function() {
    throw new Error("Node.eval is deprecated. Use Node.compile(math).eval([scope]) instead.");
  }, n.prototype.compile = function(e) {
    if ("object" != typeof e) {
      throw new TypeError("Object expected as parameter math");
    }
    var n = {math:e}, r = this._compile(n), t = Object.keys(n).map(function(e) {
      return "    var " + e + ' \x3d defs["' + e + '"];';
    }), i = t.join(" ") + 'return {  "eval": function (scope) {    scope \x3d scope || {};    return ' + r + ";  }};", o = new Function("defs", i);
    return o(n);
  }, n.prototype._compile = function() {
    throw new Error("Cannot compile a Node interface");
  }, n.prototype.find = function(e) {
    return this.match(e) ? [this] : [];
  }, n.prototype.match = function(e) {
    var n = !0;
    if (e && (!e.type || (this instanceof e.type || (n = !1)), n && e.properties)) {
      for (var r in e.properties) {
        if (e.properties.hasOwnProperty(r) && this[r] != e.properties[r]) {
          n = !1;
          break;
        }
      }
    }
    return n;
  }, n.prototype.toString = function() {
    return "";
  }, e.exports = n;
}, function(e, n, r) {
  function t(e, n, r) {
    this.op = e, this.fn = n, this.params = r;
  }
  var i = r(110);
  t.prototype = new i, t.prototype._compile = function(e) {
    if (!(this.fn in e.math)) {
      throw new Error("Function " + this.fn + ' missing in provided namespace "math"');
    }
    var n = this.params.map(function(n) {
      return n._compile(e);
    });
    return "math." + this.fn + "(" + n.join(", ") + ")";
  }, t.prototype.find = function(e) {
    var n = [];
    this.match(e) && n.push(this);
    var r = this.params;
    if (r) {
      for (var t = 0, i = r.length;i > t;t++) {
        n = n.concat(r[t].find(e));
      }
    }
    return n;
  }, t.prototype.toString = function() {
    var e = this.params;
    switch(e.length) {
      case 1:
        return "-" == this.op ? "-" + e[0].toString() : e[0].toString() + this.op;
      case 2:
        var n = e[0].toString();
        e[0] instanceof t && (n = "(" + n + ")");
        var r = e[1].toString();
        return e[1] instanceof t && (r = "(" + r + ")"), n + " " + this.op + " " + r;
      default:
        return this.op + "(" + this.params.join(", ") + ")";
    }
  }, e.exports = t;
}, function(e, n, r) {
  function t(e, n) {
    this.object = e, this.params = n;
  }
  var i = r(221), o = r(110);
  r(113), r(114), r(220), r(9), r(8), i.isNumber, i.toNumber;
  t.prototype = new o, t.prototype._compile = function(e) {
    var n = this.params.map(function(n) {
      return n._compile(e);
    });
    return this.object._compile(e) + "(" + n.join(", ") + ")";
  }, t.prototype.find = function(e) {
    var n = [];
    this.match(e) && n.push(this), this.object && (n = n.concat(this.object.find(e)));
    var r = this.params;
    if (r) {
      for (var t = 0, i = r.length;i > t;t++) {
        n = n.concat(r[t].find(e));
      }
    }
    return n;
  }, t.prototype.toString = function() {
    var e = this.object ? this.object.toString() : "";
    return this.params && (e += "(" + this.params.join(", ") + ")"), e;
  }, e.exports = t;
}, function(e, n, r) {
  function t(e) {
    if (2 != e.length && 3 != e.length) {
      throw new SyntaxError("Wrong number of arguments. Expected [start, end] or [start, end, step]");
    }
    this.start = e[0], this.end = e[1], this.step = e[2];
  }
  var i = r(221), o = r(110);
  r(220), r(8), r(10), i.toNumber;
  t.prototype = new o, t.prototype._compile = function(e) {
    return "math.range(" + this.start._compile(e) + ", " + this.end._compile(e) + ", " + (this.step ? this.step._compile(e) + ", " : "") + "true)";
  }, t.prototype.find = function(e) {
    var n = [];
    return this.match(e) && n.push(this), this.start && (n = n.concat(this.start.find(e))), this.step && (n = n.concat(this.step.find(e))), this.end && (n = n.concat(this.end.find(e))), n;
  }, t.prototype.toString = function() {
    var e = this.start.toString();
    return this.step && (e += ":" + this.step.toString()), e += ":" + this.end.toString();
  }, e.exports = t;
}, function(e, n, r) {
  function t(e) {
    this.name = e;
  }
  function i(e) {
    throw new Error("Undefined symbol " + e);
  }
  var o = r(110), a = r(11);
  t.prototype = new o, t.prototype._compile = function(e) {
    return e.undef = i, e.Unit = a, '(scope["' + this.name + '"] !\x3d\x3d undefined ? scope["' + this.name + '"] : math["' + this.name + '"] !\x3d\x3d undefined ? math["' + this.name + '"] : ' + (a.isPlainUnit(this.name) ? 'new Unit(null, "' + this.name + '")' : 'undef("' + this.name + '")') + ")";
  }, t.prototype.toString = function() {
    return this.name;
  }, e.exports = t;
}, function(e, n, r) {
  function t(e, n) {
    this.value = e, this.unit = n;
  }
  var i = r(110), o = (r(220), r(7), r(11), r(221));
  o.toNumber;
  t.prototype = new i, t.prototype._compile = function(e) {
    return "math.unit(" + this.value._compile(e) + ', "' + this.unit + '")';
  }, t.prototype.find = function(e) {
    var n = [];
    return this.match(e) && n.push(this), n = n.concat(this.value.find(e));
  }, t.prototype.toString = function() {
    return this.value + " " + this.unit;
  }, e.exports = t;
}, function(e, n, r) {
  function t(e, n) {
    if (!(e instanceof a)) {
      throw new TypeError("index mus be an IndexNode");
    }
    this.index = e, this.expr = n;
  }
  var i = r(221), o = r(110), a = (r(113), r(108));
  r(114), r(220), r(9), r(8), i.isNumber, i.toNumber;
  t.prototype = new o, t.prototype._compile = function(e) {
    return'scope["' + this.index.objectName() + '"] \x3d ' + this.index.compileSubset(e, this.expr._compile(e));
  }, t.prototype.find = function(e) {
    var n = [];
    this.match(e) && n.push(this);
    var r = this.ranges;
    if (r) {
      for (var t = 0, i = r.length;i > t;t++) {
        n = n.concat(r[t].find(e));
      }
    }
    return this.expr && (n = n.concat(this.expr.find(e))), n;
  }, t.prototype.toString = function() {
    return this.index.toString() + " \x3d " + this.expr.toString();
  }, e.exports = t;
}, function(e, n, r) {
  n.array = r(222), n["boolean"] = r(223), n.number = r(221), n.object = r(2), n.string = r(218), n.types = r(217);
}, function(e) {
  e.exports = {name:"e", category:"Constants", syntax:["e"], description:"Euler's number, the base of the natural logarithm. Approximately equal to 2.71828", examples:["e", "e ^ 2", "exp(2)", "log(e)"], seealso:["exp"]};
}, function(e) {
  e.exports = {name:"false", category:"Constants", syntax:["false"], description:"Boolean value false", examples:["false"], seealso:["true"]};
}, function(e) {
  e.exports = {name:"i", category:"Constants", syntax:["i"], description:"Imaginary unit, defined as i*i\x3d-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.", examples:["i", "i * i", "sqrt(-1)"], seealso:[]};
}, function(e) {
  e.exports = {name:"Infinity", category:"Constants", syntax:["Infinity"], description:"Infinity, a number which is larger than the maximum number that can be handled by a floating point number.", examples:["Infinity", "1 / 0"], seealso:[]};
}, function(e) {
  e.exports = {name:"LN2", category:"Constants", syntax:["LN2"], description:"Returns the natural logarithm of 2, approximately equal to 0.693", examples:["LN2", "log(2)"], seealso:[]};
}, function(e) {
  e.exports = {name:"LN10", category:"Constants", syntax:["LN10"], description:"Returns the natural logarithm of 10, approximately equal to 2.302", examples:["LN10", "log(10)"], seealso:[]};
}, function(e) {
  e.exports = {name:"LOG2E", category:"Constants", syntax:["LOG2E"], description:"Returns the base-2 logarithm of E, approximately equal to 1.442", examples:["LOG2E", "log(e, 2)"], seealso:[]};
}, function(e) {
  e.exports = {name:"LOG10E", category:"Constants", syntax:["LOG10E"], description:"Returns the base-10 logarithm of E, approximately equal to 0.434", examples:["LOG10E", "log(e, 10)"], seealso:[]};
}, function(e) {
  e.exports = {name:"NaN", category:"Constants", syntax:["NaN"], description:"Not a number", examples:["NaN", "0 / 0"], seealso:[]};
}, function(e) {
  e.exports = {name:"pi", category:"Constants", syntax:["pi"], description:"The number pi is a mathematical constant that is the ratio of a circle's circumference to its diameter, and is approximately equal to 3.14159", examples:["pi", "sin(pi/2)"], seealso:["tau"]};
}, function(e) {
  e.exports = {name:"SQRT1_2", category:"Constants", syntax:["SQRT1_2"], description:"Returns the square root of 1/2, approximately equal to 0.707", examples:["SQRT1_2", "sqrt(1/2)"], seealso:[]};
}, function(e) {
  e.exports = {name:"SQRT2", category:"Constants", syntax:["SQRT2"], description:"Returns the square root of 2, approximately equal to 1.414", examples:["SQRT2", "sqrt(2)"], seealso:[]};
}, function(e) {
  e.exports = {name:"tau", category:"Constants", syntax:["pi"], description:"Tau is the ratio constant of a circle's circumference to radius, equal to 2 * pi, approximately 6.2832.", examples:["tau", "2 * pi"], seealso:["pi"]};
}, function(e) {
  e.exports = {name:"true", category:"Constants", syntax:["true"], description:"Boolean value true", examples:["true"], seealso:["false"]};
}, function(e) {
  e.exports = {name:"abs", category:"Arithmetic", syntax:["abs(x)"], description:"Compute the absolute value.", examples:["abs(3.5)", "abs(-4.2)"], seealso:["sign"]};
}, function(e) {
  e.exports = {name:"add", category:"Operators", syntax:["x + y", "add(x, y)"], description:"Add two values.", examples:["2.1 + 3.6", "ans - 3.6", "3 + 2i", '"hello" + " world"', "3 cm + 2 inch"], seealso:["subtract"]};
}, function(e) {
  e.exports = {name:"ceil", category:"Arithmetic", syntax:["ceil(x)"], description:"Round a value towards plus infinity.If x is complex, both real and imaginary part are rounded towards plus infinity.", examples:["ceil(3.2)", "ceil(3.8)", "ceil(-4.2)"], seealso:["floor", "fix", "round"]};
}, function(e) {
  e.exports = {name:"cube", category:"Arithmetic", syntax:["cube(x)"], description:"Compute the cube of a value. The cube of x is x * x * x.", examples:["cube(2)", "2^3", "2 * 2 * 2"], seealso:["multiply", "square", "pow"]};
}, function(e) {
  e.exports = {name:"divide", category:"Operators", syntax:["x / y", "divide(x, y)"], description:"Divide two values.", examples:["2 / 3", "ans * 3", "4.5 / 2", "3 + 4 / 2", "(3 + 4) / 2", "18 km / 4.5"], seealso:["multiply"]};
}, function(e) {
  e.exports = {name:"edivide", category:"Operators", syntax:["x ./ y", "edivide(x, y)"], description:"divide two values element wise.", examples:["a \x3d [1, 2, 3; 4, 5, 6]", "b \x3d [2, 1, 1; 3, 2, 5]", "a ./ b"], seealso:["multiply", "emultiply", "divide"]};
}, function(e) {
  e.exports = {name:"emultiply", category:"Operators", syntax:["x .* y", "emultiply(x, y)"], description:"multiply two values element wise.", examples:["a \x3d [1, 2, 3; 4, 5, 6]", "b \x3d [2, 1, 1; 3, 2, 5]", "a .* b"], seealso:["multiply", "divide", "edivide"]};
}, function(e) {
  e.exports = {name:"epow", category:"Operators", syntax:["x .^ y", "epow(x, y)"], description:"Calculates the power of x to y element wise.", examples:["a \x3d [1, 2, 3; 4, 5, 6]", "a .^ 2"], seealso:["pow"]};
}, function(e) {
  e.exports = {name:"equal", category:"Operators", syntax:["x \x3d\x3d y", "equal(x, y)"], description:"Check equality of two values. Returns 1 if the values are equal, and 0 if not.", examples:["2+2 \x3d\x3d 3", "2+2 \x3d\x3d 4", "a \x3d 3.2", "b \x3d 6-2.8", "a \x3d\x3d b", "50cm \x3d\x3d 0.5m"], seealso:["unequal", "smaller", "larger", "smallereq", "largereq"]};
}, function(e) {
  e.exports = {name:"exp", category:"Arithmetic", syntax:["exp(x)"], description:"Calculate the exponent of a value.", examples:["exp(1.3)", "e ^ 1.3", "log(exp(1.3))", "x \x3d 2.4", "(exp(i*x) \x3d\x3d cos(x) + i*sin(x))   # Euler's formula"], seealso:["square", "multiply", "log"]};
}, function(e) {
  e.exports = {name:"fix", category:"Arithmetic", syntax:["fix(x)"], description:"Round a value towards zero.If x is complex, both real and imaginary part are rounded towards zero.", examples:["fix(3.2)", "fix(3.8)", "fix(-4.2)", "fix(-4.8)"], seealso:["ceil", "floor", "round"]};
}, function(e) {
  e.exports = {name:"floor", category:"Arithmetic", syntax:["floor(x)"], description:"Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.", examples:["floor(3.2)", "floor(3.8)", "floor(-4.2)"], seealso:["ceil", "fix", "round"]};
}, function(e) {
  e.exports = {name:"gcd", category:"Arithmetic", syntax:["gcd(a, b)", "gcd(a, b, c, ...)"], description:"Compute the greatest common divisor.", examples:["gcd(8, 12)", "gcd(-4, 6)", "gcd(25, 15, -10)"], seealso:["lcm", "xgcd"]};
}, function(e) {
  e.exports = {name:"larger", category:"Operators", syntax:["x \x3e y", "larger(x, y)"], description:"Check if value x is larger than y. Returns 1 if x is larger than y, and 0 if not.", examples:["2 \x3e 3", "5 \x3e 2*2", "a \x3d 3.3", "b \x3d 6-2.8", "(a \x3e b)", "(b \x3c a)", "5 cm \x3e 2 inch"], seealso:["equal", "unequal", "smaller", "smallereq", "largereq"]};
}, function(e) {
  e.exports = {name:"largereq", category:"Operators", syntax:["x \x3e\x3d y", "largereq(x, y)"], description:"Check if value x is larger or equal to y. Returns 1 if x is larger or equal to y, and 0 if not.", examples:["2 \x3e 1+1", "2 \x3e\x3d 1+1", "a \x3d 3.2", "b \x3d 6-2.8", "(a \x3e b)"], seealso:["equal", "unequal", "smallereq", "smaller", "largereq"]};
}, function(e) {
  e.exports = {name:"lcm", category:"Arithmetic", syntax:["lcm(x, y)"], description:"Compute the least common multiple.", examples:["lcm(4, 6)", "lcm(6, 21)", "lcm(6, 21, 5)"], seealso:["gcd"]};
}, function(e) {
  e.exports = {name:"log", category:"Arithmetic", syntax:["log(x)", "log(x, base)"], description:"Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).", examples:["log(3.5)", "a \x3d log(2.4)", "exp(a)", "10 ^ 3", "log(1000, 10)", "log(1000) / log(10)", "b \x3d logb(1024, 2)", "2 ^ b"], seealso:["exp", "log10"]};
}, function(e) {
  e.exports = {name:"log10", category:"Arithmetic", syntax:["log10(x)"], description:"Compute the 10-base logarithm of a value.", examples:["log10(1000)", "10 ^ 3", "log10(0.01)", "log(1000) / log(10)", "log(1000, 10)"], seealso:["exp", "log"]};
}, function(e) {
  e.exports = {name:"mod", category:"Operators", syntax:["x % y", "x mod y", "mod(x, y)"], description:"Calculates the modulus, the remainder of an integer division.", examples:["7 % 3", "11 % 2", "10 mod 4", "function isOdd(x) \x3d x % 2", "isOdd(2)", "isOdd(3)"], seealso:[]};
}, function(e) {
  e.exports = {name:"multiply", category:"Operators", syntax:["x * y", "multiply(x, y)"], description:"multiply two values.", examples:["2.1 * 3.6", "ans / 3.6", "2 * 3 + 4", "2 * (3 + 4)", "3 * 2.1 km"], seealso:["divide"]};
}, function(e) {
  e.exports = {name:"pow", category:"Operators", syntax:["x ^ y", "pow(x, y)"], description:"Calculates the power of x to y, x^y.", examples:["2^3 \x3d 8", "2*2*2", "1 + e ^ (pi * i)"], seealso:["unequal", "smaller", "larger", "smallereq", "largereq"]};
}, function(e) {
  e.exports = {name:"round", category:"Arithmetic", syntax:["round(x)", "round(x, n)"], description:"round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.", examples:["round(3.2)", "round(3.8)", "round(-4.2)", "round(-4.8)", "round(pi, 3)", "round(123.45678, 2)"], seealso:["ceil", "floor", "fix"]};
}, function(e) {
  e.exports = {name:"sign", category:"Arithmetic", syntax:["sign(x)"], description:"Compute the sign of a value. The sign of a value x is 1 when x\x3e1, -1 when x\x3c0, and 0 when x\x3d0.", examples:["sign(3.5)", "sign(-4.2)", "sign(0)"], seealso:["abs"]};
}, function(e) {
  e.exports = {name:"smaller", category:"Operators", syntax:["x \x3c y", "smaller(x, y)"], description:"Check if value x is smaller than value y. Returns 1 if x is smaller than y, and 0 if not.", examples:["2 \x3c 3", "5 \x3c 2*2", "a \x3d 3.3", "b \x3d 6-2.8", "(a \x3c b)", "5 cm \x3c 2 inch"], seealso:["equal", "unequal", "larger", "smallereq", "largereq"]};
}, function(e) {
  e.exports = {name:"smallereq", category:"Operators", syntax:["x \x3c\x3d y", "smallereq(x, y)"], description:"Check if value x is smaller or equal to value y. Returns 1 if x is smaller than y, and 0 if not.", examples:["2 \x3c 1+1", "2 \x3c\x3d 1+1", "a \x3d 3.2", "b \x3d 6-2.8", "(a \x3c b)"], seealso:["equal", "unequal", "larger", "smaller", "largereq"]};
}, function(e) {
  e.exports = {name:"sqrt", category:"Arithmetic", syntax:["sqrt(x)"], description:"Compute the square root value. If x \x3d y * y, then y is the square root of x.", examples:["sqrt(25)", "5 * 5", "sqrt(-1)"], seealso:["square", "multiply"]};
}, function(e) {
  e.exports = {name:"square", category:"Arithmetic", syntax:["square(x)"], description:"Compute the square of a value. The square of x is x * x.", examples:["square(3)", "sqrt(9)", "3^2", "3 * 3"], seealso:["multiply", "pow", "sqrt", "cube"]};
}, function(e) {
  e.exports = {name:"subtract", category:"Operators", syntax:["x - y", "subtract(x, y)"], description:"subtract two values.", examples:["5.3 - 2", "ans + 2", "2/3 - 1/6", "2 * 3 - 3", "2.1 km - 500m"], seealso:["add"]};
}, function(e) {
  e.exports = {name:"unary", category:"Operators", syntax:["-x", "unary(x)"], description:"Inverse the sign of a value.", examples:["-4.5", "-(-5.6)"], seealso:["add", "subtract"]};
}, function(e) {
  e.exports = {name:"unequal", category:"Operators", syntax:["x !\x3d y", "unequal(x, y)"], description:"Check unequality of two values. Returns 1 if the values are unequal, and 0 if they are equal.", examples:["2+2 !\x3d 3", "2+2 !\x3d 4", "a \x3d 3.2", "b \x3d 6-2.8", "a !\x3d b", "50cm !\x3d 0.5m", "5 cm !\x3d 2 inch"], seealso:["equal", "smaller", "larger", "smallereq", "largereq"]};
}, function(e) {
  e.exports = {name:"xgcd", category:"Arithmetic", syntax:["xgcd(a, b)"], description:"Calculate the extended greatest common divisor for two values", examples:["xgcd(8, 12)", "gcd(8, 12)", "xgcd(36163, 21199)"], seealso:["gcd", "lcm"]};
}, function(e) {
  e.exports = {name:"arg", category:"Complex", syntax:["arg(x)"], description:"Compute the argument of a complex value. If x \x3d a+bi, the argument is computed as atan2(b, a).", examples:["arg(2 + 2i)", "atan2(3, 2)", "arg(2 - 3i)"], seealso:["re", "im", "conj", "abs"]};
}, function(e) {
  e.exports = {name:"conj", category:"Complex", syntax:["conj(x)"], description:"Compute the complex conjugate of a complex value. If x \x3d a+bi, the complex conjugate is a-bi.", examples:["conj(2 + 3i)", "conj(2 - 3i)", "conj(-5.2i)"], seealso:["re", "im", "abs", "arg"]};
}, function(e) {
  e.exports = {name:"re", category:"Complex", syntax:["re(x)"], description:"Get the real part of a complex number.", examples:["re(2 + 3i)", "im(2 + 3i)", "re(-5.2i)", "re(2.4)"], seealso:["im", "conj", "abs", "arg"]};
}, function(e) {
  e.exports = {name:"im", category:"Complex", syntax:["im(x)"], description:"Get the imaginary part of a complex number.", examples:["im(2 + 3i)", "re(2 + 3i)", "im(-5.2i)", "im(2.4)"], seealso:["re", "conj", "abs", "arg"]};
}, function(e) {
  e.exports = {name:"bignumber", category:"Type", syntax:["bignumber(x)"], description:"Create a big number from a number or string.", examples:["0.1 + 0.2", "bignumber(0.1) + bignumber(0.2)", 'bignumber("7.2")', 'bignumber("7.2e500")', "bignumber([0.1, 0.2, 0.3])"], seealso:["boolean", "complex", "index", "matrix", "string", "unit"]};
}, function(e) {
  e.exports = {name:"boolean", category:"Type", syntax:["x", "boolean(x)"], description:"Convert a string or number into a boolean.", examples:["boolean(0)", "boolean(1)", "boolean(3)", 'boolean("true")', 'boolean("false")', "boolean([1, 0, 1, 1])"], seealso:["bignumber", "complex", "index", "matrix", "number", "string", "unit"]};
}, function(e) {
  e.exports = {name:"complex", category:"Type", syntax:["complex()", "complex(re, im)", "complex(string)"], description:"Create a complex number.", examples:["complex()", "complex(2, 3)", 'complex("7 - 2i")'], seealso:["bignumber", "boolean", "index", "matrix", "number", "string", "unit"]};
}, function(e) {
  e.exports = {name:"index", category:"Type", syntax:["[start]", "[start:end]", "[start:step:end]", "[start1, start 2, ...]", "[start1:end1, start2:end2, ...]", "[start1:step1:end1, start2:step2:end2, ...]"], description:"Create an index to get or replace a subset of a matrix", examples:["[]", "[1, 2, 3]", "A \x3d [1, 2, 3; 4, 5, 6]", "A[1, :]", "A[1, 2] \x3d 50", "A[0:2, 0:2] \x3d ones(2, 2)"], seealso:["bignumber", "boolean", "complex", "matrix,", "number", "range", "string", "unit"]};
}, function(e) {
  e.exports = {name:"matrix", category:"Type", syntax:["[]", "[a1, b1, ...; a2, b2, ...]", "matrix()", "matrix([...])"], description:"Create a matrix.", examples:["[]", "[1, 2, 3]", "[1, 2, 3; 4, 5, 6]", "matrix()", "matrix([3, 4])"], seealso:["bignumber", "boolean", "complex", "index", "number", "string", "unit"]};
}, function(e) {
  e.exports = {name:"number", category:"Type", syntax:["x", "number(x)"], description:"Create a number or convert a string or boolean into a number.", examples:["2", "2e3", "4.05", "number(2)", 'number("7.2")', "number(true)", "number([true, false, true, true])"], seealso:["bignumber", "boolean", "complex", "index", "matrix", "string", "unit"]};
}, function(e) {
  e.exports = {name:"string", category:"Type", syntax:['"text"', "string(x)"], description:"Create a string or convert a value to a string", examples:['"Hello World!"', "string(4.2)", "string(3 + 2i)"], seealso:["bignumber", "boolean", "complex", "index", "matrix", "number", "unit"]};
}, function(e) {
  e.exports = {name:"unit", category:"Type", syntax:["value unit", "unit(value, unit)", "unit(string)"], description:"Create a unit.", examples:["5.5 mm", "3 inch", 'unit(7.1, "kilogram")', 'unit("23 deg")'], seealso:["bignumber", "boolean", "complex", "index", "matrix", "number", "string"]};
}, function(e) {
  e.exports = {name:"eval", category:"Expression", syntax:["eval(expression)", "eval([expr1, expr2, expr3, ...])"], description:"Evaluate an expression or an array with expressions.", examples:['eval("2 + 3")', 'eval("sqrt(" + 4 + ")")'], seealso:[]};
}, function(e) {
  e.exports = {name:"help", category:"Expression", syntax:["help(object)", "help(string)"], description:"Display documentation on a function or data type.", examples:["help(sqrt)", 'help("complex")'], seealso:[]};
}, function(e) {
  e.exports = {name:"concat", category:"Matrix", syntax:["concat(a, b, c, ...)", "concat(a, b, c, ..., dim)"], description:"Concatenate matrices. By default, the matrices are concatenated by the first dimension. The dimension on which to concatenate can be provided as last argument.", examples:["a \x3d [1, 2; 5, 6]", "b \x3d [3, 4; 7, 8]", "concat(a, b)", "[a, b]", "concat(a, b, 2)", "[a; b]"], seealso:["det", "diag", "eye", "inv", "ones", "range", "size", "squeeze", "subset", "transpose", "zeros"]};
}, function(e) {
  e.exports = {name:"det", category:"Matrix", syntax:["det(x)"], description:"Calculate the determinant of a matrix", examples:["det([1, 2; 3, 4])", "det([-2, 2, 3; -1, 1, 3; 2, 0, -1])"], seealso:["concat", "diag", "eye", "inv", "ones", "range", "size", "squeeze", "subset", "transpose", "zeros"]};
}, function(e) {
  e.exports = {name:"diag", category:"Matrix", syntax:["diag(x)", "diag(x, k)"], description:"Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned.When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.", 
  examples:["diag(1:3)", "diag(1:3, 1)", "a \x3d [1, 2, 3; 4, 5, 6; 7, 8, 9]", "diag(a)"], seealso:["concat", "det", "eye", "inv", "ones", "range", "size", "squeeze", "subset", "transpose", "zeros"]};
}, function(e) {
  e.exports = {name:"eye", category:"Matrix", syntax:["eye(n)", "eye(m, n)", "eye([m, n])", "eye"], description:"Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.", examples:["eye(3)", "eye(3, 5)", "a \x3d [1, 2, 3; 4, 5, 6]", "eye(size(a))"], seealso:["concat", "det", "diag", "inv", "ones", "range", "size", "squeeze", "subset", "transpose", "zeros"]};
}, function(e) {
  e.exports = {name:"inv", category:"Matrix", syntax:["inv(x)"], description:"Calculate the inverse of a matrix", examples:["inv([1, 2; 3, 4])", "inv(4)", "1 / 4"], seealso:["concat", "det", "diag", "eye", "ones", "range", "size", "squeeze", "subset", "transpose", "zeros"]};
}, function(e) {
  e.exports = {name:"ones", category:"Matrix", syntax:["ones(m)", "ones(m, n)", "ones(m, n, p, ...)", "ones([m])", "ones([m, n])", "ones([m, n, p, ...])", "ones"], description:"Create a matrix containing ones.", examples:["ones(3)", "ones(3, 5)", "ones([2,3]) * 4.5", "a \x3d [1, 2, 3; 4, 5, 6]", "ones(size(a))"], seealso:["concat", "det", "diag", "eye", "inv", "range", "size", "squeeze", "subset", "transpose", "zeros"]};
}, function(e) {
  e.exports = {name:"range", category:"Type", syntax:["start:end", "start:step:end", "range(start, end)", "range(start, end, step)", "range(string)"], description:"Create a range. Lower bound of the range is included, upper bound is excluded.", examples:["1:5", "3:-1:-3", "range(3, 7)", "range(0, 12, 2)", 'range("4:10")', "a \x3d [1, 2, 3, 4; 5, 6, 7, 8]", "a[1:2, 1:2]"], seealso:["concat", "det", "diag", "eye", "inv", "ones", "size", "squeeze", "subset", "transpose", "zeros"]};
}, function(e) {
  e.exports = {name:"resize", category:"Matrix", syntax:["resize(x, size)", "resize(x, size, defaultValue)"], description:"Resize a matrix.", examples:["resize([1,2,3,4,5], [3])", "resize([1,2,3], [5], 0)", "resize(2, [2, 3], 0)", 'resize("hello", [8], "!")'], seealso:["size", "subset", "squeeze"]};
}, function(e) {
  e.exports = {name:"size", category:"Matrix", syntax:["size(x)"], description:"Calculate the size of a matrix.", examples:["size(2.3)", 'size("hello world")', "a \x3d [1, 2; 3, 4; 5, 6]", "size(a)", "size(1:6)"], seealso:["concat", "det", "diag", "eye", "inv", "ones", "range", "squeeze", "subset", "transpose", "zeros"]};
}, function(e) {
  e.exports = {name:"squeeze", category:"Matrix", syntax:["squeeze(x)"], description:"Remove singleton dimensions from a matrix.", examples:["a \x3d zeros(1,3,2)", "size(squeeze(a))", "b \x3d zeros(3,1,1)", "size(squeeze(b))"], seealso:["concat", "det", "diag", "eye", "inv", "ones", "range", "size", "subset", "transpose", "zeros"]};
}, function(e) {
  e.exports = {name:"subset", category:"Matrix", syntax:["value(index)", "value(index) \x3d replacement", "subset(value, [index])", "subset(value, [index], replacement)"], description:"Get or set a subset of a matrix or string. Indexes are one-based. Both the ranges lower-bound and upper-bound are included.", examples:["d \x3d [1, 2; 3, 4]", "e \x3d []", "e[1, 1:2] \x3d [5, 6]", "e[2, :] \x3d [7, 8]", "f \x3d d * e", "f[2, 1]", "f[:, 1]"], seealso:["concat", "det", "diag", "eye", "inv", "ones", "range", 
  "size", "squeeze", "transpose", "zeros"]};
}, function(e) {
  e.exports = {name:"transpose", category:"Matrix", syntax:["x'", "transpose(x)"], description:"Transpose a matrix", examples:["a \x3d [1, 2, 3; 4, 5, 6]", "a'", "transpose(a)"], seealso:["concat", "det", "diag", "eye", "inv", "ones", "range", "size", "squeeze", "subset", "zeros"]};
}, function(e) {
  e.exports = {name:"zeros", category:"Matrix", syntax:["zeros(m)", "zeros(m, n)", "zeros(m, n, p, ...)", "zeros([m])", "zeros([m, n])", "zeros([m, n, p, ...])", "zeros"], description:"Create a matrix containing zeros.", examples:["zeros(3)", "zeros(3, 5)", "a \x3d [1, 2, 3; 4, 5, 6]", "zeros(size(a))"], seealso:["concat", "det", "diag", "eye", "inv", "ones", "range", "size", "squeeze", "subset", "transpose"]};
}, function(e) {
  e.exports = {name:"combinations", category:"Probability", syntax:["combinations(n, k)"], description:"Compute the number of combinations of n items taken k at a time", examples:["combinations(7, 5)"], seealso:["permutations", "factorial"]};
}, function(e) {
  e.exports = {name:"distribution", category:"Probability", syntax:["distribution(name)", "distribution(name, arg1, arg2, ...)"], description:'Create a distribution object of a specific type. A distribution object contains functions `random([size,] [min,] [max])`, `randomInt([size,] [min,] [max])`, and `pickRandom(array)`. Available types of distributions: "uniform", "normal". Note that the function distribution is currently not available via the expression parser.', examples:[], seealso:["random", 
  "randomInt"]};
}, function(e) {
  e.exports = {name:"factorial", category:"Probability", syntax:["n!", "factorial(n)"], description:"Compute the factorial of a value", examples:["5!", "5*4*3*2*1", "3!"], seealso:[]};
}, function(e) {
  e.exports = {name:"permutations", category:"Probability", syntax:["permutations(n)", "permutations(n, k)"], description:"Compute the number of permutations of n items taken k at a time", examples:["permutations(5)", "permutations(5, 4)"], seealso:["combinations", "factorial"]};
}, function(e) {
  e.exports = {name:"pickRandom", category:"Probability", syntax:["pickRandom(array)"], description:"Pick a random entry from a given array.", examples:["pickRandom(0:10)", "pickRandom([1, 3, 1, 6])"], seealso:["distribution", "random", "randomInt"]};
}, function(e) {
  e.exports = {name:"random", category:"Probability", syntax:["random()", "random(max)", "random(min, max)", "random(size)", "random(size, max)", "random(size, min, max)"], description:"Return a random number.", examples:["random()", "random(10, 20)", "random([2, 3])"], seealso:["distribution", "pickRandom", "randomInt"]};
}, function(e) {
  e.exports = {name:"randInt", category:"Probability", syntax:["randInt()", "randInt(max)", "randInt(min, max)", "randInt(size)", "randInt(size, max)", "randInt(size, min, max)"], description:"Return a random integer number", examples:["randInt()", "randInt(10, 20)", "randInt([2, 3], 10)"], seealso:["distribution", "pickRandom", "random"]};
}, function(e) {
  e.exports = {name:"min", category:"Statistics", syntax:["min(a, b, c, ...)", "min(A)", "min(A, dim)"], description:"Compute the minimum value of a list of values.", examples:["min(2, 3, 4, 1)", "min([2, 3, 4, 1])", "min([2, 5; 4, 3], 0)", "min([2, 5; 4, 3], 1)", "min(2.7, 7.1, -4.5, 2.0, 4.1)", "max(2.7, 7.1, -4.5, 2.0, 4.1)"], seealso:["max", "mean", "min"]};
}, function(e) {
  e.exports = {name:"mean", category:"Statistics", syntax:["mean(a, b, c, ...)", "mean(A)", "mean(A, dim)"], description:"Compute the arithmetic mean of a list of values.", examples:["mean(2, 3, 4, 1)", "mean([2, 3, 4, 1])", "mean([2, 5; 4, 3], 0)", "mean([2, 5; 4, 3], 1)", "mean([1.0, 2.7, 3.2, 4.0])"], seealso:["max", "min"]};
}, function(e) {
  e.exports = {name:"max", category:"Statistics", syntax:["max(a, b, c, ...)", "max(A)", "max(A, dim)"], description:"Compute the maximum value of a list of values.", examples:["max(2, 3, 4, 1)", "max([2, 3, 4, 1])", "max([2, 5; 4, 3], 0)", "max([2, 5; 4, 3], 1)", "max(2.7, 7.1, -4.5, 2.0, 4.1)", "min(2.7, 7.1, -4.5, 2.0, 4.1)"], seealso:["mean", "min"]};
}, function(e) {
  e.exports = {name:"acos", category:"Trigonometry", syntax:["acos(x)"], description:"Compute the inverse cosine of a value in radians.", examples:["acos(0.5)", "acos(cos(2.3))"], seealso:["cos", "acos", "asin"]};
}, function(e) {
  e.exports = {name:"asin", category:"Trigonometry", syntax:["asin(x)"], description:"Compute the inverse sine of a value in radians.", examples:["asin(0.5)", "asin(sin(2.3))"], seealso:["sin", "acos", "asin"]};
}, function(e) {
  e.exports = {name:"atan", category:"Trigonometry", syntax:["atan(x)"], description:"Compute the inverse tangent of a value in radians.", examples:["atan(0.5)", "atan(tan(2.3))"], seealso:["tan", "acos", "asin"]};
}, function(e) {
  e.exports = {name:"atan2", category:"Trigonometry", syntax:["atan2(y, x)"], description:"Computes the principal value of the arc tangent of y/x in radians.", examples:["atan2(2, 2) / pi", "angle \x3d 60 deg in rad", "x \x3d cos(angle)", "y \x3d sin(angle)", "atan2(y, x)"], seealso:["sin", "cos", "tan"]};
}, function(e) {
  e.exports = {name:"cos", category:"Trigonometry", syntax:["cos(x)"], description:"Compute the cosine of x in radians.", examples:["cos(2)", "cos(pi / 4) ^ 2", "cos(180 deg)", "cos(60 deg)", "sin(0.2)^2 + cos(0.2)^2"], seealso:["acos", "sin", "tan"]};
}, function(e) {
  e.exports = {name:"cot", category:"Trigonometry", syntax:["cot(x)"], description:"Compute the cotangent of x in radians. Defined as 1/tan(x)", examples:["cot(2)", "1 / tan(2)"], seealso:["sec", "csc", "tan"]};
}, function(e) {
  e.exports = {name:"csc", category:"Trigonometry", syntax:["csc(x)"], description:"Compute the cosecant of x in radians. Defined as 1/sin(x)", examples:["csc(2)", "1 / sin(2)"], seealso:["sec", "cot", "sin"]};
}, function(e) {
  e.exports = {name:"sec", category:"Trigonometry", syntax:["sec(x)"], description:"Compute the secant of x in radians. Defined as 1/cos(x)", examples:["sec(2)", "1 / cos(2)"], seealso:["cot", "csc", "cos"]};
}, function(e) {
  e.exports = {name:"sin", category:"Trigonometry", syntax:["sin(x)"], description:"Compute the sine of x in radians.", examples:["sin(2)", "sin(pi / 4) ^ 2", "sin(90 deg)", "sin(30 deg)", "sin(0.2)^2 + cos(0.2)^2"], seealso:["asin", "cos", "tan"]};
}, function(e) {
  e.exports = {name:"tan", category:"Trigonometry", syntax:["tan(x)"], description:"Compute the tangent of x in radians.", examples:["tan(0.5)", "sin(0.5) / cos(0.5)", "tan(pi / 4)", "tan(45 deg)"], seealso:["atan", "sin", "cos"]};
}, function(e) {
  e.exports = {name:"to", category:"Units", syntax:["x to unit", "to(x, unit)"], description:"Change the unit of a value.", examples:["5 inch in cm", "3.2kg in g", "16 bytes in bits"], seealso:[]};
}, function(e) {
  e.exports = {name:"clone", category:"Utils", syntax:["clone(x)"], description:"Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices", examples:["clone(3.5)", "clone(2 - 4i)", "clone(45 deg)", "clone([1, 2; 3, 4])", 'clone("hello world")'], seealso:[]};
}, function(e) {
  e.exports = {name:"map", category:"Utils", syntax:["map(x, callback)"], description:"Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.", examples:["map([1, 2, 3], function(val) { return math.max(val, 1.5) })"], seealso:[]};
}, function(e) {
  e.exports = {name:"forEach", category:"Utils", syntax:["forEach(x, callback)"], description:"Iterates over all elements of a matrix/array, and executes the given callback.", examples:["forEach([1, 2, 3], function(val) { console.log(val) })"], seealso:[]};
}, function(e) {
  e.exports = {name:"format", category:"Utils", syntax:["format(value)", "format(value, precision)"], description:"Format a value of any type as string.", examples:["format(2.3)", "format(3 - 4i)", "format([])", "format(pi, 3)"], seealso:["print"]};
}, function(e) {
  e.exports = {name:"import", category:"Utils", syntax:["import(string)"], description:"Import functions from a file.", examples:['import("numbers")', 'import("./mylib.js")'], seealso:[]};
}, function(e) {
  e.exports = {name:"typeof", category:"Utils", syntax:["typeof(x)"], description:"Get the type of a variable.", examples:["typeof(3.5)", "typeof(2 - 4i)", "typeof(45 deg)", 'typeof("hello world")'], seealso:[]};
}, function(e, n) {
  n.type = function r(e) {
    var r = typeof e;
    if ("object" === r) {
      if (null === e) {
        return "null";
      }
      if (e instanceof Boolean) {
        return "boolean";
      }
      if (e instanceof Number) {
        return "number";
      }
      if (e instanceof String) {
        return "string";
      }
      if (Array.isArray(e)) {
        return "array";
      }
      if (e instanceof Date) {
        return "date";
      }
    }
    return r;
  };
}, function(e, n, r) {
  function t(e, r) {
    if (Array.isArray(e)) {
      for (var i = "[", o = e.length, a = 0;o > a;a++) {
        0 != a && (i += ", "), i += t(e[a], r);
      }
      return i += "]";
    }
    return n.format(e, r);
  }
  var i = r(221), o = r(220);
  n.isString = function(e) {
    return e instanceof String || "string" == typeof e;
  }, n.endsWith = function(e, n) {
    var r = e.length - n.length, t = e.length;
    return e.substring(r, t) === n;
  }, n.format = function(e, r) {
    return i.isNumber(e) || e instanceof o ? i.format(e, r) : Array.isArray(e) ? t(e, r) : n.isString(e) ? '"' + e + '"' : "function" == typeof e ? e.syntax ? e.syntax + "" : "function" : e instanceof Object ? "function" == typeof e.format ? e.format(r) : e.toString() : String(e);
  };
}, function(e, n, r) {
  function t(e) {
    return r(i(e));
  }
  function i(e) {
    return o[e] || function() {
      throw new Error("Cannot find module '" + e + "'.");
    }();
  }
  var o = {"./clone":95, "./clone.js":95, "./forEach":101, "./forEach.js":101, "./format":96, "./format.js":96, "./import":97, "./import.js":97, "./map":98, "./map.js":98, "./print":99, "./print.js":99, "./typeof":100, "./typeof.js":100};
  t.keys = function() {
    return Object.keys(o);
  }, t.resolve = i, e.exports = t;
}, function(e, n, r) {
  var t;
  !function(i) {
    function o(e, n) {
      var r, t, i, u, f, c, p = this;
      if (!(p instanceof o)) {
        return new o(e, n);
      }
      if (e instanceof o) {
        if (A = 0, n === r) {
          return p.s = e.s, p.e = e.e, void(p.c = (e = e.c) ? e.slice() : e);
        }
        e += "";
      }
      if ("string" != typeof e && (e = (i = "number" == typeof e || "[object Number]" == Object.prototype.toString.call(e)) && (0 === e && 0 > 1 / e) ? "-0" : e + ""), c = e, n === r && O.test(e)) {
        p.s = "-" == e.charAt(0) ? (e = e.slice(1), -1) : 1;
      } else {
        if (10 == n) {
          return l(e, g, d);
        }
        if (e = T.call(e).replace(/^\+(?!-)/, ""), p.s = "-" == e.charAt(0) ? (e = e.replace(/^-(?!-)/, ""), -1) : 1, null != n ? n != (0 | n) && y || (m = !(n >= 2 && 65 > n)) ? (a(n, 2), f = O.test(e)) : (u = "[" + M.slice(0, n = 0 | n) + "]+", e = e.replace(/\.$/, "").replace(/^\./, "0."), (f = (new RegExp("^" + u + "(?:\\." + u + ")?$", 37 > n ? "i" : "")).test(e)) ? (i && (e.replace(/^0\.0*|\./, "").length > 15 && a(c, 0), i = !i), e = s(e, 10, n, p.s)) : "Infinity" != e && ("NaN" != e && (a(c, 
        1, n), e = "NaN"))) : f = O.test(e), !f) {
          return p.c = p.e = null, "Infinity" != e && ("NaN" != e && a(c, 3), p.s = null), void(A = 0);
        }
      }
      for ((r = e.indexOf(".")) > -1 && (e = e.replace(".", "")), (t = e.search(/e/i)) > 0 ? (0 > r && (r = t), r += +e.slice(t + 1), e = e.substring(0, t)) : 0 > r && (r = e.length), t = 0;"0" == e.charAt(t);t++) {
      }
      if (n = e.length, i && (n > 15 && (e.slice(t).length > 15 && a(c, 0))), A = 0, (r -= t + 1) > b) {
        p.c = p.e = null;
      } else {
        if (t == n || w > r) {
          p.c = [p.e = 0];
        } else {
          for (;"0" == e.charAt(--n);) {
          }
          for (p.e = r, p.c = [], r = 0;n >= t;p.c[r++] = +e.charAt(t++)) {
          }
        }
      }
    }
    function a(e, n, r, t, i, o) {
      if (y) {
        var a, s = ["new BigNumber", "cmp", "div", "eq", "gt", "gte", "lt", "lte", "minus", "mod", "plus", "times", "toFr"][A ? 0 > A ? -A : A : 0 > 1 / A ? 1 : 0] + "()", u = m ? " out of range" : " not a" + (i ? " non-zero" : "n") + " integer";
        throw u = ([s + " number type has more than 15 significant digits", s + " not a base " + r + " number", s + " base" + u, s + " not a number"][n] || r + "() " + n + (o ? " not a boolean or binary digit" : u + (t ? " or not [" + (m ? " negative, positive" : " integer, integer") + " ]" : ""))) + ": " + e, m = A = 0, a = new Error(u), a.name = "BigNumber Error", a;
      }
    }
    function s(e, n, r, t) {
      function i(e, t) {
        var i, o, a = 0, s = e.length, u = [0];
        for (t = t || r;s > a;a++) {
          for (o = u.length, i = 0;o > i;u[i] *= t, i++) {
          }
          for (u[0] += M.indexOf(e.charAt(a)), i = 0;i < u.length;i++) {
            u[i] > n - 1 && (null == u[i + 1] && (u[i + 1] = 0), u[i + 1] += u[i] / n ^ 0, u[i] %= n);
          }
        }
        return u.reverse();
      }
      function a(e) {
        for (var n = 0, r = e.length, t = "";r > n;t += M.charAt(e[n++])) {
        }
        return t;
      }
      var s, f, c, l, m, p;
      if (37 > r && (e = e.toLowerCase()), (s = e.indexOf(".")) > -1) {
        if (s = e.length - s - 1, f = i((new o(r)).pow(s).toF(), 10), l = e.split("."), c = i(l[1]), l = i(l[0]), p = u(c, f, c.length - f.length, t, n, 1 & l[l.length - 1]), m = p.c, s = p.e) {
          for (;++s;m.unshift(0)) {
          }
          e = a(l) + "." + a(m);
        } else {
          m[0] ? l[s = l.length - 1] < n - 1 ? (++l[s], e = a(l)) : e = (new o(a(l), n)).plus(S).toS(n) : e = a(l);
        }
      } else {
        e = a(i(e));
      }
      return e;
    }
    function u(e, n, r, t, i, a) {
      var s, u, f, l, m, p = n.slice(), h = s = n.length, d = e.length, x = e.slice(0, s), v = x.length, y = new o(S), E = y.c = [], N = 0, M = g + (y.e = r) + 1;
      for (y.s = t, t = 0 > M ? 0 : M;v++ < s;x.push(0)) {
      }
      p.unshift(0);
      do {
        for (f = 0;i > f;f++) {
          if (s != (v = x.length)) {
            l = s > v ? 1 : -1;
          } else {
            for (m = -1, l = 0;++m < s;) {
              if (n[m] != x[m]) {
                l = n[m] > x[m] ? 1 : -1;
                break;
              }
            }
          }
          if (!(0 > l)) {
            break;
          }
          for (u = v == s ? n : p;v;) {
            if (x[--v] < u[v]) {
              for (m = v;m && !x[--m];x[m] = i - 1) {
              }
              --x[m], x[v] += i;
            }
            x[v] -= u[v];
          }
          for (;!x[0];x.shift()) {
          }
        }
        E[N++] = l ? f : ++f, x[0] && l ? x[v] = e[h] || 0 : x = [e[h]];
      } while ((h++ < d || null != x[0]) && t--);
      return E[0] || (1 == N || (--y.e, E.shift())), N > M && c(y, g, i, a, null != x[0]), y.e > b ? y.c = y.e = null : y.e < w && (y.c = [y.e = 0]), y;
    }
    function f(e, n, r) {
      var t = n - (e = new o(e)).e, i = e.c;
      if (!i) {
        return e.toS();
      }
      for (i.length > ++n && c(e, t, 10), t = 0 == i[0] ? t + 1 : r ? n : e.e + t + 1;i.length < t;i.push(0)) {
      }
      return t = e.e, 1 == r || 2 == r && (--n < t || x >= t) ? (e.s < 0 && i[0] ? "-" : "") + (i.length > 1 ? (i.splice(1, 0, "."), i.join("")) : i[0]) + (0 > t ? "e" : "e+") + t : e.toS();
    }
    function c(e, n, r, t, i) {
      var o = e.c, a = e.s < 0, s = r / 2, u = e.e + n + 1, f = o[u], c = i || (0 > u || null != o[u + 1]);
      if (i = 4 > d ? (null != f || c) && (0 == d || (2 == d && !a || 3 == d && a)) : f > s || f == s && (4 == d || (c || (6 == d && (1 & o[u - 1] || !n && t) || (7 == d && !a || 8 == d && a)))), 1 > u || !o[0]) {
        return o.length = 0, o.push(0), i ? (o[0] = 1, e.e = -n) : e.e = 0, e;
      }
      if (o.length = u--, i) {
        for (--r;++o[u] > r;) {
          o[u] = 0, u-- || (++e.e, o.unshift(1));
        }
      }
      for (u = o.length;!o[--u];o.pop()) {
      }
      return e;
    }
    function l(e, n, r) {
      var t = d;
      return d = r, e = new o(e), e.c && c(e, n, 10), d = t, e;
    }
    var m, p = 1E9, h = 1E6, g = 20, d = 4, x = -7, v = 21, w = -p, b = p, y = !0, E = parseInt, N = o.prototype, M = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_", A = 0, O = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, T = String.prototype.trim || function() {
      return this.replace(/^\s+|\s+$/g, "");
    }, S = o(1);
    o.ROUND_UP = 0, o.ROUND_DOWN = 1, o.ROUND_CEIL = 2, o.ROUND_FLOOR = 3, o.ROUND_HALF_UP = 4, o.ROUND_HALF_DOWN = 5, o.ROUND_HALF_EVEN = 6, o.ROUND_HALF_CEIL = 7, o.ROUND_HALF_FLOOR = 8, o.config = function() {
      var e, n, r = 0, t = {}, i = arguments, o = i[0], s = "config", u = function(e, n, r) {
        return!((m = n > e || e > r) || E(e) != e && 0 !== e);
      }, f = o && "object" == typeof o ? function() {
        return o.hasOwnProperty(n) ? null != (e = o[n]) : void 0;
      } : function() {
        return i.length > r ? null != (e = i[r++]) : void 0;
      };
      return f(n = "DECIMAL_PLACES") && (u(e, 0, p) ? g = 0 | e : a(e, n, s)), t[n] = g, f(n = "ROUNDING_MODE") && (u(e, 0, 8) ? d = 0 | e : a(e, n, s)), t[n] = d, f(n = "EXPONENTIAL_AT") && (u(e, -p, p) ? x = -(v = ~~(0 > e ? -e : +e)) : !m && (e && (u(e[0], -p, 0) && u(e[1], 0, p))) ? (x = ~~e[0], v = ~~e[1]) : a(e, n, s, 1)), t[n] = [x, v], f(n = "RANGE") && (u(e, -p, p) && ~~e ? w = -(b = ~~(0 > e ? -e : +e)) : !m && (e && (u(e[0], -p, -1) && u(e[1], 1, p))) ? (w = ~~e[0], b = ~~e[1]) : a(e, 
      n, s, 1, 1)), t[n] = [w, b], f(n = "ERRORS") && (e === !!e || (1 === e || 0 === e) ? (m = A = 0, E = (y = !!e) ? parseInt : parseFloat) : a(e, n, s, 0, 0, 1)), t[n] = y, t;
    }, N.abs = N.absoluteValue = function() {
      var e = new o(this);
      return e.s < 0 && (e.s = 1), e;
    }, N.ceil = function() {
      return l(this, 0, 2);
    }, N.comparedTo = N.cmp = function(e, n) {
      var r, t = this, i = t.c, a = (A = -A, e = new o(e, n)).c, s = t.s, u = e.s, f = t.e, c = e.e;
      if (!s || !u) {
        return null;
      }
      if (r = i && !i[0], n = a && !a[0], r || n) {
        return r ? n ? 0 : -u : s;
      }
      if (s != u) {
        return s;
      }
      if (r = 0 > s, n = f == c, !i || !a) {
        return n ? 0 : !i ^ r ? 1 : -1;
      }
      if (!n) {
        return f > c ^ r ? 1 : -1;
      }
      for (s = -1, u = (f = i.length) < (c = a.length) ? f : c;++s < u;) {
        if (i[s] != a[s]) {
          return i[s] > a[s] ^ r ? 1 : -1;
        }
      }
      return f == c ? 0 : f > c ^ r ? 1 : -1;
    }, N.dividedBy = N.div = function(e, n) {
      var r = this.c, t = this.e, i = this.s, a = (A = 2, e = new o(e, n)).c, s = e.e, f = e.s, c = i == f ? 1 : -1;
      return(t || r && r[0]) && (s || a && a[0]) ? u(r, a, t - s, c, 10) : new o(i && (f && (r ? !a || r[0] != a[0] : a)) ? r && 0 == r[0] || !a ? 0 * c : c / 0 : 0 / 0);
    }, N.equals = N.eq = function(e, n) {
      return A = 3, 0 === this.cmp(e, n);
    }, N.floor = function() {
      return l(this, 0, 3);
    }, N.greaterThan = N.gt = function(e, n) {
      return A = 4, this.cmp(e, n) > 0;
    }, N.greaterThanOrEqualTo = N.gte = function(e, n) {
      return A = 5, 1 == (n = this.cmp(e, n)) || 0 === n;
    }, N.isFinite = N.isF = function() {
      return!!this.c;
    }, N.isNaN = function() {
      return!this.s;
    }, N.isNegative = N.isNeg = function() {
      return this.s < 0;
    }, N.isZero = N.isZ = function() {
      return!!this.c && 0 == this.c[0];
    }, N.lessThan = N.lt = function(e, n) {
      return A = 6, this.cmp(e, n) < 0;
    }, N.lessThanOrEqualTo = N.lte = function(e, n) {
      return A = 7, -1 == (n = this.cmp(e, n)) || 0 === n;
    }, N.minus = function(e, n) {
      var r, t, i, a, s = this, u = s.s;
      if (n = (A = 8, e = new o(e, n)).s, !u || !n) {
        return new o(0 / 0);
      }
      if (u != n) {
        return e.s = -n, s.plus(e);
      }
      var f = s.c, c = s.e, l = e.c, m = e.e;
      if (!c || !m) {
        if (!f || !l) {
          return f ? (e.s = -n, e) : new o(l ? s : 0 / 0);
        }
        if (!f[0] || !l[0]) {
          return l[0] ? (e.s = -n, e) : new o(f[0] ? s : 3 == d ? -0 : 0);
        }
      }
      if (f = f.slice(), u = c - m) {
        for (r = (a = 0 > u) ? (u = -u, f) : (m = c, l), r.reverse(), n = u;n--;r.push(0)) {
        }
        r.reverse();
      } else {
        for (i = ((a = f.length < l.length) ? f : l).length, u = n = 0;i > n;n++) {
          if (f[n] != l[n]) {
            a = f[n] < l[n];
            break;
          }
        }
      }
      if (a && (r = f, f = l, l = r, e.s = -e.s), (n = -((i = f.length) - l.length)) > 0) {
        for (;n--;f[i++] = 0) {
        }
      }
      for (n = l.length;n > u;) {
        if (f[--n] < l[n]) {
          for (t = n;t && !f[--t];f[t] = 9) {
          }
          --f[t], f[n] += 10;
        }
        f[n] -= l[n];
      }
      for (;0 == f[--i];f.pop()) {
      }
      for (;0 == f[0];f.shift(), --m) {
      }
      return(w > m || !f[0]) && (f[0] || (e.s = 3 == d ? -1 : 1), f = [m = 0]), e.c = f, e.e = m, e;
    }, N.modulo = N.mod = function(e, n) {
      var r = this, t = r.c, i = (A = 9, e = new o(e, n)).c, a = r.s, s = e.s;
      return n = !a || (!s || i && !i[0]), n || t && !t[0] ? new o(n ? 0 / 0 : r) : (r.s = e.s = 1, n = 1 == e.cmp(r), r.s = a, e.s = s, n ? new o(r) : (a = g, s = d, g = 0, d = 1, r = r.div(e), g = a, d = s, this.minus(r.times(e))));
    }, N.negated = N.neg = function() {
      var e = new o(this);
      return e.s = -e.s || null, e;
    }, N.plus = function(e, n) {
      var r, t = this, i = t.s;
      if (n = (A = 10, e = new o(e, n)).s, !i || !n) {
        return new o(0 / 0);
      }
      if (i != n) {
        return e.s = -n, t.minus(e);
      }
      var a = t.e, s = t.c, u = e.e, f = e.c;
      if (!a || !u) {
        if (!s || !f) {
          return new o(i / 0);
        }
        if (!s[0] || !f[0]) {
          return f[0] ? e : new o(s[0] ? t : 0 * i);
        }
      }
      if (s = s.slice(), i = a - u) {
        for (r = i > 0 ? (u = a, f) : (i = -i, s), r.reverse();i--;r.push(0)) {
        }
        r.reverse();
      }
      for (s.length - f.length < 0 && (r = f, f = s, s = r), i = f.length, n = 0;i;n = (s[--i] = s[i] + f[i] + n) / 10 ^ 0, s[i] %= 10) {
      }
      for (n && (s.unshift(n), ++u > b && (s = u = null)), i = s.length;0 == s[--i];s.pop()) {
      }
      return e.c = s, e.e = u, e;
    }, N.toPower = N.pow = function(e) {
      var n = 0 * e == 0 ? 0 | e : e, r = new o(this), t = new o(S);
      if (((m = -h > e || e > h) && (n = 1 * e / 0) || E(e) != e && (0 !== e && !(n = 0 / 0))) && !a(e, "exponent", "pow") || !n) {
        return new o(Math.pow(r.toS(), n));
      }
      for (n = 0 > n ? -n : n;1 & n && (t = t.times(r)), n >>= 1, n;) {
        r = r.times(r);
      }
      return 0 > e ? S.div(t) : t;
    }, N.round = function(e, n) {
      return e = null == e || ((m = 0 > e || e > p) || E(e) != e) && !a(e, "decimal places", "round") ? 0 : 0 | e, n = null == n || ((m = 0 > n || n > 8) || E(n) != n && 0 !== n) && !a(n, "mode", "round") ? d : 0 | n, l(this, e, n);
    }, N.squareRoot = N.sqrt = function() {
      var e, n, r, t, i = this, a = i.c, s = i.s, u = i.e, f = g, l = d, m = new o("0.5");
      if (1 !== s || (!a || !a[0])) {
        return new o(!s || 0 > s && (!a || a[0]) ? 0 / 0 : a ? i : 1 / 0);
      }
      for (s = Math.sqrt(i.toS()), d = 1, 0 == s || s == 1 / 0 ? (e = a.join(""), e.length + u & 1 || (e += "0"), n = new o(Math.sqrt(e) + ""), n.c || (n.c = [1]), n.e = ((u + 1) / 2 | 0) - (0 > u || 1 & u)) : n = new o(e = s.toString()), r = n.e, s = r + (g += 4), 3 > s && (s = 0), u = s;;) {
        if (t = n, n = m.times(t.plus(i.div(t))), t.c.slice(0, s).join("") === n.c.slice(0, s).join("")) {
          if (a = n.c, s -= e && n.e < r, 9 != a[s] || (9 != a[s - 1] || (9 != a[s - 2] || !(9 == a[s - 3] || e && 4 == a[s - 3])))) {
            if (!(a[u] || (a[u - 1] || (a[u - 2] || (a[u - 3] && 5 != a[u - 3] || (a.length > u - 2 && (a.length = u - 2), n.times(n).eq(i))))))) {
              for (;a.length < u - 3;) {
                a.push(0);
              }
              a[u - 3]++;
            }
            return d = l, c(n, g = f, 10), n;
          }
          if (e && (9 == a[s - 3] && (t = n.round(f, 0), t.times(t).eq(i)))) {
            return d = l, g = f, t;
          }
          g += 4, s += 4, e = "";
        }
      }
    }, N.times = function(e, n) {
      var r, t = this, i = t.c, a = (A = 11, e = new o(e, n)).c, s = t.e, u = e.e, f = t.s;
      if (e.s = f == (n = e.s) ? 1 : -1, !((s || i && i[0]) && (u || a && a[0]))) {
        return new o(!f || (!n || (i && (!i[0] && !a) || a && (!a[0] && !i))) ? 0 / 0 : i && a ? 0 * e.s : e.s / 0);
      }
      for (e.e = s + u, (f = i.length) < (n = a.length) && (r = i, i = a, a = r, u = f, f = n, n = u), u = f + n, r = [];u--;r.push(0)) {
      }
      for (s = n - 1;s > -1;s--) {
        for (n = 0, u = f + s;u > s;n = r[u] + a[s] * i[u - s - 1] + n, r[u--] = n % 10 | 0, n = n / 10 | 0) {
        }
        n && (r[u] = (r[u] + n) % 10);
      }
      for (n && ++e.e, !r[0] && r.shift(), u = r.length;!r[--u];r.pop()) {
      }
      return e.c = e.e > b ? e.e = null : e.e < w ? [e.e = 0] : r, e;
    }, N.toExponential = N.toE = function(e) {
      return f(this, (null == e || ((m = 0 > e || e > p) || E(e) != e && 0 !== e) && !a(e, "decimal places", "toE")) && this.c ? this.c.length - 1 : 0 | e, 1);
    }, N.toFixed = N.toF = function(e) {
      var n, r, t, i = this;
      return null == e || (((m = 0 > e || e > p) || E(e) != e && 0 !== e) && !a(e, "decimal places", "toF") || (t = i.e + (0 | e))), n = x, e = v, x = -(v = 1 / 0), t == r ? r = i.toS() : (r = f(i, t), i.s < 0 && (i.c && (i.c[0] ? r.indexOf("-") < 0 && (r = "-" + r) : r = r.replace(/^-/, "")))), x = n, v = e, r;
    }, N.toFraction = N.toFr = function(e) {
      var n, r, t, i, s, u, f, c = i = new o(S), l = t = new o("0"), p = this, h = p.c, x = b, v = g, w = d, E = new o(S);
      if (!h) {
        return p.toS();
      }
      for (f = E.e = h.length - p.e - 1, (null == e || ((!(A = 12, u = new o(e)).s || ((m = u.cmp(c) < 0 || !u.c) || y && u.e < u.c.length - 1)) && !a(e, "max denominator", "toFr") || (e = u).cmp(E) > 0)) && (e = f > 0 ? E : c), b = 1 / 0, u = new o(h.join("")), g = 0, d = 1;n = u.div(E), s = i.plus(n.times(l)), 1 != s.cmp(e);) {
        i = l, l = s, c = t.plus(n.times(s = c)), t = s, E = u.minus(n.times(s = E)), u = s;
      }
      return s = e.minus(i).div(l), t = t.plus(s.times(c)), i = i.plus(s.times(l)), t.s = c.s = p.s, g = 2 * f, d = w, r = c.div(l).minus(p).abs().cmp(t.div(i).minus(p).abs()) < 1 ? [c.toS(), l.toS()] : [t.toS(), i.toS()], b = x, g = v, r;
    }, N.toPrecision = N.toP = function(e) {
      return null == e || ((m = 1 > e || e > p) || E(e) != e) && !a(e, "precision", "toP") ? this.toS() : f(this, 0 | --e, 2);
    }, N.toString = N.toS = function(e) {
      var n, r, t, i = this, o = i.e;
      if (null === o) {
        r = i.s ? "Infinity" : "NaN";
      } else {
        if (e === n && (x >= o || o >= v)) {
          return f(i, i.c.length - 1, 1);
        }
        if (r = i.c.join(""), 0 > o) {
          for (;++o;r = "0" + r) {
          }
          r = "0." + r;
        } else {
          if (t = r.length, o > 0) {
            if (++o > t) {
              for (o -= t;o--;r += "0") {
              }
            } else {
              t > o && (r = r.slice(0, o) + "." + r.slice(o));
            }
          } else {
            if (n = r.charAt(0), t > 1) {
              r = n + "." + r.slice(1);
            } else {
              if ("0" == n) {
                return n;
              }
            }
          }
        }
        if (null != e) {
          if ((m = !(e >= 2 && 65 > e)) || e != (0 | e) && y) {
            a(e, "base", "toS");
          } else {
            if (r = s(r, 0 | e, 10, i.s), "0" == r) {
              return r;
            }
          }
        }
      }
      return i.s < 0 ? "-" + r : r;
    }, N.valueOf = function() {
      return this.toS();
    }, "undefined" != typeof e && e.exports ? e.exports = o : (t = function() {
      return o;
    }.call(n, r, n, e), !(void 0 !== t && (e.exports = t)));
  }(this);
}, function(e, n, r) {
  function t(e) {
    return e instanceof o ? e.isZero() : 0 === e;
  }
  function i(e, n, r) {
    var t;
    return e instanceof o ? (t = e.abs(), t.gte(n) && t.lt(r)) : (t = Math.abs(e), t >= n && r > t);
  }
  var o = r(220);
  n.isNumber = function(e) {
    return e instanceof Number || "number" == typeof e;
  }, n.isInteger = function(e) {
    return e == Math.round(e);
  }, n.sign = function(e) {
    return e > 0 ? 1 : 0 > e ? -1 : 0;
  }, n.format = function(e, r) {
    if ("function" == typeof r) {
      return r(e);
    }
    if (1 / 0 === e) {
      return "Infinity";
    }
    if (e === -1 / 0) {
      return "-Infinity";
    }
    if (isNaN(e)) {
      return "NaN";
    }
    var a = "auto", s = void 0;
    switch(void 0 !== r && (r.notation && (a = r.notation), r && (n.isNumber(r) ? s = r : r.precision && (s = r.precision))), a) {
      case "fixed":
        return n.toFixed(e, s);
      case "scientific":
        throw new Error('Format notation "scientific" is deprecated. Use "exponential" instead.');;
      case "exponential":
        return n.toExponential(e, s);
      case "auto":
        var u = 0.001, f = 1E5;
        if (r && r.exponential) {
          void 0 !== r.exponential.lower && (u = r.exponential.lower), void 0 !== r.exponential.upper && (f = r.exponential.upper);
        } else {
          if (r && r.scientific) {
            throw new Error("options.scientific is deprecated, use options.exponential instead.");
          }
        }
        var c = e instanceof o;
        if (c) {
          var l = o.config().EXPONENTIAL_AT;
          o.config({EXPONENTIAL_AT:[Math.round(Math.log(u) / Math.LN10), Math.round(Math.log(f) / Math.LN10)]});
        }
        if (t(e)) {
          return "0";
        }
        var m;
        if (i(e, u, f)) {
          if (c) {
            m = (new o(e.toPrecision(s))).toString();
          } else {
            var p = s ? e.toPrecision(Math.min(s, 21)) : e.toPrecision();
            m = parseFloat(p) + "";
          }
        } else {
          m = n.toExponential(e, s);
        }
        return c && o.config({EXPONENTIAL_AT:l}), m.replace(/((\.\d*?)(0+))($|e)/, function() {
          var e = arguments[2], n = arguments[4];
          return "." !== e ? e + n : n;
        });
      default:
        throw new Error('Unknown notation "' + a + '". Choose "auto", "exponential", or "fixed".');;
    }
  }, n.toExponential = function(e, n) {
    return void 0 !== n ? e.toExponential(e instanceof o ? n - 1 : Math.min(n - 1, 20)) : e.toExponential();
  }, n.toFixed = function(e, n) {
    return e.toFixed(e instanceof o ? n || 0 : Math.min(n, 20));
  }, n.digits = function(e) {
    return e.toExponential().replace(/e[\+\-0-9]*$/, "").replace(/^0\.0*|\./, "").length;
  }, n.toBigNumber = function(e) {
    return n.digits(e) > 15 ? e : new o(e);
  }, n.toNumber = function(e) {
    return parseFloat(e.valueOf());
  };
}, function(e, n, r) {
  function t(e) {
    for (var n = [];f(e);) {
      n.push(e.length), e = e[0];
    }
    return n;
  }
  function i(e, n, r) {
    var t, o = e.length;
    if (o != n[r]) {
      throw new RangeError("Dimension mismatch (" + o + " !\x3d " + n[r] + ")");
    }
    if (r < n.length - 1) {
      var a = r + 1;
      for (t = 0;o > t;t++) {
        var s = e[t];
        if (!f(s)) {
          throw new RangeError("Dimension mismatch (" + (n.length - 1) + " \x3c " + n.length + ")");
        }
        i(e[t], n, a);
      }
    } else {
      for (t = 0;o > t;t++) {
        if (f(e[t])) {
          throw new RangeError("Dimension mismatch (" + (n.length + 1) + " \x3e " + n.length + ")");
        }
      }
    }
  }
  function o(e, n, r, t) {
    if (!f(e)) {
      throw Error("Array expected");
    }
    var i, a, s = e.length, c = n[r], l = Math.min(s, c);
    if (e.length = c, r < n.length - 1) {
      var m = r + 1;
      for (i = 0;l > i;i++) {
        a = e[i], o(a, n, m, t);
      }
      for (i = l;c > i;i++) {
        a = [], e[i] = a, o(a, n, m, t);
      }
    } else {
      if (void 0 !== t) {
        for (i = s;c > i;i++) {
          e[i] = u.clone(t);
        }
      }
    }
  }
  var a = r(221), s = r(218), u = r(2), f = (r(217), Array.isArray);
  n.size = function(e) {
    var r = t(e);
    return n.validate(e, r), r;
  }, n.validate = function(e, n) {
    var r = 0 == n.length;
    if (r) {
      if (f(e)) {
        throw new RangeError("Dimension mismatch (" + e.length + " !\x3d 0)");
      }
    } else {
      i(e, n, 0);
    }
  }, n.validateIndex = function(e, n) {
    if (!a.isNumber(e) || !a.isInteger(e)) {
      throw new TypeError("Index must be an integer (value: " + e + ")");
    }
    if (0 > e) {
      throw new RangeError("Index out of range (" + e + " \x3c 0)");
    }
    if (void 0 !== n && e >= n) {
      throw new RangeError("Index out of range (" + e + " \x3e " + (n - 1) + ")");
    }
  }, n.resize = function(e, n, r) {
    if (!f(e) || !f(n)) {
      throw new TypeError("Array expected");
    }
    if (0 === n.length) {
      throw new Error("Resizing to scalar is not supported");
    }
    n.forEach(function(e) {
      if (!a.isNumber(e) || (!a.isInteger(e) || 0 > e)) {
        throw new TypeError("Invalid size, must contain positive integers (size: " + s.format(n) + ")");
      }
    });
    for (var t = 1, i = e[0];f(i);) {
      t++, i = i[0];
    }
    for (;t < n.length;) {
      e = [e], t++;
    }
    for (;t > n.length;) {
      e = e[0], t--;
    }
    return o(e, n, 0, r), e;
  }, n.squeeze = function(e) {
    for (;f(e) && 1 === e.length;) {
      e = e[0];
    }
    return e;
  }, n.unsqueeze = function(e, r) {
    for (var t = n.size(e), i = 0, o = r - t.length;o > i;i++) {
      e = [e];
    }
    return e;
  }, n.isArray = f;
}, function(e, n) {
  n.isBoolean = function(e) {
    return e instanceof Boolean || "boolean" == typeof e;
  };
}]);
goog.provide("qgame.utils.math");
goog.require("cljs.core");
goog.require("clojure.walk");
goog.require("clojure.walk");
goog.require("clojure.walk");
goog.require("math.js");
qgame.utils.math.math = mathjs();
qgame.utils.math.to_matrix = function to_matrix(x) {
  if (cljs.core.sequential_QMARK_.call(null, x)) {
    return new qgame.utils.math.math.matrix(cljs.core.to_array.call(null, x));
  } else {
    return x;
  }
};
qgame.utils.math.nested_to_matrix = function nested_to_matrix(coll) {
  return clojure.walk.postwalk.call(null, qgame.utils.math.to_matrix, coll);
};
qgame.utils.math.to_vec = function to_vec(x) {
  if (x instanceof Array) {
    return cljs.core.vec.call(null, x);
  } else {
    if (cljs.core._EQ_.call(null, qgame.utils.math.math.typeof(x), "matrix")) {
      return cljs.core.vec.call(null, x.toArray());
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return x;
      } else {
        return null;
      }
    }
  }
};
qgame.utils.math.nested_to_vec = function nested_to_vec(mat) {
  return clojure.walk.prewalk.call(null, qgame.utils.math.to_vec, mat);
};
qgame.utils.math.matrix_safe = function() {
  var matrix_safe = null;
  var matrix_safe__2 = function(f, x) {
    return qgame.utils.math.nested_to_vec.call(null, f.call(null, qgame.utils.math.nested_to_matrix.call(null, x)));
  };
  var matrix_safe__3 = function(f, x, y) {
    var x_STAR_ = qgame.utils.math.nested_to_matrix.call(null, x);
    var y_STAR_ = qgame.utils.math.nested_to_matrix.call(null, y);
    return qgame.utils.math.nested_to_vec.call(null, f.call(null, x_STAR_, y_STAR_));
  };
  matrix_safe = function(f, x, y) {
    switch(arguments.length) {
      case 2:
        return matrix_safe__2.call(this, f, x);
      case 3:
        return matrix_safe__3.call(this, f, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  matrix_safe.cljs$core$IFn$_invoke$arity$2 = matrix_safe__2;
  matrix_safe.cljs$core$IFn$_invoke$arity$3 = matrix_safe__3;
  return matrix_safe;
}();
qgame.utils.math.pi = qgame.utils.math.math.pi;
qgame.utils.math.sqrt2 = qgame.utils.math.math.SQRT2;
qgame.utils.math.sqrt1_2 = qgame.utils.math.math.SQRT1_2;
qgame.utils.math.i = qgame.utils.math.math.i;
qgame.utils.math.abs = function abs(x) {
  return qgame.utils.math.matrix_safe.call(null, qgame.utils.math.math.abs, x);
};
qgame.utils.math.round = function() {
  var round = null;
  var round__1 = function(x) {
    return round.call(null, x, 0);
  };
  var round__2 = function(x, digits) {
    return qgame.utils.math.matrix_safe.call(null, function(p1__6339_SHARP_) {
      return qgame.utils.math.math.round.call(null, p1__6339_SHARP_, digits);
    }, x);
  };
  round = function(x, digits) {
    switch(arguments.length) {
      case 1:
        return round__1.call(this, x);
      case 2:
        return round__2.call(this, x, digits);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  round.cljs$core$IFn$_invoke$arity$1 = round__1;
  round.cljs$core$IFn$_invoke$arity$2 = round__2;
  return round;
}();
qgame.utils.math.add = function() {
  var add = null;
  var add__1 = function(x) {
    return add.call(null, x, 0);
  };
  var add__2 = function(x, y) {
    return qgame.utils.math.matrix_safe.call(null, qgame.utils.math.math.add, x, y);
  };
  var add__3 = function() {
    var G__6340__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, add, add.call(null, x, y), more);
    };
    var G__6340 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6340__delegate.call(this, x, y, more);
    };
    G__6340.cljs$lang$maxFixedArity = 2;
    G__6340.cljs$lang$applyTo = function(arglist__6341) {
      var x = cljs.core.first(arglist__6341);
      arglist__6341 = cljs.core.next(arglist__6341);
      var y = cljs.core.first(arglist__6341);
      var more = cljs.core.rest(arglist__6341);
      return G__6340__delegate(x, y, more);
    };
    G__6340.cljs$core$IFn$_invoke$arity$variadic = G__6340__delegate;
    return G__6340;
  }();
  add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return add__1.call(this, x);
      case 2:
        return add__2.call(this, x, y);
      default:
        return add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  add.cljs$lang$maxFixedArity = 2;
  add.cljs$lang$applyTo = add__3.cljs$lang$applyTo;
  add.cljs$core$IFn$_invoke$arity$1 = add__1;
  add.cljs$core$IFn$_invoke$arity$2 = add__2;
  add.cljs$core$IFn$_invoke$arity$variadic = add__3.cljs$core$IFn$_invoke$arity$variadic;
  return add;
}();
qgame.utils.math.subtract = function() {
  var subtract = null;
  var subtract__1 = function(x) {
    return subtract.call(null, 0, x);
  };
  var subtract__2 = function(x, y) {
    return qgame.utils.math.matrix_safe.call(null, qgame.utils.math.math.subtract, x, y);
  };
  var subtract__3 = function() {
    var G__6342__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, subtract, subtract.call(null, x, y), more);
    };
    var G__6342 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6342__delegate.call(this, x, y, more);
    };
    G__6342.cljs$lang$maxFixedArity = 2;
    G__6342.cljs$lang$applyTo = function(arglist__6343) {
      var x = cljs.core.first(arglist__6343);
      arglist__6343 = cljs.core.next(arglist__6343);
      var y = cljs.core.first(arglist__6343);
      var more = cljs.core.rest(arglist__6343);
      return G__6342__delegate(x, y, more);
    };
    G__6342.cljs$core$IFn$_invoke$arity$variadic = G__6342__delegate;
    return G__6342;
  }();
  subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return subtract__1.call(this, x);
      case 2:
        return subtract__2.call(this, x, y);
      default:
        return subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subtract.cljs$lang$maxFixedArity = 2;
  subtract.cljs$lang$applyTo = subtract__3.cljs$lang$applyTo;
  subtract.cljs$core$IFn$_invoke$arity$1 = subtract__1;
  subtract.cljs$core$IFn$_invoke$arity$2 = subtract__2;
  subtract.cljs$core$IFn$_invoke$arity$variadic = subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return subtract;
}();
qgame.utils.math.multiply = function multiply(x, y) {
  return qgame.utils.math.matrix_safe.call(null, qgame.utils.math.math.multiply, x, y);
};
qgame.utils.math.divide = function divide(x, y) {
  return qgame.utils.math.matrix_safe.call(null, qgame.utils.math.math.divide, x, y);
};
qgame.utils.math.sqrt = function sqrt(x) {
  return qgame.utils.math.matrix_safe.call(null, qgame.utils.math.math.sqrt, x);
};
qgame.utils.math.cos = function cos(x) {
  return qgame.utils.math.matrix_safe.call(null, qgame.utils.math.math.cos, x);
};
qgame.utils.math.sin = function sin(x) {
  return qgame.utils.math.matrix_safe.call(null, qgame.utils.math.math.sin, x);
};
qgame.utils.math.exp_xi = function exp_xi(x) {
  return qgame.utils.math.math.exp.call(null, new qgame.utils.math.math.complex(0, x));
};
qgame.utils.math.radians_to_degrees = function radians_to_degrees(x) {
  return qgame.utils.math.multiply.call(null, qgame.utils.math.divide.call(null, x, qgame.utils.math.math.tau), 360);
};
qgame.utils.math.to_phase = function to_phase(x) {
  return qgame.utils.math.matrix_safe.call(null, cljs.core.comp.call(null, qgame.utils.math.radians_to_degrees, qgame.utils.math.math.arg), x);
};
qgame.utils.math.det = function det(mat) {
  return qgame.utils.math.matrix_safe.call(null, qgame.utils.math.math.det, mat);
};
qgame.utils.math.rand_2D_complex = function() {
  var rand_2D_complex = null;
  var rand_2D_complex__3 = function(m, n, bound) {
    return rand_2D_complex.call(null, m, n, bound, bound);
  };
  var rand_2D_complex__4 = function(m, n, real_bound, imag_bound) {
    var rand_n = function rand_n(bound) {
      return cljs.core.rand_int.call(null, bound * 2 + 1 - bound);
    };
    var rand_cmp = function rand_cmp() {
      return new qgame.utils.math.math.complex(rand_n.call(null, real_bound), rand_n.call(null, imag_bound));
    };
    var rand_1D = function rand_1D(dim) {
      return qgame.utils.math.to_matrix.call(null, cljs.core.repeatedly.call(null, dim, rand_cmp));
    };
    return qgame.utils.math.to_matrix.call(null, cljs.core.repeatedly.call(null, m, function() {
      return rand_1D.call(null, n);
    }));
  };
  rand_2D_complex = function(m, n, real_bound, imag_bound) {
    switch(arguments.length) {
      case 3:
        return rand_2D_complex__3.call(this, m, n, real_bound);
      case 4:
        return rand_2D_complex__4.call(this, m, n, real_bound, imag_bound);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand_2D_complex.cljs$core$IFn$_invoke$arity$3 = rand_2D_complex__3;
  rand_2D_complex.cljs$core$IFn$_invoke$arity$4 = rand_2D_complex__4;
  return rand_2D_complex;
}();
qgame.utils.math.mat_EQ__QMARK_ = function() {
  var mat_EQ__QMARK_ = null;
  var mat_EQ__QMARK___2 = function(mat01, mat02) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.false_QMARK_, qgame.utils.math.math.equal.call(null, mat01.size(), mat02.size())))) {
      return false;
    } else {
      return cljs.core.every_QMARK_.call(null, cljs.core.true_QMARK_, cljs.core.flatten.call(null, qgame.utils.math.nested_to_vec.call(null, qgame.utils.math.math.equal.call(null, mat01, mat02))));
    }
  };
  var mat_EQ__QMARK___3 = function() {
    var G__6344__delegate = function(mat01, mat02, more) {
      var and__3438__auto__ = mat_EQ__QMARK_.call(null, mat01, mat02);
      if (and__3438__auto__) {
        return cljs.core.apply.call(null, mat_EQ__QMARK_, mat02, more);
      } else {
        return and__3438__auto__;
      }
    };
    var G__6344 = function(mat01, mat02, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6344__delegate.call(this, mat01, mat02, more);
    };
    G__6344.cljs$lang$maxFixedArity = 2;
    G__6344.cljs$lang$applyTo = function(arglist__6345) {
      var mat01 = cljs.core.first(arglist__6345);
      arglist__6345 = cljs.core.next(arglist__6345);
      var mat02 = cljs.core.first(arglist__6345);
      var more = cljs.core.rest(arglist__6345);
      return G__6344__delegate(mat01, mat02, more);
    };
    G__6344.cljs$core$IFn$_invoke$arity$variadic = G__6344__delegate;
    return G__6344;
  }();
  mat_EQ__QMARK_ = function(mat01, mat02, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return mat_EQ__QMARK___2.call(this, mat01, mat02);
      default:
        return mat_EQ__QMARK___3.cljs$core$IFn$_invoke$arity$variadic(mat01, mat02, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mat_EQ__QMARK_.cljs$lang$maxFixedArity = 2;
  mat_EQ__QMARK_.cljs$lang$applyTo = mat_EQ__QMARK___3.cljs$lang$applyTo;
  mat_EQ__QMARK_.cljs$core$IFn$_invoke$arity$2 = mat_EQ__QMARK___2;
  mat_EQ__QMARK_.cljs$core$IFn$_invoke$arity$variadic = mat_EQ__QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return mat_EQ__QMARK_;
}();
qgame.utils.math.square_QMARK_ = function square_QMARK_(coll) {
  var mat = qgame.utils.math.nested_to_matrix.call(null, coll);
  var vec__6347 = mat.size();
  var rows = cljs.core.nth.call(null, vec__6347, 0, null);
  var cols = cljs.core.nth.call(null, vec__6347, 1, null);
  return cljs.core._EQ_.call(null, rows, cols);
};
qgame.utils.math.complex_conjugate = function complex_conjugate(x) {
  return qgame.utils.math.matrix_safe.call(null, qgame.utils.math.math.conj, x);
};
qgame.utils.math.conjugate_transpose = function conjugate_transpose(mat) {
  return qgame.utils.math.complex_conjugate.call(null, qgame.utils.math.matrix_safe.call(null, qgame.utils.math.math.transpose, mat));
};
qgame.utils.math.unitary_QMARK_ = function unitary_QMARK_(coll) {
  var mat = qgame.utils.math.nested_to_matrix.call(null, coll);
  var vec__6349 = mat.size();
  var m = cljs.core.nth.call(null, vec__6349, 0, null);
  var n = cljs.core.nth.call(null, vec__6349, 1, null);
  var id_mat = qgame.utils.math.math.eye.call(null, m, n);
  var conj_trans = qgame.utils.math.conjugate_transpose.call(null, mat);
  return qgame.utils.math.mat_EQ__QMARK_.call(null, id_mat, qgame.utils.math.nested_to_matrix.call(null, qgame.utils.math.round.call(null, qgame.utils.math.multiply.call(null, mat, conj_trans), 5)), qgame.utils.math.nested_to_matrix.call(null, qgame.utils.math.round.call(null, qgame.utils.math.multiply.call(null, conj_trans, mat), 5)));
};
qgame.utils.math.to_string = function to_string(x) {
  return x.toString();
};
qgame.utils.math.eval_math_string = function eval_math_string(s) {
  return qgame.utils.math.round.call(null, qgame.utils.math.math.eval.call(null, s), 9);
};
goog.provide("qgame.utils.general");
goog.require("cljs.core");
qgame.utils.general.update_sub = function update_sub(m, f, ks) {
  return cljs.core.reduce_kv.call(null, cljs.core.assoc, m, cljs.core.zipmap.call(null, ks, f.call(null, cljs.core.map.call(null, cljs.core.partial.call(null, cljs.core.get, m), ks))));
};
qgame.utils.general.itermap = function itermap(f, init, coll) {
  var temp__4090__auto__ = cljs.core.seq.call(null, coll);
  if (temp__4090__auto__) {
    var s = temp__4090__auto__;
    return itermap.call(null, f, cljs.core.concat.call(null, init, cljs.core.map.call(null, function(p1__6311_SHARP_) {
      return f.call(null, p1__6311_SHARP_, cljs.core.first.call(null, s));
    }, init)), cljs.core.rest.call(null, s));
  } else {
    return init;
  }
};
qgame.utils.general.bit_size = function bit_size(x) {
  var n = 1;
  while (true) {
    if (x <= 1 << n) {
      return n;
    } else {
      var G__6312 = n + 1;
      n = G__6312;
      continue;
    }
    break;
  }
};
qgame.utils.general.anywhere_QMARK_ = function anywhere_QMARK_(pred, x) {
  var or__3450__auto__ = pred.call(null, x);
  if (cljs.core.truth_(or__3450__auto__)) {
    return or__3450__auto__;
  } else {
    var and__3438__auto__ = cljs.core.coll_QMARK_.call(null, x);
    if (and__3438__auto__) {
      return cljs.core.some.call(null, cljs.core.partial.call(null, anywhere_QMARK_, pred), x);
    } else {
      return and__3438__auto__;
    }
  }
};
qgame.utils.general.regex_join = function() {
  var regex_join__delegate = function(re_or_strs) {
    return cljs.core.re_pattern.call(null, cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, function(p1__6313_SHARP_) {
      var temp__4090__auto__ = p1__6313_SHARP_.source;
      if (cljs.core.truth_(temp__4090__auto__)) {
        var src = temp__4090__auto__;
        return src;
      } else {
        return p1__6313_SHARP_;
      }
    }, re_or_strs)));
  };
  var regex_join = function(var_args) {
    var re_or_strs = null;
    if (arguments.length > 0) {
      re_or_strs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return regex_join__delegate.call(this, re_or_strs);
  };
  regex_join.cljs$lang$maxFixedArity = 0;
  regex_join.cljs$lang$applyTo = function(arglist__6314) {
    var re_or_strs = cljs.core.seq(arglist__6314);
    return regex_join__delegate(re_or_strs);
  };
  regex_join.cljs$core$IFn$_invoke$arity$variadic = regex_join__delegate;
  return regex_join;
}();
qgame.utils.general.errant_QMARK_ = function errant_QMARK_(expression) {
  return qgame.utils.general.anywhere_QMARK_.call(null, cljs.core.every_pred.call(null, cljs.core.map_QMARK_, new cljs.core.Keyword(null, "error", "error", 1110689146)), expression);
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__7731 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__7731;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__7735 = cljs.core._EQ_;
    var expr__7736 = limit;
    if (cljs.core.truth_(pred__7735.call(null, 1, expr__7736))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__7735.call(null, 2, expr__7736))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__7738 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__7739 = limit__$1 - 1;
            var G__7740 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__7738;
            limit__$1 = G__7739;
            parts = G__7740;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__7741 = index - 1;
        index = G__7741;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4090__auto___7742 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4090__auto___7742)) {
        var replacement_7743 = temp__4090__auto___7742;
        buffer.append([cljs.core.str(replacement_7743)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__7744 = index + 1;
      index = G__7744;
      continue;
    }
    break;
  }
};
goog.provide("qgame.utils.amplitudes");
goog.require("cljs.core");
goog.require("qgame.utils.general");
goog.require("qgame.utils.math");
goog.require("qgame.utils.general");
goog.require("qgame.utils.general");
goog.require("qgame.utils.math");
goog.require("qgame.utils.math");
qgame.utils.amplitudes.get_num_qubits = function get_num_qubits(amplitudes) {
  return qgame.utils.general.bit_size.call(null, cljs.core.count.call(null, amplitudes));
};
qgame.utils.amplitudes.amplitude_to_probability = function amplitude_to_probability(amplitude) {
  var abs_val = qgame.utils.math.abs.call(null, amplitude);
  return qgame.utils.math.multiply.call(null, abs_val, abs_val);
};
qgame.utils.amplitudes.amplitudes_to_probability = function amplitudes_to_probability(amplitudes) {
  return cljs.core.reduce.call(null, cljs.core._PLUS_, cljs.core.map.call(null, qgame.utils.amplitudes.amplitude_to_probability, amplitudes));
};
qgame.utils.amplitudes.qubits_to_amplitude_indices = function qubits_to_amplitude_indices(qubits, tot_num_qubits) {
  var excluded_qubits = cljs.core.remove.call(null, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY, qubits), cljs.core.range.call(null, tot_num_qubits));
  var iter__4120__auto__ = function iter__4841(s__4842) {
    return new cljs.core.LazySeq(null, function() {
      var s__4842__$1 = s__4842;
      while (true) {
        var temp__4092__auto__ = cljs.core.seq.call(null, s__4842__$1);
        if (temp__4092__auto__) {
          var s__4842__$2 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, s__4842__$2)) {
            var c__4118__auto__ = cljs.core.chunk_first.call(null, s__4842__$2);
            var size__4119__auto__ = cljs.core.count.call(null, c__4118__auto__);
            var b__4844 = cljs.core.chunk_buffer.call(null, size__4119__auto__);
            if (function() {
              var i__4843 = 0;
              while (true) {
                if (i__4843 < size__4119__auto__) {
                  var seed_index = cljs.core._nth.call(null, c__4118__auto__, i__4843);
                  cljs.core.chunk_append.call(null, b__4844, qgame.utils.general.itermap.call(null, cljs.core.bit_flip, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [seed_index], null), qubits));
                  var G__4845 = i__4843 + 1;
                  i__4843 = G__4845;
                  continue;
                } else {
                  return true;
                }
                break;
              }
            }()) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__4844), iter__4841.call(null, cljs.core.chunk_rest.call(null, s__4842__$2)));
            } else {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__4844), null);
            }
          } else {
            var seed_index = cljs.core.first.call(null, s__4842__$2);
            return cljs.core.cons.call(null, qgame.utils.general.itermap.call(null, cljs.core.bit_flip, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [seed_index], null), qubits), iter__4841.call(null, cljs.core.rest.call(null, s__4842__$2)));
          }
        } else {
          return null;
        }
        break;
      }
    }, null, null);
  };
  return iter__4120__auto__.call(null, qgame.utils.general.itermap.call(null, cljs.core.bit_flip, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [0], null), excluded_qubits));
};
qgame.utils.amplitudes.qubit_state_amplitudes = function qubit_state_amplitudes(amplitudes, qubit, binary_state) {
  var excluded_qubits = cljs.core.remove.call(null, cljs.core.PersistentHashSet.fromArray([qubit], true), cljs.core.range.call(null, qgame.utils.amplitudes.get_num_qubits.call(null, amplitudes)));
  var seed_index = binary_state * (0 | 1 << qubit);
  var indices = qgame.utils.general.itermap.call(null, cljs.core.bit_flip, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [seed_index], null), excluded_qubits);
  return cljs.core.map.call(null, cljs.core.partial.call(null, cljs.core.get, amplitudes), indices);
};
qgame.utils.amplitudes.probability_of = function probability_of(p__4846, qubit, binary_state) {
  var map__4848 = p__4846;
  var map__4848__$1 = cljs.core.seq_QMARK_.call(null, map__4848) ? cljs.core.apply.call(null, cljs.core.hash_map, map__4848) : map__4848;
  var amplitudes = cljs.core.get.call(null, map__4848__$1, new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714));
  var sub_amplitudes = qgame.utils.amplitudes.qubit_state_amplitudes.call(null, amplitudes, qubit, binary_state);
  return qgame.utils.amplitudes.amplitudes_to_probability.call(null, sub_amplitudes);
};
qgame.utils.amplitudes.phase_of = function phase_of(p__4849, qubit, binary_state) {
  var map__4851 = p__4849;
  var map__4851__$1 = cljs.core.seq_QMARK_.call(null, map__4851) ? cljs.core.apply.call(null, cljs.core.hash_map, map__4851) : map__4851;
  var amplitudes = cljs.core.get.call(null, map__4851__$1, new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714));
  var sub_amplitudes = qgame.utils.amplitudes.qubit_state_amplitudes.call(null, amplitudes, qubit, binary_state);
  var amplitude = cljs.core.reduce.call(null, qgame.utils.math.add, sub_amplitudes);
  return qgame.utils.math.to_phase.call(null, amplitude);
};
qgame.utils.amplitudes.substate_amplitudes = function substate_amplitudes(amplitudes, substate) {
  var qubits = cljs.core.keys.call(null, substate);
  var excluded_qubits = cljs.core.remove.call(null, cljs.core.set.call(null, qubits), cljs.core.range.call(null, qgame.utils.amplitudes.get_num_qubits.call(null, amplitudes)));
  var flip_digits = cljs.core.keep.call(null, function(qubits, excluded_qubits) {
    return function(p__4854) {
      var vec__4855 = p__4854;
      var qubit = cljs.core.nth.call(null, vec__4855, 0, null);
      var state = cljs.core.nth.call(null, vec__4855, 1, null);
      if (state === 0) {
        return null;
      } else {
        return qubit;
      }
    };
  }(qubits, excluded_qubits), substate);
  var seed_index = cljs.core.reduce.call(null, cljs.core.bit_flip, 0, flip_digits);
  var indices = qgame.utils.general.itermap.call(null, cljs.core.bit_flip, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [seed_index], null), excluded_qubits);
  return cljs.core.map.call(null, cljs.core.partial.call(null, cljs.core.get, amplitudes), indices);
};
qgame.utils.amplitudes.inner_amplitudes = function inner_amplitudes(global_amplitudes, qubits) {
  var all_zero_state = cljs.core.zipmap.call(null, qubits, cljs.core.repeat.call(null, 0));
  var all_one_state = cljs.core.zipmap.call(null, qubits, cljs.core.repeat.call(null, 1));
  var all_combinations = qgame.utils.general.itermap.call(null, cljs.core.conj, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [all_zero_state], null), all_one_state);
  return cljs.core.mapv.call(null, cljs.core.partial.call(null, qgame.utils.amplitudes.substate_amplitudes, global_amplitudes), all_combinations);
};
qgame.utils.amplitudes.self_conj_outer_prod = function self_conj_outer_prod(amplitudes) {
  var ket = cljs.core.mapv.call(null, cljs.core.vector, amplitudes);
  var bra = qgame.utils.math.conjugate_transpose.call(null, ket);
  return qgame.utils.math.multiply.call(null, ket, bra);
};
qgame.utils.amplitudes.mangled_mean_step = function mangled_mean_step(accumulated, to_incorporate) {
  var weight = qgame.utils.amplitudes.amplitudes_to_probability.call(null, to_incorporate);
  return cljs.core.mapv.call(null, function(amp, new_amp) {
    return amp * Math.pow(new_amp, weight * -(Math.log(2) / Math.log(weight / 2)));
  }, accumulated, to_incorporate);
};
qgame.utils.amplitudes.get_pairs = function get_pairs(coll) {
  var iter__4120__auto__ = function iter__4864(s__4865) {
    return new cljs.core.LazySeq(null, function() {
      var s__4865__$1 = s__4865;
      while (true) {
        var temp__4092__auto__ = cljs.core.seq.call(null, s__4865__$1);
        if (temp__4092__auto__) {
          var xs__4579__auto__ = temp__4092__auto__;
          var vec__4871 = cljs.core.first.call(null, xs__4579__auto__);
          var a = cljs.core.nth.call(null, vec__4871, 0, null);
          var remaining = cljs.core.nthnext.call(null, vec__4871, 1);
          var iterys__4116__auto__ = function(s__4865__$1, vec__4871, a, remaining, xs__4579__auto__, temp__4092__auto__) {
            return function iter__4866(s__4867) {
              return new cljs.core.LazySeq(null, function(s__4865__$1, vec__4871, a, remaining, xs__4579__auto__, temp__4092__auto__) {
                return function() {
                  var s__4867__$1 = s__4867;
                  while (true) {
                    var temp__4092__auto____$1 = cljs.core.seq.call(null, s__4867__$1);
                    if (temp__4092__auto____$1) {
                      var s__4867__$2 = temp__4092__auto____$1;
                      if (cljs.core.chunked_seq_QMARK_.call(null, s__4867__$2)) {
                        var c__4118__auto__ = cljs.core.chunk_first.call(null, s__4867__$2);
                        var size__4119__auto__ = cljs.core.count.call(null, c__4118__auto__);
                        var b__4869 = cljs.core.chunk_buffer.call(null, size__4119__auto__);
                        if (function() {
                          var i__4868 = 0;
                          while (true) {
                            if (i__4868 < size__4119__auto__) {
                              var b = cljs.core._nth.call(null, c__4118__auto__, i__4868);
                              cljs.core.chunk_append.call(null, b__4869, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a, b], null));
                              var G__4872 = i__4868 + 1;
                              i__4868 = G__4872;
                              continue;
                            } else {
                              return true;
                            }
                            break;
                          }
                        }()) {
                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__4869), iter__4866.call(null, cljs.core.chunk_rest.call(null, s__4867__$2)));
                        } else {
                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__4869), null);
                        }
                      } else {
                        var b = cljs.core.first.call(null, s__4867__$2);
                        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a, b], null), iter__4866.call(null, cljs.core.rest.call(null, s__4867__$2)));
                      }
                    } else {
                      return null;
                    }
                    break;
                  }
                };
              }(s__4865__$1, vec__4871, a, remaining, xs__4579__auto__, temp__4092__auto__), null, null);
            };
          }(s__4865__$1, vec__4871, a, remaining, xs__4579__auto__, temp__4092__auto__);
          var fs__4117__auto__ = cljs.core.seq.call(null, iterys__4116__auto__.call(null, remaining));
          if (fs__4117__auto__) {
            return cljs.core.concat.call(null, fs__4117__auto__, iter__4864.call(null, cljs.core.rest.call(null, s__4865__$1)));
          } else {
            var G__4873 = cljs.core.rest.call(null, s__4865__$1);
            s__4865__$1 = G__4873;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    }, null, null);
  };
  return iter__4120__auto__.call(null, cljs.core.take.call(null, cljs.core.count.call(null, coll), cljs.core.iterate.call(null, cljs.core.rest, coll)));
};
qgame.utils.amplitudes.to_letter = function to_letter(qubit_index) {
  return cljs.core.nth.call(null, "ABCDEFGHIJKLMNOPQRST", qubit_index);
};
qgame.utils.amplitudes.reduced_density_matrix = function reduced_density_matrix(amplitudes, qubits) {
  var inner_amps = qgame.utils.amplitudes.inner_amplitudes.call(null, amplitudes, qgame.utils.amplitudes.pair);
  var inner_amps_STAR_ = cljs.core.apply.call(null, cljs.core.mapv, cljs.core.vector, inner_amps);
  var means = cljs.core.reduce.call(null, qgame.utils.amplitudes.mangled_mean_step, cljs.core.repeat.call(null, cljs.core.count.call(null, inner_amps), 1), inner_amps_STAR_);
  return qgame.utils.amplitudes.self_conj_outer_prod.call(null, means);
};
qgame.utils.amplitudes.tangle_of = function tangle_of(p__4874, qubit_a, qubit_b) {
  var map__4881 = p__4874;
  var map__4881__$1 = cljs.core.seq_QMARK_.call(null, map__4881) ? cljs.core.apply.call(null, cljs.core.hash_map, map__4881) : map__4881;
  var amplitudes = cljs.core.get.call(null, map__4881__$1, new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714));
  var rho_ab = qgame.utils.amplitudes.reduce_density_matrix.call(null, amplitudes, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qubit_a, qubit_b], null));
  var vec__4882 = rho_ab;
  var vec__4883 = cljs.core.nth.call(null, vec__4882, 0, null);
  var a1 = cljs.core.nth.call(null, vec__4883, 0, null);
  var _ = cljs.core.nth.call(null, vec__4883, 1, null);
  var b1 = cljs.core.nth.call(null, vec__4883, 2, null);
  var ___$1 = cljs.core.nth.call(null, vec__4883, 3, null);
  var vec__4884 = cljs.core.nth.call(null, vec__4882, 1, null);
  var ___$2 = cljs.core.nth.call(null, vec__4884, 0, null);
  var a2 = cljs.core.nth.call(null, vec__4884, 1, null);
  var ___$3 = cljs.core.nth.call(null, vec__4884, 2, null);
  var b2 = cljs.core.nth.call(null, vec__4884, 3, null);
  var vec__4885 = cljs.core.nth.call(null, vec__4882, 2, null);
  var c1 = cljs.core.nth.call(null, vec__4885, 0, null);
  var ___$4 = cljs.core.nth.call(null, vec__4885, 1, null);
  var d1 = cljs.core.nth.call(null, vec__4885, 2, null);
  var ___$5 = cljs.core.nth.call(null, vec__4885, 3, null);
  var vec__4886 = cljs.core.nth.call(null, vec__4882, 3, null);
  var ___$6 = cljs.core.nth.call(null, vec__4886, 0, null);
  var c2 = cljs.core.nth.call(null, vec__4886, 1, null);
  var ___$7 = cljs.core.nth.call(null, vec__4886, 2, null);
  var d2 = cljs.core.nth.call(null, vec__4886, 3, null);
  var rho_a = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a1 + a2, b1 + b2], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [c1 + c2, d1 + d2], null)], null);
  return 4 * qgame.utils.math.det.call(null, rho_a);
};
var seq__4888_4908 = cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "description", "description", 3584325486), "|UU\x3e+|DD\x3e", new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0.70711, 0, 0, 0.70711], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"description", "description", 3584325486), "|UU\x3e+|UD\x3e+|DU\x3e+|DD\x3e", new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0.5, 0.5, 0.5, 0.5], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "description", "description", 3584325486), "|UD\x3e+|DU\x3e", new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714), new cljs.core.PersistentVector(null, 
4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0.70711, 0.70711, 0], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "description", "description", 3584325486), "||UU\x3e+|DD\x3e\x3e+||UU\x3e+|UD\x3e+|DU\x3e+|DD\x3e\x3e", new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0.61237, 0.35355, 0.35355, 0.61237], null)], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "description", "description", 3584325486), "|UUU\x3e+|UUD\x3e+|DDU\x3e+|UUD\x3e", new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714), new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [0.5, 0.5, 0, 0, 0, 0, 0.5, 0.5], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "description", "description", 3584325486), "|UUU\x3e+|DDD\x3e", new cljs.core.Keyword(null, "amplitudes", "amplitudes", 
1792075714), new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [0.70711, 0, 0, 0, 0, 0, 0, 0.70711], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "description", "description", 3584325486), "||UUU\x3e+|UUD\x3e+|DDU\x3e+|DDD\x3e\x3e+||UUU\x3e+|UUD\x3e+|UDU\x3e+|UDD\x3e+|DUU\x3e+|DUD\x3e+|DDU\x3e+|DDD\x3e\x3e", new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714), new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[0.43301, 0.43301, 0.25, 0.25, 0.25, 0.25, 0.43301, 0.43301], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "description", "description", 3584325486), "|UUUU\x3e+|UUUD\x3e+|UUDU\x3e+|UUDD\x3e+|DDUU\x3e+|DDUD\x3e+|DDDU\x3e+|DDDD\x3e", new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714), new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [0.35355, 0.35355, 0.35355, 0.35355, 0, 0, 0, 0, 0, 0, 0, 0, 0.35355, 0.35355, 
0.35355, 0.35355], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "description", "description", 3584325486), "|UUUU\x3e+|DDDD\x3e", new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714), new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [0.70711, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.70711], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "description", "description", 
3584325486), "|UUUU\x3e+|UUDD\x3e+|DDUU\x3e+|DDDD\x3e", new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714), new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [0.5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0, 0, 0.5], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "description", "description", 3584325486), "||UUUU\x3e+|UUUD\x3e+|UUDU\x3e+|UUDD\x3e+|DDUU\x3e+|DDUD\x3e+|DDDU\x3e+|DDDD\x3e\x3e+||UUUU\x3e+|UDUU\x3e+|DUUU\x3e+|DDUU\x3e+|UUDD\x3e+|UDDD\x3e+|DUDD\x3e+|DDDD\x3e\x3e", 
new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714), new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [0.35355, 0.25, 0.25, 0.35355, 0.25, 0, 0, 0.25, 0.25, 0, 0, 0.25, 0.35355, 0.25, 0.25, 0.35355], null)], null)], null));
var chunk__4890_4909 = null;
var count__4891_4910 = 0;
var i__4892_4911 = 0;
while (true) {
  if (i__4892_4911 < count__4891_4910) {
    var case_4912 = cljs.core._nth.call(null, chunk__4890_4909, i__4892_4911);
    var map__4894_4913 = case_4912;
    var map__4894_4914__$1 = cljs.core.seq_QMARK_.call(null, map__4894_4913) ? cljs.core.apply.call(null, cljs.core.hash_map, map__4894_4913) : map__4894_4913;
    var amplitudes_4915 = cljs.core.get.call(null, map__4894_4914__$1, new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714));
    var description_4916 = cljs.core.get.call(null, map__4894_4914__$1, new cljs.core.Keyword(null, "description", "description", 3584325486));
    var n_4917 = qgame.utils.general.bit_size.call(null, cljs.core.count.call(null, amplitudes_4915));
    cljs.core.println.call(null, "\nCase : ", description_4916);
    var seq__4895_4918 = cljs.core.seq.call(null, qgame.utils.amplitudes.get_pairs.call(null, cljs.core.reverse.call(null, cljs.core.range.call(null, n_4917))));
    var chunk__4897_4919 = null;
    var count__4898_4920 = 0;
    var i__4899_4921 = 0;
    while (true) {
      if (i__4899_4921 < count__4898_4920) {
        var pair_4922 = cljs.core._nth.call(null, chunk__4897_4919, i__4899_4921);
        var letters_4923 = cljs.core.mapv.call(null, function(seq__4895_4918, chunk__4897_4919, count__4898_4920, i__4899_4921, seq__4888_4908, chunk__4890_4909, count__4891_4910, i__4892_4911, pair_4922, map__4894_4913, map__4894_4914__$1, amplitudes_4915, description_4916, n_4917, case_4912) {
          return function(p1__4887_SHARP_) {
            return qgame.utils.amplitudes.to_letter.call(null, n_4917 - 1 - p1__4887_SHARP_);
          };
        }(seq__4895_4918, chunk__4897_4919, count__4898_4920, i__4899_4921, seq__4888_4908, chunk__4890_4909, count__4891_4910, i__4892_4911, pair_4922, map__4894_4913, map__4894_4914__$1, amplitudes_4915, description_4916, n_4917, case_4912), pair_4922);
        var tangle_4924 = cljs.core.apply.call(null, qgame.utils.amplitudes.tangle_of, case_4912, pair_4922);
        cljs.core.println.call(null, "\n", letters_4923, ":", tangle_4924);
        var G__4925 = seq__4895_4918;
        var G__4926 = chunk__4897_4919;
        var G__4927 = count__4898_4920;
        var G__4928 = i__4899_4921 + 1;
        seq__4895_4918 = G__4925;
        chunk__4897_4919 = G__4926;
        count__4898_4920 = G__4927;
        i__4899_4921 = G__4928;
        continue;
      } else {
        var temp__4092__auto___4929 = cljs.core.seq.call(null, seq__4895_4918);
        if (temp__4092__auto___4929) {
          var seq__4895_4930__$1 = temp__4092__auto___4929;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__4895_4930__$1)) {
            var c__4151__auto___4931 = cljs.core.chunk_first.call(null, seq__4895_4930__$1);
            var G__4932 = cljs.core.chunk_rest.call(null, seq__4895_4930__$1);
            var G__4933 = c__4151__auto___4931;
            var G__4934 = cljs.core.count.call(null, c__4151__auto___4931);
            var G__4935 = 0;
            seq__4895_4918 = G__4932;
            chunk__4897_4919 = G__4933;
            count__4898_4920 = G__4934;
            i__4899_4921 = G__4935;
            continue;
          } else {
            var pair_4936 = cljs.core.first.call(null, seq__4895_4930__$1);
            var letters_4937 = cljs.core.mapv.call(null, function(seq__4895_4918, chunk__4897_4919, count__4898_4920, i__4899_4921, seq__4888_4908, chunk__4890_4909, count__4891_4910, i__4892_4911, pair_4936, seq__4895_4930__$1, temp__4092__auto___4929, map__4894_4913, map__4894_4914__$1, amplitudes_4915, description_4916, n_4917, case_4912) {
              return function(p1__4887_SHARP_) {
                return qgame.utils.amplitudes.to_letter.call(null, n_4917 - 1 - p1__4887_SHARP_);
              };
            }(seq__4895_4918, chunk__4897_4919, count__4898_4920, i__4899_4921, seq__4888_4908, chunk__4890_4909, count__4891_4910, i__4892_4911, pair_4936, seq__4895_4930__$1, temp__4092__auto___4929, map__4894_4913, map__4894_4914__$1, amplitudes_4915, description_4916, n_4917, case_4912), pair_4936);
            var tangle_4938 = cljs.core.apply.call(null, qgame.utils.amplitudes.tangle_of, case_4912, pair_4936);
            cljs.core.println.call(null, "\n", letters_4937, ":", tangle_4938);
            var G__4939 = cljs.core.next.call(null, seq__4895_4930__$1);
            var G__4940 = null;
            var G__4941 = 0;
            var G__4942 = 0;
            seq__4895_4918 = G__4939;
            chunk__4897_4919 = G__4940;
            count__4898_4920 = G__4941;
            i__4899_4921 = G__4942;
            continue;
          }
        } else {
        }
      }
      break;
    }
    cljs.core.println.call(null, "\n");
    var G__4943 = seq__4888_4908;
    var G__4944 = chunk__4890_4909;
    var G__4945 = count__4891_4910;
    var G__4946 = i__4892_4911 + 1;
    seq__4888_4908 = G__4943;
    chunk__4890_4909 = G__4944;
    count__4891_4910 = G__4945;
    i__4892_4911 = G__4946;
    continue;
  } else {
    var temp__4092__auto___4947 = cljs.core.seq.call(null, seq__4888_4908);
    if (temp__4092__auto___4947) {
      var seq__4888_4948__$1 = temp__4092__auto___4947;
      if (cljs.core.chunked_seq_QMARK_.call(null, seq__4888_4948__$1)) {
        var c__4151__auto___4949 = cljs.core.chunk_first.call(null, seq__4888_4948__$1);
        var G__4950 = cljs.core.chunk_rest.call(null, seq__4888_4948__$1);
        var G__4951 = c__4151__auto___4949;
        var G__4952 = cljs.core.count.call(null, c__4151__auto___4949);
        var G__4953 = 0;
        seq__4888_4908 = G__4950;
        chunk__4890_4909 = G__4951;
        count__4891_4910 = G__4952;
        i__4892_4911 = G__4953;
        continue;
      } else {
        var case_4954 = cljs.core.first.call(null, seq__4888_4948__$1);
        var map__4901_4955 = case_4954;
        var map__4901_4956__$1 = cljs.core.seq_QMARK_.call(null, map__4901_4955) ? cljs.core.apply.call(null, cljs.core.hash_map, map__4901_4955) : map__4901_4955;
        var amplitudes_4957 = cljs.core.get.call(null, map__4901_4956__$1, new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714));
        var description_4958 = cljs.core.get.call(null, map__4901_4956__$1, new cljs.core.Keyword(null, "description", "description", 3584325486));
        var n_4959 = qgame.utils.general.bit_size.call(null, cljs.core.count.call(null, amplitudes_4957));
        cljs.core.println.call(null, "\nCase : ", description_4958);
        var seq__4902_4960 = cljs.core.seq.call(null, qgame.utils.amplitudes.get_pairs.call(null, cljs.core.reverse.call(null, cljs.core.range.call(null, n_4959))));
        var chunk__4904_4961 = null;
        var count__4905_4962 = 0;
        var i__4906_4963 = 0;
        while (true) {
          if (i__4906_4963 < count__4905_4962) {
            var pair_4964 = cljs.core._nth.call(null, chunk__4904_4961, i__4906_4963);
            var letters_4965 = cljs.core.mapv.call(null, function(seq__4902_4960, chunk__4904_4961, count__4905_4962, i__4906_4963, seq__4888_4908, chunk__4890_4909, count__4891_4910, i__4892_4911, pair_4964, map__4901_4955, map__4901_4956__$1, amplitudes_4957, description_4958, n_4959, case_4954, seq__4888_4948__$1, temp__4092__auto___4947) {
              return function(p1__4887_SHARP_) {
                return qgame.utils.amplitudes.to_letter.call(null, n_4959 - 1 - p1__4887_SHARP_);
              };
            }(seq__4902_4960, chunk__4904_4961, count__4905_4962, i__4906_4963, seq__4888_4908, chunk__4890_4909, count__4891_4910, i__4892_4911, pair_4964, map__4901_4955, map__4901_4956__$1, amplitudes_4957, description_4958, n_4959, case_4954, seq__4888_4948__$1, temp__4092__auto___4947), pair_4964);
            var tangle_4966 = cljs.core.apply.call(null, qgame.utils.amplitudes.tangle_of, case_4954, pair_4964);
            cljs.core.println.call(null, "\n", letters_4965, ":", tangle_4966);
            var G__4967 = seq__4902_4960;
            var G__4968 = chunk__4904_4961;
            var G__4969 = count__4905_4962;
            var G__4970 = i__4906_4963 + 1;
            seq__4902_4960 = G__4967;
            chunk__4904_4961 = G__4968;
            count__4905_4962 = G__4969;
            i__4906_4963 = G__4970;
            continue;
          } else {
            var temp__4092__auto___4971__$1 = cljs.core.seq.call(null, seq__4902_4960);
            if (temp__4092__auto___4971__$1) {
              var seq__4902_4972__$1 = temp__4092__auto___4971__$1;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__4902_4972__$1)) {
                var c__4151__auto___4973 = cljs.core.chunk_first.call(null, seq__4902_4972__$1);
                var G__4974 = cljs.core.chunk_rest.call(null, seq__4902_4972__$1);
                var G__4975 = c__4151__auto___4973;
                var G__4976 = cljs.core.count.call(null, c__4151__auto___4973);
                var G__4977 = 0;
                seq__4902_4960 = G__4974;
                chunk__4904_4961 = G__4975;
                count__4905_4962 = G__4976;
                i__4906_4963 = G__4977;
                continue;
              } else {
                var pair_4978 = cljs.core.first.call(null, seq__4902_4972__$1);
                var letters_4979 = cljs.core.mapv.call(null, function(seq__4902_4960, chunk__4904_4961, count__4905_4962, i__4906_4963, seq__4888_4908, chunk__4890_4909, count__4891_4910, i__4892_4911, pair_4978, seq__4902_4972__$1, temp__4092__auto___4971__$1, map__4901_4955, map__4901_4956__$1, amplitudes_4957, description_4958, n_4959, case_4954, seq__4888_4948__$1, temp__4092__auto___4947) {
                  return function(p1__4887_SHARP_) {
                    return qgame.utils.amplitudes.to_letter.call(null, n_4959 - 1 - p1__4887_SHARP_);
                  };
                }(seq__4902_4960, chunk__4904_4961, count__4905_4962, i__4906_4963, seq__4888_4908, chunk__4890_4909, count__4891_4910, i__4892_4911, pair_4978, seq__4902_4972__$1, temp__4092__auto___4971__$1, map__4901_4955, map__4901_4956__$1, amplitudes_4957, description_4958, n_4959, case_4954, seq__4888_4948__$1, temp__4092__auto___4947), pair_4978);
                var tangle_4980 = cljs.core.apply.call(null, qgame.utils.amplitudes.tangle_of, case_4954, pair_4978);
                cljs.core.println.call(null, "\n", letters_4979, ":", tangle_4980);
                var G__4981 = cljs.core.next.call(null, seq__4902_4972__$1);
                var G__4982 = null;
                var G__4983 = 0;
                var G__4984 = 0;
                seq__4902_4960 = G__4981;
                chunk__4904_4961 = G__4982;
                count__4905_4962 = G__4983;
                i__4906_4963 = G__4984;
                continue;
              }
            } else {
            }
          }
          break;
        }
        cljs.core.println.call(null, "\n");
        var G__4985 = cljs.core.next.call(null, seq__4888_4948__$1);
        var G__4986 = null;
        var G__4987 = 0;
        var G__4988 = 0;
        seq__4888_4908 = G__4985;
        chunk__4890_4909 = G__4986;
        count__4891_4910 = G__4987;
        i__4892_4911 = G__4988;
        continue;
      }
    } else {
    }
  }
  break;
}
var x_4991 = 0.88;
cljs.core.mapv.call(null, cljs.core.partial.call(null, cljs.core._STAR_, x_4991), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0.707, 0.707], null));
goog.provide("qgame.simulator.flow");
goog.require("cljs.core");
goog.require("qgame.utils.general");
goog.require("qgame.utils.amplitudes");
goog.require("qgame.utils.amplitudes");
goog.require("qgame.utils.amplitudes");
goog.require("qgame.utils.general");
goog.require("qgame.utils.general");
qgame.simulator.flow.force_to = function force_to(qsys, qubit, binary_state) {
  var threshold = 0;
  var qsys__$1 = cljs.core.assoc_in.call(null, cljs.core.update_in.call(null, qsys, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "measurement-history", "measurement-history", 2775390965)], null), cljs.core.conj, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qubit, binary_state], null)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "prior-probability", "prior-probability", 4421087524)], null), qgame.utils.amplitudes.probability_of.call(null, qsys, qubit, binary_state));
  var all_indices = qgame.utils.amplitudes.qubits_to_amplitude_indices.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [qubit], null), qgame.utils.amplitudes.get_num_qubits.call(null, (new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714)).cljs$core$IFn$_invoke$arity$1(qsys__$1)));
  var relevant_indices = cljs.core.map.call(null, function(threshold, qsys__$1, all_indices) {
    return function(p1__6489_SHARP_) {
      return cljs.core.nth.call(null, p1__6489_SHARP_, 1 - binary_state);
    };
  }(threshold, qsys__$1, all_indices), all_indices);
  if ((new cljs.core.Keyword(null, "prior-probability", "prior-probability", 4421087524)).cljs$core$IFn$_invoke$arity$1(qsys__$1) > threshold) {
    return cljs.core.update_in.call(null, qsys__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714)], null), qgame.utils.general.update_sub, cljs.core.constantly.call(null, cljs.core.repeat.call(null, 0)), relevant_indices);
  } else {
    return null;
  }
};
qgame.simulator.flow.force_and_split = function force_and_split(p__6490, qubit) {
  var vec__6492 = p__6490;
  var head_branch = cljs.core.nth.call(null, vec__6492, 0, null);
  var remaining = cljs.core.nthnext.call(null, vec__6492, 1);
  var one_branch = cljs.core.keep.call(null, function(qsys) {
    return qgame.simulator.flow.force_to.call(null, qsys, qubit, 1);
  }, head_branch);
  var zero_branch = cljs.core.keep.call(null, function(one_branch) {
    return function(qsys) {
      return qgame.simulator.flow.force_to.call(null, qsys, qubit, 0);
    };
  }(one_branch), head_branch);
  return cljs.core.into.call(null, remaining, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.not_empty.call(null, one_branch), cljs.core.not_empty.call(null, zero_branch)], null));
};
qgame.simulator.flow.swap_first_two = function swap_first_two(p__6493) {
  var vec__6495 = p__6493;
  var head_branch = cljs.core.nth.call(null, vec__6495, 0, null);
  var alternate_branch = cljs.core.nth.call(null, vec__6495, 1, null);
  var remaining = cljs.core.nthnext.call(null, vec__6495, 2);
  return cljs.core.into.call(null, remaining, cljs.core.take_while.call(null, cljs.core.identity, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [head_branch, alternate_branch], null)));
};
qgame.simulator.flow.concat_first_two = function concat_first_two(p__6496) {
  var vec__6498 = p__6496;
  var head_branch = cljs.core.nth.call(null, vec__6498, 0, null);
  var alternate_branch = cljs.core.nth.call(null, vec__6498, 1, null);
  var remaining = cljs.core.nthnext.call(null, vec__6498, 2);
  return cljs.core.cons.call(null, cljs.core.into.call(null, alternate_branch, head_branch), remaining);
};
qgame.simulator.flow.measure = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "FlowControl", "FlowControl", 825984929), new cljs.core.Keyword(null, "name", "name", 1017277949), "measure"], null), new cljs.core.Keyword(null, "caller", "caller", 3941096189), qgame.simulator.flow.force_and_split, new cljs.core.Keyword(null, 
"num-qubits", "num-qubits", 1175408835), 1], null);
qgame.simulator.flow.else$ = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "FlowControl", "FlowControl", 825984929), new cljs.core.Keyword(null, "name", "name", 1017277949), "else"], null), new cljs.core.Keyword(null, "caller", "caller", 3941096189), qgame.simulator.flow.swap_first_two], null);
qgame.simulator.flow.end = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "FlowControl", "FlowControl", 825984929), new cljs.core.Keyword(null, "name", "name", 1017277949), "end"], null), new cljs.core.Keyword(null, "caller", "caller", 3941096189), qgame.simulator.flow.concat_first_two], null);
goog.provide("qgame.simulator.qgates");
goog.require("cljs.core");
goog.require("qgame.utils.general");
goog.require("qgame.utils.amplitudes");
goog.require("qgame.utils.math");
goog.require("qgame.utils.amplitudes");
goog.require("qgame.utils.amplitudes");
goog.require("qgame.utils.general");
goog.require("qgame.utils.general");
goog.require("qgame.utils.math");
goog.require("qgame.utils.math");
qgame.simulator.qgates.apply_operator = function apply_operator(amplitudes, operator, qubits) {
  return cljs.core.reduce.call(null, operator, amplitudes, qgame.utils.amplitudes.qubits_to_amplitude_indices.call(null, cljs.core.reverse.call(null, qubits), qgame.utils.amplitudes.get_num_qubits.call(null, amplitudes)));
};
qgame.simulator.qgates.to_operator = function to_operator(matrix) {
  if (qgame.utils.math.square_QMARK_.call(null, matrix)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("m", "square?", "m/square?", 689332155, null), new cljs.core.Symbol(null, "matrix", "matrix", 1573196154, null))))].join(""));
  }
  if (cljs.core.truth_(qgame.utils.math.unitary_QMARK_.call(null, matrix))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("m", "unitary?", "m/unitary?", -1932796158, null), new cljs.core.Symbol(null, "matrix", "matrix", 1573196154, null))))].join(""));
  }
  return function(amps, indices) {
    return qgame.utils.general.update_sub.call(null, amps, cljs.core.partial.call(null, qgame.utils.math.multiply, matrix), indices);
  };
};
qgame.simulator.qgates.binary_gate_matrix = function binary_gate_matrix(tt_right_column) {
  var dim = 2 * cljs.core.count.call(null, tt_right_column);
  return cljs.core.vec.call(null, cljs.core.map_indexed.call(null, function(idx, tt_val) {
    return cljs.core.assoc.call(null, cljs.core.vec.call(null, cljs.core.repeat.call(null, dim, 0)), (cljs.core.even_QMARK_.call(null, idx) ? cljs.core._PLUS_ : cljs.core._).call(null, idx, tt_val), 1);
  }, cljs.core.interleave.call(null, tt_right_column, tt_right_column)));
};
qgame.simulator.qgates.anonymous_qgate = function anonymous_qgate(matrix) {
  return function() {
    var G__6429__delegate = function(amplitudes, qubits) {
      return qgame.simulator.qgates.apply_operator.call(null, amplitudes, qgame.simulator.qgates.to_operator.call(null, matrix), qubits);
    };
    var G__6429 = function(amplitudes, var_args) {
      var qubits = null;
      if (arguments.length > 1) {
        qubits = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__6429__delegate.call(this, amplitudes, qubits);
    };
    G__6429.cljs$lang$maxFixedArity = 1;
    G__6429.cljs$lang$applyTo = function(arglist__6430) {
      var amplitudes = cljs.core.first(arglist__6430);
      var qubits = cljs.core.rest(arglist__6430);
      return G__6429__delegate(amplitudes, qubits);
    };
    G__6429.cljs$core$IFn$_invoke$arity$variadic = G__6429__delegate;
    return G__6429;
  }();
};
qgame.simulator.qgates.to_oracle = function() {
  var to_oracle__delegate = function(tt_right_column) {
    return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "Oracle", "Oracle", 3383876880), new cljs.core.Keyword(null, "name", "name", 1017277949), "oracle"], null), new cljs.core.Keyword(null, "caller", "caller", 3941096189), qgame.simulator.qgates.anonymous_qgate.call(null, qgame.simulator.qgates.binary_gate_matrix.call(null, 
    tt_right_column)), new cljs.core.Keyword(null, "num-qubits", "num-qubits", 1175408835), qgame.utils.general.bit_size.call(null, cljs.core.count.call(null, tt_right_column)) + 1, new cljs.core.Keyword(null, "tt-right-column", "tt-right-column", 1264893382), tt_right_column], null);
  };
  var to_oracle = function(var_args) {
    var tt_right_column = null;
    if (arguments.length > 0) {
      tt_right_column = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return to_oracle__delegate.call(this, tt_right_column);
  };
  to_oracle.cljs$lang$maxFixedArity = 0;
  to_oracle.cljs$lang$applyTo = function(arglist__6431) {
    var tt_right_column = cljs.core.seq(arglist__6431);
    return to_oracle__delegate(tt_right_column);
  };
  to_oracle.cljs$core$IFn$_invoke$arity$variadic = to_oracle__delegate;
  return to_oracle;
}();
qgame.simulator.qgates.with_oracle = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "ParseTime", "ParseTime", 1184785266), new cljs.core.Keyword(null, "name", "name", 1017277949), "with_oracle"], null), new cljs.core.Keyword(null, "caller", "caller", 3941096189), qgame.simulator.qgates.to_oracle], null);
var dummy_matrix__6279__auto___6434 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0], null)], null);
var num_qubits__6280__auto___6435 = qgame.utils.general.bit_size.call(null, cljs.core.count.call(null, dummy_matrix__6279__auto___6434));
qgame.simulator.qgates.qnot = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "matrix-body", "matrix-body", 617047968), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0], null)], null), new cljs.core.Keyword(null, "caller", "caller", 3941096189), function() {
  var G__6436__delegate = function(amplitudes__6281__auto__, runtime_args__6282__auto__) {
    var vec__6432 = cljs.core.split_at.call(null, num_qubits__6280__auto___6435, runtime_args__6282__auto__);
    var qubits__6283__auto__ = cljs.core.nth.call(null, vec__6432, 0, null);
    var vec__6433 = cljs.core.nth.call(null, vec__6432, 1, null);
    return qgame.simulator.qgates.apply_operator.call(null, amplitudes__6281__auto__, qgame.simulator.qgates.to_operator.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0], null)], null)), qubits__6283__auto__);
  };
  var G__6436 = function(amplitudes__6281__auto__, var_args) {
    var runtime_args__6282__auto__ = null;
    if (arguments.length > 1) {
      runtime_args__6282__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__6436__delegate.call(this, amplitudes__6281__auto__, runtime_args__6282__auto__);
  };
  G__6436.cljs$lang$maxFixedArity = 1;
  G__6436.cljs$lang$applyTo = function(arglist__6437) {
    var amplitudes__6281__auto__ = cljs.core.first(arglist__6437);
    var runtime_args__6282__auto__ = cljs.core.rest(arglist__6437);
    return G__6436__delegate(amplitudes__6281__auto__, runtime_args__6282__auto__);
  };
  G__6436.cljs$core$IFn$_invoke$arity$variadic = G__6436__delegate;
  return G__6436;
}(), new cljs.core.Keyword(null, "param-names", "param-names", 740923770), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), "qnot", new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "QGate", "QGate", 1090921518)], null), new cljs.core.Keyword(null, "num-qubits", "num-qubits", 1175408835), num_qubits__6280__auto___6435], 
null);
var dummy_matrix__6279__auto___6440 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 0, 1], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[0, 0, 1, 0], null)], null);
var num_qubits__6280__auto___6441 = qgame.utils.general.bit_size.call(null, cljs.core.count.call(null, dummy_matrix__6279__auto___6440));
qgame.simulator.qgates.cnot = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "matrix-body", "matrix-body", 617047968), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[0, 0, 0, 1], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 1, 0], null)], null), new cljs.core.Keyword(null, "caller", "caller", 3941096189), function() {
  var G__6442__delegate = function(amplitudes__6281__auto__, runtime_args__6282__auto__) {
    var vec__6438 = cljs.core.split_at.call(null, num_qubits__6280__auto___6441, runtime_args__6282__auto__);
    var qubits__6283__auto__ = cljs.core.nth.call(null, vec__6438, 0, null);
    var vec__6439 = cljs.core.nth.call(null, vec__6438, 1, null);
    return qgame.simulator.qgates.apply_operator.call(null, amplitudes__6281__auto__, qgame.simulator.qgates.to_operator.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [0, 0, 0, 1], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 1, 0], null)], null)), qubits__6283__auto__);
  };
  var G__6442 = function(amplitudes__6281__auto__, var_args) {
    var runtime_args__6282__auto__ = null;
    if (arguments.length > 1) {
      runtime_args__6282__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__6442__delegate.call(this, amplitudes__6281__auto__, runtime_args__6282__auto__);
  };
  G__6442.cljs$lang$maxFixedArity = 1;
  G__6442.cljs$lang$applyTo = function(arglist__6443) {
    var amplitudes__6281__auto__ = cljs.core.first(arglist__6443);
    var runtime_args__6282__auto__ = cljs.core.rest(arglist__6443);
    return G__6442__delegate(amplitudes__6281__auto__, runtime_args__6282__auto__);
  };
  G__6442.cljs$core$IFn$_invoke$arity$variadic = G__6442__delegate;
  return G__6442;
}(), new cljs.core.Keyword(null, "param-names", "param-names", 740923770), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), "cnot", new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "QGate", "QGate", 1090921518)], null), new cljs.core.Keyword(null, "num-qubits", "num-qubits", 1175408835), num_qubits__6280__auto___6441], 
null);
var dummy_matrix__6279__auto___6446 = qgame.utils.math.multiply.call(null, qgame.utils.math.divide.call(null, qgame.utils.math.sqrt2, 2), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, -1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 1], null)], null));
var num_qubits__6280__auto___6447 = qgame.utils.general.bit_size.call(null, cljs.core.count.call(null, dummy_matrix__6279__auto___6446));
qgame.simulator.qgates.srn = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "matrix-body", "matrix-body", 617047968), cljs.core.list(new cljs.core.Symbol("m", "multiply", "m/multiply", -986694827, null), cljs.core.list(new cljs.core.Symbol("m", "divide", "m/divide", 1322979808, null), new cljs.core.Symbol("m", "sqrt2", "m/sqrt2", -1530839989, null), 2), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 
5, cljs.core.PersistentVector.EMPTY_NODE, [1, -1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 1], null)], null)), new cljs.core.Keyword(null, "caller", "caller", 3941096189), function() {
  var G__6448__delegate = function(amplitudes__6281__auto__, runtime_args__6282__auto__) {
    var vec__6444 = cljs.core.split_at.call(null, num_qubits__6280__auto___6447, runtime_args__6282__auto__);
    var qubits__6283__auto__ = cljs.core.nth.call(null, vec__6444, 0, null);
    var vec__6445 = cljs.core.nth.call(null, vec__6444, 1, null);
    return qgame.simulator.qgates.apply_operator.call(null, amplitudes__6281__auto__, qgame.simulator.qgates.to_operator.call(null, qgame.utils.math.multiply.call(null, qgame.utils.math.divide.call(null, qgame.utils.math.sqrt2, 2), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, -1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 1], 
    null)], null))), qubits__6283__auto__);
  };
  var G__6448 = function(amplitudes__6281__auto__, var_args) {
    var runtime_args__6282__auto__ = null;
    if (arguments.length > 1) {
      runtime_args__6282__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__6448__delegate.call(this, amplitudes__6281__auto__, runtime_args__6282__auto__);
  };
  G__6448.cljs$lang$maxFixedArity = 1;
  G__6448.cljs$lang$applyTo = function(arglist__6449) {
    var amplitudes__6281__auto__ = cljs.core.first(arglist__6449);
    var runtime_args__6282__auto__ = cljs.core.rest(arglist__6449);
    return G__6448__delegate(amplitudes__6281__auto__, runtime_args__6282__auto__);
  };
  G__6448.cljs$core$IFn$_invoke$arity$variadic = G__6448__delegate;
  return G__6448;
}(), new cljs.core.Keyword(null, "param-names", "param-names", 740923770), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), "srn", new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "QGate", "QGate", 1090921518)], null), new cljs.core.Keyword(null, "num-qubits", "num-qubits", 1175408835), num_qubits__6280__auto___6447], 
null);
var dummy_matrix__6279__auto___6452 = qgame.simulator.qgates.binary_gate_matrix.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 1, 1, 0], null));
var num_qubits__6280__auto___6453 = qgame.utils.general.bit_size.call(null, cljs.core.count.call(null, dummy_matrix__6279__auto___6452));
qgame.simulator.qgates.nand = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "matrix-body", "matrix-body", 617047968), cljs.core.list(new cljs.core.Symbol(null, "binary-gate-matrix", "binary-gate-matrix", 1177512176, null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 1, 1, 0], null)), new cljs.core.Keyword(null, "caller", "caller", 3941096189), function() {
  var G__6454__delegate = function(amplitudes__6281__auto__, runtime_args__6282__auto__) {
    var vec__6450 = cljs.core.split_at.call(null, num_qubits__6280__auto___6453, runtime_args__6282__auto__);
    var qubits__6283__auto__ = cljs.core.nth.call(null, vec__6450, 0, null);
    var vec__6451 = cljs.core.nth.call(null, vec__6450, 1, null);
    return qgame.simulator.qgates.apply_operator.call(null, amplitudes__6281__auto__, qgame.simulator.qgates.to_operator.call(null, qgame.simulator.qgates.binary_gate_matrix.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 1, 1, 0], null))), qubits__6283__auto__);
  };
  var G__6454 = function(amplitudes__6281__auto__, var_args) {
    var runtime_args__6282__auto__ = null;
    if (arguments.length > 1) {
      runtime_args__6282__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__6454__delegate.call(this, amplitudes__6281__auto__, runtime_args__6282__auto__);
  };
  G__6454.cljs$lang$maxFixedArity = 1;
  G__6454.cljs$lang$applyTo = function(arglist__6455) {
    var amplitudes__6281__auto__ = cljs.core.first(arglist__6455);
    var runtime_args__6282__auto__ = cljs.core.rest(arglist__6455);
    return G__6454__delegate(amplitudes__6281__auto__, runtime_args__6282__auto__);
  };
  G__6454.cljs$core$IFn$_invoke$arity$variadic = G__6454__delegate;
  return G__6454;
}(), new cljs.core.Keyword(null, "param-names", "param-names", 740923770), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), "nand", new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "QGate", "QGate", 1090921518)], null), new cljs.core.Keyword(null, "num-qubits", "num-qubits", 1175408835), num_qubits__6280__auto___6453], 
null);
var dummy_matrix__6279__auto___6458 = qgame.utils.math.multiply.call(null, qgame.utils.math.divide.call(null, qgame.utils.math.sqrt.call(null, 2), 2), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, -1], null)], null));
var num_qubits__6280__auto___6459 = qgame.utils.general.bit_size.call(null, cljs.core.count.call(null, dummy_matrix__6279__auto___6458));
qgame.simulator.qgates.hadamard = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "matrix-body", "matrix-body", 617047968), cljs.core.list(new cljs.core.Symbol("m", "multiply", "m/multiply", -986694827, null), cljs.core.list(new cljs.core.Symbol("m", "divide", "m/divide", 1322979808, null), cljs.core.list(new cljs.core.Symbol("m", "sqrt", "m/sqrt", -1636986279, null), 2), 2), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, -1], null)], null)), new cljs.core.Keyword(null, "caller", "caller", 3941096189), function() {
  var G__6460__delegate = function(amplitudes__6281__auto__, runtime_args__6282__auto__) {
    var vec__6456 = cljs.core.split_at.call(null, num_qubits__6280__auto___6459, runtime_args__6282__auto__);
    var qubits__6283__auto__ = cljs.core.nth.call(null, vec__6456, 0, null);
    var vec__6457 = cljs.core.nth.call(null, vec__6456, 1, null);
    return qgame.simulator.qgates.apply_operator.call(null, amplitudes__6281__auto__, qgame.simulator.qgates.to_operator.call(null, qgame.utils.math.multiply.call(null, qgame.utils.math.divide.call(null, qgame.utils.math.sqrt.call(null, 2), 2), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [1, -1], null)], null))), qubits__6283__auto__);
  };
  var G__6460 = function(amplitudes__6281__auto__, var_args) {
    var runtime_args__6282__auto__ = null;
    if (arguments.length > 1) {
      runtime_args__6282__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__6460__delegate.call(this, amplitudes__6281__auto__, runtime_args__6282__auto__);
  };
  G__6460.cljs$lang$maxFixedArity = 1;
  G__6460.cljs$lang$applyTo = function(arglist__6461) {
    var amplitudes__6281__auto__ = cljs.core.first(arglist__6461);
    var runtime_args__6282__auto__ = cljs.core.rest(arglist__6461);
    return G__6460__delegate(amplitudes__6281__auto__, runtime_args__6282__auto__);
  };
  G__6460.cljs$core$IFn$_invoke$arity$variadic = G__6460__delegate;
  return G__6460;
}(), new cljs.core.Keyword(null, "param-names", "param-names", 740923770), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), "hadamard", new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "QGate", "QGate", 1090921518)], null), new cljs.core.Keyword(null, "num-qubits", "num-qubits", 1175408835), num_qubits__6280__auto___6459], 
null);
var dummy_matrix__6279__auto___6465 = function() {
  var vec__6462 = cljs.core.repeat.call(null, 1);
  var theta = cljs.core.nth.call(null, vec__6462, 0, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qgame.utils.math.cos.call(null, theta), qgame.utils.math.sin.call(null, theta)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qgame.utils.math.subtract.call(null, qgame.utils.math.sin.call(null, theta)), qgame.utils.math.cos.call(null, theta)], null)], null);
}();
var num_qubits__6280__auto___6466 = qgame.utils.general.bit_size.call(null, cljs.core.count.call(null, dummy_matrix__6279__auto___6465));
qgame.simulator.qgates.utheta = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "matrix-body", "matrix-body", 617047968), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol("m", "cos", "m/cos", -1640425738, null), new cljs.core.Symbol(null, "theta", "theta", -1530204073, null)), cljs.core.list(new cljs.core.Symbol("m", "sin", 
"m/sin", -1640410751, null), new cljs.core.Symbol(null, "theta", "theta", -1530204073, null))], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol("m", "subtract", "m/subtract", 594194501, null), cljs.core.list(new cljs.core.Symbol("m", "sin", "m/sin", -1640410751, null), new cljs.core.Symbol(null, "theta", "theta", -1530204073, null))), cljs.core.list(new cljs.core.Symbol("m", "cos", "m/cos", -1640425738, null), new cljs.core.Symbol(null, 
"theta", "theta", -1530204073, null))], null)], null), new cljs.core.Keyword(null, "caller", "caller", 3941096189), function() {
  var G__6467__delegate = function(amplitudes__6281__auto__, runtime_args__6282__auto__) {
    var vec__6463 = cljs.core.split_at.call(null, num_qubits__6280__auto___6466, runtime_args__6282__auto__);
    var qubits__6283__auto__ = cljs.core.nth.call(null, vec__6463, 0, null);
    var vec__6464 = cljs.core.nth.call(null, vec__6463, 1, null);
    var theta = cljs.core.nth.call(null, vec__6464, 0, null);
    return qgame.simulator.qgates.apply_operator.call(null, amplitudes__6281__auto__, qgame.simulator.qgates.to_operator.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qgame.utils.math.cos.call(null, theta), qgame.utils.math.sin.call(null, theta)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qgame.utils.math.subtract.call(null, 
    qgame.utils.math.sin.call(null, theta)), qgame.utils.math.cos.call(null, theta)], null)], null)), qubits__6283__auto__);
  };
  var G__6467 = function(amplitudes__6281__auto__, var_args) {
    var runtime_args__6282__auto__ = null;
    if (arguments.length > 1) {
      runtime_args__6282__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__6467__delegate.call(this, amplitudes__6281__auto__, runtime_args__6282__auto__);
  };
  G__6467.cljs$lang$maxFixedArity = 1;
  G__6467.cljs$lang$applyTo = function(arglist__6468) {
    var amplitudes__6281__auto__ = cljs.core.first(arglist__6468);
    var runtime_args__6282__auto__ = cljs.core.rest(arglist__6468);
    return G__6467__delegate(amplitudes__6281__auto__, runtime_args__6282__auto__);
  };
  G__6467.cljs$core$IFn$_invoke$arity$variadic = G__6467__delegate;
  return G__6467;
}(), new cljs.core.Keyword(null, "param-names", "param-names", 740923770), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "theta", "theta", -1530204073, null)], null), new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), "utheta", new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "QGate", "QGate", 
1090921518)], null), new cljs.core.Keyword(null, "num-qubits", "num-qubits", 1175408835), num_qubits__6280__auto___6466], null);
var dummy_matrix__6279__auto___6472 = function() {
  var vec__6469 = cljs.core.repeat.call(null, 1);
  var alpha = cljs.core.nth.call(null, vec__6469, 0, null);
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 1, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 0, qgame.utils.math.exp_xi.call(null, 
  alpha)], null)], null);
}();
var num_qubits__6280__auto___6473 = qgame.utils.general.bit_size.call(null, cljs.core.count.call(null, dummy_matrix__6279__auto___6472));
qgame.simulator.qgates.cphase = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "matrix-body", "matrix-body", 617047968), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[0, 0, 1, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 0, cljs.core.list(new cljs.core.Symbol("m", "exp-xi", "m/exp-xi", 1365225944, null), new cljs.core.Symbol(null, "alpha", "alpha", -1547621609, null))], null)], null), new cljs.core.Keyword(null, "caller", "caller", 3941096189), function() {
  var G__6474__delegate = function(amplitudes__6281__auto__, runtime_args__6282__auto__) {
    var vec__6470 = cljs.core.split_at.call(null, num_qubits__6280__auto___6473, runtime_args__6282__auto__);
    var qubits__6283__auto__ = cljs.core.nth.call(null, vec__6470, 0, null);
    var vec__6471 = cljs.core.nth.call(null, vec__6470, 1, null);
    var alpha = cljs.core.nth.call(null, vec__6471, 0, null);
    return qgame.simulator.qgates.apply_operator.call(null, amplitudes__6281__auto__, qgame.simulator.qgates.to_operator.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [0, 0, 1, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 0, qgame.utils.math.exp_xi.call(null, alpha)], null)], null)), qubits__6283__auto__);
  };
  var G__6474 = function(amplitudes__6281__auto__, var_args) {
    var runtime_args__6282__auto__ = null;
    if (arguments.length > 1) {
      runtime_args__6282__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__6474__delegate.call(this, amplitudes__6281__auto__, runtime_args__6282__auto__);
  };
  G__6474.cljs$lang$maxFixedArity = 1;
  G__6474.cljs$lang$applyTo = function(arglist__6475) {
    var amplitudes__6281__auto__ = cljs.core.first(arglist__6475);
    var runtime_args__6282__auto__ = cljs.core.rest(arglist__6475);
    return G__6474__delegate(amplitudes__6281__auto__, runtime_args__6282__auto__);
  };
  G__6474.cljs$core$IFn$_invoke$arity$variadic = G__6474__delegate;
  return G__6474;
}(), new cljs.core.Keyword(null, "param-names", "param-names", 740923770), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "alpha", "alpha", -1547621609, null)], null), new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), "cphase", new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "QGate", "QGate", 
1090921518)], null), new cljs.core.Keyword(null, "num-qubits", "num-qubits", 1175408835), num_qubits__6280__auto___6473], null);
var dummy_matrix__6279__auto___6479 = function() {
  var vec__6476 = cljs.core.repeat.call(null, 1);
  var phi = cljs.core.nth.call(null, vec__6476, 0, null);
  var theta = cljs.core.nth.call(null, vec__6476, 1, null);
  var psi = cljs.core.nth.call(null, vec__6476, 2, null);
  var alpha = cljs.core.nth.call(null, vec__6476, 3, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qgame.utils.math.multiply.call(null, qgame.utils.math.cos.call(null, theta), qgame.utils.math.exp_xi.call(null, qgame.utils.math.add.call(null, qgame.utils.math.subtract.call(null, phi), qgame.utils.math.subtract.call(null, psi), alpha))), qgame.utils.math.multiply.call(null, qgame.utils.math.sin.call(null, qgame.utils.math.subtract.call(null, 
  theta)), qgame.utils.math.exp_xi.call(null, qgame.utils.math.add.call(null, qgame.utils.math.subtract.call(null, phi), psi, alpha)))], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qgame.utils.math.multiply.call(null, qgame.utils.math.sin.call(null, theta), qgame.utils.math.exp_xi.call(null, qgame.utils.math.add.call(null, phi, qgame.utils.math.subtract.call(null, psi), alpha))), qgame.utils.math.multiply.call(null, qgame.utils.math.cos.call(null, theta), 
  qgame.utils.math.exp_xi.call(null, qgame.utils.math.add.call(null, phi, psi, alpha)))], null)], null);
}();
var num_qubits__6280__auto___6480 = qgame.utils.general.bit_size.call(null, cljs.core.count.call(null, dummy_matrix__6279__auto___6479));
qgame.simulator.qgates.u2 = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "matrix-body", "matrix-body", 617047968), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol("m", "multiply", "m/multiply", -986694827, null), cljs.core.list(new cljs.core.Symbol("m", "cos", "m/cos", -1640425738, null), new cljs.core.Symbol(null, "theta", 
"theta", -1530204073, null)), cljs.core.list(new cljs.core.Symbol("m", "exp-xi", "m/exp-xi", 1365225944, null), cljs.core.list(new cljs.core.Symbol("m", "add", "m/add", -1640428072, null), cljs.core.list(new cljs.core.Symbol("m", "subtract", "m/subtract", 594194501, null), new cljs.core.Symbol(null, "phi", "phi", -1640420566, null)), cljs.core.list(new cljs.core.Symbol("m", "subtract", "m/subtract", 594194501, null), new cljs.core.Symbol(null, "psi", "psi", -1640420225, null)), new cljs.core.Symbol(null, 
"alpha", "alpha", -1547621609, null)))), cljs.core.list(new cljs.core.Symbol("m", "multiply", "m/multiply", -986694827, null), cljs.core.list(new cljs.core.Symbol("m", "sin", "m/sin", -1640410751, null), cljs.core.list(new cljs.core.Symbol("m", "subtract", "m/subtract", 594194501, null), new cljs.core.Symbol(null, "theta", "theta", -1530204073, null))), cljs.core.list(new cljs.core.Symbol("m", "exp-xi", "m/exp-xi", 1365225944, null), cljs.core.list(new cljs.core.Symbol("m", "add", "m/add", -1640428072, 
null), cljs.core.list(new cljs.core.Symbol("m", "subtract", "m/subtract", 594194501, null), new cljs.core.Symbol(null, "phi", "phi", -1640420566, null)), new cljs.core.Symbol(null, "psi", "psi", -1640420225, null), new cljs.core.Symbol(null, "alpha", "alpha", -1547621609, null))))], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol("m", "multiply", "m/multiply", -986694827, null), cljs.core.list(new cljs.core.Symbol("m", 
"sin", "m/sin", -1640410751, null), new cljs.core.Symbol(null, "theta", "theta", -1530204073, null)), cljs.core.list(new cljs.core.Symbol("m", "exp-xi", "m/exp-xi", 1365225944, null), cljs.core.list(new cljs.core.Symbol("m", "add", "m/add", -1640428072, null), new cljs.core.Symbol(null, "phi", "phi", -1640420566, null), cljs.core.list(new cljs.core.Symbol("m", "subtract", "m/subtract", 594194501, null), new cljs.core.Symbol(null, "psi", "psi", -1640420225, null)), new cljs.core.Symbol(null, "alpha", 
"alpha", -1547621609, null)))), cljs.core.list(new cljs.core.Symbol("m", "multiply", "m/multiply", -986694827, null), cljs.core.list(new cljs.core.Symbol("m", "cos", "m/cos", -1640425738, null), new cljs.core.Symbol(null, "theta", "theta", -1530204073, null)), cljs.core.list(new cljs.core.Symbol("m", "exp-xi", "m/exp-xi", 1365225944, null), cljs.core.list(new cljs.core.Symbol("m", "add", "m/add", -1640428072, null), new cljs.core.Symbol(null, "phi", "phi", -1640420566, null), new cljs.core.Symbol(null, 
"psi", "psi", -1640420225, null), new cljs.core.Symbol(null, "alpha", "alpha", -1547621609, null))))], null)], null), new cljs.core.Keyword(null, "caller", "caller", 3941096189), function() {
  var G__6481__delegate = function(amplitudes__6281__auto__, runtime_args__6282__auto__) {
    var vec__6477 = cljs.core.split_at.call(null, num_qubits__6280__auto___6480, runtime_args__6282__auto__);
    var qubits__6283__auto__ = cljs.core.nth.call(null, vec__6477, 0, null);
    var vec__6478 = cljs.core.nth.call(null, vec__6477, 1, null);
    var phi = cljs.core.nth.call(null, vec__6478, 0, null);
    var theta = cljs.core.nth.call(null, vec__6478, 1, null);
    var psi = cljs.core.nth.call(null, vec__6478, 2, null);
    var alpha = cljs.core.nth.call(null, vec__6478, 3, null);
    return qgame.simulator.qgates.apply_operator.call(null, amplitudes__6281__auto__, qgame.simulator.qgates.to_operator.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qgame.utils.math.multiply.call(null, qgame.utils.math.cos.call(null, theta), qgame.utils.math.exp_xi.call(null, qgame.utils.math.add.call(null, qgame.utils.math.subtract.call(null, phi), qgame.utils.math.subtract.call(null, 
    psi), alpha))), qgame.utils.math.multiply.call(null, qgame.utils.math.sin.call(null, qgame.utils.math.subtract.call(null, theta)), qgame.utils.math.exp_xi.call(null, qgame.utils.math.add.call(null, qgame.utils.math.subtract.call(null, phi), psi, alpha)))], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qgame.utils.math.multiply.call(null, qgame.utils.math.sin.call(null, theta), qgame.utils.math.exp_xi.call(null, qgame.utils.math.add.call(null, phi, qgame.utils.math.subtract.call(null, 
    psi), alpha))), qgame.utils.math.multiply.call(null, qgame.utils.math.cos.call(null, theta), qgame.utils.math.exp_xi.call(null, qgame.utils.math.add.call(null, phi, psi, alpha)))], null)], null)), qubits__6283__auto__);
  };
  var G__6481 = function(amplitudes__6281__auto__, var_args) {
    var runtime_args__6282__auto__ = null;
    if (arguments.length > 1) {
      runtime_args__6282__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__6481__delegate.call(this, amplitudes__6281__auto__, runtime_args__6282__auto__);
  };
  G__6481.cljs$lang$maxFixedArity = 1;
  G__6481.cljs$lang$applyTo = function(arglist__6482) {
    var amplitudes__6281__auto__ = cljs.core.first(arglist__6482);
    var runtime_args__6282__auto__ = cljs.core.rest(arglist__6482);
    return G__6481__delegate(amplitudes__6281__auto__, runtime_args__6282__auto__);
  };
  G__6481.cljs$core$IFn$_invoke$arity$variadic = G__6481__delegate;
  return G__6481;
}(), new cljs.core.Keyword(null, "param-names", "param-names", 740923770), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "phi", "phi", -1640420566, null), new cljs.core.Symbol(null, "theta", "theta", -1530204073, null), new cljs.core.Symbol(null, "psi", "psi", -1640420225, null), new cljs.core.Symbol(null, "alpha", "alpha", -1547621609, null)], null), new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "name", "name", 1017277949), "u2", new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "QGate", "QGate", 1090921518)], null), new cljs.core.Keyword(null, "num-qubits", "num-qubits", 1175408835), num_qubits__6280__auto___6480], null);
var dummy_matrix__6279__auto___6485 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 1, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[0, 0, 0, 1], null)], null);
var num_qubits__6280__auto___6486 = qgame.utils.general.bit_size.call(null, cljs.core.count.call(null, dummy_matrix__6279__auto___6485));
qgame.simulator.qgates.swap = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "matrix-body", "matrix-body", 617047968), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 1, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[0, 1, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 0, 1], null)], null), new cljs.core.Keyword(null, "caller", "caller", 3941096189), function() {
  var G__6487__delegate = function(amplitudes__6281__auto__, runtime_args__6282__auto__) {
    var vec__6483 = cljs.core.split_at.call(null, num_qubits__6280__auto___6486, runtime_args__6282__auto__);
    var qubits__6283__auto__ = cljs.core.nth.call(null, vec__6483, 0, null);
    var vec__6484 = cljs.core.nth.call(null, vec__6483, 1, null);
    return qgame.simulator.qgates.apply_operator.call(null, amplitudes__6281__auto__, qgame.simulator.qgates.to_operator.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 1, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [0, 1, 0, 0], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 0, 1], null)], null)), qubits__6283__auto__);
  };
  var G__6487 = function(amplitudes__6281__auto__, var_args) {
    var runtime_args__6282__auto__ = null;
    if (arguments.length > 1) {
      runtime_args__6282__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__6487__delegate.call(this, amplitudes__6281__auto__, runtime_args__6282__auto__);
  };
  G__6487.cljs$lang$maxFixedArity = 1;
  G__6487.cljs$lang$applyTo = function(arglist__6488) {
    var amplitudes__6281__auto__ = cljs.core.first(arglist__6488);
    var runtime_args__6282__auto__ = cljs.core.rest(arglist__6488);
    return G__6487__delegate(amplitudes__6281__auto__, runtime_args__6282__auto__);
  };
  G__6487.cljs$core$IFn$_invoke$arity$variadic = G__6487__delegate;
  return G__6487;
}(), new cljs.core.Keyword(null, "param-names", "param-names", 740923770), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1017277949), "swap", new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "QGate", "QGate", 1090921518)], null), new cljs.core.Keyword(null, "num-qubits", "num-qubits", 1175408835), num_qubits__6280__auto___6486], 
null);
goog.provide("qgame.simulator.shared");
goog.require("cljs.core");
goog.require("qgame.simulator.flow");
goog.require("qgame.simulator.qgates");
goog.require("qgame.simulator.qgates");
goog.require("qgame.simulator.qgates");
goog.require("qgame.simulator.flow");
goog.require("qgame.simulator.flow");
qgame.simulator.shared.stage = cljs.core.atom.call(null, "Interpretation");
qgame.simulator.shared.current_qgame_fn = cljs.core.atom.call(null, null);
qgame.simulator.shared.canonical_functions = cljs.core.atom.call(null, cljs.core.PersistentHashMap.fromArrays(["qnot", "nand", "utheta", "srn", "cnot", "swap", "with_oracle", "cphase", "else", "end", "hadamard", "u2", "measure", "oracle"], [qgame.simulator.qgates.qnot, qgame.simulator.qgates.nand, qgame.simulator.qgates.utheta, qgame.simulator.qgates.srn, qgame.simulator.qgates.cnot, qgame.simulator.qgates.swap, qgame.simulator.qgates.with_oracle, qgame.simulator.qgates.cphase, qgame.simulator.flow.else$, 
qgame.simulator.flow.end, qgame.simulator.qgates.hadamard, qgame.simulator.qgates.u2, qgame.simulator.flow.measure, null]));
qgame.simulator.shared.on_error = cljs.core.atom.call(null, null);
goog.provide("qgame.simulator.parser");
goog.require("cljs.core");
goog.require("qgame.utils.math");
goog.require("qgame.simulator.shared");
goog.require("clojure.string");
goog.require("qgame.utils.general");
goog.require("qgame.simulator.shared");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("qgame.utils.general");
goog.require("qgame.utils.general");
goog.require("qgame.utils.math");
goog.require("qgame.utils.math");
qgame.simulator.parser.qubit_letter_to_index = function qubit_letter_to_index(letter) {
  return "ABCDEFGHIJKLMNOPQRST".indexOf(letter);
};
qgame.simulator.parser.match_only = function match_only(pat, s) {
  return cljs.core.re_find.call(null, qgame.utils.general.regex_join.call(null, "^", pat, "$"), s);
};
qgame.simulator.parser.word_pattern = /\b[a-zA-Z_]\w*\b/;
qgame.simulator.parser.math_string_pattern = /(?:\w*[\-.+*\/^()]\w*)+/;
qgame.simulator.parser.parse_forget_rule = function parse_forget_rule(bite, nm_target_text) {
  var rule = cljs.core.assoc.call(null, bite, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "Rule", "Rule", 1016462990), new cljs.core.Keyword(null, "forget", "forget", 4040086879), true, new cljs.core.Keyword(null, "name-target", "name-target", 4218974853), nm_target_text);
  var target_is_word_QMARK_ = qgame.simulator.parser.match_only.call(null, qgame.simulator.parser.word_pattern, nm_target_text);
  if (cljs.core.truth_(target_is_word_QMARK_)) {
    return rule;
  } else {
    cljs.core.reset_BANG_.call(null, qgame.simulator.shared.current_qgame_fn, arguments.callee.name);
    return qgame.simulator.error.log_and_return_error_BANG_.call(null, "Target is not a word", rule);
  }
};
qgame.simulator.parser.parse_name_rule = function parse_name_rule(bite, nm_text, target_text) {
  var rule = cljs.core.assoc.call(null, bite, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "Rule", "Rule", 1016462990), new cljs.core.Keyword(null, "replace-name", "replace-name", 1428647286), nm_text, new cljs.core.Keyword(null, "target", "target", 4427965699), target_text);
  var nm_is_word_QMARK_ = qgame.simulator.parser.match_only.call(null, qgame.simulator.parser.word_pattern, nm_text);
  if (cljs.core.truth_(nm_is_word_QMARK_)) {
    return rule;
  } else {
    cljs.core.reset_BANG_.call(null, qgame.simulator.shared.current_qgame_fn, arguments.callee.name);
    return qgame.simulator.error.log_and_return_error_BANG_.call(null, "Name is not a word", rule);
  }
};
qgame.simulator.parser.parse_bite = function parse_bite(p__4898) {
  var map__4901 = p__4898;
  var map__4901__$1 = cljs.core.seq_QMARK_.call(null, map__4901) ? cljs.core.apply.call(null, cljs.core.hash_map, map__4901) : map__4901;
  var bite = map__4901__$1;
  var text = cljs.core.get.call(null, map__4901__$1, new cljs.core.Keyword(null, "text", "text", 1017460895));
  var temp__4090__auto__ = function(p1__4897_SHARP_) {
    return cljs.core._EQ_.call(null, cljs.core.count.call(null, p1__4897_SHARP_), 1);
  }.call(null, clojure.string.split.call(null, text, /:/, 2)) ? null : clojure.string.split.call(null, text, /:/, 2);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__4902 = temp__4090__auto__;
    var nm = cljs.core.nth.call(null, vec__4902, 0, null);
    var target = cljs.core.nth.call(null, vec__4902, 1, null);
    if (cljs.core._EQ_.call(null, nm, "forget")) {
      return qgame.simulator.parser.parse_forget_rule.call(null, bite, target);
    } else {
      return qgame.simulator.parser.parse_name_rule.call(null, bite, nm, target);
    }
  } else {
    return cljs.core.assoc.call(null, bite, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "Token", "Token", 1094892875));
  }
};
qgame.simulator.parser.replace_word = function replace_word(s, word, target) {
  var word_pat = qgame.utils.general.regex_join.call(null, "\\b", word, "\\b");
  return clojure.string.replace.call(null, s, word_pat, target);
};
qgame.simulator.parser.replace_named = function replace_named(name_map, s) {
  return cljs.core.reduce_kv.call(null, qgame.simulator.parser.replace_word, s, name_map);
};
qgame.simulator.parser.safe_eval_math = function safe_eval_math(s) {
  try {
    return qgame.utils.math.eval_math_string.call(null, s);
  } catch (e4904) {
    var _ = e4904;
    return null;
  }
};
qgame.simulator.parser.replace_math = function replace_math(s) {
  return clojure.string.replace.call(null, s, qgame.simulator.parser.math_string_pattern, qgame.simulator.parser.safe_eval_math);
};
qgame.simulator.parser.apply_rules = function apply_rules(name_map, s) {
  var post_name_replace = qgame.simulator.parser.replace_named.call(null, name_map, s);
  var math_string_QMARK_ = qgame.simulator.parser.match_only.call(null, qgame.simulator.parser.math_string_pattern, post_name_replace);
  if (cljs.core.truth_(math_string_QMARK_)) {
    return qgame.simulator.parser.safe_eval_math.call(null, post_name_replace);
  } else {
    return post_name_replace;
  }
};
qgame.simulator.parser.parser_execute_token = function parser_execute_token(name_map, token) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [name_map, function() {
    var temp__4090__auto__ = qgame.simulator.parser.apply_rules.call(null, name_map, (new cljs.core.Keyword(null, "text", "text", 1017460895)).cljs$core$IFn$_invoke$arity$1(token));
    if (cljs.core.truth_(temp__4090__auto__)) {
      var post_rules = temp__4090__auto__;
      return cljs.core.assoc.call(null, token, new cljs.core.Keyword(null, "post-rules", "post-rules", 1543368956), post_rules);
    } else {
      cljs.core.reset_BANG_.call(null, qgame.simulator.shared.current_qgame_fn, arguments.callee.name);
      return qgame.simulator.error.log_and_return_error_BANG_.call(null, "Math evaluation error", token);
    }
  }()], null);
};
qgame.simulator.parser.parser_execute_rule = function parser_execute_rule(name_map, rule) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "forget", "forget", 4040086879)).cljs$core$IFn$_invoke$arity$1(rule))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.dissoc.call(null, name_map, (new cljs.core.Keyword(null, "name-target", "name-target", 4218974853)).cljs$core$IFn$_invoke$arity$1(rule)), rule], null);
  } else {
    var temp__4090__auto__ = qgame.simulator.parser.apply_rules.call(null, name_map, (new cljs.core.Keyword(null, "target", "target", 4427965699)).cljs$core$IFn$_invoke$arity$1(rule));
    if (cljs.core.truth_(temp__4090__auto__)) {
      var target_post_rules = temp__4090__auto__;
      var rule_STAR_ = cljs.core.assoc.call(null, rule, new cljs.core.Keyword(null, "target", "target", 4427965699), target_post_rules);
      var entry = cljs.core.juxt.call(null, new cljs.core.Keyword(null, "replace-name", "replace-name", 1428647286), new cljs.core.Keyword(null, "target", "target", 4427965699)).call(null, rule_STAR_);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.conj.call(null, name_map, entry), rule_STAR_], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [name_map, function() {
        cljs.core.reset_BANG_.call(null, qgame.simulator.shared.current_qgame_fn, arguments.callee.name);
        return qgame.simulator.error.log_and_return_error_BANG_.call(null, "Math evaluation on name target error", rule);
      }()], null);
    }
  }
};
qgame.simulator.parser.execute_parser_rules = function execute_parser_rules(p__4905, bite) {
  var map__4908 = p__4905;
  var map__4908__$1 = cljs.core.seq_QMARK_.call(null, map__4908) ? cljs.core.apply.call(null, cljs.core.hash_map, map__4908) : map__4908;
  var new_bites = cljs.core.get.call(null, map__4908__$1, new cljs.core.Keyword(null, "new-bites", "new-bites", 3608376192));
  var name_map = cljs.core.get.call(null, map__4908__$1, new cljs.core.Keyword(null, "name-map", "name-map", 2853325452));
  var typed_bite = qgame.simulator.parser.parse_bite.call(null, bite);
  var vec__4909 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "Token", "Token", 1094892875), (new cljs.core.Keyword(null, "type", "type", 1017479852)).cljs$core$IFn$_invoke$arity$1(typed_bite)) ? qgame.simulator.parser.parser_execute_token.call(null, name_map, typed_bite) : qgame.simulator.parser.parser_execute_rule.call(null, name_map, typed_bite);
  var name_map_STAR_ = cljs.core.nth.call(null, vec__4909, 0, null);
  var bite_STAR_ = cljs.core.nth.call(null, vec__4909, 1, null);
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name-map", "name-map", 2853325452), name_map_STAR_, new cljs.core.Keyword(null, "new-bites", "new-bites", 3608376192), cljs.core.conj.call(null, new_bites, bite_STAR_)], null);
};
qgame.simulator.parser.qubit_pattern = /\b(?:[A-T]|1?[0-9])\b/;
qgame.simulator.parser.parse_qubit = function parse_qubit(p__4910) {
  var map__4912 = p__4910;
  var map__4912__$1 = cljs.core.seq_QMARK_.call(null, map__4912) ? cljs.core.apply.call(null, cljs.core.hash_map, map__4912) : map__4912;
  var token = map__4912__$1;
  var post_rules = cljs.core.get.call(null, map__4912__$1, new cljs.core.Keyword(null, "post-rules", "post-rules", 1543368956));
  var temp__4090__auto__ = qgame.simulator.parser.match_only.call(null, qgame.simulator.parser.qubit_pattern, post_rules);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var qubit_str = temp__4090__auto__;
    var qubit_val = cljs.core.truth_(isNaN(parseInt(post_rules))) ? qgame.simulator.parser.qubit_letter_to_index.call(null, qubit_str) : parseInt(post_rules);
    return cljs.core.assoc.call(null, token, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "Qubit", "Qubit", 1092292539), new cljs.core.Keyword(null, "value", "value", 1125876963), qubit_val);
  } else {
    cljs.core.reset_BANG_.call(null, qgame.simulator.shared.current_qgame_fn, arguments.callee.name);
    return qgame.simulator.error.log_and_return_error_BANG_.call(null, "Qubit parse failure", token);
  }
};
qgame.simulator.parser.param_pattern = /\b\d+\.?\d*\b/;
qgame.simulator.parser.parse_param = function parse_param(p__4913) {
  var map__4915 = p__4913;
  var map__4915__$1 = cljs.core.seq_QMARK_.call(null, map__4915) ? cljs.core.apply.call(null, cljs.core.hash_map, map__4915) : map__4915;
  var token = map__4915__$1;
  var post_rules = cljs.core.get.call(null, map__4915__$1, new cljs.core.Keyword(null, "post-rules", "post-rules", 1543368956));
  var temp__4090__auto__ = qgame.simulator.parser.match_only.call(null, qgame.simulator.parser.param_pattern, post_rules);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var param_str = temp__4090__auto__;
    return cljs.core.assoc.call(null, token, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "Param", "Param", 1090788319), new cljs.core.Keyword(null, "value", "value", 1125876963), parseFloat(param_str));
  } else {
    cljs.core.reset_BANG_.call(null, qgame.simulator.shared.current_qgame_fn, arguments.callee.name);
    return qgame.simulator.error.log_and_return_error_BANG_.call(null, "Param parse failure", token);
  }
};
qgame.simulator.parser.bit_pattern = /\b[01]\b/;
qgame.simulator.parser.parse_bit = function parse_bit(p__4916) {
  var map__4918 = p__4916;
  var map__4918__$1 = cljs.core.seq_QMARK_.call(null, map__4918) ? cljs.core.apply.call(null, cljs.core.hash_map, map__4918) : map__4918;
  var token = map__4918__$1;
  var post_rules = cljs.core.get.call(null, map__4918__$1, new cljs.core.Keyword(null, "post-rules", "post-rules", 1543368956));
  var temp__4090__auto__ = qgame.simulator.parser.match_only.call(null, qgame.simulator.parser.bit_pattern, post_rules);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var bit_str = temp__4090__auto__;
    return cljs.core.assoc.call(null, token, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "Bit", "Bit", 1013971039), new cljs.core.Keyword(null, "value", "value", 1125876963), cljs.core.get.call(null, new cljs.core.PersistentArrayMap(null, 2, ["0", 0, "1", 1], null), bit_str));
  } else {
    cljs.core.reset_BANG_.call(null, qgame.simulator.shared.current_qgame_fn, arguments.callee.name);
    return qgame.simulator.error.log_and_return_error_BANG_.call(null, "Bit parse failure", token);
  }
};
qgame.simulator.parser.taste = function taste(parse_with, bite) {
  var temp__4090__auto__ = function(p1__4919_SHARP_) {
    return cljs.core.not_EQ_.call(null, new cljs.core.Keyword(null, "Token", "Token", 1094892875), (new cljs.core.Keyword(null, "type", "type", 1017479852)).cljs$core$IFn$_invoke$arity$1(p1__4919_SHARP_));
  }.call(null, bite) ? null : bite;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var token = temp__4090__auto__;
    return parse_with.call(null, token);
  } else {
    cljs.core.reset_BANG_.call(null, qgame.simulator.shared.current_qgame_fn, arguments.callee.name);
    return qgame.simulator.error.log_and_return_error_BANG_.call(null, "Unrecognized argument", bite);
  }
};
qgame.simulator.parser.swallow = function() {
  var swallow = null;
  var swallow__2 = function(parse_with, bites) {
    var swallowed = cljs.core.reduce.call(null, function(swallowed, bite) {
      var temp__4090__auto__ = cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", 1110689146)).cljs$core$IFn$_invoke$arity$1(qgame.simulator.parser.taste.call(null, parse_with, bite))) ? null : qgame.simulator.parser.taste.call(null, parse_with, bite);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var parsed = temp__4090__auto__;
        return cljs.core.conj.call(null, swallowed, parsed);
      } else {
        return cljs.core.reduced.call(null, swallowed);
      }
    }, cljs.core.PersistentVector.EMPTY, bites);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [swallowed, cljs.core.drop.call(null, cljs.core.count.call(null, swallowed), bites)], null);
  };
  var swallow__3 = function(n, parse_with, bites) {
    if (n === 0) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.List.EMPTY, bites], null);
    } else {
      if (n <= cljs.core.count.call(null, bites)) {
        var vec__4921 = cljs.core.split_at.call(null, n, bites);
        var to_taste = cljs.core.nth.call(null, vec__4921, 0, null);
        var bites_ = cljs.core.nth.call(null, vec__4921, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.map.call(null, cljs.core.partial.call(null, qgame.simulator.parser.taste, parse_with), to_taste), bites_], null);
      } else {
        return null;
      }
    }
  };
  swallow = function(n, parse_with, bites) {
    switch(arguments.length) {
      case 2:
        return swallow__2.call(this, n, parse_with);
      case 3:
        return swallow__3.call(this, n, parse_with, bites);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swallow.cljs$core$IFn$_invoke$arity$2 = swallow__2;
  swallow.cljs$core$IFn$_invoke$arity$3 = swallow__3;
  return swallow;
}();
qgame.simulator.parser.package_parse_time = function package_parse_time(fnc, bites) {
  if (cljs.core._EQ_.call(null, cljs.core.get_in.call(null, fnc, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516), new cljs.core.Keyword(null, "name", "name", 1017277949)], null)), "with_oracle")) {
    var vec__4923 = qgame.simulator.parser.swallow.call(null, qgame.simulator.parser.parse_bit, bites);
    var swallowed = cljs.core.nth.call(null, vec__4923, 0, null);
    var bites_ = cljs.core.nth.call(null, vec__4923, 1, null);
    var oracle = cljs.core.apply.call(null, (new cljs.core.Keyword(null, "caller", "caller", 3941096189)).cljs$core$IFn$_invoke$arity$1(fnc), cljs.core.map.call(null, new cljs.core.Keyword(null, "value", "value", 1125876963), swallowed));
    cljs.core.swap_BANG_.call(null, qgame.simulator.shared.canonical_functions, cljs.core.assoc, "oracle", oracle);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, bites_], null);
  } else {
    cljs.core.reset_BANG_.call(null, qgame.simulator.shared.current_qgame_fn, arguments.callee.name);
    return qgame.simulator.error.log_and_return_error_BANG_.call(null, "Uncrecognized parse time function", fnc);
  }
};
qgame.simulator.parser.package_expression = function package_expression(p__4924, bites) {
  var map__4928 = p__4924;
  var map__4928__$1 = cljs.core.seq_QMARK_.call(null, map__4928) ? cljs.core.apply.call(null, cljs.core.hash_map, map__4928) : map__4928;
  var fnc = map__4928__$1;
  var param_names = cljs.core.get.call(null, map__4928__$1, new cljs.core.Keyword(null, "param-names", "param-names", 740923770));
  var num_qubits = cljs.core.get.call(null, map__4928__$1, new cljs.core.Keyword(null, "num-qubits", "num-qubits", 1175408835));
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "ParseTime", "ParseTime", 1184785266), cljs.core.get_in.call(null, fnc, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516), new cljs.core.Keyword(null, "type", "type", 1017479852)], null)))) {
    return qgame.simulator.parser.package_parse_time.call(null, fnc, bites);
  } else {
    var temp__4090__auto__ = qgame.simulator.parser.swallow.call(null, num_qubits, qgame.simulator.parser.parse_qubit, bites);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var vec__4929 = temp__4090__auto__;
      var qubits = cljs.core.nth.call(null, vec__4929, 0, null);
      var bites_ = cljs.core.nth.call(null, vec__4929, 1, null);
      var temp__4090__auto____$1 = qgame.simulator.parser.swallow.call(null, cljs.core.count.call(null, param_names), qgame.simulator.parser.parse_param, bites_);
      if (cljs.core.truth_(temp__4090__auto____$1)) {
        var vec__4930 = temp__4090__auto____$1;
        var params = cljs.core.nth.call(null, vec__4930, 0, null);
        var bites__ = cljs.core.nth.call(null, vec__4930, 1, null);
        var expression = cljs.core.assoc.call(null, fnc, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "Expression", "Expression", 1211916842), new cljs.core.Keyword(null, "qubits", "qubits", 4360074396), qubits, new cljs.core.Keyword(null, "params", "params", 4313443576), params);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [expression, bites__], null);
      } else {
        cljs.core.reset_BANG_.call(null, qgame.simulator.shared.current_qgame_fn, arguments.callee.name);
        return qgame.simulator.error.log_and_return_error_BANG_.call(null, "Too few parameters", cljs.core.assoc.call(null, fnc, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "Expression", "Expression", 1211916842), new cljs.core.Keyword(null, "swallowed", "swallowed", 3934694966), bites));
      }
    } else {
      cljs.core.reset_BANG_.call(null, qgame.simulator.shared.current_qgame_fn, arguments.callee.name);
      return qgame.simulator.error.log_and_return_error_BANG_.call(null, "Too few parameters", cljs.core.assoc.call(null, fnc, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "Expression", "Expression", 1211916842), new cljs.core.Keyword(null, "swallowed", "swallowed", 3934694966), bites));
    }
  }
};
qgame.simulator.parser.parse_expressions = function() {
  var parse_expressions = null;
  var parse_expressions__1 = function(bites) {
    return parse_expressions.call(null, cljs.core.PersistentVector.EMPTY, bites);
  };
  var parse_expressions__2 = function(new_program, p__4932) {
    while (true) {
      var vec__4936 = p__4932;
      var bite = cljs.core.nth.call(null, vec__4936, 0, null);
      var remaining = cljs.core.nthnext.call(null, vec__4936, 1);
      var bites = vec__4936;
      if (cljs.core.empty_QMARK_.call(null, bites)) {
        return new_program;
      } else {
        var vec__4937 = function() {
          var temp__4090__auto__ = function(new_program, p__4932) {
            return function(p1__4931_SHARP_) {
              return cljs.core.not_EQ_.call(null, new cljs.core.Keyword(null, "Token", "Token", 1094892875), (new cljs.core.Keyword(null, "type", "type", 1017479852)).cljs$core$IFn$_invoke$arity$1(p1__4931_SHARP_));
            };
          }(new_program, p__4932).call(null, bite) ? null : bite;
          if (cljs.core.truth_(temp__4090__auto__)) {
            var token = temp__4090__auto__;
            var temp__4090__auto____$1 = cljs.core.get.call(null, cljs.core.deref.call(null, qgame.simulator.shared.canonical_functions), (new cljs.core.Keyword(null, "post-rules", "post-rules", 1543368956)).cljs$core$IFn$_invoke$arity$1(token));
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var fnc = temp__4090__auto____$1;
              var fnc_PLUS_ = cljs.core.merge.call(null, token, fnc);
              var vec__4938 = qgame.simulator.parser.package_expression.call(null, fnc_PLUS_, remaining);
              var expression = cljs.core.nth.call(null, vec__4938, 0, null);
              var remaining_ = cljs.core.nth.call(null, vec__4938, 1, null);
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.conj.call(null, new_program, expression), remaining_], null);
            } else {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.conj.call(null, new_program, function() {
                cljs.core.reset_BANG_.call(null, qgame.simulator.shared.current_qgame_fn, arguments.callee.name);
                return qgame.simulator.error.log_and_return_error_BANG_.call(null, "Lonely", token);
              }()), remaining], null);
            }
          } else {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new_program, remaining], null);
          }
        }();
        var new_program_STAR_ = cljs.core.nth.call(null, vec__4937, 0, null);
        var remaining_STAR_ = cljs.core.nth.call(null, vec__4937, 1, null);
        var G__4939 = new_program_STAR_;
        var G__4940 = remaining_STAR_;
        new_program = G__4939;
        p__4932 = G__4940;
        continue;
      }
      break;
    }
  };
  parse_expressions = function(new_program, p__4932) {
    switch(arguments.length) {
      case 1:
        return parse_expressions__1.call(this, new_program);
      case 2:
        return parse_expressions__2.call(this, new_program, p__4932);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parse_expressions.cljs$core$IFn$_invoke$arity$1 = parse_expressions__1;
  parse_expressions.cljs$core$IFn$_invoke$arity$2 = parse_expressions__2;
  return parse_expressions;
}();
qgame.simulator.parser.wrap_up = function wrap_up(program) {
  return cljs.core.remove.call(null, qgame.utils.general.errant_QMARK_, program);
};
qgame.simulator.parser.parse = function parse(program) {
  cljs.core.reset_BANG_.call(null, qgame.simulator.shared.stage, "Parsing");
  return qgame.simulator.parser.wrap_up.call(null, qgame.simulator.parser.parse_expressions.call(null, (new cljs.core.Keyword(null, "new-bites", "new-bites", 3608376192)).cljs$core$IFn$_invoke$arity$1(cljs.core.reduce.call(null, qgame.simulator.parser.execute_parser_rules, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name-map", "name-map", 2853325452), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "new-bites", "new-bites", 3608376192), cljs.core.PersistentVector.EMPTY], 
  null), program))));
};
goog.provide("qgame.simulator.reader");
goog.require("cljs.core");
goog.require("qgame.simulator.shared");
goog.require("clojure.string");
goog.require("qgame.utils.general");
goog.require("qgame.simulator.shared");
goog.require("qgame.utils.general");
goog.require("qgame.utils.general");
goog.require("clojure.string");
goog.require("clojure.string");
qgame.simulator.reader.split_into_lines = function split_into_lines(program) {
  return cljs.core.keep_indexed.call(null, function(idx, s) {
    if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, s))) {
      return null;
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "line-number", "line-number", 4279856820), idx, new cljs.core.Keyword(null, "line", "line", 1017226086), s], null);
    }
  }, clojure.string.split_lines.call(null, program));
};
qgame.simulator.reader.comment_pattern = /\#.*/;
qgame.simulator.reader.whitespace_equivalent_pattern = /[^\-\w\.\:\+\*\\/\^\(\)]+/;
qgame.simulator.reader.ignore_pattern = qgame.utils.general.regex_join.call(null, "(?:", qgame.simulator.reader.comment_pattern, "|", qgame.simulator.reader.whitespace_equivalent_pattern, ")");
qgame.simulator.reader.chew = function() {
  var chew = null;
  var chew__1 = function(s) {
    return chew.call(null, s, cljs.core.PersistentVector.EMPTY);
  };
  var chew__2 = function(s, bites) {
    var s_ = clojure.string.replace_first.call(null, s, qgame.utils.general.regex_join.call(null, "^", qgame.simulator.reader.whitespace_equivalent_pattern), "");
    var bites__$1 = bites;
    while (true) {
      if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, s_))) {
        return bites__$1;
      } else {
        var pos = cljs.core.count.call(null, s) - cljs.core.count.call(null, s_);
        var vec__6583 = clojure.string.split.call(null, s_, qgame.simulator.reader.ignore_pattern, 2);
        var text = cljs.core.nth.call(null, vec__6583, 0, null);
        var s__ = cljs.core.nth.call(null, vec__6583, 1, null);
        var bite = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "text", "text", 1017460895), text, new cljs.core.Keyword(null, "character-position", "character-position", 2475872959), pos], null);
        var G__6584 = [cljs.core.str(s__)].join("");
        var G__6585 = cljs.core.conj.call(null, bites__$1, bite);
        s_ = G__6584;
        bites__$1 = G__6585;
        continue;
      }
      break;
    }
  };
  chew = function(s, bites) {
    switch(arguments.length) {
      case 1:
        return chew__1.call(this, s);
      case 2:
        return chew__2.call(this, s, bites);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chew.cljs$core$IFn$_invoke$arity$1 = chew__1;
  chew.cljs$core$IFn$_invoke$arity$2 = chew__2;
  return chew;
}();
qgame.simulator.reader.split_into_bites = function split_into_bites(p__6587) {
  var map__6589 = p__6587;
  var map__6589__$1 = cljs.core.seq_QMARK_.call(null, map__6589) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6589) : map__6589;
  var line_number = cljs.core.get.call(null, map__6589__$1, new cljs.core.Keyword(null, "line-number", "line-number", 4279856820));
  var line = cljs.core.get.call(null, map__6589__$1, new cljs.core.Keyword(null, "line", "line", 1017226086));
  var bites = qgame.simulator.reader.chew.call(null, line);
  return cljs.core.map.call(null, function(p1__6586_SHARP_) {
    return cljs.core.assoc.call(null, p1__6586_SHARP_, new cljs.core.Keyword(null, "line-number", "line-number", 4279856820), line_number);
  }, bites);
};
qgame.simulator.reader.read = function read(program) {
  cljs.core.reset_BANG_.call(null, qgame.simulator.shared.stage, "Reading");
  return cljs.core.mapcat.call(null, qgame.simulator.reader.split_into_bites, qgame.simulator.reader.split_into_lines.call(null, program));
};
goog.provide("qgame.simulator.compiler");
goog.require("cljs.core");
goog.require("clojure.walk");
goog.require("qgame.simulator.shared");
goog.require("qgame.simulator.shared");
goog.require("clojure.walk");
goog.require("clojure.walk");
qgame.simulator.compiler.revise_on_end = function revise_on_end(p__6590) {
  var vec__6593 = p__6590;
  var current_status = cljs.core.nth.call(null, vec__6593, 0, null);
  var remaining = cljs.core.nthnext.call(null, vec__6593, 1);
  var open_branches = vec__6593;
  if (cljs.core.empty_QMARK_.call(null, open_branches)) {
    cljs.core.reset_BANG_.call(null, qgame.simulator.shared.current_qgame_fn, arguments.callee.name);
    return qgame.simulator.error.log_and_return_warning_BANG_.call(null, "Extra end", open_branches);
  } else {
    var G__6594 = current_status;
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "else-clause", "else-clause", 2613165045), G__6594)) {
      return remaining;
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "then-clause", "then-clause", 4549702289), G__6594)) {
        return cljs.core.cons.call(null, new cljs.core.Keyword(null, "else-clause", "else-clause", 2613165045), remaining);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(current_status)].join(""));
        } else {
          return null;
        }
      }
    }
  }
};
qgame.simulator.compiler.revise = function revise(open_branches, p__6595) {
  var map__6599 = p__6595;
  var map__6599__$1 = cljs.core.seq_QMARK_.call(null, map__6599) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6599) : map__6599;
  var map__6600 = cljs.core.get.call(null, map__6599__$1, new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516));
  var map__6600__$1 = cljs.core.seq_QMARK_.call(null, map__6600) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6600) : map__6600;
  var fn_nm = cljs.core.get.call(null, map__6600__$1, new cljs.core.Keyword(null, "name", "name", 1017277949));
  var G__6601 = fn_nm;
  if (cljs.core._EQ_.call(null, "end", G__6601)) {
    return qgame.simulator.compiler.revise_on_end.call(null, open_branches);
  } else {
    if (cljs.core._EQ_.call(null, "else", G__6601)) {
      return cljs.core.cons.call(null, new cljs.core.Keyword(null, "else-clause", "else-clause", 2613165045), cljs.core.rest.call(null, open_branches));
    } else {
      if (cljs.core._EQ_.call(null, "measure", G__6601)) {
        return cljs.core.cons.call(null, new cljs.core.Keyword(null, "then-clause", "then-clause", 4549702289), open_branches);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return open_branches;
        } else {
          return null;
        }
      }
    }
  }
};
qgame.simulator.compiler.curry_caller = function curry_caller(p__6602) {
  var map__6604 = p__6602;
  var map__6604__$1 = cljs.core.seq_QMARK_.call(null, map__6604) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6604) : map__6604;
  var instruction = map__6604__$1;
  var caller = cljs.core.get.call(null, map__6604__$1, new cljs.core.Keyword(null, "caller", "caller", 3941096189));
  var params = cljs.core.get.call(null, map__6604__$1, new cljs.core.Keyword(null, "params", "params", 4313443576));
  var qubits = cljs.core.get.call(null, map__6604__$1, new cljs.core.Keyword(null, "qubits", "qubits", 4360074396));
  var args = cljs.core.concat.call(null, cljs.core.map.call(null, new cljs.core.Keyword(null, "value", "value", 1125876963), qubits), cljs.core.map.call(null, new cljs.core.Keyword(null, "value", "value", 1125876963), params));
  var caller_PLUS_ = function(args) {
    return function(form) {
      return cljs.core.apply.call(null, caller, form, args);
    };
  }(args);
  return cljs.core.assoc.call(null, instruction, new cljs.core.Keyword(null, "curried", "curried", 2140847816), caller_PLUS_);
};
qgame.simulator.compiler.compile_expression = function compile_expression(p__6605, p__6606) {
  var map__6610 = p__6605;
  var map__6610__$1 = cljs.core.seq_QMARK_.call(null, map__6610) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6610) : map__6610;
  var expression = map__6610__$1;
  var map__6611 = cljs.core.get.call(null, map__6610__$1, new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516));
  var map__6611__$1 = cljs.core.seq_QMARK_.call(null, map__6611) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6611) : map__6611;
  var fn_nm = cljs.core.get.call(null, map__6611__$1, new cljs.core.Keyword(null, "name", "name", 1017277949));
  var vec__6612 = p__6606;
  var current_status = cljs.core.nth.call(null, vec__6612, 0, null);
  return qgame.simulator.compiler.curry_caller.call(null, cljs.core.assoc.call(null, cljs.core._EQ_.call(null, "end", fn_nm) && cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "then-clause", "then-clause", 4549702289), current_status) ? cljs.core.merge.call(null, expression, cljs.core.deref.call(null, qgame.simulator.shared.canonical_functions).call(null, "else")) : expression, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "Instruction", "Instruction", 
  2983299040)));
};
qgame.simulator.compiler.wrap_up = function wrap_up(open_branches, compiled, largest_qubit_index) {
  var seq__6617_6621 = cljs.core.seq.call(null, open_branches);
  var chunk__6618_6622 = null;
  var count__6619_6623 = 0;
  var i__6620_6624 = 0;
  while (true) {
    if (i__6620_6624 < count__6619_6623) {
      var status_6625 = cljs.core._nth.call(null, chunk__6618_6622, i__6620_6624);
      cljs.core.reset_BANG_.call(null, qgame.simulator.shared.current_qgame_fn, arguments.callee.name);
      qgame.simulator.error.log_and_return_warning_BANG_.call(null, "Lingering status", status_6625);
      var G__6626 = seq__6617_6621;
      var G__6627 = chunk__6618_6622;
      var G__6628 = count__6619_6623;
      var G__6629 = i__6620_6624 + 1;
      seq__6617_6621 = G__6626;
      chunk__6618_6622 = G__6627;
      count__6619_6623 = G__6628;
      i__6620_6624 = G__6629;
      continue;
    } else {
      var temp__4092__auto___6630 = cljs.core.seq.call(null, seq__6617_6621);
      if (temp__4092__auto___6630) {
        var seq__6617_6631__$1 = temp__4092__auto___6630;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6617_6631__$1)) {
          var c__4198__auto___6632 = cljs.core.chunk_first.call(null, seq__6617_6631__$1);
          var G__6633 = cljs.core.chunk_rest.call(null, seq__6617_6631__$1);
          var G__6634 = c__4198__auto___6632;
          var G__6635 = cljs.core.count.call(null, c__4198__auto___6632);
          var G__6636 = 0;
          seq__6617_6621 = G__6633;
          chunk__6618_6622 = G__6634;
          count__6619_6623 = G__6635;
          i__6620_6624 = G__6636;
          continue;
        } else {
          var status_6637 = cljs.core.first.call(null, seq__6617_6631__$1);
          cljs.core.reset_BANG_.call(null, qgame.simulator.shared.current_qgame_fn, arguments.callee.name);
          qgame.simulator.error.log_and_return_warning_BANG_.call(null, "Lingering status", status_6637);
          var G__6638 = cljs.core.next.call(null, seq__6617_6631__$1);
          var G__6639 = null;
          var G__6640 = 0;
          var G__6641 = 0;
          seq__6617_6621 = G__6638;
          chunk__6618_6622 = G__6639;
          count__6619_6623 = G__6640;
          i__6620_6624 = G__6641;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "ExecutionSpecs", "ExecutionSpecs", 2825253746), new cljs.core.Keyword(null, "program", "program", 704516598), compiled, new cljs.core.Keyword(null, "num-qubits", "num-qubits", 1175408835), largest_qubit_index], null);
};
qgame.simulator.compiler.compile = function compile(program) {
  cljs.core.reset_BANG_.call(null, qgame.simulator.shared.stage, "Compilation");
  var open_branches = cljs.core.List.EMPTY;
  var largest_qubit_index = 0;
  var compiled = cljs.core.PersistentVector.EMPTY;
  var G__6647 = program;
  var vec__6648 = G__6647;
  var expression = cljs.core.nth.call(null, vec__6648, 0, null);
  var remaining = cljs.core.nthnext.call(null, vec__6648, 1);
  var uncompiled = vec__6648;
  var open_branches__$1 = open_branches;
  var largest_qubit_index__$1 = largest_qubit_index;
  var compiled__$1 = compiled;
  var G__6647__$1 = G__6647;
  while (true) {
    var open_branches__$2 = open_branches__$1;
    var largest_qubit_index__$2 = largest_qubit_index__$1;
    var compiled__$2 = compiled__$1;
    var vec__6649 = G__6647__$1;
    var expression__$1 = cljs.core.nth.call(null, vec__6649, 0, null);
    var remaining__$1 = cljs.core.nthnext.call(null, vec__6649, 1);
    var uncompiled__$1 = vec__6649;
    if (cljs.core.empty_QMARK_.call(null, uncompiled__$1)) {
      return qgame.simulator.compiler.wrap_up.call(null, open_branches__$2, compiled__$2, largest_qubit_index__$2);
    } else {
      var G__6650 = qgame.simulator.compiler.revise.call(null, open_branches__$2, expression__$1);
      var G__6651 = cljs.core.apply.call(null, cljs.core.max, largest_qubit_index__$2, cljs.core.map.call(null, cljs.core.comp.call(null, cljs.core.inc, new cljs.core.Keyword(null, "value", "value", 1125876963)), (new cljs.core.Keyword(null, "qubits", "qubits", 4360074396)).cljs$core$IFn$_invoke$arity$1(expression__$1)));
      var G__6652 = cljs.core.conj.call(null, compiled__$2, qgame.simulator.compiler.compile_expression.call(null, expression__$1, open_branches__$2));
      var G__6653 = remaining__$1;
      open_branches__$1 = G__6650;
      largest_qubit_index__$1 = G__6651;
      compiled__$1 = G__6652;
      G__6647__$1 = G__6653;
      continue;
    }
    break;
  }
};
goog.provide("qgame.simulator.executor");
goog.require("cljs.core");
goog.require("qgame.utils.general");
goog.require("qgame.simulator.shared");
goog.require("qgame.utils.amplitudes");
goog.require("qgame.simulator.shared");
goog.require("qgame.utils.amplitudes");
goog.require("qgame.utils.amplitudes");
goog.require("qgame.utils.general");
goog.require("qgame.utils.general");
qgame.simulator.executor.new_quantum_system = function new_quantum_system(num_qubits) {
  var num_amplitudes = 1 << num_qubits;
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714), cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null), cljs.core.repeat.call(null, num_amplitudes - 1, 0)), new cljs.core.Keyword(null, "prior-probability", "prior-probability", 4421087524), 1, new cljs.core.Keyword(null, "oracle-count", "oracle-count", 3403530098), 0, new cljs.core.Keyword(null, "measurement-history", 
  "measurement-history", 2775390965), cljs.core.List.EMPTY], null);
};
qgame.simulator.executor.to_qsys_updater = function to_qsys_updater(qgate_STAR_) {
  return function(qsys) {
    return cljs.core.update_in.call(null, qsys, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "amplitudes", "amplitudes", 1792075714)], null), qgate_STAR_);
  };
};
qgame.simulator.executor.on_head_branch = function on_head_branch(f, p__6499) {
  var vec__6501 = p__6499;
  var head_branch = cljs.core.nth.call(null, vec__6501, 0, null);
  var remaining = cljs.core.nthnext.call(null, vec__6501, 1);
  return cljs.core.cons.call(null, cljs.core.map.call(null, f, head_branch), remaining);
};
qgame.simulator.executor.execute_qgate = function execute_qgate(branches, p__6502) {
  var map__6504 = p__6502;
  var map__6504__$1 = cljs.core.seq_QMARK_.call(null, map__6504) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6504) : map__6504;
  var caller = cljs.core.get.call(null, map__6504__$1, new cljs.core.Keyword(null, "curried", "curried", 2140847816));
  return qgame.simulator.executor.on_head_branch.call(null, qgame.simulator.executor.to_qsys_updater.call(null, caller), branches);
};
qgame.simulator.executor.execute_oracle = function execute_oracle(branches, p__6506) {
  var map__6508 = p__6506;
  var map__6508__$1 = cljs.core.seq_QMARK_.call(null, map__6508) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6508) : map__6508;
  var caller = cljs.core.get.call(null, map__6508__$1, new cljs.core.Keyword(null, "curried", "curried", 2140847816));
  var f = cljs.core.comp.call(null, qgame.simulator.executor.to_qsys_updater.call(null, caller), function(p1__6505_SHARP_) {
    return cljs.core.update_in.call(null, p1__6505_SHARP_, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "oracle-count", "oracle-count", 3403530098)], null), cljs.core.inc);
  });
  return qgame.simulator.executor.on_head_branch.call(null, f, branches);
};
qgame.simulator.executor.execute_flow_control = function execute_flow_control(branches, p__6509) {
  var map__6511 = p__6509;
  var map__6511__$1 = cljs.core.seq_QMARK_.call(null, map__6511) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6511) : map__6511;
  var caller = cljs.core.get.call(null, map__6511__$1, new cljs.core.Keyword(null, "curried", "curried", 2140847816));
  return caller.call(null, branches);
};
qgame.simulator.executor.execute_instruction = function execute_instruction(renderer, branches, p__6512) {
  var map__6516 = p__6512;
  var map__6516__$1 = cljs.core.seq_QMARK_.call(null, map__6516) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6516) : map__6516;
  var instruction = map__6516__$1;
  var map__6517 = cljs.core.get.call(null, map__6516__$1, new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516));
  var map__6517__$1 = cljs.core.seq_QMARK_.call(null, map__6517) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6517) : map__6517;
  var fn_nm = cljs.core.get.call(null, map__6517__$1, new cljs.core.Keyword(null, "name", "name", 1017277949));
  var fn_type = cljs.core.get.call(null, map__6517__$1, new cljs.core.Keyword(null, "type", "type", 1017479852));
  if (cljs.core.truth_(renderer)) {
    renderer.call(null, branches, instruction);
  } else {
  }
  var G__6518 = fn_type;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "FlowControl", "FlowControl", 825984929), G__6518)) {
    return qgame.simulator.executor.execute_flow_control.call(null, branches, instruction);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "Oracle", "Oracle", 3383876880), G__6518)) {
      return qgame.simulator.executor.execute_oracle.call(null, branches, instruction);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "QGate", "QGate", 1090921518), G__6518)) {
        return qgame.simulator.executor.execute_qgate.call(null, branches, instruction);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          cljs.core.reset_BANG_.call(null, qgame.simulator.shared.current_qgame_fn, arguments.callee.name);
          qgame.simulator.error.log_and_return_error_BANG_.call(null, "Unrecognized function type", instruction);
          return branches;
        } else {
          return null;
        }
      }
    }
  }
};
qgame.simulator.executor.execute = function execute(p__6519) {
  var map__6521 = p__6519;
  var map__6521__$1 = cljs.core.seq_QMARK_.call(null, map__6521) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6521) : map__6521;
  var renderer = cljs.core.get.call(null, map__6521__$1, new cljs.core.Keyword(null, "renderer", "renderer", 519058485));
  var num_qubits = cljs.core.get.call(null, map__6521__$1, new cljs.core.Keyword(null, "num-qubits", "num-qubits", 1175408835));
  var program = cljs.core.get.call(null, map__6521__$1, new cljs.core.Keyword(null, "program", "program", 704516598));
  cljs.core.reset_BANG_.call(null, qgame.simulator.shared.stage, "Execution");
  var init_qsystem = qgame.simulator.executor.new_quantum_system.call(null, num_qubits);
  var final_branches = cljs.core.reduce.call(null, cljs.core.partial.call(null, qgame.simulator.executor.execute_instruction, renderer), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core._conj.call(null, cljs.core.List.EMPTY, init_qsystem)), program);
  return cljs.core.apply.call(null, cljs.core.concat, final_branches);
};
goog.provide("qgame.simulator.interpreter");
goog.require("cljs.core");
goog.require("qgame.simulator.parser");
goog.require("qgame.simulator.compiler");
goog.require("qgame.simulator.reader");
goog.require("qgame.simulator.shared");
goog.require("qgame.simulator.executor");
goog.require("qgame.simulator.shared");
goog.require("qgame.simulator.executor");
goog.require("qgame.simulator.executor");
goog.require("qgame.simulator.compiler");
goog.require("qgame.simulator.compiler");
goog.require("qgame.simulator.parser");
goog.require("qgame.simulator.parser");
goog.require("qgame.simulator.reader");
goog.require("qgame.simulator.reader");
qgame.simulator.interpreter.interpret = function() {
  var interpret = null;
  var interpret__1 = function(raw) {
    var processed = qgame.simulator.compiler.compile.call(null, qgame.simulator.parser.parse.call(null, qgame.simulator.reader.read.call(null, raw)));
    return qgame.simulator.executor.execute.call(null, processed);
  };
  var interpret__2 = function(p__9204, raw) {
    var map__9206 = p__9204;
    var map__9206__$1 = cljs.core.seq_QMARK_.call(null, map__9206) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9206) : map__9206;
    var on_err = cljs.core.get.call(null, map__9206__$1, new cljs.core.Keyword(null, "on-err", "on-err", 4294768617));
    var in_exec = cljs.core.get.call(null, map__9206__$1, new cljs.core.Keyword(null, "in-exec", "in-exec", 2906402731));
    var pre_exec = cljs.core.get.call(null, map__9206__$1, new cljs.core.Keyword(null, "pre-exec", "pre-exec", 3967568109));
    cljs.core.reset_BANG_.call(null, qgame.simulator.shared.on_error, on_err);
    var processed = qgame.simulator.compiler.compile.call(null, qgame.simulator.parser.parse.call(null, qgame.simulator.reader.read.call(null, raw)));
    if (cljs.core.truth_(pre_exec)) {
      pre_exec.call(null, processed);
    } else {
    }
    return qgame.simulator.executor.execute.call(null, cljs.core.assoc.call(null, processed, new cljs.core.Keyword(null, "renderer", "renderer", 519058485), in_exec));
  };
  interpret = function(p__9204, raw) {
    switch(arguments.length) {
      case 1:
        return interpret__1.call(this, p__9204);
      case 2:
        return interpret__2.call(this, p__9204, raw);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interpret.cljs$core$IFn$_invoke$arity$1 = interpret__1;
  interpret.cljs$core$IFn$_invoke$arity$2 = interpret__2;
  return interpret;
}();
goog.provide("qgame.examples");
goog.require("cljs.core");
goog.require("qgame.utils.math");
goog.require("qgame.simulator.interpreter");
goog.require("qgame.utils.math");
goog.require("qgame.utils.math");
goog.require("qgame.simulator.interpreter");
cljs.core.enable_console_print_BANG_.call(null);
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose;
goog.disposable.IDisposable.prototype.isDisposed;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    this.creationStack = (new Error).stack;
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.Disposable.MONITORING_MODE = 0;
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.bind(callback, opt_scope));
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.debug.errorHandlerWeakDep");
goog.debug.errorHandlerWeakDep = {protectEntryPoint:function(fn, opt_tracers) {
  return fn;
}};
goog.provide("goog.userAgent");
goog.require("goog.string");
goog.userAgent.ASSUME_IE = false;
goog.userAgent.ASSUME_GECKO = false;
goog.userAgent.ASSUME_WEBKIT = false;
goog.userAgent.ASSUME_MOBILE_WEBKIT = false;
goog.userAgent.ASSUME_OPERA = false;
goog.userAgent.ASSUME_ANY_VERSION = false;
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || (goog.userAgent.ASSUME_GECKO || (goog.userAgent.ASSUME_MOBILE_WEBKIT || (goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA)));
goog.userAgent.getUserAgentString = function() {
  return goog.global["navigator"] ? goog.global["navigator"].userAgent : null;
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"];
};
goog.userAgent.init_ = function() {
  goog.userAgent.detectedOpera_ = false;
  goog.userAgent.detectedIe_ = false;
  goog.userAgent.detectedWebkit_ = false;
  goog.userAgent.detectedMobile_ = false;
  goog.userAgent.detectedGecko_ = false;
  var ua;
  if (!goog.userAgent.BROWSER_KNOWN_ && (ua = goog.userAgent.getUserAgentString())) {
    var navigator = goog.userAgent.getNavigator();
    goog.userAgent.detectedOpera_ = ua.indexOf("Opera") == 0;
    goog.userAgent.detectedIe_ = !goog.userAgent.detectedOpera_ && ua.indexOf("MSIE") != -1;
    goog.userAgent.detectedWebkit_ = !goog.userAgent.detectedOpera_ && ua.indexOf("WebKit") != -1;
    goog.userAgent.detectedMobile_ = goog.userAgent.detectedWebkit_ && ua.indexOf("Mobile") != -1;
    goog.userAgent.detectedGecko_ = !goog.userAgent.detectedOpera_ && (!goog.userAgent.detectedWebkit_ && navigator.product == "Gecko");
  }
};
if (!goog.userAgent.BROWSER_KNOWN_) {
  goog.userAgent.init_();
}
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.userAgent.detectedOpera_;
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.userAgent.detectedIe_;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.userAgent.detectedGecko_;
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.userAgent.detectedWebkit_;
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.detectedMobile_;
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.userAgent.ASSUME_MAC = false;
goog.userAgent.ASSUME_WINDOWS = false;
goog.userAgent.ASSUME_LINUX = false;
goog.userAgent.ASSUME_X11 = false;
goog.userAgent.ASSUME_ANDROID = false;
goog.userAgent.ASSUME_IPHONE = false;
goog.userAgent.ASSUME_IPAD = false;
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || (goog.userAgent.ASSUME_WINDOWS || (goog.userAgent.ASSUME_LINUX || (goog.userAgent.ASSUME_X11 || (goog.userAgent.ASSUME_ANDROID || (goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD)))));
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && ua.indexOf("Android") >= 0;
  goog.userAgent.detectedIPhone_ = !!ua && ua.indexOf("iPhone") >= 0;
  goog.userAgent.detectedIPad_ = !!ua && ua.indexOf("iPad") >= 0;
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    version = typeof operaVersion == "function" ? operaVersion() : operaVersion;
  } else {
    if (goog.userAgent.GECKO) {
      re = /rv\:([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.IE) {
        re = /MSIE\s+([^\);]+)(\)|;)/;
      } else {
        if (goog.userAgent.WEBKIT) {
          re = /WebKit\/(\S+)/;
        }
      }
    }
    if (re) {
      var arr = re.exec(goog.userAgent.getUserAgentString());
      version = arr ? arr[1] : "";
    }
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionCache_ = {};
goog.userAgent.isVersion = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || (goog.userAgent.isVersionCache_[version] || (goog.userAgent.isVersionCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0));
};
goog.userAgent.isDocumentMode = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersion("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersion("1.9b") || (goog.userAgent.IE && goog.userAgent.isVersion("8") || (goog.userAgent.OPERA && 
goog.userAgent.isVersion("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersion("528"))), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersion("8") || goog.userAgent.IE && !goog.userAgent.isVersion("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || (!!(goog.global["document"] && (document.documentElement && "ontouchstart" in document.documentElement)) || !!(goog.global["navigator"] && goog.global["navigator"]["msMaxTouchPoints"]))};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type;
  this.target = opt_target;
  this.currentTarget = this.target;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.propagationStopped_ = false;
goog.events.Event.prototype.defaultPrevented = false;
goog.events.Event.prototype.returnValue_ = true;
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.EventType = {CLICK:"click", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", 
DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONTEXTMENU:"contextmenu", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", 
POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", TRANSITIONEND:goog.userAgent.WEBKIT ? "webkitTransitionEnd" : goog.userAgent.OPERA ? "oTransitionEnd" : "transitionend", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", 
MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROVER:"MSPointerOver", MSPOINTEROUT:"MSPointerOut", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.target = null;
goog.events.BrowserEvent.prototype.currentTarget;
goog.events.BrowserEvent.prototype.relatedTarget = null;
goog.events.BrowserEvent.prototype.offsetX = 0;
goog.events.BrowserEvent.prototype.offsetY = 0;
goog.events.BrowserEvent.prototype.clientX = 0;
goog.events.BrowserEvent.prototype.clientY = 0;
goog.events.BrowserEvent.prototype.screenX = 0;
goog.events.BrowserEvent.prototype.screenY = 0;
goog.events.BrowserEvent.prototype.button = 0;
goog.events.BrowserEvent.prototype.keyCode = 0;
goog.events.BrowserEvent.prototype.charCode = 0;
goog.events.BrowserEvent.prototype.ctrlKey = false;
goog.events.BrowserEvent.prototype.altKey = false;
goog.events.BrowserEvent.prototype.shiftKey = false;
goog.events.BrowserEvent.prototype.metaKey = false;
goog.events.BrowserEvent.prototype.state;
goog.events.BrowserEvent.prototype.platformModifierKey = false;
goog.events.BrowserEvent.prototype.event_ = null;
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  goog.events.Event.call(this, type);
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
  delete this.propagationStopped_;
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && (goog.userAgent.MAC && this.ctrlKey));
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.EventWrapper");
goog.events.EventWrapper = function() {
};
goog.events.EventWrapper.prototype.listen = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.events.EventWrapper.prototype.unlisten = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventLike");
goog.events.Listenable = function() {
};
goog.events.Listenable.USE_LISTENABLE_INTERFACE = false;
goog.events.Listenable.IMPLEMENTED_BY_PROP_ = "__closure_listenable";
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP_] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP_]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function() {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
};
goog.events.Listener.ENABLE_MONITORING = false;
goog.events.Listener.prototype.isFunctionListener_;
goog.events.Listener.prototype.listener;
goog.events.Listener.prototype.proxy;
goog.events.Listener.prototype.src;
goog.events.Listener.prototype.type;
goog.events.Listener.prototype.capture;
goog.events.Listener.prototype.handler;
goog.events.Listener.prototype.key = 0;
goog.events.Listener.prototype.removed = false;
goog.events.Listener.prototype.callOnce = false;
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.init = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.isFunction(listener)) {
    this.isFunctionListener_ = true;
  } else {
    if (listener && (listener.handleEvent && goog.isFunction(listener.handleEvent))) {
      this.isFunctionListener_ = false;
    } else {
      throw Error("Invalid listener argument");
    }
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.callOnce = false;
  this.key = goog.events.ListenableKey.reserveKey();
  this.removed = false;
};
goog.events.Listener.prototype.handleEvent = function(eventObject) {
  if (this.isFunctionListener_) {
    return this.listener.call(this.handler || this.src, eventObject);
  }
  return this.listener.handleEvent.call(this.listener, eventObject);
};
goog.provide("goog.events");
goog.provide("goog.events.Key");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.debug.errorHandlerWeakDep");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventWrapper");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.require("goog.userAgent");
goog.events.Key;
goog.events.ListenableType;
goog.events.listeners_ = {};
goog.events.listenerTree_ = {};
goog.events.sources_ = {};
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.keySeparator_ = "_";
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  var listenableKey;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listen((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  } else {
    listenableKey = goog.events.listen_((src), type, listener, false, opt_capt, opt_handler);
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key;
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    map[type] = {count_:0, remaining_:0};
  }
  map = map[type];
  if (!(capture in map)) {
    map[capture] = {count_:0, remaining_:0};
    map.count_++;
  }
  map = map[capture];
  var srcUid = goog.getUid(src);
  var listenerArray, listenerObj;
  map.remaining_++;
  if (!map[srcUid]) {
    listenerArray = map[srcUid] = [];
    map.count_++;
  } else {
    listenerArray = map[srcUid];
    for (var i = 0;i < listenerArray.length;i++) {
      listenerObj = listenerArray[i];
      if (listenerObj.listener == listener && listenerObj.handler == opt_handler) {
        if (listenerObj.removed) {
          break;
        }
        if (!callOnce) {
          listenerArray[i].callOnce = false;
        }
        return listenerArray[i];
      }
    }
  }
  var proxy = goog.events.getProxy();
  listenerObj = new goog.events.Listener;
  listenerObj.init(listener, proxy, src, type, capture, opt_handler);
  listenerObj.callOnce = callOnce;
  proxy.src = src;
  proxy.listener = listenerObj;
  listenerArray.push(listenerObj);
  if (!goog.events.sources_[srcUid]) {
    goog.events.sources_[srcUid] = [];
  }
  goog.events.sources_[srcUid].push(listenerObj);
  if (src.addEventListener) {
    if (src == goog.global || !src.customEvent_) {
      src.addEventListener(type, proxy, capture);
    }
  } else {
    src.attachEvent(goog.events.getOnString_(type), proxy);
  }
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  var listenableKey;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listenOnce((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  } else {
    listenableKey = goog.events.listen_((src), type, listener, true, opt_capt, opt_handler);
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key;
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  }
  var capture = !!opt_capt;
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if (!listenerArray) {
    return false;
  }
  for (var i = 0;i < listenerArray.length;i++) {
    if (listenerArray[i].listener == listener && (listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler)) {
      return goog.events.unlistenByKey(listenerArray[i].key);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  var listener = goog.events.listeners_[key];
  if (!listener) {
    return false;
  }
  if (listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  var capture = listener.capture;
  if (src.removeEventListener) {
    if (src == goog.global || !src.customEvent_) {
      src.removeEventListener(type, proxy, capture);
    }
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  var srcUid = goog.getUid(src);
  if (goog.events.sources_[srcUid]) {
    var sourcesArray = goog.events.sources_[srcUid];
    goog.array.remove(sourcesArray, listener);
    if (sourcesArray.length == 0) {
      delete goog.events.sources_[srcUid];
    }
  }
  listener.removed = true;
  var listenerArray = goog.events.listenerTree_[type][capture][srcUid];
  if (listenerArray) {
    listenerArray.needsCleanup_ = true;
    goog.events.cleanUp_(type, capture, srcUid, listenerArray);
  }
  delete goog.events.listeners_[key];
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.cleanUp = function(listenableKey) {
  delete goog.events.listeners_[listenableKey.key];
};
goog.events.cleanUp_ = function(type, capture, srcUid, listenerArray) {
  if (!listenerArray.locked_) {
    if (listenerArray.needsCleanup_) {
      for (var oldIndex = 0, newIndex = 0;oldIndex < listenerArray.length;oldIndex++) {
        if (listenerArray[oldIndex].removed) {
          var proxy = listenerArray[oldIndex].proxy;
          proxy.src = null;
          continue;
        }
        if (oldIndex != newIndex) {
          listenerArray[newIndex] = listenerArray[oldIndex];
        }
        newIndex++;
      }
      listenerArray.length = newIndex;
      listenerArray.needsCleanup_ = false;
      if (newIndex == 0) {
        delete goog.events.listenerTree_[type][capture][srcUid];
        goog.events.listenerTree_[type][capture].count_--;
        if (goog.events.listenerTree_[type][capture].count_ == 0) {
          delete goog.events.listenerTree_[type][capture];
          goog.events.listenerTree_[type].count_--;
        }
        if (goog.events.listenerTree_[type].count_ == 0) {
          delete goog.events.listenerTree_[type];
        }
      }
    }
  }
};
goog.events.removeAll = function(opt_obj, opt_type) {
  var count = 0;
  var noObj = opt_obj == null;
  var noType = opt_type == null;
  if (!noObj) {
    if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && (opt_obj && goog.events.Listenable.isImplementedBy(opt_obj))) {
      return opt_obj.removeAllListeners(opt_type);
    }
    var srcUid = goog.getUid((opt_obj));
    if (goog.events.sources_[srcUid]) {
      var sourcesArray = goog.events.sources_[srcUid];
      for (var i = sourcesArray.length - 1;i >= 0;i--) {
        var listener = sourcesArray[i];
        if (noType || opt_type == listener.type) {
          goog.events.unlistenByKey(listener.key);
          count++;
        }
      }
    }
  } else {
    goog.object.forEach(goog.events.listeners_, function(listener, key) {
      goog.events.unlistenByKey(key);
      count++;
    });
  }
  return count;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    return goog.events.getListeners_(obj, type, capture) || [];
  }
};
goog.events.getListeners_ = function(obj, type, capture) {
  var map = goog.events.listenerTree_;
  if (type in map) {
    map = map[type];
    if (capture in map) {
      map = map[capture];
      var objUid = goog.getUid(obj);
      if (map[objUid]) {
        return map[objUid];
      }
    }
  }
  return null;
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  var capture = !!opt_capt;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener((type), goog.events.wrapListener_(listener), capture, opt_handler);
  }
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;i++) {
      if (!listenerArray[i].removed && (listenerArray[i].listener == listener && (listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler))) {
        return listenerArray[i];
      }
    }
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var objUid = goog.getUid(obj);
  var listeners = goog.events.sources_[objUid];
  if (listeners) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    if (hasType && hasCapture) {
      var map = goog.events.listenerTree_[opt_type];
      return!!map && (!!map[opt_capture] && objUid in map[opt_capture]);
    } else {
      if (!(hasType || hasCapture)) {
        return true;
      } else {
        return goog.array.some(listeners, function(listener) {
          return hasType && listener.type == opt_type || hasCapture && listener.capture == opt_capture;
        });
      }
    }
  }
  return false;
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  var map = goog.events.listenerTree_;
  if (type in map) {
    map = map[type];
    if (capture in map) {
      return goog.events.fireListeners_(map[capture], obj, type, capture, eventObject);
    }
  }
  return true;
};
goog.events.fireListeners_ = function(map, obj, type, capture, eventObject) {
  var retval = 1;
  var objUid = goog.getUid(obj);
  if (map[objUid]) {
    var remaining = --map.remaining_;
    var listenerArray = map[objUid];
    if (!listenerArray.locked_) {
      listenerArray.locked_ = 1;
    } else {
      listenerArray.locked_++;
    }
    try {
      var length = listenerArray.length;
      for (var i = 0;i < length;i++) {
        var listener = listenerArray[i];
        if (listener && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    } finally {
      map.remaining_ = Math.max(remaining, map.remaining_);
      listenerArray.locked_--;
      goog.events.cleanUp_(type, capture, objUid, listenerArray);
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener.key);
  }
  return listener.handleEvent(eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.object.getCount(goog.events.listeners_);
};
goog.events.dispatchEvent = function(src, e) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    return src.dispatchEvent(e);
  }
  var type = e.type || e;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    return true;
  }
  if (goog.isString(e)) {
    e = new goog.events.Event(e, src);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event((type), src);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || src;
    }
  }
  var rv = 1, ancestors;
  map = map[type];
  var hasCapture = true in map;
  var targetsMap;
  if (hasCapture) {
    ancestors = [];
    for (var parent = src;parent;parent = parent.getParentEventTarget()) {
      ancestors.push(parent);
    }
    targetsMap = map[true];
    targetsMap.remaining_ = targetsMap.count_;
    for (var i = ancestors.length - 1;!e.propagationStopped_ && (i >= 0 && targetsMap.remaining_);i--) {
      e.currentTarget = ancestors[i];
      rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, true, e) && e.returnValue_ != false;
    }
  }
  var hasBubble = false in map;
  if (hasBubble) {
    targetsMap = map[false];
    targetsMap.remaining_ = targetsMap.count_;
    if (hasCapture) {
      for (var i = 0;!e.propagationStopped_ && (i < ancestors.length && targetsMap.remaining_);i++) {
        e.currentTarget = ancestors[i];
        rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, false, e) && e.returnValue_ != false;
      }
    } else {
      for (var current = src;!e.propagationStopped_ && (current && targetsMap.remaining_);current = current.getParentEventTarget()) {
        e.currentTarget = current;
        rv &= goog.events.fireListeners_(targetsMap, current, e.type, false, e) && e.returnValue_ != false;
      }
    }
  }
  return Boolean(rv);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  var type = listener.type;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    return true;
  }
  map = map[type];
  var retval, targetsMap;
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var hasCapture = true in map;
    var hasBubble = false in map;
    if (hasCapture) {
      if (goog.events.isMarkedIeEvent_(ieEvent)) {
        return true;
      }
      goog.events.markIeEvent_(ieEvent);
    }
    var evt = new goog.events.BrowserEvent;
    evt.init(ieEvent, (this));
    retval = true;
    try {
      if (hasCapture) {
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        targetsMap = map[true];
        targetsMap.remaining_ = targetsMap.count_;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && (i >= 0 && targetsMap.remaining_);i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, true, evt);
        }
        if (hasBubble) {
          targetsMap = map[false];
          targetsMap.remaining_ = targetsMap.count_;
          for (var i = 0;!evt.propagationStopped_ && (i < ancestors.length && targetsMap.remaining_);i++) {
            evt.currentTarget = ancestors[i];
            retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, false, evt);
          }
        }
      } else {
        retval = goog.events.fireListener(listener, evt);
      }
    } finally {
      if (ancestors) {
        ancestors.length = 0;
      }
    }
    return retval;
  }
  var be = new goog.events.BrowserEvent(opt_evt, (this));
  retval = goog.events.fireListener(listener, be);
  return retval;
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener_ = function(listener) {
  if (goog.isFunction(listener)) {
    return listener;
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_] || (listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
    return listener.handleEvent(e);
  });
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.eventTargetListeners_ = {};
    this.reallyDisposed_ = false;
    this.actualEventTarget_ = this;
  }
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.Listenable.addImplementation(goog.events.EventTarget);
}
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.customEvent_ = true;
goog.events.EventTarget.prototype.parentEventTarget_ = null;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    if (this.reallyDisposed_) {
      return true;
    }
    var ancestorsTree, ancestor = this.getParentEventTarget();
    if (ancestor) {
      ancestorsTree = [];
      var ancestorCount = 1;
      for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
        ancestorsTree.push(ancestor);
        goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
      }
    }
    return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
  } else {
    return goog.events.dispatchEvent(this, e);
  }
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.removeAllListeners();
    this.reallyDisposed_ = true;
  } else {
    goog.events.removeAll(this);
  }
  this.parentEventTarget_ = null;
};
if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, false, opt_useCapture, opt_listenerScope);
  };
  goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, true, opt_useCapture, opt_listenerScope);
  };
  goog.events.EventTarget.prototype.listenInternal_ = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not listen on disposed object.");
    var listenerArray = this.eventTargetListeners_[type] || (this.eventTargetListeners_[type] = []);
    var listenerObj;
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
      listenerObj = listenerArray[index];
      if (!callOnce) {
        listenerObj.callOnce = false;
      }
      return listenerObj;
    }
    listenerObj = new goog.events.Listener;
    listenerObj.init(listener, null, this, type, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
    return listenerObj;
  };
  goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
    if (!(type in this.eventTargetListeners_)) {
      return false;
    }
    var listenerArray = this.eventTargetListeners_[type];
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
      var listenerObj = listenerArray[index];
      goog.events.cleanUp(listenerObj);
      listenerObj.removed = true;
      return goog.array.removeAt(listenerArray, index);
    }
    return false;
  };
  goog.events.EventTarget.prototype.unlistenByKey = function(key) {
    var type = key.type;
    if (!(type in this.eventTargetListeners_)) {
      return false;
    }
    var removed = goog.array.remove(this.eventTargetListeners_[type], key);
    if (removed) {
      goog.events.cleanUp(key);
      key.removed = true;
    }
    return removed;
  };
  goog.events.EventTarget.prototype.removeAllListeners = function(opt_type, opt_capture) {
    var count = 0;
    for (var type in this.eventTargetListeners_) {
      if (!opt_type || type == opt_type) {
        var listenerArray = this.eventTargetListeners_[type];
        for (var i = 0;i < listenerArray.length;i++) {
          ++count;
          goog.events.cleanUp(listenerArray[i]);
          listenerArray[i].removed = true;
        }
        listenerArray.length = 0;
      }
    }
    return count;
  };
  goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not fire listeners after dispose() completed.");
    if (!(type in this.eventTargetListeners_)) {
      return true;
    }
    var rv = true;
    var listenerArray = goog.array.clone(this.eventTargetListeners_[type]);
    for (var i = 0;i < listenerArray.length;++i) {
      var listener = listenerArray[i];
      if (listener && (!listener.removed && listener.capture == capture)) {
        if (listener.callOnce) {
          this.unlistenByKey(listener);
        }
        rv = listener.handleEvent(eventObject) !== false && rv;
      }
    }
    return rv && eventObject.returnValue_ != false;
  };
  goog.events.EventTarget.prototype.getListeners = function(type, capture) {
    var listenerArray = this.eventTargetListeners_[type];
    var rv = [];
    if (listenerArray) {
      for (var i = 0;i < listenerArray.length;++i) {
        var listenerObj = listenerArray[i];
        if (listenerObj.capture == capture) {
          rv.push(listenerObj);
        }
      }
    }
    return rv;
  };
  goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
    var listenerArray = this.eventTargetListeners_[type];
    var i = -1;
    if (listenerArray) {
      i = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
    }
    return i > -1 ? listenerArray[i] : null;
  };
  goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    return goog.object.some(this.eventTargetListeners_, function(listenersArray, type) {
      for (var i = 0;i < listenersArray.length;++i) {
        if ((!hasType || listenersArray[i].type == opt_type) && (!hasCapture || listenersArray[i].capture == opt_capture)) {
          return true;
        }
      }
      return false;
    });
  };
  goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
    this.actualEventTarget_ = target;
  };
  goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
    var type = e.type || (e);
    if (goog.isString(e)) {
      e = new goog.events.Event(e, target);
    } else {
      if (!(e instanceof goog.events.Event)) {
        var oldEvent = e;
        e = new goog.events.Event(type, target);
        goog.object.extend(e, oldEvent);
      } else {
        e.target = e.target || target;
      }
    }
    var rv = true, currentTarget;
    if (opt_ancestorsTree) {
      for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, true, e) && rv;
      }
    }
    if (!e.propagationStopped_) {
      currentTarget = e.currentTarget = target;
      rv = currentTarget.fireListeners(type, true, e) && rv;
      if (!e.propagationStopped_) {
        rv = currentTarget.fireListeners(type, false, e) && rv;
      }
    }
    if (opt_ancestorsTree) {
      for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, false, e) && rv;
      }
    }
    return rv;
  };
  goog.events.EventTarget.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.listener == listener && (listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope)) {
        return i;
      }
    }
    return-1;
  };
}
;goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = 0.8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.iter");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      return f.call(opt_obj, val, undefined, iterator);
    }
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var args = arguments;
  var length = args.length;
  var i = 0;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    try {
      if (i >= length) {
        throw goog.iter.StopIteration;
      }
      var current = goog.iter.toIterator(args[i]);
      return current.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration || i >= length) {
        throw ex;
      } else {
        i++;
        return this.next();
      }
    }
  };
  return newIter;
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  iterable1 = goog.iter.toIterator(iterable1);
  iterable2 = goog.iter.toIterator(iterable2);
  var b1, b2;
  try {
    while (true) {
      b1 = b2 = false;
      var val1 = iterable1.next();
      b1 = true;
      var val2 = iterable2.next();
      b2 = true;
      if (val1 != val2) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    } else {
      if (b1 && !b2) {
        return false;
      }
      if (!b2) {
        try {
          val2 = iterable2.next();
          return false;
        } catch (ex1) {
          if (ex1 !== goog.iter.StopIteration) {
            throw ex1;
          }
          return true;
        }
      }
    }
  }
  return false;
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.require("goog.structs");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.count_ = 0;
goog.structs.Map.prototype.version_ = 0;
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersion("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line);
    }
    logFunc({message:message, fileName:url, line:line});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var previous = new goog.structs.Set;
  var str = [];
  var helper = function(obj, space) {
    var nestspace = space + "  ";
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (previous.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  previous.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "");
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || (err.line || "Not available");
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || (err.filename || (err.sourceURL || (goog.global["$googDebugFname"] || href)));
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || (!err.lineNumber || (!err.fileName || !err.stack))) {
    return{"message":err.message, "name":err.name, "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error = typeof err == "string" ? Error(err) : err;
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(arguments.callee.caller);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getStacktrace = function(opt_fn) {
  return goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS = true;
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.debug.LogBuffer.CAPACITY = 0;
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Logger = function(name) {
  this.name_ = name;
};
goog.debug.Logger.prototype.parent_ = null;
goog.debug.Logger.prototype.level_ = null;
goog.debug.Logger.prototype.children_ = null;
goog.debug.Logger.prototype.handlers_ = null;
goog.debug.Logger.ENABLE_HIERARCHY = true;
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    if (!this.handlers_) {
      this.handlers_ = [];
    }
    this.handlers_.push(handler);
  } else {
    goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootHandlers_.push(handler);
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
  return!!handlers && goog.array.remove(handlers, handler);
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    this.level_ = level;
  } else {
    goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootLevel_ = level;
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (this.isLoggable(level)) {
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, arguments.callee.caller));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger("");
    goog.debug.LogManager.loggers_[""] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.json");
goog.provide("goog.json.Serializer");
goog.json.isValid_ = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = function(s) {
  var o = String(s);
  if (goog.json.isValid_(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serialize_(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serialize_ = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serialize_(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serialize_(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XmlHttpFactory");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.net.XmlHttp.ASSUME_NATIVE_XHR = false;
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory((factory), (optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && (typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined")) {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && (pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, value) {
  return goog.uri.utils.appendQueryData_([uri, "\x26", key, "\x3d", goog.string.urlEncode(value)]);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || (followingChar == goog.uri.utils.CharCode_.EQUAL || (followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH))) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.Logger");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.events.EventTarget.call(this);
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.debug.Logger.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    goog.events.listen(x, goog.net.EventType.COMPLETE, opt_callback);
  }
  goog.events.listen(x, goog.net.EventType.READY, goog.partial(goog.net.XhrIo.cleanupSend_, x));
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.cleanupSend_ = function(XhrIo) {
  XhrIo.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, XhrIo);
};
goog.net.XhrIo.prototype.active_ = false;
goog.net.XhrIo.prototype.xhr_ = null;
goog.net.XhrIo.prototype.xhrOptions_ = null;
goog.net.XhrIo.prototype.lastUri_ = "";
goog.net.XhrIo.prototype.lastMethod_ = "";
goog.net.XhrIo.prototype.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
goog.net.XhrIo.prototype.lastError_ = "";
goog.net.XhrIo.prototype.errorDispatched_ = false;
goog.net.XhrIo.prototype.inSend_ = false;
goog.net.XhrIo.prototype.inOpen_ = false;
goog.net.XhrIo.prototype.inAbort_ = false;
goog.net.XhrIo.prototype.timeoutInterval_ = 0;
goog.net.XhrIo.prototype.timeoutId_ = null;
goog.net.XhrIo.prototype.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
goog.net.XhrIo.prototype.withCredentials_ = false;
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    this.logger_.fine(this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, url, true);
    this.inOpen_ = false;
  } catch (err) {
    this.logger_.fine(this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (method == "POST" && (!headers.containsKey(goog.net.XhrIo.CONTENT_TYPE_HEADER) && !contentIsFormData)) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  goog.structs.forEach(headers, function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    if (this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null;
    }
    if (this.timeoutInterval_ > 0) {
      this.logger_.fine(this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete"));
      this.timeoutId_ = goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.timeout_, this), this.timeoutInterval_);
    }
    this.logger_.fine(this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    this.logger_.fine(this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      this.logger_.fine(this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    this.logger_.fine(this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.superClass_.disposeInternal.call(this);
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (!this.inOpen_ && (!this.inSend_ && !this.inAbort_)) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && (this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2)) {
      this.logger_.fine(this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.onReadyStateChange_, this), 0);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        this.logger_.fine(this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null;
    }
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      this.logger_.severe("Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    this.logger_.warning("Can not get status: " + e.message);
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    this.logger_.fine("Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    this.logger_.fine("Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    this.logger_.fine("Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    this.logger_.fine("Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    this.logger_.severe("Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    this.logger_.fine("Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.net.xpc");
goog.provide("goog.net.xpc.CfgFields");
goog.provide("goog.net.xpc.ChannelStates");
goog.provide("goog.net.xpc.TransportNames");
goog.provide("goog.net.xpc.TransportTypes");
goog.provide("goog.net.xpc.UriCfgFields");
goog.require("goog.debug.Logger");
goog.net.xpc.TransportTypes = {NATIVE_MESSAGING:1, FRAME_ELEMENT_METHOD:2, IFRAME_RELAY:3, IFRAME_POLLING:4, FLASH:5, NIX:6};
goog.net.xpc.TransportNames = {1:"NativeMessagingTransport", 2:"FrameElementMethodTransport", 3:"IframeRelayTransport", 4:"IframePollingTransport", 5:"FlashTransport", 6:"NixTransport"};
goog.net.xpc.CfgFields = {CHANNEL_NAME:"cn", AUTH_TOKEN:"at", REMOTE_AUTH_TOKEN:"rat", PEER_URI:"pu", IFRAME_ID:"ifrid", TRANSPORT:"tp", LOCAL_RELAY_URI:"lru", PEER_RELAY_URI:"pru", LOCAL_POLL_URI:"lpu", PEER_POLL_URI:"ppu", PEER_HOSTNAME:"ph", ONE_SIDED_HANDSHAKE:"osh", ROLE:"role", NATIVE_TRANSPORT_PROTOCOL_VERSION:"nativeProtocolVersion"};
goog.net.xpc.UriCfgFields = [goog.net.xpc.CfgFields.PEER_URI, goog.net.xpc.CfgFields.LOCAL_RELAY_URI, goog.net.xpc.CfgFields.PEER_RELAY_URI, goog.net.xpc.CfgFields.LOCAL_POLL_URI, goog.net.xpc.CfgFields.PEER_POLL_URI];
goog.net.xpc.ChannelStates = {NOT_CONNECTED:1, CONNECTED:2, CLOSED:3};
goog.net.xpc.TRANSPORT_SERVICE_ = "tp";
goog.net.xpc.SETUP = "SETUP";
goog.net.xpc.SETUP_NTPV2 = "SETUP_NTPV2";
goog.net.xpc.SETUP_ACK_ = "SETUP_ACK";
goog.net.xpc.SETUP_ACK_NTPV2 = "SETUP_ACK_NTPV2";
goog.net.xpc.channels = {};
goog.net.xpc.getRandomString = function(length, opt_characters) {
  var chars = opt_characters || goog.net.xpc.randomStringCharacters_;
  var charsLength = chars.length;
  var s = "";
  while (length-- > 0) {
    s += chars.charAt(Math.floor(Math.random() * charsLength));
  }
  return s;
};
goog.net.xpc.randomStringCharacters_ = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
goog.net.xpc.logger = goog.debug.Logger.getLogger("goog.net.xpc");
/*
 Portions of this code are from MochiKit, received by
 The Closure Authors under the MIT license. All other code is Copyright
 2005-2009 The Closure Authors. All Rights Reserved.
*/
goog.provide("goog.async.Deferred");
goog.provide("goog.async.Deferred.AlreadyCalledError");
goog.provide("goog.async.Deferred.CancelledError");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.Error");
goog.async.Deferred = function(opt_onCancelFunction, opt_defaultScope) {
  this.sequence_ = [];
  this.onCancelFunction_ = opt_onCancelFunction;
  this.defaultScope_ = opt_defaultScope || null;
};
goog.async.Deferred.prototype.fired_ = false;
goog.async.Deferred.prototype.hadError_ = false;
goog.async.Deferred.prototype.result_;
goog.async.Deferred.prototype.blocked_ = false;
goog.async.Deferred.prototype.blocking_ = false;
goog.async.Deferred.prototype.silentlyCancelled_ = false;
goog.async.Deferred.prototype.unhandledExceptionTimeoutId_;
goog.async.Deferred.prototype.parent_;
goog.async.Deferred.prototype.branches_ = 0;
goog.async.Deferred.prototype.cancel = function(opt_deepCancel) {
  if (!this.hasFired()) {
    if (this.parent_) {
      var parent = this.parent_;
      delete this.parent_;
      if (opt_deepCancel) {
        parent.cancel(opt_deepCancel);
      } else {
        parent.branchCancel_();
      }
    }
    if (this.onCancelFunction_) {
      this.onCancelFunction_.call(this.defaultScope_, this);
    } else {
      this.silentlyCancelled_ = true;
    }
    if (!this.hasFired()) {
      this.errback(new goog.async.Deferred.CancelledError(this));
    }
  } else {
    if (this.result_ instanceof goog.async.Deferred) {
      this.result_.cancel();
    }
  }
};
goog.async.Deferred.prototype.branchCancel_ = function() {
  this.branches_--;
  if (this.branches_ <= 0) {
    this.cancel();
  }
};
goog.async.Deferred.prototype.continue_ = function(isSuccess, res) {
  this.blocked_ = false;
  this.updateResult_(isSuccess, res);
};
goog.async.Deferred.prototype.updateResult_ = function(isSuccess, res) {
  this.fired_ = true;
  this.result_ = res;
  this.hadError_ = !isSuccess;
  this.fire_();
};
goog.async.Deferred.prototype.check_ = function() {
  if (this.hasFired()) {
    if (!this.silentlyCancelled_) {
      throw new goog.async.Deferred.AlreadyCalledError(this);
    }
    this.silentlyCancelled_ = false;
  }
};
goog.async.Deferred.prototype.callback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.updateResult_(true, opt_result);
};
goog.async.Deferred.prototype.errback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.updateResult_(false, opt_result);
};
goog.async.Deferred.prototype.assertNotDeferred_ = function(obj) {
  goog.asserts.assert(!(obj instanceof goog.async.Deferred), "An execution sequence may not be initiated with a blocking Deferred.");
};
goog.async.Deferred.prototype.addCallback = function(cb, opt_scope) {
  return this.addCallbacks(cb, null, opt_scope);
};
goog.async.Deferred.prototype.addErrback = function(eb, opt_scope) {
  return this.addCallbacks(null, eb, opt_scope);
};
goog.async.Deferred.prototype.addBoth = function(f, opt_scope) {
  return this.addCallbacks(f, f, opt_scope);
};
goog.async.Deferred.prototype.addCallbacks = function(cb, eb, opt_scope) {
  goog.asserts.assert(!this.blocking_, "Blocking Deferreds can not be re-used");
  this.sequence_.push([cb, eb, opt_scope]);
  if (this.hasFired()) {
    this.fire_();
  }
  return this;
};
goog.async.Deferred.prototype.chainDeferred = function(otherDeferred) {
  this.addCallbacks(otherDeferred.callback, otherDeferred.errback, otherDeferred);
  return this;
};
goog.async.Deferred.prototype.awaitDeferred = function(otherDeferred) {
  return this.addCallback(goog.bind(otherDeferred.branch, otherDeferred));
};
goog.async.Deferred.prototype.branch = function(opt_propagateCancel) {
  var d = new goog.async.Deferred;
  this.chainDeferred(d);
  if (opt_propagateCancel) {
    d.parent_ = this;
    this.branches_++;
  }
  return d;
};
goog.async.Deferred.prototype.hasFired = function() {
  return this.fired_;
};
goog.async.Deferred.prototype.isError = function(res) {
  return res instanceof Error;
};
goog.async.Deferred.prototype.hasErrback_ = function() {
  return goog.array.some(this.sequence_, function(sequenceRow) {
    return goog.isFunction(sequenceRow[1]);
  });
};
goog.async.Deferred.prototype.fire_ = function() {
  if (this.unhandledExceptionTimeoutId_ && (this.hasFired() && this.hasErrback_())) {
    goog.global.clearTimeout(this.unhandledExceptionTimeoutId_);
    delete this.unhandledExceptionTimeoutId_;
  }
  if (this.parent_) {
    this.parent_.branches_--;
    delete this.parent_;
  }
  var res = this.result_;
  var unhandledException = false;
  var isNewlyBlocked = false;
  while (this.sequence_.length && !this.blocked_) {
    var sequenceEntry = this.sequence_.shift();
    var callback = sequenceEntry[0];
    var errback = sequenceEntry[1];
    var scope = sequenceEntry[2];
    var f = this.hadError_ ? errback : callback;
    if (f) {
      try {
        var ret = f.call(scope || this.defaultScope_, res);
        if (goog.isDef(ret)) {
          this.hadError_ = this.hadError_ && (ret == res || this.isError(ret));
          this.result_ = res = ret;
        }
        if (res instanceof goog.async.Deferred) {
          isNewlyBlocked = true;
          this.blocked_ = true;
        }
      } catch (ex) {
        res = ex;
        this.hadError_ = true;
        if (!this.hasErrback_()) {
          unhandledException = true;
        }
      }
    }
  }
  this.result_ = res;
  if (isNewlyBlocked) {
    res.addCallbacks(goog.bind(this.continue_, this, true), goog.bind(this.continue_, this, false));
    res.blocking_ = true;
  }
  if (unhandledException) {
    this.unhandledExceptionTimeoutId_ = goog.global.setTimeout(function() {
      throw res;
    }, 0);
  }
};
goog.async.Deferred.succeed = function(opt_result) {
  var d = new goog.async.Deferred;
  d.callback(opt_result);
  return d;
};
goog.async.Deferred.fail = function(res) {
  var d = new goog.async.Deferred;
  d.errback(res);
  return d;
};
goog.async.Deferred.cancelled = function() {
  var d = new goog.async.Deferred;
  d.cancel();
  return d;
};
goog.async.Deferred.when = function(value, callback, opt_scope) {
  if (value instanceof goog.async.Deferred) {
    return value.branch(true).addCallback(callback, opt_scope);
  } else {
    return goog.async.Deferred.succeed(value).addCallback(callback, opt_scope);
  }
};
goog.async.Deferred.AlreadyCalledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.AlreadyCalledError, goog.debug.Error);
goog.async.Deferred.AlreadyCalledError.prototype.message = "Deferred has already fired";
goog.async.Deferred.AlreadyCalledError.prototype.name = "AlreadyCalledError";
goog.async.Deferred.CancelledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.CancelledError, goog.debug.Error);
goog.async.Deferred.CancelledError.prototype.message = "Deferred was cancelled";
goog.async.Deferred.CancelledError.prototype.name = "CancelledError";
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (opt_key) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  goog.structs.forEach(this.keyMap_, function(value, key, map) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    goog.structs.forEach(this.keyMap_, function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("goog.Delay");
goog.provide("goog.async.Delay");
goog.require("goog.Disposable");
goog.require("goog.Timer");
goog.async.Delay = function(listener, opt_interval, opt_handler) {
  goog.Disposable.call(this);
  this.listener_ = listener;
  this.interval_ = opt_interval || 0;
  this.handler_ = opt_handler;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.Delay, goog.Disposable);
goog.Delay = goog.async.Delay;
goog.async.Delay.prototype.id_ = 0;
goog.async.Delay.prototype.disposeInternal = function() {
  goog.async.Delay.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.listener_;
  delete this.handler_;
};
goog.async.Delay.prototype.start = function(opt_interval) {
  this.stop();
  this.id_ = goog.Timer.callOnce(this.callback_, goog.isDef(opt_interval) ? opt_interval : this.interval_);
};
goog.async.Delay.prototype.stop = function() {
  if (this.isActive()) {
    goog.Timer.clear(this.id_);
  }
  this.id_ = 0;
};
goog.async.Delay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.Delay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.Delay.prototype.isActive = function() {
  return this.id_ != 0;
};
goog.async.Delay.prototype.doAction_ = function() {
  this.id_ = 0;
  if (this.listener_) {
    this.listener_.call(this.handler_);
  }
};
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || (goog.userAgent.IE && goog.userAgent.isDocumentMode(9) || goog.userAgent.GECKO && goog.userAgent.isVersion("1.9.1")), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || (goog.userAgent.OPERA || goog.userAgent.WEBKIT), INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.dom.classes");
goog.require("goog.array");
goog.dom.classes.set = function(element, className) {
  element.className = className;
};
goog.dom.classes.get = function(element) {
  var className = element.className;
  return goog.isString(className) && className.match(/\S+/g) || [];
};
goog.dom.classes.add = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var expectedCount = classes.length + args.length;
  goog.dom.classes.add_(classes, args);
  goog.dom.classes.set(element, classes.join(" "));
  return classes.length == expectedCount;
};
goog.dom.classes.remove = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var newClasses = goog.dom.classes.getDifference_(classes, args);
  goog.dom.classes.set(element, newClasses.join(" "));
  return newClasses.length == classes.length - args.length;
};
goog.dom.classes.add_ = function(classes, args) {
  for (var i = 0;i < args.length;i++) {
    if (!goog.array.contains(classes, args[i])) {
      classes.push(args[i]);
    }
  }
};
goog.dom.classes.getDifference_ = function(arr1, arr2) {
  return goog.array.filter(arr1, function(item) {
    return!goog.array.contains(arr2, item);
  });
};
goog.dom.classes.swap = function(element, fromClass, toClass) {
  var classes = goog.dom.classes.get(element);
  var removed = false;
  for (var i = 0;i < classes.length;i++) {
    if (classes[i] == fromClass) {
      goog.array.splice(classes, i--, 1);
      removed = true;
    }
  }
  if (removed) {
    classes.push(toClass);
    goog.dom.classes.set(element, classes.join(" "));
  }
  return removed;
};
goog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {
  var classes = goog.dom.classes.get(element);
  if (goog.isString(classesToRemove)) {
    goog.array.remove(classes, classesToRemove);
  } else {
    if (goog.isArray(classesToRemove)) {
      classes = goog.dom.classes.getDifference_(classes, classesToRemove);
    }
  }
  if (goog.isString(classesToAdd) && !goog.array.contains(classes, classesToAdd)) {
    classes.push(classesToAdd);
  } else {
    if (goog.isArray(classesToAdd)) {
      goog.dom.classes.add_(classes, classesToAdd);
    }
  }
  goog.dom.classes.set(element, classes.join(" "));
};
goog.dom.classes.has = function(element, className) {
  return goog.array.contains(goog.dom.classes.get(element), className);
};
goog.dom.classes.enable = function(element, className, enabled) {
  if (enabled) {
    goog.dom.classes.add(element, className);
  } else {
    goog.dom.classes.remove(element, className);
  }
};
goog.dom.classes.toggle = function(element, className) {
  var add = !goog.dom.classes.has(element, className);
  goog.dom.classes.enable(element, className, add);
  return add;
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length1;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.standardDeviation = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return Math.sqrt(variance);
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.DomHelper");
goog.provide("goog.dom.NodeType");
goog.require("goog.array");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.TagName");
goog.require("goog.dom.classes");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.ASSUME_QUIRKS_MODE = false;
goog.dom.ASSUME_STANDARDS_MODE = false;
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.isString(element) ? document.getElementById(element) : element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  } else {
    if (parent.getElementsByClassName) {
      return parent.getElementsByClassName(className);
    }
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByClass(className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var vh = goog.dom.getViewportSize_(win).height;
    var body = doc.body;
    var docEl = doc.documentElement;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || (goog.global || window);
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  return!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && (attributes && (attributes.name || attributes.type))) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        goog.dom.classes.add.apply(null, [element].concat(attributes));
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.getCompatMode = function() {
  return goog.dom.isCss1CompatMode() ? "CSS1Compat" : "BackCompat";
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    return element.parentElement;
  }
  var parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentMode(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow_(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(element, text) {
  if ("textContent" in element) {
    element.textContent = text;
  } else {
    if (element.firstChild && element.firstChild.nodeType == goog.dom.NodeType.TEXT) {
      while (element.lastChild != element.firstChild) {
        element.removeChild(element.lastChild);
      }
      element.firstChild.data = text;
    } else {
      goog.dom.removeChildren(element);
      var doc = goog.dom.getOwnerDocument(element);
      element.appendChild(doc.createTextNode(String(text)));
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  if (attrNode && attrNode.specified) {
    var index = element.tabIndex;
    return goog.isNumber(index) && (index >= 0 && index < 32768);
  }
  return false;
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.dom.classes.has(node, opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || (goog.global.document || document);
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  if (goog.isString(element)) {
    return this.document_.getElementById(element);
  } else {
    return element;
  }
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.getCompatMode = function() {
  return this.isCss1CompatMode() ? "CSS1Compat" : "BackCompat";
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.net.xpc.Transport");
goog.require("goog.Disposable");
goog.require("goog.dom");
goog.require("goog.net.xpc");
goog.net.xpc.Transport = function(opt_domHelper) {
  goog.Disposable.call(this);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
};
goog.inherits(goog.net.xpc.Transport, goog.Disposable);
goog.net.xpc.Transport.prototype.transportType = 0;
goog.net.xpc.Transport.prototype.getType = function() {
  return this.transportType;
};
goog.net.xpc.Transport.prototype.getWindow = function() {
  return this.domHelper_.getWindow();
};
goog.net.xpc.Transport.prototype.getName = function() {
  return goog.net.xpc.TransportNames[this.transportType] || "";
};
goog.net.xpc.Transport.prototype.transportServiceHandler = goog.abstractMethod;
goog.net.xpc.Transport.prototype.connect = goog.abstractMethod;
goog.net.xpc.Transport.prototype.send = goog.abstractMethod;
goog.provide("goog.messaging.MessageChannel");
goog.messaging.MessageChannel = function() {
};
goog.messaging.MessageChannel.prototype.connect = function(opt_connectCb) {
};
goog.messaging.MessageChannel.prototype.isConnected = function() {
};
goog.messaging.MessageChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
};
goog.messaging.MessageChannel.prototype.registerDefaultService = function(callback) {
};
goog.messaging.MessageChannel.prototype.send = function(serviceName, payload) {
};
goog.provide("goog.messaging.AbstractChannel");
goog.require("goog.Disposable");
goog.require("goog.debug");
goog.require("goog.debug.Logger");
goog.require("goog.json");
goog.require("goog.messaging.MessageChannel");
goog.messaging.AbstractChannel = function() {
  goog.base(this);
  this.services_ = {};
};
goog.inherits(goog.messaging.AbstractChannel, goog.Disposable);
goog.messaging.AbstractChannel.prototype.defaultService_;
goog.messaging.AbstractChannel.prototype.logger = goog.debug.Logger.getLogger("goog.messaging.AbstractChannel");
goog.messaging.AbstractChannel.prototype.connect = function(opt_connectCb) {
  if (opt_connectCb) {
    opt_connectCb();
  }
};
goog.messaging.AbstractChannel.prototype.isConnected = function() {
  return true;
};
goog.messaging.AbstractChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
  this.services_[serviceName] = {callback:callback, objectPayload:!!opt_objectPayload};
};
goog.messaging.AbstractChannel.prototype.registerDefaultService = function(callback) {
  this.defaultService_ = callback;
};
goog.messaging.AbstractChannel.prototype.send = goog.abstractMethod;
goog.messaging.AbstractChannel.prototype.deliver = function(serviceName, payload) {
  var service = this.getService(serviceName, payload);
  if (!service) {
    return;
  }
  var decodedPayload = this.decodePayload(serviceName, payload, service.objectPayload);
  if (goog.isDefAndNotNull(decodedPayload)) {
    service.callback(decodedPayload);
  }
};
goog.messaging.AbstractChannel.prototype.getService = function(serviceName, payload) {
  var service = this.services_[serviceName];
  if (service) {
    return service;
  } else {
    if (this.defaultService_) {
      var callback = goog.partial(this.defaultService_, serviceName);
      var objectPayload = goog.isObject(payload);
      return{callback:callback, objectPayload:objectPayload};
    }
  }
  this.logger.warning('Unknown service name "' + serviceName + '"');
  return null;
};
goog.messaging.AbstractChannel.prototype.decodePayload = function(serviceName, payload, objectPayload) {
  if (objectPayload && goog.isString(payload)) {
    try {
      return goog.json.parse(payload);
    } catch (err) {
      this.logger.warning("Expected JSON payload for " + serviceName + ', was "' + payload + '"');
      return null;
    }
  } else {
    if (!objectPayload && !goog.isString(payload)) {
      return goog.json.serialize(payload);
    }
  }
  return payload;
};
goog.messaging.AbstractChannel.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  delete this.logger;
  delete this.services_;
  delete this.defaultService_;
};
goog.provide("clojure.browser.event");
goog.require("cljs.core");
goog.require("goog.events.EventType");
goog.require("goog.events.EventType");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventTarget");
goog.require("goog.events");
goog.require("goog.events");
clojure.browser.event.EventType = function() {
  var obj7718 = {};
  return obj7718;
}();
clojure.browser.event.event_types = function event_types(this$) {
  if (function() {
    var and__3438__auto__ = this$;
    if (and__3438__auto__) {
      return this$.clojure$browser$event$EventType$event_types$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return this$.clojure$browser$event$EventType$event_types$arity$1(this$);
  } else {
    var x__4077__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3450__auto__ = clojure.browser.event.event_types[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = clojure.browser.event.event_types["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "EventType.event-types", this$);
        }
      }
    }().call(null, this$);
  }
};
Element.prototype.clojure$browser$event$EventType$ = true;
Element.prototype.clojure$browser$event$EventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__7719) {
    var vec__7720 = p__7719;
    var k = cljs.core.nth.call(null, vec__7720, 0, null);
    var v = cljs.core.nth.call(null, vec__7720, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
  }, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
};
goog.events.EventTarget.prototype.clojure$browser$event$EventType$ = true;
goog.events.EventTarget.prototype.clojure$browser$event$EventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__7721) {
    var vec__7722 = p__7721;
    var k = cljs.core.nth.call(null, vec__7722, 0, null);
    var v = cljs.core.nth.call(null, vec__7722, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
  }, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
};
clojure.browser.event.listen = function() {
  var listen = null;
  var listen__3 = function(src, type, fn) {
    return listen.call(null, src, type, fn, false);
  };
  var listen__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.listen(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  listen = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return listen__3.call(this, src, type, fn);
      case 4:
        return listen__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen.cljs$core$IFn$_invoke$arity$3 = listen__3;
  listen.cljs$core$IFn$_invoke$arity$4 = listen__4;
  return listen;
}();
clojure.browser.event.listen_once = function() {
  var listen_once = null;
  var listen_once__3 = function(src, type, fn) {
    return listen_once.call(null, src, type, fn, false);
  };
  var listen_once__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.listenOnce(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  listen_once = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return listen_once__3.call(this, src, type, fn);
      case 4:
        return listen_once__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen_once.cljs$core$IFn$_invoke$arity$3 = listen_once__3;
  listen_once.cljs$core$IFn$_invoke$arity$4 = listen_once__4;
  return listen_once;
}();
clojure.browser.event.unlisten = function() {
  var unlisten = null;
  var unlisten__3 = function(src, type, fn) {
    return unlisten.call(null, src, type, fn, false);
  };
  var unlisten__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.unlisten(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  unlisten = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return unlisten__3.call(this, src, type, fn);
      case 4:
        return unlisten__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unlisten.cljs$core$IFn$_invoke$arity$3 = unlisten__3;
  unlisten.cljs$core$IFn$_invoke$arity$4 = unlisten__4;
  return unlisten;
}();
clojure.browser.event.unlisten_by_key = function unlisten_by_key(key) {
  return goog.events.unlistenByKey(key);
};
clojure.browser.event.dispatch_event = function dispatch_event(src, event) {
  return goog.events.dispatchEvent(src, event);
};
clojure.browser.event.expose = function expose(e) {
  return goog.events.expose(e);
};
clojure.browser.event.fire_listeners = function fire_listeners(obj, type, capture, event) {
  return null;
};
clojure.browser.event.total_listener_count = function total_listener_count() {
  return goog.events.getTotalListenerCount();
};
clojure.browser.event.get_listener = function get_listener(src, type, listener, opt_capt, opt_handler) {
  return null;
};
clojure.browser.event.all_listeners = function all_listeners(obj, type, capture) {
  return null;
};
clojure.browser.event.unique_event_id = function unique_event_id(event_type) {
  return null;
};
clojure.browser.event.has_listener = function has_listener(obj, opt_type, opt_capture) {
  return null;
};
clojure.browser.event.remove_all = function remove_all(opt_obj, opt_type, opt_capt) {
  return null;
};
goog.provide("goog.net.xpc.CrossPageChannelRole");
goog.net.xpc.CrossPageChannelRole = {OUTER:0, INNER:1};
goog.provide("goog.net.xpc.IframePollingTransport");
goog.provide("goog.net.xpc.IframePollingTransport.Receiver");
goog.provide("goog.net.xpc.IframePollingTransport.Sender");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.userAgent");
goog.net.xpc.IframePollingTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.sendUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_POLL_URI];
  this.rcvUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  this.sendQueue_ = [];
};
goog.inherits(goog.net.xpc.IframePollingTransport, goog.net.xpc.Transport);
goog.net.xpc.IframePollingTransport.prototype.pollsBeforeReconnect_ = 5;
goog.net.xpc.IframePollingTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
goog.net.xpc.IframePollingTransport.prototype.sequence_ = 0;
goog.net.xpc.IframePollingTransport.prototype.waitForAck_ = false;
goog.net.xpc.IframePollingTransport.prototype.initialized_ = false;
goog.net.xpc.IframePollingTransport.prototype.reconnectFrame_ = null;
goog.net.xpc.IframePollingTransport.IFRAME_PREFIX = "googlexpc";
goog.net.xpc.IframePollingTransport.prototype.getMsgFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_msg";
};
goog.net.xpc.IframePollingTransport.prototype.getAckFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_ack";
};
goog.net.xpc.IframePollingTransport.prototype.isChannelAvailable = function() {
  return!this.isDisposed() && this.channel_.isPeerAvailable();
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrames_ = function() {
  try {
    if (this.isChannelAvailable()) {
      return this.channel_.getPeerWindowObject().frames || {};
    }
  } catch (e) {
    goog.net.xpc.logger.fine("error retrieving peer frames");
  }
  return{};
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrame_ = function(frameName) {
  return this.getPeerFrames_()[frameName];
};
goog.net.xpc.IframePollingTransport.prototype.connect = function() {
  if (!this.isChannelAvailable()) {
    return;
  }
  goog.net.xpc.logger.fine("transport connect called");
  if (!this.initialized_) {
    goog.net.xpc.logger.fine("initializing...");
    this.constructSenderFrames_();
    this.initialized_ = true;
  }
  this.checkForeignFramesReady_();
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrames_ = function() {
  var name = this.getMsgFrameName_();
  this.msgIframeElm_ = this.constructSenderFrame_(name);
  this.msgWinObj_ = this.getWindow().frames[name];
  name = this.getAckFrameName_();
  this.ackIframeElm_ = this.constructSenderFrame_(name);
  this.ackWinObj_ = this.getWindow().frames[name];
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrame_ = function(id) {
  goog.net.xpc.logger.finest("constructing sender frame: " + id);
  var ifr = goog.dom.createElement("iframe");
  var s = ifr.style;
  s.position = "absolute";
  s.top = "-10px";
  s.left = "10px";
  s.width = "1px";
  s.height = "1px";
  ifr.id = ifr.name = id;
  ifr.src = this.sendUri_ + "#INITIAL";
  this.getWindow().document.body.appendChild(ifr);
  return ifr;
};
goog.net.xpc.IframePollingTransport.prototype.maybeInnerPeerReconnect_ = function() {
  if (this.reconnectFrame_ || this.pollsBeforeReconnect_-- > 0) {
    return;
  }
  goog.net.xpc.logger.finest("Inner peer reconnect triggered.");
  this.channel_.name = goog.net.xpc.getRandomString(10);
  goog.net.xpc.logger.finest("switching channels: " + this.channel_.name);
  this.deconstructSenderFrames_();
  this.initialized_ = false;
  this.reconnectFrame_ = this.constructSenderFrame_(goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_reconnect_" + this.channel_.name);
};
goog.net.xpc.IframePollingTransport.prototype.outerPeerReconnect_ = function() {
  goog.net.xpc.logger.finest("outerPeerReconnect called");
  var frames = this.getPeerFrames_();
  var length = frames.length;
  for (var i = 0;i < length;i++) {
    var frameName;
    try {
      if (frames[i] && frames[i].name) {
        frameName = frames[i].name;
      }
    } catch (e) {
    }
    if (!frameName) {
      continue;
    }
    var message = frameName.split("_");
    if (message.length == 3 && (message[0] == goog.net.xpc.IframePollingTransport.IFRAME_PREFIX && message[1] == "reconnect")) {
      this.channel_.name = message[2];
      this.deconstructSenderFrames_();
      this.initialized_ = false;
      break;
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.deconstructSenderFrames_ = function() {
  goog.net.xpc.logger.finest("deconstructSenderFrames called");
  if (this.msgIframeElm_) {
    this.msgIframeElm_.parentNode.removeChild(this.msgIframeElm_);
    this.msgIframeElm_ = null;
    this.msgWinObj_ = null;
  }
  if (this.ackIframeElm_) {
    this.ackIframeElm_.parentNode.removeChild(this.ackIframeElm_);
    this.ackIframeElm_ = null;
    this.ackWinObj_ = null;
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkForeignFramesReady_ = function() {
  if (!(this.isRcvFrameReady_(this.getMsgFrameName_()) && this.isRcvFrameReady_(this.getAckFrameName_()))) {
    goog.net.xpc.logger.finest("foreign frames not (yet) present");
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.maybeInnerPeerReconnect_();
    } else {
      if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
        this.outerPeerReconnect_();
      }
    }
    this.getWindow().setTimeout(goog.bind(this.connect, this), 100);
  } else {
    goog.net.xpc.logger.fine("foreign frames present");
    this.msgReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getMsgFrameName_()), goog.bind(this.processIncomingMsg, this));
    this.ackReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getAckFrameName_()), goog.bind(this.processIncomingAck, this));
    this.checkLocalFramesPresent_();
  }
};
goog.net.xpc.IframePollingTransport.prototype.isRcvFrameReady_ = function(frameName) {
  goog.net.xpc.logger.finest("checking for receive frame: " + frameName);
  try {
    var winObj = this.getPeerFrame_(frameName);
    if (!winObj || winObj.location.href.indexOf(this.rcvUri_) != 0) {
      return false;
    }
  } catch (e) {
    return false;
  }
  return true;
};
goog.net.xpc.IframePollingTransport.prototype.checkLocalFramesPresent_ = function() {
  var frames = this.getPeerFrames_();
  if (!(frames[this.getAckFrameName_()] && frames[this.getMsgFrameName_()])) {
    if (!this.checkLocalFramesPresentCb_) {
      this.checkLocalFramesPresentCb_ = goog.bind(this.checkLocalFramesPresent_, this);
    }
    this.getWindow().setTimeout(this.checkLocalFramesPresentCb_, 100);
    goog.net.xpc.logger.fine("local frames not (yet) present");
  } else {
    this.msgSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.msgWinObj_);
    this.ackSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.ackWinObj_);
    goog.net.xpc.logger.fine("local frames ready");
    this.getWindow().setTimeout(goog.bind(function() {
      this.msgSender_.send(goog.net.xpc.SETUP);
      this.sentConnectionSetup_ = true;
      this.waitForAck_ = true;
      goog.net.xpc.logger.fine("SETUP sent");
    }, this), 100);
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkIfConnected_ = function() {
  if (this.sentConnectionSetupAck_ && this.rcvdConnectionSetupAck_) {
    this.channel_.notifyConnected();
    if (this.deliveryQueue_) {
      goog.net.xpc.logger.fine("delivering queued messages " + "(" + this.deliveryQueue_.length + ")");
      for (var i = 0, m;i < this.deliveryQueue_.length;i++) {
        m = this.deliveryQueue_[i];
        this.channel_.xpcDeliver(m.service, m.payload);
      }
      delete this.deliveryQueue_;
    }
  } else {
    goog.net.xpc.logger.finest("checking if connected: " + "ack sent:" + this.sentConnectionSetupAck_ + ", ack rcvd: " + this.rcvdConnectionSetupAck_);
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingMsg = function(raw) {
  goog.net.xpc.logger.finest("msg received: " + raw);
  if (raw == goog.net.xpc.SETUP) {
    if (!this.ackSender_) {
      return;
    }
    this.ackSender_.send(goog.net.xpc.SETUP_ACK_);
    goog.net.xpc.logger.finest("SETUP_ACK sent");
    this.sentConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected() || this.sentConnectionSetupAck_) {
      var pos = raw.indexOf("|");
      var head = raw.substring(0, pos);
      var frame = raw.substring(pos + 1);
      pos = head.indexOf(",");
      if (pos == -1) {
        var seq = head;
        this.ackSender_.send("ACK:" + seq);
        this.deliverPayload_(frame);
      } else {
        var seq = head.substring(0, pos);
        this.ackSender_.send("ACK:" + seq);
        var partInfo = head.substring(pos + 1).split("/");
        var part0 = parseInt(partInfo[0], 10);
        var part1 = parseInt(partInfo[1], 10);
        if (part0 == 1) {
          this.parts_ = [];
        }
        this.parts_.push(frame);
        if (part0 == part1) {
          this.deliverPayload_(this.parts_.join(""));
          delete this.parts_;
        }
      }
    } else {
      goog.net.xpc.logger.warning("received msg, but channel is not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingAck = function(msgStr) {
  goog.net.xpc.logger.finest("ack received: " + msgStr);
  if (msgStr == goog.net.xpc.SETUP_ACK_) {
    this.waitForAck_ = false;
    this.rcvdConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected()) {
      if (!this.waitForAck_) {
        goog.net.xpc.logger.warning("got unexpected ack");
        return;
      }
      var seq = parseInt(msgStr.split(":")[1], 10);
      if (seq == this.sequence_) {
        this.waitForAck_ = false;
        this.sendNextFrame_();
      } else {
        goog.net.xpc.logger.warning("got ack with wrong sequence");
      }
    } else {
      goog.net.xpc.logger.warning("received ack, but channel not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.sendNextFrame_ = function() {
  if (this.waitForAck_ || !this.sendQueue_.length) {
    return;
  }
  var s = this.sendQueue_.shift();
  ++this.sequence_;
  this.msgSender_.send(this.sequence_ + s);
  goog.net.xpc.logger.finest("msg sent: " + this.sequence_ + s);
  this.waitForAck_ = true;
};
goog.net.xpc.IframePollingTransport.prototype.deliverPayload_ = function(s) {
  var pos = s.indexOf(":");
  var service = s.substr(0, pos);
  var payload = s.substring(pos + 1);
  if (!this.channel_.isConnected()) {
    (this.deliveryQueue_ || (this.deliveryQueue_ = [])).push({service:service, payload:payload});
    goog.net.xpc.logger.finest("queued delivery");
  } else {
    this.channel_.xpcDeliver(service, payload);
  }
};
goog.net.xpc.IframePollingTransport.prototype.MAX_FRAME_LENGTH_ = 3800;
goog.net.xpc.IframePollingTransport.prototype.send = function(service, payload) {
  var frame = service + ":" + payload;
  if (!goog.userAgent.IE || payload.length <= this.MAX_FRAME_LENGTH_) {
    this.sendQueue_.push("|" + frame);
  } else {
    var l = payload.length;
    var num = Math.ceil(l / this.MAX_FRAME_LENGTH_);
    var pos = 0;
    var i = 1;
    while (pos < l) {
      this.sendQueue_.push("," + i + "/" + num + "|" + frame.substr(pos, this.MAX_FRAME_LENGTH_));
      i++;
      pos += this.MAX_FRAME_LENGTH_;
    }
  }
  this.sendNextFrame_();
};
goog.net.xpc.IframePollingTransport.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  goog.array.remove(receivers, this.msgReceiver_);
  goog.array.remove(receivers, this.ackReceiver_);
  this.msgReceiver_ = this.ackReceiver_ = null;
  goog.dom.removeNode(this.msgIframeElm_);
  goog.dom.removeNode(this.ackIframeElm_);
  this.msgIframeElm_ = this.ackIframeElm_ = null;
  this.msgWinObj_ = this.ackWinObj_ = null;
};
goog.net.xpc.IframePollingTransport.receivers_ = [];
goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ = 10;
goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_ = 100;
goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ = 1E3;
goog.net.xpc.IframePollingTransport.receive_ = function() {
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  var receiver;
  var rcvd = false;
  try {
    for (var i = 0;receiver = receivers[i];i++) {
      rcvd = rcvd || receiver.receive();
    }
  } catch (e) {
    goog.net.xpc.logger.info("receive_() failed: " + e);
    receiver.transport_.channel_.notifyTransportError();
    if (!receivers.length) {
      return;
    }
  }
  var now = goog.now();
  if (rcvd) {
    goog.net.xpc.IframePollingTransport.lastActivity_ = now;
  }
  var t = now - goog.net.xpc.IframePollingTransport.lastActivity_ < goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ ? goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ : goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_;
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, t);
};
goog.net.xpc.IframePollingTransport.receiveCb_ = goog.bind(goog.net.xpc.IframePollingTransport.receive_, goog.net.xpc.IframePollingTransport);
goog.net.xpc.IframePollingTransport.startRcvTimer_ = function() {
  goog.net.xpc.logger.fine("starting receive-timer");
  goog.net.xpc.IframePollingTransport.lastActivity_ = goog.now();
  if (goog.net.xpc.IframePollingTransport.rcvTimer_) {
    window.clearTimeout(goog.net.xpc.IframePollingTransport.rcvTimer_);
  }
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_);
};
goog.net.xpc.IframePollingTransport.Sender = function(url, windowObj) {
  this.sendUri_ = url;
  this.sendFrame_ = windowObj;
  this.cycle_ = 0;
};
goog.net.xpc.IframePollingTransport.Sender.prototype.send = function(payload) {
  this.cycle_ = ++this.cycle_ % 2;
  var url = this.sendUri_ + "#" + this.cycle_ + encodeURIComponent(payload);
  try {
    if (goog.userAgent.WEBKIT) {
      this.sendFrame_.location.href = url;
    } else {
      this.sendFrame_.location.replace(url);
    }
  } catch (e) {
    goog.net.xpc.logger.severe("sending failed", e);
  }
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver = function(transport, windowObj, callback) {
  this.transport_ = transport;
  this.rcvFrame_ = windowObj;
  this.cb_ = callback;
  this.currentLoc_ = this.rcvFrame_.location.href.split("#")[0] + "#INITIAL";
  goog.net.xpc.IframePollingTransport.receivers_.push(this);
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver.prototype.receive = function() {
  var loc = this.rcvFrame_.location.href;
  if (loc != this.currentLoc_) {
    this.currentLoc_ = loc;
    var payload = loc.split("#")[1];
    if (payload) {
      payload = payload.substr(1);
      this.cb_(decodeURIComponent(payload));
    }
    return true;
  } else {
    return false;
  }
};
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.array");
goog.require("goog.events");
goog.require("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_handler) {
  goog.Disposable.call(this);
  this.handler_ = opt_handler;
  this.keys_ = [];
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (!goog.isArray(type)) {
    goog.events.EventHandler.typeArray_[0] = (type);
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var key = (goog.events.listen(src, type[i], opt_fn || this, opt_capture || false, opt_handler || (this.handler_ || this)));
    this.keys_.push(key);
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce(src, type[i], opt_fn, opt_capture, opt_handler);
    }
  } else {
    var key = (goog.events.listenOnce(src, type, opt_fn || this, opt_capture, opt_handler || (this.handler_ || this)));
    this.keys_.push(key);
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler || (this.handler_ || this), this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  return this.keys_.length;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_handler);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this, opt_capture, opt_handler || (this.handler_ || this));
    if (listener) {
      var key = listener.key;
      goog.events.unlistenByKey(key);
      goog.array.remove(this.keys_, key);
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler || (this.handler_ || this), this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.array.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_.length = 0;
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.net.xpc.FrameElementMethodTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.queue_ = [];
  this.deliverQueuedCb_ = goog.bind(this.deliverQueued_, this);
};
goog.inherits(goog.net.xpc.FrameElementMethodTransport, goog.net.xpc.Transport);
goog.net.xpc.FrameElementMethodTransport.prototype.transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
goog.net.xpc.FrameElementMethodTransport.prototype.recursive_ = false;
goog.net.xpc.FrameElementMethodTransport.prototype.timer_ = 0;
goog.net.xpc.FrameElementMethodTransport.outgoing_ = null;
goog.net.xpc.FrameElementMethodTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.iframeElm_ = this.channel_.getIframeElement();
    this.iframeElm_["XPC_toOuter"] = goog.bind(this.incoming_, this);
  } else {
    this.attemptSetup_();
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.attemptSetup_ = function() {
  var retry = true;
  try {
    if (!this.iframeElm_) {
      this.iframeElm_ = this.getWindow().frameElement;
    }
    if (this.iframeElm_ && this.iframeElm_["XPC_toOuter"]) {
      this.outgoing_ = this.iframeElm_["XPC_toOuter"];
      this.iframeElm_["XPC_toOuter"]["XPC_toInner"] = goog.bind(this.incoming_, this);
      retry = false;
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.net.xpc.logger.severe("exception caught while attempting setup: " + e);
  }
  if (retry) {
    if (!this.attemptSetupCb_) {
      this.attemptSetupCb_ = goog.bind(this.attemptSetup_, this);
    }
    this.getWindow().setTimeout(this.attemptSetupCb_, 100);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.transportServiceHandler = function(payload) {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER && (!this.channel_.isConnected() && payload == goog.net.xpc.SETUP_ACK_)) {
    this.outgoing_ = this.iframeElm_["XPC_toOuter"]["XPC_toInner"];
    this.channel_.notifyConnected();
  } else {
    throw Error("Got unexpected transport message.");
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.incoming_ = function(serviceName, payload) {
  if (!this.recursive_ && this.queue_.length == 0) {
    this.channel_.xpcDeliver(serviceName, payload);
  } else {
    this.queue_.push({serviceName:serviceName, payload:payload});
    if (this.queue_.length == 1) {
      this.timer_ = this.getWindow().setTimeout(this.deliverQueuedCb_, 1);
    }
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.deliverQueued_ = function() {
  while (this.queue_.length) {
    var msg = this.queue_.shift();
    this.channel_.xpcDeliver(msg.serviceName, msg.payload);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.send = function(service, payload) {
  this.recursive_ = true;
  this.outgoing_(service, payload);
  this.recursive_ = false;
};
goog.net.xpc.FrameElementMethodTransport.prototype.disposeInternal = function() {
  goog.net.xpc.FrameElementMethodTransport.superClass_.disposeInternal.call(this);
  this.outgoing_ = null;
  this.iframeElm_ = null;
};
goog.provide("goog.net.xpc.IframeRelayTransport");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.Transport");
goog.require("goog.userAgent");
goog.net.xpc.IframeRelayTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.peerRelayUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_RELAY_URI];
  this.peerIframeId_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.IFRAME_ID];
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.startCleanupTimer_();
  }
};
goog.inherits(goog.net.xpc.IframeRelayTransport, goog.net.xpc.Transport);
if (goog.userAgent.WEBKIT) {
  goog.net.xpc.IframeRelayTransport.iframeRefs_ = [];
  goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_ = 1E3;
  goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_ = 3E3;
  goog.net.xpc.IframeRelayTransport.cleanupTimer_ = 0;
  goog.net.xpc.IframeRelayTransport.startCleanupTimer_ = function() {
    if (!goog.net.xpc.IframeRelayTransport.cleanupTimer_) {
      goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(function() {
        goog.net.xpc.IframeRelayTransport.cleanup_();
      }, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
    }
  };
  goog.net.xpc.IframeRelayTransport.cleanup_ = function(opt_maxAge) {
    var now = goog.now();
    var maxAge = opt_maxAge || goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_;
    while (goog.net.xpc.IframeRelayTransport.iframeRefs_.length && now - goog.net.xpc.IframeRelayTransport.iframeRefs_[0].timestamp >= maxAge) {
      var ifr = goog.net.xpc.IframeRelayTransport.iframeRefs_.shift().iframeElement;
      goog.dom.removeNode(ifr);
      goog.net.xpc.logger.finest("iframe removed");
    }
    goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(goog.net.xpc.IframeRelayTransport.cleanupCb_, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
  };
  goog.net.xpc.IframeRelayTransport.cleanupCb_ = function() {
    goog.net.xpc.IframeRelayTransport.cleanup_();
  };
}
goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_ = 1800;
goog.net.xpc.IframeRelayTransport.FragmentInfo;
goog.net.xpc.IframeRelayTransport.fragmentMap_ = {};
goog.net.xpc.IframeRelayTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
goog.net.xpc.IframeRelayTransport.prototype.connect = function() {
  if (!this.getWindow()["xpcRelay"]) {
    this.getWindow()["xpcRelay"] = goog.net.xpc.IframeRelayTransport.receiveMessage_;
  }
  this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
};
goog.net.xpc.IframeRelayTransport.receiveMessage_ = function(channelName, frame) {
  var pos = frame.indexOf(":");
  var header = frame.substr(0, pos);
  var payload = frame.substr(pos + 1);
  if (!goog.userAgent.IE || (pos = header.indexOf("|")) == -1) {
    var service = header
  } else {
    var service = header.substr(0, pos);
    var fragmentIdStr = header.substr(pos + 1);
    pos = fragmentIdStr.indexOf("+");
    var messageIdStr = fragmentIdStr.substr(0, pos);
    var fragmentNum = parseInt(fragmentIdStr.substr(pos + 1), 10);
    var fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
    if (!fragmentInfo) {
      fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr] = {fragments:[], received:0, expected:0};
    }
    if (goog.string.contains(fragmentIdStr, "++")) {
      fragmentInfo.expected = fragmentNum + 1;
    }
    fragmentInfo.fragments[fragmentNum] = payload;
    fragmentInfo.received++;
    if (fragmentInfo.received != fragmentInfo.expected) {
      return;
    }
    payload = fragmentInfo.fragments.join("");
    delete goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
  }
  goog.net.xpc.channels[channelName].xpcDeliver(service, decodeURIComponent(payload));
};
goog.net.xpc.IframeRelayTransport.prototype.transportServiceHandler = function(payload) {
  if (payload == goog.net.xpc.SETUP) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    this.channel_.notifyConnected();
  } else {
    if (payload == goog.net.xpc.SETUP_ACK_) {
      this.channel_.notifyConnected();
    }
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send = function(service, payload) {
  var encodedPayload = encodeURIComponent(payload);
  var encodedLen = encodedPayload.length;
  var maxSize = goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_;
  if (goog.userAgent.IE && encodedLen > maxSize) {
    var messageIdStr = goog.string.getRandomString();
    for (var startIndex = 0, fragmentNum = 0;startIndex < encodedLen;fragmentNum++) {
      var payloadFragment = encodedPayload.substr(startIndex, maxSize);
      startIndex += maxSize;
      var fragmentIdStr = messageIdStr + (startIndex >= encodedLen ? "++" : "+") + fragmentNum;
      this.send_(service, payloadFragment, fragmentIdStr);
    }
  } else {
    this.send_(service, encodedPayload);
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send_ = function(service, encodedPayload, opt_fragmentIdStr) {
  if (goog.userAgent.IE) {
    var div = this.getWindow().document.createElement("div");
    div.innerHTML = '\x3ciframe onload\x3d"this.xpcOnload()"\x3e\x3c/iframe\x3e';
    var ifr = div.childNodes[0];
    div = null;
    ifr["xpcOnload"] = goog.net.xpc.IframeRelayTransport.iframeLoadHandler_;
  } else {
    var ifr = this.getWindow().document.createElement("iframe");
    if (goog.userAgent.WEBKIT) {
      goog.net.xpc.IframeRelayTransport.iframeRefs_.push({timestamp:goog.now(), iframeElement:ifr});
    } else {
      goog.events.listen(ifr, "load", goog.net.xpc.IframeRelayTransport.iframeLoadHandler_);
    }
  }
  var style = ifr.style;
  style.visibility = "hidden";
  style.width = ifr.style.height = "0px";
  style.position = "absolute";
  var url = this.peerRelayUri_;
  url += "#" + this.channel_.name;
  if (this.peerIframeId_) {
    url += "," + this.peerIframeId_;
  }
  url += "|" + service;
  if (opt_fragmentIdStr) {
    url += "|" + opt_fragmentIdStr;
  }
  url += ":" + encodedPayload;
  ifr.src = url;
  this.getWindow().document.body.appendChild(ifr);
  goog.net.xpc.logger.finest("msg sent: " + url);
};
goog.net.xpc.IframeRelayTransport.iframeLoadHandler_ = function() {
  goog.net.xpc.logger.finest("iframe-load");
  goog.dom.removeNode(this);
  this.xpcOnload = null;
};
goog.net.xpc.IframeRelayTransport.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.cleanup_(0);
  }
};
goog.provide("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.async.Deferred");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.net.xpc.NativeMessagingTransport = function(channel, peerHostname, opt_domHelper, opt_oneSidedHandshake, opt_protocolVersion) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.protocolVersion_ = opt_protocolVersion || 2;
  goog.asserts.assert(this.protocolVersion_ >= 1);
  goog.asserts.assert(this.protocolVersion_ <= 2);
  this.peerHostname_ = peerHostname || "*";
  this.eventHandler_ = new goog.events.EventHandler(this);
  this.maybeAttemptToConnectTimer_ = new goog.Timer(100, this.getWindow());
  this.oneSidedHandshake_ = !!opt_oneSidedHandshake;
  this.setupAckReceived_ = new goog.async.Deferred;
  this.setupAckSent_ = new goog.async.Deferred;
  this.connected_ = new goog.async.Deferred;
  this.endpointId_ = goog.net.xpc.getRandomString(10);
  this.peerEndpointId_ = null;
  if (this.oneSidedHandshake_) {
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.connected_.awaitDeferred(this.setupAckReceived_);
    } else {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  } else {
    this.connected_.awaitDeferred(this.setupAckReceived_);
    if (this.protocolVersion_ == 2) {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  }
  this.connected_.addCallback(this.notifyConnected_, this);
  this.connected_.callback(true);
  this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, goog.Timer.TICK, this.maybeAttemptToConnect_);
  goog.net.xpc.logger.info("NativeMessagingTransport created.  " + "protocolVersion\x3d" + this.protocolVersion_ + ", oneSidedHandshake\x3d" + this.oneSidedHandshake_ + ", role\x3d" + this.channel_.getRole());
};
goog.inherits(goog.net.xpc.NativeMessagingTransport, goog.net.xpc.Transport);
goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ = 200;
goog.net.xpc.NativeMessagingTransport.prototype.peerProtocolVersion_ = null;
goog.net.xpc.NativeMessagingTransport.prototype.initialized_ = false;
goog.net.xpc.NativeMessagingTransport.prototype.transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_ = ",";
goog.net.xpc.NativeMessagingTransport.activeCount_ = {};
goog.net.xpc.NativeMessagingTransport.sendTimerId_ = 0;
goog.net.xpc.NativeMessagingTransport.prototype.couldPeerVersionBe_ = function(version) {
  return this.peerProtocolVersion_ == null || this.peerProtocolVersion_ == version;
};
goog.net.xpc.NativeMessagingTransport.initialize_ = function(listenWindow) {
  var uid = goog.getUid(listenWindow);
  var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
  if (!goog.isNumber(value)) {
    value = 0;
  }
  if (value == 0) {
    goog.events.listen(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
  }
  goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value + 1;
};
goog.net.xpc.NativeMessagingTransport.messageReceived_ = function(msgEvt) {
  var data = msgEvt.getBrowserEvent().data;
  if (!goog.isString(data)) {
    return false;
  }
  var headDelim = data.indexOf("|");
  var serviceDelim = data.indexOf(":");
  if (headDelim == -1 || serviceDelim == -1) {
    return false;
  }
  var channelName = data.substring(0, headDelim);
  var service = data.substring(headDelim + 1, serviceDelim);
  var payload = data.substring(serviceDelim + 1);
  goog.net.xpc.logger.fine("messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
  var channel = goog.net.xpc.channels[channelName];
  if (channel) {
    channel.xpcDeliver(service, payload, msgEvt.getBrowserEvent().origin);
    return true;
  }
  var transportMessageType = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload)[0];
  for (var staleChannelName in goog.net.xpc.channels) {
    var staleChannel = goog.net.xpc.channels[staleChannelName];
    if (staleChannel.getRole() == goog.net.xpc.CrossPageChannelRole.INNER && (!staleChannel.isConnected() && (service == goog.net.xpc.TRANSPORT_SERVICE_ && (transportMessageType == goog.net.xpc.SETUP || transportMessageType == goog.net.xpc.SETUP_NTPV2)))) {
      goog.net.xpc.logger.fine("changing channel name to " + channelName);
      staleChannel.name = channelName;
      delete goog.net.xpc.channels[staleChannelName];
      goog.net.xpc.channels[channelName] = staleChannel;
      staleChannel.xpcDeliver(service, payload);
      return true;
    }
  }
  goog.net.xpc.logger.info('channel name mismatch; message ignored"');
  return false;
};
goog.net.xpc.NativeMessagingTransport.prototype.transportServiceHandler = function(payload) {
  var transportParts = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload);
  var transportMessageType = transportParts[0];
  var peerEndpointId = transportParts[1];
  switch(transportMessageType) {
    case goog.net.xpc.SETUP_ACK_:
      this.setPeerProtocolVersion_(1);
      if (!this.setupAckReceived_.hasFired()) {
        this.setupAckReceived_.callback(true);
      }
      break;
    case goog.net.xpc.SETUP_ACK_NTPV2:
      if (this.protocolVersion_ == 2) {
        this.setPeerProtocolVersion_(2);
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
      }
      break;
    case goog.net.xpc.SETUP:
      this.setPeerProtocolVersion_(1);
      this.sendSetupAckMessage_(1);
      break;
    case goog.net.xpc.SETUP_NTPV2:
      if (this.protocolVersion_ == 2) {
        var prevPeerProtocolVersion = this.peerProtocolVersion_;
        this.setPeerProtocolVersion_(2);
        this.sendSetupAckMessage_(2);
        if ((prevPeerProtocolVersion == 1 || this.peerEndpointId_ != null) && this.peerEndpointId_ != peerEndpointId) {
          goog.net.xpc.logger.info("Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
      }
      break;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupMessage_ = function() {
  goog.asserts.assert(!(this.protocolVersion_ == 1 && this.peerProtocolVersion_ == 2));
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2)) {
    var payload = goog.net.xpc.SETUP_NTPV2;
    payload += goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  }
  if (this.couldPeerVersionBe_(1)) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupAckMessage_ = function(protocolVersion) {
  goog.asserts.assert(this.protocolVersion_ != 1 || protocolVersion != 2, "Shouldn't try to send a v2 setup ack in v1 mode.");
  if (this.protocolVersion_ == 2 && (this.couldPeerVersionBe_(2) && protocolVersion == 2)) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_NTPV2);
  } else {
    if (this.couldPeerVersionBe_(1) && protocolVersion == 1) {
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    } else {
      return;
    }
  }
  if (!this.setupAckSent_.hasFired()) {
    this.setupAckSent_.callback(true);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.setPeerProtocolVersion_ = function(version) {
  if (version > this.peerProtocolVersion_) {
    this.peerProtocolVersion_ = version;
  }
  if (this.peerProtocolVersion_ == 1) {
    if (!this.setupAckSent_.hasFired() && !this.oneSidedHandshake_) {
      this.setupAckSent_.callback(true);
    }
    this.peerEndpointId_ = null;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.connect = function() {
  goog.net.xpc.NativeMessagingTransport.initialize_(this.getWindow());
  this.initialized_ = true;
  this.maybeAttemptToConnect_();
};
goog.net.xpc.NativeMessagingTransport.prototype.maybeAttemptToConnect_ = function() {
  var outerFrame = this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER;
  if (this.oneSidedHandshake_ && outerFrame || (this.channel_.isConnected() || this.isDisposed())) {
    this.maybeAttemptToConnectTimer_.stop();
    return;
  }
  this.maybeAttemptToConnectTimer_.start();
  this.sendSetupMessage_();
};
goog.net.xpc.NativeMessagingTransport.prototype.send = function(service, payload) {
  var win = this.channel_.getPeerWindowObject();
  if (!win) {
    goog.net.xpc.logger.fine("send(): window not ready");
    return;
  }
  this.send = function(service, payload) {
    var transport = this;
    var channelName = this.channel_.name;
    var sendFunctor = function() {
      transport.sendTimerId_ = 0;
      try {
        var obj = win.postMessage ? win : win.document;
        if (!obj.postMessage) {
          goog.net.xpc.logger.warning("Peer window had no postMessage " + "function.");
          return;
        }
        obj.postMessage(channelName + "|" + service + ":" + payload, transport.peerHostname_);
        goog.net.xpc.logger.fine("send(): service\x3d" + service + " payload\x3d" + payload + " to hostname\x3d" + transport.peerHostname_);
      } catch (error) {
        goog.net.xpc.logger.warning("Error performing postMessage, ignoring.", error);
      }
    };
    this.sendTimerId_ = goog.Timer.callOnce(sendFunctor, 0);
  };
  this.send(service, payload);
};
goog.net.xpc.NativeMessagingTransport.prototype.notifyConnected_ = function() {
  var delay = this.protocolVersion_ == 1 || this.peerProtocolVersion_ == 1 ? goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ : undefined;
  this.channel_.notifyConnected(delay);
};
goog.net.xpc.NativeMessagingTransport.prototype.disposeInternal = function() {
  if (this.initialized_) {
    var listenWindow = this.getWindow();
    var uid = goog.getUid(listenWindow);
    var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
    goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value - 1;
    if (value == 1) {
      goog.events.unlisten(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
    }
  }
  if (this.sendTimerId_) {
    goog.Timer.clear(this.sendTimerId_);
    this.sendTimerId_ = 0;
  }
  goog.dispose(this.eventHandler_);
  delete this.eventHandler_;
  goog.dispose(this.maybeAttemptToConnectTimer_);
  delete this.maybeAttemptToConnectTimer_;
  this.setupAckReceived_.cancel();
  delete this.setupAckReceived_;
  this.setupAckSent_.cancel();
  delete this.setupAckSent_;
  this.connected_.cancel();
  delete this.connected_;
  delete this.send;
  goog.base(this, "disposeInternal");
};
goog.net.xpc.NativeMessagingTransport.parseTransportPayload_ = function(payload) {
  var transportParts = (payload.split(goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_));
  transportParts[1] = transportParts[1] || null;
  return transportParts;
};
goog.provide("goog.net.xpc.NixTransport");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.reflect");
goog.net.xpc.NixTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.authToken_ = channel[goog.net.xpc.CfgFields.AUTH_TOKEN] || "";
  this.remoteAuthToken_ = channel[goog.net.xpc.CfgFields.REMOTE_AUTH_TOKEN] || "";
  goog.net.xpc.NixTransport.conductGlobalSetup_(this.getWindow());
  this[goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE] = this.handleMessage_;
  this[goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL] = this.createChannel_;
};
goog.inherits(goog.net.xpc.NixTransport, goog.net.xpc.Transport);
goog.net.xpc.NixTransport.NIX_WRAPPER = "GCXPC____NIXVBS_wrapper";
goog.net.xpc.NixTransport.NIX_GET_WRAPPER = "GCXPC____NIXVBS_get_wrapper";
goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE = "GCXPC____NIXJS_handle_message";
goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL = "GCXPC____NIXJS_create_channel";
goog.net.xpc.NixTransport.NIX_ID_FIELD = "GCXPC____NIXVBS_container";
goog.net.xpc.NixTransport.isNixSupported = function() {
  var isSupported = false;
  try {
    var oldOpener = window.opener;
    window.opener = ({});
    isSupported = goog.reflect.canAccessProperty(window, "opener");
    window.opener = oldOpener;
  } catch (e) {
  }
  return isSupported;
};
goog.net.xpc.NixTransport.conductGlobalSetup_ = function(listenWindow) {
  if (listenWindow["nix_setup_complete"]) {
    return;
  }
  var vbscript = "Class " + goog.net.xpc.NixTransport.NIX_WRAPPER + "\n " + "Private m_Transport\n" + "Private m_Auth\n" + "Public Sub SetTransport(transport)\n" + "If isEmpty(m_Transport) Then\n" + "Set m_Transport \x3d transport\n" + "End If\n" + "End Sub\n" + "Public Sub SetAuth(auth)\n" + "If isEmpty(m_Auth) Then\n" + "m_Auth \x3d auth\n" + "End If\n" + "End Sub\n" + "Public Function GetAuthToken()\n " + "GetAuthToken \x3d m_Auth\n" + "End Function\n" + "Public Sub SendMessage(service, payload)\n " + 
  "Call m_Transport." + goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE + "(service, payload)\n" + "End Sub\n" + "Public Sub CreateChannel(channel)\n " + "Call m_Transport." + goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL + "(channel)\n" + "End Sub\n" + "Public Sub " + goog.net.xpc.NixTransport.NIX_ID_FIELD + "()\n " + "End Sub\n" + "End Class\n " + "Function " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + "(transport, auth)\n" + "Dim wrap\n" + "Set wrap \x3d New " + goog.net.xpc.NixTransport.NIX_WRAPPER + 
  "\n" + "wrap.SetTransport transport\n" + "wrap.SetAuth auth\n" + "Set " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + " \x3d wrap\n" + "End Function";
  try {
    listenWindow.execScript(vbscript, "vbscript");
    listenWindow["nix_setup_complete"] = true;
  } catch (e) {
    goog.net.xpc.logger.severe("exception caught while attempting global setup: " + e);
  }
};
goog.net.xpc.NixTransport.prototype.transportType = goog.net.xpc.TransportTypes.NIX;
goog.net.xpc.NixTransport.prototype.localSetupCompleted_ = false;
goog.net.xpc.NixTransport.prototype.nixChannel_ = null;
goog.net.xpc.NixTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.attemptOuterSetup_();
  } else {
    this.attemptInnerSetup_();
  }
};
goog.net.xpc.NixTransport.prototype.attemptOuterSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  var innerFrame = this.channel_.getIframeElement();
  try {
    var theWindow = this.getWindow();
    var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
    innerFrame.contentWindow.opener = getWrapper(this, this.authToken_);
    this.localSetupCompleted_ = true;
  } catch (e) {
    goog.net.xpc.logger.severe("exception caught while attempting setup: " + e);
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptOuterSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.attemptInnerSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  try {
    var opener = this.getWindow().opener;
    if (opener && goog.net.xpc.NixTransport.NIX_ID_FIELD in opener) {
      this.nixChannel_ = opener;
      var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
      if (remoteAuthToken != this.remoteAuthToken_) {
        goog.net.xpc.logger.severe("Invalid auth token from other party");
        return;
      }
      var theWindow = this.getWindow();
      var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
      this.nixChannel_["CreateChannel"](getWrapper(this, this.authToken_));
      this.localSetupCompleted_ = true;
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.net.xpc.logger.severe("exception caught while attempting setup: " + e);
    return;
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptInnerSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.createChannel_ = function(channel) {
  if (typeof channel != "unknown" || !(goog.net.xpc.NixTransport.NIX_ID_FIELD in channel)) {
    goog.net.xpc.logger.severe("Invalid NIX channel given to createChannel_");
  }
  this.nixChannel_ = channel;
  var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
  if (remoteAuthToken != this.remoteAuthToken_) {
    goog.net.xpc.logger.severe("Invalid auth token from other party");
    return;
  }
  this.channel_.notifyConnected();
};
goog.net.xpc.NixTransport.prototype.handleMessage_ = function(serviceName, payload) {
  var deliveryHandler = function() {
    this.channel_.xpcDeliver(serviceName, payload);
  };
  this.getWindow().setTimeout(goog.bind(deliveryHandler, this), 1);
};
goog.net.xpc.NixTransport.prototype.send = function(service, payload) {
  if (typeof this.nixChannel_ !== "unknown") {
    goog.net.xpc.logger.severe("NIX channel not connected");
  }
  this.nixChannel_["SendMessage"](service, payload);
};
goog.net.xpc.NixTransport.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  this.nixChannel_ = null;
};
goog.provide("goog.net.xpc.CrossPageChannel");
goog.require("goog.Disposable");
goog.require("goog.Uri");
goog.require("goog.async.Deferred");
goog.require("goog.async.Delay");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.json");
goog.require("goog.messaging.AbstractChannel");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.net.xpc.IframePollingTransport");
goog.require("goog.net.xpc.IframeRelayTransport");
goog.require("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.net.xpc.NixTransport");
goog.require("goog.net.xpc.Transport");
goog.require("goog.userAgent");
goog.net.xpc.CrossPageChannel = function(cfg, opt_domHelper) {
  goog.base(this);
  for (var i = 0, uriField;uriField = goog.net.xpc.UriCfgFields[i];i++) {
    if (uriField in cfg && !/^https?:\/\//.test(cfg[uriField])) {
      throw Error("URI " + cfg[uriField] + " is invalid for field " + uriField);
    }
  }
  this.cfg_ = cfg;
  this.name = this.cfg_[goog.net.xpc.CfgFields.CHANNEL_NAME] || goog.net.xpc.getRandomString(10);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
  this.deferredDeliveries_ = [];
  this.peerLoadHandler_ = new goog.events.EventHandler(this);
  cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] || goog.uri.utils.getHost(this.domHelper_.getWindow().location.href) + "/robots.txt";
  cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] || goog.uri.utils.getHost(cfg[goog.net.xpc.CfgFields.PEER_URI] || "") + "/robots.txt";
  goog.net.xpc.channels[this.name] = this;
  goog.events.listen(window, "unload", goog.net.xpc.CrossPageChannel.disposeAll_);
  goog.net.xpc.logger.info("CrossPageChannel created: " + this.name);
};
goog.inherits(goog.net.xpc.CrossPageChannel, goog.messaging.AbstractChannel);
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_ = new RegExp("^%*" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_ = new RegExp("^%+" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.prototype.connectionDelay_ = null;
goog.net.xpc.CrossPageChannel.prototype.peerWindowDeferred_ = null;
goog.net.xpc.CrossPageChannel.prototype.transport_ = null;
goog.net.xpc.CrossPageChannel.prototype.state_ = goog.net.xpc.ChannelStates.NOT_CONNECTED;
goog.net.xpc.CrossPageChannel.prototype.isConnected = function() {
  return this.state_ == goog.net.xpc.ChannelStates.CONNECTED;
};
goog.net.xpc.CrossPageChannel.prototype.peerWindowObject_ = null;
goog.net.xpc.CrossPageChannel.prototype.iframeElement_ = null;
goog.net.xpc.CrossPageChannel.prototype.getConfig = function() {
  return this.cfg_;
};
goog.net.xpc.CrossPageChannel.prototype.getIframeElement = function() {
  return this.iframeElement_;
};
goog.net.xpc.CrossPageChannel.prototype.setPeerWindowObject = function(peerWindowObject) {
  this.peerWindowObject_ = peerWindowObject;
};
goog.net.xpc.CrossPageChannel.prototype.getPeerWindowObject = function() {
  return this.peerWindowObject_;
};
goog.net.xpc.CrossPageChannel.prototype.isPeerAvailable = function() {
  try {
    return!!this.peerWindowObject_ && !Boolean(this.peerWindowObject_.closed);
  } catch (e) {
    return false;
  }
};
goog.net.xpc.CrossPageChannel.prototype.determineTransportType_ = function() {
  var transportType;
  if (goog.isFunction(document.postMessage) || (goog.isFunction(window.postMessage) || goog.userAgent.IE && window.postMessage)) {
    transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
  } else {
    if (goog.userAgent.GECKO) {
      transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
    } else {
      if (goog.userAgent.IE && this.cfg_[goog.net.xpc.CfgFields.PEER_RELAY_URI]) {
        transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
      } else {
        if (goog.userAgent.IE && goog.net.xpc.NixTransport.isNixSupported()) {
          transportType = goog.net.xpc.TransportTypes.NIX;
        } else {
          transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
        }
      }
    }
  }
  return transportType;
};
goog.net.xpc.CrossPageChannel.prototype.createTransport_ = function() {
  if (this.transport_) {
    return;
  }
  if (!this.cfg_[goog.net.xpc.CfgFields.TRANSPORT]) {
    this.cfg_[goog.net.xpc.CfgFields.TRANSPORT] = this.determineTransportType_();
  }
  switch(this.cfg_[goog.net.xpc.CfgFields.TRANSPORT]) {
    case goog.net.xpc.TransportTypes.NATIVE_MESSAGING:
      var protocolVersion = this.cfg_[goog.net.xpc.CfgFields.NATIVE_TRANSPORT_PROTOCOL_VERSION] || 2;
      this.transport_ = new goog.net.xpc.NativeMessagingTransport(this, this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME], this.domHelper_, !!this.cfg_[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE], protocolVersion);
      break;
    case goog.net.xpc.TransportTypes.NIX:
      this.transport_ = new goog.net.xpc.NixTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD:
      this.transport_ = new goog.net.xpc.FrameElementMethodTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_RELAY:
      this.transport_ = new goog.net.xpc.IframeRelayTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_POLLING:
      this.transport_ = new goog.net.xpc.IframePollingTransport(this, this.domHelper_);
      break;
  }
  if (this.transport_) {
    goog.net.xpc.logger.info("Transport created: " + this.transport_.getName());
  } else {
    throw Error("CrossPageChannel: No suitable transport found!");
  }
};
goog.net.xpc.CrossPageChannel.prototype.getTransportType = function() {
  return this.transport_.getType();
};
goog.net.xpc.CrossPageChannel.prototype.getTransportName = function() {
  return this.transport_.getName();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerConfiguration = function() {
  var peerCfg = {};
  peerCfg[goog.net.xpc.CfgFields.CHANNEL_NAME] = this.name;
  peerCfg[goog.net.xpc.CfgFields.TRANSPORT] = this.cfg_[goog.net.xpc.CfgFields.TRANSPORT];
  peerCfg[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE] = this.cfg_[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE];
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_RELAY_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI];
  }
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (role) {
    peerCfg[goog.net.xpc.CfgFields.ROLE] = role == goog.net.xpc.CrossPageChannelRole.INNER ? goog.net.xpc.CrossPageChannelRole.OUTER : goog.net.xpc.CrossPageChannelRole.INNER;
  }
  return peerCfg;
};
goog.net.xpc.CrossPageChannel.prototype.createPeerIframe = function(parentElm, opt_configureIframeCb, opt_addCfgParam) {
  goog.net.xpc.logger.info("createPeerIframe()");
  var iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID];
  if (!iframeId) {
    iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID] = "xpcpeer" + goog.net.xpc.getRandomString(4);
  }
  var iframeElm = goog.dom.getDomHelper(parentElm).createElement("IFRAME");
  iframeElm.id = iframeElm.name = iframeId;
  if (opt_configureIframeCb) {
    opt_configureIframeCb(iframeElm);
  } else {
    iframeElm.style.width = iframeElm.style.height = "100%";
  }
  this.cleanUpIncompleteConnection_();
  this.peerWindowDeferred_ = new goog.async.Deferred(undefined, this);
  var peerUri = this.getPeerUri(opt_addCfgParam);
  this.peerLoadHandler_.listenOnce(iframeElm, "load", this.peerWindowDeferred_.callback, false, this.peerWindowDeferred_);
  if (goog.userAgent.GECKO || goog.userAgent.WEBKIT) {
    window.setTimeout(goog.bind(function() {
      parentElm.appendChild(iframeElm);
      iframeElm.src = peerUri.toString();
      goog.net.xpc.logger.info("peer iframe created (" + iframeId + ")");
    }, this), 1);
  } else {
    iframeElm.src = peerUri.toString();
    parentElm.appendChild(iframeElm);
    goog.net.xpc.logger.info("peer iframe created (" + iframeId + ")");
  }
  return(iframeElm);
};
goog.net.xpc.CrossPageChannel.prototype.cleanUpIncompleteConnection_ = function() {
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.cancel();
    this.peerWindowDeferred_ = null;
  }
  this.deferredDeliveries_.length = 0;
  this.peerLoadHandler_.removeAll();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerUri = function(opt_addCfgParam) {
  var peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI];
  if (goog.isString(peerUri)) {
    peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI] = new goog.Uri(peerUri);
  }
  if (opt_addCfgParam !== false) {
    peerUri.setParameterValue("xpc", goog.json.serialize(this.getPeerConfiguration()));
  }
  return peerUri;
};
goog.net.xpc.CrossPageChannel.prototype.connect = function(opt_connectCb) {
  this.connectCb_ = opt_connectCb || goog.nullFunction;
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.addCallback(this.continueConnection_);
  } else {
    this.continueConnection_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.continueConnection_ = function() {
  goog.net.xpc.logger.info("continueConnection_()");
  this.peerWindowDeferred_ = null;
  if (this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]) {
    this.iframeElement_ = this.domHelper_.getElement(this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]);
  }
  if (this.iframeElement_) {
    var winObj = this.iframeElement_.contentWindow;
    if (!winObj) {
      winObj = window.frames[this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]];
    }
    this.setPeerWindowObject(winObj);
  }
  if (!this.peerWindowObject_) {
    if (window == window.top) {
      throw Error("CrossPageChannel: Can't connect, peer window-object not set.");
    } else {
      this.setPeerWindowObject(window.parent);
    }
  }
  this.createTransport_();
  this.transport_.connect();
  while (this.deferredDeliveries_.length > 0) {
    this.deferredDeliveries_.shift()();
  }
};
goog.net.xpc.CrossPageChannel.prototype.close = function() {
  this.cleanUpIncompleteConnection_();
  this.state_ = goog.net.xpc.ChannelStates.CLOSED;
  goog.dispose(this.transport_);
  this.transport_ = null;
  this.connectCb_ = null;
  goog.dispose(this.connectionDelay_);
  this.connectionDelay_ = null;
  goog.net.xpc.logger.info('Channel "' + this.name + '" closed');
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected = function(opt_delay) {
  if (this.isConnected() || this.connectionDelay_ && this.connectionDelay_.isActive()) {
    return;
  }
  this.state_ = goog.net.xpc.ChannelStates.CONNECTED;
  goog.net.xpc.logger.info('Channel "' + this.name + '" connected');
  goog.dispose(this.connectionDelay_);
  if (opt_delay) {
    this.connectionDelay_ = new goog.async.Delay(this.connectCb_, opt_delay);
    this.connectionDelay_.start();
  } else {
    this.connectionDelay_ = null;
    this.connectCb_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected_ = goog.net.xpc.CrossPageChannel.prototype.notifyConnected;
goog.net.xpc.CrossPageChannel.prototype.notifyTransportError = function() {
  goog.net.xpc.logger.info("Transport Error");
  this.close();
};
goog.net.xpc.CrossPageChannel.prototype.send = function(serviceName, payload) {
  if (!this.isConnected()) {
    goog.net.xpc.logger.severe("Can't send. Channel not connected.");
    return;
  }
  if (!this.isPeerAvailable()) {
    goog.net.xpc.logger.severe("Peer has disappeared.");
    this.close();
    return;
  }
  if (goog.isObject(payload)) {
    payload = goog.json.serialize(payload);
  }
  this.transport_.send(this.escapeServiceName_(serviceName), payload);
};
goog.net.xpc.CrossPageChannel.prototype.xpcDeliver = function(serviceName, payload, opt_origin) {
  if (this.peerWindowDeferred_) {
    this.deferredDeliveries_.push(goog.bind(this.xpcDeliver, this, serviceName, payload, opt_origin));
    return;
  }
  if (!this.isMessageOriginAcceptable_(opt_origin)) {
    goog.net.xpc.logger.warning('Message received from unapproved origin "' + opt_origin + '" - rejected.');
    return;
  }
  if (this.isDisposed()) {
    goog.net.xpc.logger.warning("CrossPageChannel::xpcDeliver(): Disposed.");
  } else {
    if (!serviceName || serviceName == goog.net.xpc.TRANSPORT_SERVICE_) {
      this.transport_.transportServiceHandler(payload);
    } else {
      if (this.isConnected()) {
        this.deliver(this.unescapeServiceName_(serviceName), payload);
      } else {
        goog.net.xpc.logger.info("CrossPageChannel::xpcDeliver(): Not connected.");
      }
    }
  }
};
goog.net.xpc.CrossPageChannel.prototype.escapeServiceName_ = function(name) {
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_.test(name)) {
    name = "%" + name;
  }
  return name.replace(/[%:|]/g, encodeURIComponent);
};
goog.net.xpc.CrossPageChannel.prototype.unescapeServiceName_ = function(name) {
  name = name.replace(/%[0-9a-f]{2}/gi, decodeURIComponent);
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_.test(name)) {
    return name.substring(1);
  } else {
    return name;
  }
};
goog.net.xpc.CrossPageChannel.prototype.getRole = function() {
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (role) {
    return role;
  } else {
    return window.parent == this.peerWindowObject_ ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  }
};
goog.net.xpc.CrossPageChannel.prototype.isMessageOriginAcceptable_ = function(opt_origin) {
  var peerHostname = this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
  return goog.string.isEmptySafe(opt_origin) || (goog.string.isEmptySafe(peerHostname) || opt_origin == this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME]);
};
goog.net.xpc.CrossPageChannel.prototype.disposeInternal = function() {
  this.close();
  this.peerWindowObject_ = null;
  this.iframeElement_ = null;
  delete goog.net.xpc.channels[this.name];
  goog.dispose(this.peerLoadHandler_);
  delete this.peerLoadHandler_;
  goog.base(this, "disposeInternal");
};
goog.net.xpc.CrossPageChannel.disposeAll_ = function() {
  for (var name in goog.net.xpc.channels) {
    goog.dispose(goog.net.xpc.channels[name]);
  }
};
goog.provide("clojure.browser.net");
goog.require("cljs.core");
goog.require("goog.net.XhrIo");
goog.require("goog.net.xpc.CrossPageChannel");
goog.require("clojure.browser.event");
goog.require("goog.json");
goog.require("goog.net.xpc.CfgFields");
goog.require("clojure.browser.event");
goog.require("goog.net.EventType");
goog.require("goog.net.EventType");
goog.require("goog.net.xpc.CrossPageChannel");
goog.require("goog.json");
goog.require("goog.net.XhrIo");
goog.require("goog.net.xpc.CfgFields");
clojure.browser.net._STAR_timeout_STAR_ = 1E4;
clojure.browser.net.event_types = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__7697) {
  var vec__7698 = p__7697;
  var k = cljs.core.nth.call(null, vec__7698, 0, null);
  var v = cljs.core.nth.call(null, vec__7698, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
clojure.browser.net.IConnection = function() {
  var obj7700 = {};
  return obj7700;
}();
clojure.browser.net.connect = function() {
  var connect = null;
  var connect__1 = function(this$) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$1;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$1(this$);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = clojure.browser.net.connect[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var connect__2 = function(this$, opt1) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$2;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$2(this$, opt1);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = clojure.browser.net.connect[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1);
    }
  };
  var connect__3 = function(this$, opt1, opt2) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$3;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$3(this$, opt1, opt2);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = clojure.browser.net.connect[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1, opt2);
    }
  };
  var connect__4 = function(this$, opt1, opt2, opt3) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$4;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$4(this$, opt1, opt2, opt3);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = clojure.browser.net.connect[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1, opt2, opt3);
    }
  };
  connect = function(this$, opt1, opt2, opt3) {
    switch(arguments.length) {
      case 1:
        return connect__1.call(this, this$);
      case 2:
        return connect__2.call(this, this$, opt1);
      case 3:
        return connect__3.call(this, this$, opt1, opt2);
      case 4:
        return connect__4.call(this, this$, opt1, opt2, opt3);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  connect.cljs$core$IFn$_invoke$arity$1 = connect__1;
  connect.cljs$core$IFn$_invoke$arity$2 = connect__2;
  connect.cljs$core$IFn$_invoke$arity$3 = connect__3;
  connect.cljs$core$IFn$_invoke$arity$4 = connect__4;
  return connect;
}();
clojure.browser.net.transmit = function() {
  var transmit = null;
  var transmit__2 = function(this$, opt) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$2;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$2(this$, opt);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt);
    }
  };
  var transmit__3 = function(this$, opt, opt2) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$3;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$3(this$, opt, opt2);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2);
    }
  };
  var transmit__4 = function(this$, opt, opt2, opt3) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$4;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$4(this$, opt, opt2, opt3);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3);
    }
  };
  var transmit__5 = function(this$, opt, opt2, opt3, opt4) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$5;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$5(this$, opt, opt2, opt3, opt4);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3, opt4);
    }
  };
  var transmit__6 = function(this$, opt, opt2, opt3, opt4, opt5) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$6;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$6(this$, opt, opt2, opt3, opt4, opt5);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3, opt4, opt5);
    }
  };
  transmit = function(this$, opt, opt2, opt3, opt4, opt5) {
    switch(arguments.length) {
      case 2:
        return transmit__2.call(this, this$, opt);
      case 3:
        return transmit__3.call(this, this$, opt, opt2);
      case 4:
        return transmit__4.call(this, this$, opt, opt2, opt3);
      case 5:
        return transmit__5.call(this, this$, opt, opt2, opt3, opt4);
      case 6:
        return transmit__6.call(this, this$, opt, opt2, opt3, opt4, opt5);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transmit.cljs$core$IFn$_invoke$arity$2 = transmit__2;
  transmit.cljs$core$IFn$_invoke$arity$3 = transmit__3;
  transmit.cljs$core$IFn$_invoke$arity$4 = transmit__4;
  transmit.cljs$core$IFn$_invoke$arity$5 = transmit__5;
  transmit.cljs$core$IFn$_invoke$arity$6 = transmit__6;
  return transmit;
}();
clojure.browser.net.close = function close(this$) {
  if (function() {
    var and__3438__auto__ = this$;
    if (and__3438__auto__) {
      return this$.clojure$browser$net$IConnection$close$arity$1;
    } else {
      return and__3438__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IConnection$close$arity$1(this$);
  } else {
    var x__4077__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3450__auto__ = clojure.browser.net.close[goog.typeOf(x__4077__auto__)];
      if (or__3450__auto__) {
        return or__3450__auto__;
      } else {
        var or__3450__auto____$1 = clojure.browser.net.close["_"];
        if (or__3450__auto____$1) {
          return or__3450__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IConnection.close", this$);
        }
      }
    }().call(null, this$);
  }
};
goog.net.XhrIo.prototype.clojure$browser$event$EventType$ = true;
goog.net.XhrIo.prototype.clojure$browser$event$EventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__7701) {
    var vec__7702 = p__7701;
    var k = cljs.core.nth.call(null, vec__7702, 0, null);
    var v = cljs.core.nth.call(null, vec__7702, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
  }, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$ = true;
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, uri) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, "GET", null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, uri, method) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$4 = function(this$, uri, method, content) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$5 = function(this$, uri, method, content, headers) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, headers, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$6 = function(this$, uri, method, content, headers, timeout) {
  var this$__$1 = this;
  this$__$1.setTimeoutInterval(timeout);
  return this$__$1.send(uri, method, content, headers);
};
clojure.browser.net.xpc_config_fields = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__7703) {
  var vec__7704 = p__7703;
  var k = cljs.core.nth.call(null, vec__7704, 0, null);
  var v = cljs.core.nth.call(null, vec__7704, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.js__GT_clj.call(null, goog.net.xpc.CfgFields)));
clojure.browser.net.xhr_connection = function xhr_connection() {
  return new goog.net.XhrIo;
};
clojure.browser.net.ICrossPageChannel = function() {
  var obj7706 = {};
  return obj7706;
}();
clojure.browser.net.register_service = function() {
  var register_service = null;
  var register_service__3 = function(this$, service_name, fn) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3(this$, service_name, fn);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = clojure.browser.net.register_service[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = clojure.browser.net.register_service["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
          }
        }
      }().call(null, this$, service_name, fn);
    }
  };
  var register_service__4 = function(this$, service_name, fn, encode_json_QMARK_) {
    if (function() {
      var and__3438__auto__ = this$;
      if (and__3438__auto__) {
        return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4;
      } else {
        return and__3438__auto__;
      }
    }()) {
      return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4(this$, service_name, fn, encode_json_QMARK_);
    } else {
      var x__4077__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3450__auto__ = clojure.browser.net.register_service[goog.typeOf(x__4077__auto__)];
        if (or__3450__auto__) {
          return or__3450__auto__;
        } else {
          var or__3450__auto____$1 = clojure.browser.net.register_service["_"];
          if (or__3450__auto____$1) {
            return or__3450__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
          }
        }
      }().call(null, this$, service_name, fn, encode_json_QMARK_);
    }
  };
  register_service = function(this$, service_name, fn, encode_json_QMARK_) {
    switch(arguments.length) {
      case 3:
        return register_service__3.call(this, this$, service_name, fn);
      case 4:
        return register_service__4.call(this, this$, service_name, fn, encode_json_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  register_service.cljs$core$IFn$_invoke$arity$3 = register_service__3;
  register_service.cljs$core$IFn$_invoke$arity$4 = register_service__4;
  return register_service;
}();
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$1 = function(this$) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, null);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, on_connect_fn) {
  var this$__$1 = this;
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, on_connect_fn, config_iframe_fn) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, on_connect_fn, config_iframe_fn, document.body);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$4 = function(this$, on_connect_fn, config_iframe_fn, iframe_parent) {
  var this$__$1 = this;
  this$__$1.createPeerIframe(iframe_parent, config_iframe_fn);
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, service_name, payload) {
  var this$__$1 = this;
  return this$__$1.send(cljs.core.name.call(null, service_name), payload);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close(cljs.core.List.EMPTY);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$3 = function(this$, service_name, fn) {
  var this$__$1 = this;
  return clojure.browser.net.register_service.call(null, this$__$1, service_name, fn, false);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$4 = function(this$, service_name, fn, encode_json_QMARK_) {
  var this$__$1 = this;
  return this$__$1.registerService(cljs.core.name.call(null, service_name), fn, encode_json_QMARK_);
};
clojure.browser.net.xpc_connection = function() {
  var xpc_connection = null;
  var xpc_connection__0 = function() {
    var temp__4092__auto__ = (new goog.Uri(window.location.href)).getParameterValue("xpc");
    if (cljs.core.truth_(temp__4092__auto__)) {
      var config = temp__4092__auto__;
      return new goog.net.xpc.CrossPageChannel(goog.json.parse(config));
    } else {
      return null;
    }
  };
  var xpc_connection__1 = function(config) {
    return new goog.net.xpc.CrossPageChannel(cljs.core.reduce.call(null, function(sum, p__7712) {
      var vec__7713 = p__7712;
      var k = cljs.core.nth.call(null, vec__7713, 0, null);
      var v = cljs.core.nth.call(null, vec__7713, 1, null);
      var temp__4090__auto__ = cljs.core.get.call(null, clojure.browser.net.xpc_config_fields, k);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var field = temp__4090__auto__;
        var G__7714 = sum;
        G__7714[field] = v;
        return G__7714;
      } else {
        return sum;
      }
    }, function() {
      var obj7716 = {};
      return obj7716;
    }(), config));
  };
  xpc_connection = function(config) {
    switch(arguments.length) {
      case 0:
        return xpc_connection__0.call(this);
      case 1:
        return xpc_connection__1.call(this, config);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  xpc_connection.cljs$core$IFn$_invoke$arity$0 = xpc_connection__0;
  xpc_connection.cljs$core$IFn$_invoke$arity$1 = xpc_connection__1;
  return xpc_connection;
}();
goog.provide("clojure.browser.repl");
goog.require("cljs.core");
goog.require("clojure.browser.event");
goog.require("clojure.browser.event");
goog.require("clojure.browser.net");
goog.require("clojure.browser.net");
clojure.browser.repl.xpc_connection = cljs.core.atom.call(null, null);
clojure.browser.repl.repl_print = function repl_print(data) {
  var temp__4090__auto__ = cljs.core.deref.call(null, clojure.browser.repl.xpc_connection);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var conn = temp__4090__auto__;
    return clojure.browser.net.transmit.call(null, conn, new cljs.core.Keyword(null, "print", "print", 1120839199), cljs.core.pr_str.call(null, data));
  } else {
    return null;
  }
};
clojure.browser.repl.evaluate_javascript = function evaluate_javascript(conn, block) {
  var result = function() {
    try {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", 4416389988), new cljs.core.Keyword(null, "success", "success", 3441701749), new cljs.core.Keyword(null, "value", "value", 1125876963), [cljs.core.str(eval(block))].join("")], null);
    } catch (e7696) {
      if (e7696 instanceof Error) {
        var e = e7696;
        return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", 4416389988), new cljs.core.Keyword(null, "exception", "exception", 2495529921), new cljs.core.Keyword(null, "value", "value", 1125876963), cljs.core.pr_str.call(null, e), new cljs.core.Keyword(null, "stacktrace", "stacktrace", 3069736751), cljs.core.truth_(e.hasOwnProperty("stack")) ? e.stack : "No stacktrace available."], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw e7696;
        } else {
          return null;
        }
      }
    }
  }();
  return cljs.core.pr_str.call(null, result);
};
clojure.browser.repl.send_result = function send_result(connection, url, data) {
  return clojure.browser.net.transmit.call(null, connection, url, "POST", data, null, 0);
};
clojure.browser.repl.send_print = function() {
  var send_print = null;
  var send_print__2 = function(url, data) {
    return send_print.call(null, url, data, 0);
  };
  var send_print__3 = function(url, data, n) {
    var conn = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, conn, new cljs.core.Keyword(null, "error", "error", 1110689146), function(_) {
      if (n < 10) {
        return send_print.call(null, url, data, n + 1);
      } else {
        return console.log([cljs.core.str("Could not send "), cljs.core.str(data), cljs.core.str(" after "), cljs.core.str(n), cljs.core.str(" attempts.")].join(""));
      }
    });
    return clojure.browser.net.transmit.call(null, conn, url, "POST", data, null, 0);
  };
  send_print = function(url, data, n) {
    switch(arguments.length) {
      case 2:
        return send_print__2.call(this, url, data);
      case 3:
        return send_print__3.call(this, url, data, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  send_print.cljs$core$IFn$_invoke$arity$2 = send_print__2;
  send_print.cljs$core$IFn$_invoke$arity$3 = send_print__3;
  return send_print;
}();
clojure.browser.repl.order = cljs.core.atom.call(null, 0);
clojure.browser.repl.wrap_message = function wrap_message(t, data) {
  return cljs.core.pr_str.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), t, new cljs.core.Keyword(null, "content", "content", 1965434859), data, new cljs.core.Keyword(null, "order", "order", 1119910592), cljs.core.swap_BANG_.call(null, clojure.browser.repl.order, cljs.core.inc)], null));
};
clojure.browser.repl.start_evaluator = function start_evaluator(url) {
  var temp__4090__auto__ = clojure.browser.net.xpc_connection.call(null);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var repl_connection = temp__4090__auto__;
    var connection = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, connection, new cljs.core.Keyword(null, "success", "success", 3441701749), function(e) {
      return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", 2953437843), e.currentTarget.getResponseText(cljs.core.List.EMPTY));
    });
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 3729280372), function(data) {
      return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "result", "result", 4374444943), data));
    });
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "print", "print", 1120839199), function(data) {
      return clojure.browser.repl.send_print.call(null, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "print", "print", 1120839199), data));
    });
    clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null));
    return setTimeout(function() {
      return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "ready", "ready", 1122290965), "ready"));
    }, 50);
  } else {
    return alert("No 'xpc' param provided to child iframe.");
  }
};
clojure.browser.repl.connect = function connect(repl_server_url) {
  var repl_connection = clojure.browser.net.xpc_connection.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "peer_uri", "peer_uri", 1083496577), repl_server_url], null));
  cljs.core.swap_BANG_.call(null, clojure.browser.repl.xpc_connection, cljs.core.constantly.call(null, repl_connection));
  clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", 2953437843), function(js) {
    return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 3729280372), clojure.browser.repl.evaluate_javascript.call(null, repl_connection, js));
  });
  return clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null), function(iframe) {
    return iframe.style.display = "none";
  });
};
goog.provide("brepl_connect");
goog.require("cljs.core");
goog.require("clojure.browser.repl");
goog.require("clojure.browser.repl");
goog.require("clojure.browser.repl");
clojure.browser.repl.connect.call(null, [cljs.core.str("http://localhost:"), cljs.core.str("9000"), cljs.core.str("/repl")].join(""));
goog.provide("qgame.simulator.error");
goog.require("cljs.core");
goog.require("qgame.simulator.shared");
goog.require("qgame.simulator.parser");
goog.require("qgame.simulator.shared");
goog.require("qgame.simulator.parser");
goog.require("qgame.simulator.parser");
qgame.simulator.error.get_message = function() {
  var method_table__4261__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__4262__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__4263__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__4264__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__4265__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("get-message", function(title, context) {
    return title;
  }, new cljs.core.Keyword(null, "default", "default", 2558708147), hierarchy__4265__auto__, method_table__4261__auto__, prefer_table__4262__auto__, method_cache__4263__auto__, cached_hierarchy__4264__auto__);
}();
qgame.simulator.error.to_error = function to_error(title, context) {
  return cljs.core.assoc.call(null, context, new cljs.core.Keyword(null, "error", "error", 1110689146), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "stage", "stage", 1123661424), cljs.core.deref.call(null, qgame.simulator.shared.stage), new cljs.core.Keyword(null, "current-qgame-fn", "current-qgame-fn", 3886099512), cljs.core.deref.call(null, qgame.simulator.shared.current_qgame_fn), new cljs.core.Keyword(null, "title", "title", 1124275658), title, new cljs.core.Keyword(null, 
  "message", "message", 1968829305), qgame.simulator.error.get_message.call(null, title, context)], null));
};
qgame.simulator.error.log_and_return_error_BANG_ = function() {
  var log_and_return_error_BANG_ = null;
  var log_and_return_error_BANG___1 = function(title) {
    return log_and_return_error_BANG_.call(null, title, cljs.core.PersistentArrayMap.EMPTY);
  };
  var log_and_return_error_BANG___2 = function(title, context) {
    var map__5096 = qgame.simulator.error.to_error.call(null, title, context);
    var map__5096__$1 = cljs.core.seq_QMARK_.call(null, map__5096) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5096) : map__5096;
    var context_PLUS_ = map__5096__$1;
    var map__5097 = cljs.core.get.call(null, map__5096__$1, new cljs.core.Keyword(null, "error", "error", 1110689146));
    var map__5097__$1 = cljs.core.seq_QMARK_.call(null, map__5097) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5097) : map__5097;
    var message = cljs.core.get.call(null, map__5097__$1, new cljs.core.Keyword(null, "message", "message", 1968829305));
    var title__$1 = cljs.core.get.call(null, map__5097__$1, new cljs.core.Keyword(null, "title", "title", 1124275658));
    var current_qgame_fn = cljs.core.get.call(null, map__5097__$1, new cljs.core.Keyword(null, "current-qgame-fn", "current-qgame-fn", 3886099512));
    var stage = cljs.core.get.call(null, map__5097__$1, new cljs.core.Keyword(null, "stage", "stage", 1123661424));
    var report = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "message", "message", 1968829305), [cljs.core.str("qgame error during "), cljs.core.str(stage), cljs.core.str(", in qgame function "), cljs.core.str(current_qgame_fn), cljs.core.str(": "), cljs.core.str(title__$1), cljs.core.str("\n"), cljs.core.str(message)].join(""), new cljs.core.Keyword(null, "more", "more", 1017261767), cljs.core.clj__GT_js.call(null, context_PLUS_)], null);
    console.log((new cljs.core.Keyword(null, "message", "message", 1968829305)).cljs$core$IFn$_invoke$arity$1(report), "\n", (new cljs.core.Keyword(null, "more", "more", 1017261767)).cljs$core$IFn$_invoke$arity$1(report));
    var temp__4092__auto___5098 = cljs.core.deref.call(null, qgame.simulator.shared.on_error);
    if (cljs.core.truth_(temp__4092__auto___5098)) {
      var on_err_5099 = temp__4092__auto___5098;
      on_err_5099.call(null, context_PLUS_);
    } else {
    }
    return context_PLUS_;
  };
  log_and_return_error_BANG_ = function(title, context) {
    switch(arguments.length) {
      case 1:
        return log_and_return_error_BANG___1.call(this, title);
      case 2:
        return log_and_return_error_BANG___2.call(this, title, context);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  log_and_return_error_BANG_.cljs$core$IFn$_invoke$arity$1 = log_and_return_error_BANG___1;
  log_and_return_error_BANG_.cljs$core$IFn$_invoke$arity$2 = log_and_return_error_BANG___2;
  return log_and_return_error_BANG_;
}();
qgame.simulator.error.to_warning = function to_warning(title, context) {
  return cljs.core.assoc.call(null, context, new cljs.core.Keyword(null, "warning", "warning", 2138350350), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "stage", "stage", 1123661424), cljs.core.deref.call(null, qgame.simulator.shared.stage), new cljs.core.Keyword(null, "current-qgame-fn", "current-qgame-fn", 3886099512), cljs.core.deref.call(null, qgame.simulator.shared.current_qgame_fn), new cljs.core.Keyword(null, "title", "title", 1124275658), title, new cljs.core.Keyword(null, 
  "message", "message", 1968829305), qgame.simulator.error.get_message.call(null, title, context)], null));
};
qgame.simulator.error.log_and_return_warning_BANG_ = function() {
  var log_and_return_warning_BANG_ = null;
  var log_and_return_warning_BANG___1 = function(title) {
    return log_and_return_warning_BANG_.call(null, title, cljs.core.PersistentArrayMap.EMPTY);
  };
  var log_and_return_warning_BANG___2 = function(title, context) {
    var map__5102 = qgame.simulator.error.to_warning.call(null, title, context);
    var map__5102__$1 = cljs.core.seq_QMARK_.call(null, map__5102) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5102) : map__5102;
    var context_PLUS_ = map__5102__$1;
    var map__5103 = cljs.core.get.call(null, map__5102__$1, new cljs.core.Keyword(null, "warning", "warning", 2138350350));
    var map__5103__$1 = cljs.core.seq_QMARK_.call(null, map__5103) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5103) : map__5103;
    var message = cljs.core.get.call(null, map__5103__$1, new cljs.core.Keyword(null, "message", "message", 1968829305));
    var title__$1 = cljs.core.get.call(null, map__5103__$1, new cljs.core.Keyword(null, "title", "title", 1124275658));
    var current_qgame_fn = cljs.core.get.call(null, map__5103__$1, new cljs.core.Keyword(null, "current-qgame-fn", "current-qgame-fn", 3886099512));
    var stage = cljs.core.get.call(null, map__5103__$1, new cljs.core.Keyword(null, "stage", "stage", 1123661424));
    var report = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "message", "message", 1968829305), [cljs.core.str("qgame warning during "), cljs.core.str(stage), cljs.core.str(", in qgame function "), cljs.core.str(current_qgame_fn), cljs.core.str(": "), cljs.core.str(title__$1), cljs.core.str("\n"), cljs.core.str(message)].join(""), new cljs.core.Keyword(null, "more", "more", 1017261767), cljs.core.clj__GT_js.call(null, context_PLUS_)], null);
    console.log(report.call(null, new cljs.core.Keyword(null, "message", "message", 1968829305)), "\n", report.call(null, new cljs.core.Keyword(null, "more", "more", 1017261767)));
    var temp__4092__auto___5104 = cljs.core.deref.call(null, qgame.simulator.shared.on_error);
    if (cljs.core.truth_(temp__4092__auto___5104)) {
      var on_err_5105 = temp__4092__auto___5104;
      on_err_5105.call(null, context_PLUS_);
    } else {
    }
    return context_PLUS_;
  };
  log_and_return_warning_BANG_ = function(title, context) {
    switch(arguments.length) {
      case 1:
        return log_and_return_warning_BANG___1.call(this, title);
      case 2:
        return log_and_return_warning_BANG___2.call(this, title, context);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  log_and_return_warning_BANG_.cljs$core$IFn$_invoke$arity$1 = log_and_return_warning_BANG___1;
  log_and_return_warning_BANG_.cljs$core$IFn$_invoke$arity$2 = log_and_return_warning_BANG___2;
  return log_and_return_warning_BANG_;
}();
cljs.core._add_method.call(null, qgame.simulator.error.get_message, new cljs.core.Keyword(null, "default", "default", 2558708147), function(title, context) {
  return[cljs.core.str("(This error does not have a message.)")].join("");
});
cljs.core._add_method.call(null, qgame.simulator.error.get_message, "Qubit parse failure", function(title, bite) {
  return[cljs.core.str("Token "), cljs.core.str((new cljs.core.Keyword(null, "text", "text", 1017460895)).cljs$core$IFn$_invoke$arity$1(bite)), cljs.core.str(" does not match the qubit regex pattern: "), cljs.core.str([cljs.core.str(qgame.simulator.parser.qubit_pattern)].join(""))].join("");
});
cljs.core._add_method.call(null, qgame.simulator.error.get_message, "Param parse failure", function(title, bite) {
  return[cljs.core.str("Token "), cljs.core.str((new cljs.core.Keyword(null, "text", "text", 1017460895)).cljs$core$IFn$_invoke$arity$1(bite)), cljs.core.str(" does not match the param regex pattern: "), cljs.core.str([cljs.core.str(qgame.simulator.parser.param_pattern)].join(""))].join("");
});
cljs.core._add_method.call(null, qgame.simulator.error.get_message, "Unrecognized argument", function(title, bite) {
  return[cljs.core.str("Bite "), cljs.core.str((new cljs.core.Keyword(null, "text", "text", 1017460895)).cljs$core$IFn$_invoke$arity$1(bite)), cljs.core.str(" does not taste like a token.")].join("");
});
cljs.core._add_method.call(null, qgame.simulator.error.get_message, "Too few parameters", function(title, expression) {
  var map__5106 = expression;
  var map__5106__$1 = cljs.core.seq_QMARK_.call(null, map__5106) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5106) : map__5106;
  var swallowed = cljs.core.get.call(null, map__5106__$1, new cljs.core.Keyword(null, "swallowed", "swallowed", 3934694966));
  var param_names = cljs.core.get.call(null, map__5106__$1, new cljs.core.Keyword(null, "param-names", "param-names", 740923770));
  var num_qubits = cljs.core.get.call(null, map__5106__$1, new cljs.core.Keyword(null, "num-qubits", "num-qubits", 1175408835));
  var fn_name = cljs.core.get.call(null, map__5106__$1, new cljs.core.Keyword(null, "fn-name", "fn-name", 4539105250));
  return[cljs.core.str("Function "), cljs.core.str(fn_name), cljs.core.str(" requires "), cljs.core.str(num_qubits + cljs.core.count.call(null, param_names)), cljs.core.str(" arguments, swallowed only "), cljs.core.str(cljs.core.count.call(null, swallowed)), cljs.core.str(".")].join("");
});
cljs.core._add_method.call(null, qgame.simulator.error.get_message, "Lonely", function(title, token) {
  return[cljs.core.str("Token "), cljs.core.str((new cljs.core.Keyword(null, "text", "text", 1017460895)).cljs$core$IFn$_invoke$arity$1(token)), cljs.core.str(" is neither function nor an argument to a function.")].join("");
});
cljs.core._add_method.call(null, qgame.simulator.error.get_message, "Target is not a word", function(title, rule) {
  return[cljs.core.str("Target "), cljs.core.str((new cljs.core.Keyword(null, "name-target", "name-target", 4218974853)).cljs$core$IFn$_invoke$arity$1(rule)), cljs.core.str(" does not match the word regex pattern: "), cljs.core.str([cljs.core.str(qgame.simulator.parser.word_pattern)].join(""))].join("");
});
cljs.core._add_method.call(null, qgame.simulator.error.get_message, "Name is not a word", function(title, rule) {
  return[cljs.core.str("Name "), cljs.core.str((new cljs.core.Keyword(null, "replace-name", "replace-name", 1428647286)).cljs$core$IFn$_invoke$arity$1(rule)), cljs.core.str(" does not match the word regex pattern: "), cljs.core.str([cljs.core.str(qgame.simulator.parser.world_pattern)].join(""))].join("");
});
cljs.core._add_method.call(null, qgame.simulator.error.get_message, "Uncrecognized parse time function", function(title, fnc) {
  return[cljs.core.str("Text "), cljs.core.str((new cljs.core.Keyword(null, "text", "text", 1017460895)).cljs$core$IFn$_invoke$arity$1(fnc)), cljs.core.str("is not a recognized parse time function, despite having the :ParseTime function type.")].join("");
});
cljs.core._add_method.call(null, qgame.simulator.error.get_message, "Bit parse failure", function(title, token) {
  return[cljs.core.str("Token "), cljs.core.str((new cljs.core.Keyword(null, "text", "text", 1017460895)).cljs$core$IFn$_invoke$arity$1(token)), cljs.core.str(" does not match the bit regex pattern:"), cljs.core.str([cljs.core.str(qgame.simulator.parser.bit_pattern)].join(""))].join("");
});
cljs.core._add_method.call(null, qgame.simulator.error.get_message, "Unrecognized function type", function(title, instruction) {
  return[cljs.core.str("Function type "), cljs.core.str(cljs.core.get_in.call(null, instruction, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "fn-meta", "fn-meta", 4539079516), new cljs.core.Keyword(null, "type", "type", 1017479852)], null))), cljs.core.str(" has no execution specs.")].join("");
});
cljs.core._add_method.call(null, qgame.simulator.error.get_message, "Math evaluation error", function(title, token) {
  return[cljs.core.str("Text "), cljs.core.str((new cljs.core.Keyword(null, "text", "text", 1017460895)).cljs$core$IFn$_invoke$arity$1(token)), cljs.core.str(" is recognized as math, but will not evaluate as math.")].join("");
});
cljs.core._add_method.call(null, qgame.simulator.error.get_message, "Math evaluation on name target error", function(title, rule) {
  return[cljs.core.str("Text "), cljs.core.str((new cljs.core.Keyword(null, "target", "target", 4427965699)).cljs$core$IFn$_invoke$arity$1(rule)), cljs.core.str(" is recognized as math, but will not evaluate as math.")].join("");
});
cljs.core._add_method.call(null, qgame.simulator.error.get_message, "Extra end", function(title, expression) {
  return[cljs.core.str("Encountered an extra 'end' instruction.")].join("");
});
cljs.core._add_method.call(null, qgame.simulator.error.get_message, "Lingering status", function(title, p__5107) {
  var map__5108 = p__5107;
  var map__5108__$1 = cljs.core.seq_QMARK_.call(null, map__5108) ? cljs.core.apply.call(null, cljs.core.hash_map, map__5108) : map__5108;
  var status = cljs.core.get.call(null, map__5108__$1, new cljs.core.Keyword(null, "status", "status", 4416389988));
  var G__5109 = status;
  if (cljs.core._EQ_.call(null, "else_clause", G__5109)) {
    return "Some 'measure' missing an 'end'";
  } else {
    if (cljs.core._EQ_.call(null, "then_clause", G__5109)) {
      return "Some 'measure' missing two 'end's";
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return[cljs.core.str(status)].join("");
      } else {
        return null;
      }
    }
  }
});
